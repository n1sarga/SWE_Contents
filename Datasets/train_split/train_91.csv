id,id1,id2,func1,func2,label
900000,18991846,13574318,"    public static void copyFile(File oldFile, File newFile) throws Exception {
        newFile.getParentFile().mkdirs();
        newFile.createNewFile();
        FileChannel srcChannel = new FileInputStream(oldFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(newFile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
","        public void actionPerformed(ActionEvent e) {
            if (saveForWebChooser == null) {
                ExtensionFileFilter fileFilter = new ExtensionFileFilter(""HTML files"");
                fileFilter.addExtension(""html"");
                saveForWebChooser = new JFileChooser();
                saveForWebChooser.setFileFilter(fileFilter);
                saveForWebChooser.setDialogTitle(""Save for Web..."");
                saveForWebChooser.setCurrentDirectory(new File(Config.getRecentDirectory(""recentSaveForWebDirectory"")));
            }
            if (saveForWebChooser.showSaveDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
                Config.setRecentDirectory(""recentSaveForWebDirectory"", saveForWebChooser.getCurrentDirectory().getAbsolutePath());
                File pathFile = saveForWebChooser.getSelectedFile().getParentFile();
                String name = saveForWebChooser.getSelectedFile().getName();
                if (!name.toLowerCase().endsWith("".html"") && name.indexOf('.') == -1) {
                    name = name + "".html"";
                }
                String resource = MIDletClassLoader.getClassResourceName(this.getClass().getName());
                URL url = this.getClass().getClassLoader().getResource(resource);
                String path = url.getPath();
                int prefix = path.indexOf(':');
                String mainJarFileName = path.substring(prefix + 1, path.length() - resource.length());
                File appletJarDir = new File(new File(mainJarFileName).getParent(), ""lib"");
                File appletJarFile = new File(appletJarDir, ""microemu-javase-applet.jar"");
                if (!appletJarFile.exists()) {
                    appletJarFile = null;
                }
                if (appletJarFile == null) {
                }
                if (appletJarFile == null) {
                    ExtensionFileFilter fileFilter = new ExtensionFileFilter(""JAR packages"");
                    fileFilter.addExtension(""jar"");
                    JFileChooser appletChooser = new JFileChooser();
                    appletChooser.setFileFilter(fileFilter);
                    appletChooser.setDialogTitle(""Select MicroEmulator applet jar package..."");
                    appletChooser.setCurrentDirectory(new File(Config.getRecentDirectory(""recentAppletJarDirectory"")));
                    if (appletChooser.showOpenDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
                        Config.setRecentDirectory(""recentAppletJarDirectory"", appletChooser.getCurrentDirectory().getAbsolutePath());
                        appletJarFile = appletChooser.getSelectedFile();
                    } else {
                        return;
                    }
                }
                JadMidletEntry jadMidletEntry;
                Iterator it = common.jad.getMidletEntries().iterator();
                if (it.hasNext()) {
                    jadMidletEntry = (JadMidletEntry) it.next();
                } else {
                    Message.error(""MIDlet Suite has no entries"");
                    return;
                }
                String midletInput = common.jad.getJarURL();
                DeviceEntry deviceInput = selectDevicePanel.getSelectedDeviceEntry();
                if (deviceInput != null && deviceInput.getDescriptorLocation().equals(DeviceImpl.DEFAULT_LOCATION)) {
                    deviceInput = null;
                }
                File htmlOutputFile = new File(pathFile, name);
                if (!allowOverride(htmlOutputFile)) {
                    return;
                }
                File appletPackageOutputFile = new File(pathFile, ""microemu-javase-applet.jar"");
                if (!allowOverride(appletPackageOutputFile)) {
                    return;
                }
                File midletOutputFile = new File(pathFile, midletInput.substring(midletInput.lastIndexOf(""/"") + 1));
                if (!allowOverride(midletOutputFile)) {
                    return;
                }
                File deviceOutputFile = null;
                String deviceDescriptorLocation = null;
                if (deviceInput != null) {
                    deviceOutputFile = new File(pathFile, deviceInput.getFileName());
                    if (!allowOverride(deviceOutputFile)) {
                        return;
                    }
                    deviceDescriptorLocation = deviceInput.getDescriptorLocation();
                }
                try {
                    AppletProducer.createHtml(htmlOutputFile, (DeviceImpl) DeviceFactory.getDevice(), jadMidletEntry.getClassName(), midletOutputFile, appletPackageOutputFile, deviceOutputFile);
                    AppletProducer.createMidlet(new URL(midletInput), midletOutputFile);
                    IOUtils.copyFile(appletJarFile, appletPackageOutputFile);
                    if (deviceInput != null) {
                        IOUtils.copyFile(new File(Config.getConfigPath(), deviceInput.getFileName()), deviceOutputFile);
                    }
                } catch (IOException ex) {
                    Logger.error(ex);
                }
            }
        }
",True
900001,4962734,23537979,"    public static JSONObject fromUrl(String url) throws Throwable {
        Validate.notEmpty(url);
        InputStream stream = null;
        HttpClient httpclient = null;
        try {
            httpclient = new DefaultHttpClient();
            HttpGet httpget = new HttpGet(url);
            HttpResponse response = httpclient.execute(httpget);
            if (response != null) {
                HttpEntity entity = response.getEntity();
                if (entity != null) {
                    try {
                        stream = entity.getContent();
                        return fromStream(stream);
                    } finally {
                        try {
                            if (stream != null) stream.close();
                        } catch (Exception ex) {
                        }
                    }
                }
            }
        } catch (Throwable tr) {
            Logger.e(TAG, ""fromUrl"", tr);
            throw tr;
        } finally {
            if (httpclient != null) httpclient.getConnectionManager().shutdown();
        }
        return null;
    }
","    private void addLine(AmazonItem coverAdress) {
        try {
            URL url = new URL("""" + coverAdress.getMediumImageURL());
            TableItem ligne1 = new TableItem(table, SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC);
            url.openConnection();
            InputStream is = url.openStream();
            Image coverPicture = new Image(display, is);
            coverAvailable.add(url);
            ligne1.setImage(new Image[] { coverPicture, null });
            ligne1.setText(new String[] { null, coverAdress.getArtist() + ""\n"" + coverAdress.getCDTitle() + ""\nTrack : "" + coverAdress.getNbTrack() });
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.err.println(e.toString());
        }
    }
",False
900002,21161448,716792,"    public static boolean copyFile(File soureFile, File destFile) {
        boolean copySuccess = false;
        if (soureFile != null && destFile != null && soureFile.exists()) {
            try {
                new File(destFile.getParent()).mkdirs();
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destFile));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(soureFile));
                for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte);
                in.close();
                out.close();
                copySuccess = true;
            } catch (Exception e) {
                copySuccess = false;
            }
        }
        return copySuccess;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900003,3880284,19674840,"    public static StringBuffer readURLText(URL url, StringBuffer errorText) {
        StringBuffer page = new StringBuffer("""");
        String thisLine;
        try {
            BufferedReader source = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((thisLine = source.readLine()) != null) {
                page.append(thisLine + ""\n"");
            }
            return page;
        } catch (Exception e) {
            return errorText;
        }
    }
","    public String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",False
900004,12973570,6736401,"    public boolean executeUpdate(String strSql) throws SQLException {
        getConnection();
        boolean flag = false;
        stmt = con.createStatement();
        logger.info(""###############::执行SQL语句操作(更新数据 无参数):"" + strSql);
        try {
            if (0 < stmt.executeUpdate(strSql)) {
                close_DB_Object();
                flag = true;
                con.commit();
            }
        } catch (SQLException ex) {
            logger.info(""###############Error DBManager Line126::执行SQL语句操作(更新数据 无参数):"" + strSql + ""失败!"");
            flag = false;
            con.rollback();
            throw ex;
        }
        return flag;
    }
","        public InputStream getResourceAsStream(String path) {
            try {
                URL url = getResource(path);
                if (url == null) return null;
                return url.openStream();
            } catch (Exception e) {
                Log.ignore(e);
                return null;
            }
        }
",False
900005,3449615,820872,"    public ProgramMessageSymbol addProgramMessageSymbol(int programID, String name, byte[] bytecode) throws AdaptationException {
        ProgramMessageSymbol programMessageSymbol = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        InputStream stream = new ByteArrayInputStream(bytecode);
        try {
            String query = ""INSERT INTO ProgramMessageSymbols(programID, name, "" + ""bytecode) VALUES ( ?, ?, ? )"";
            connection = DriverManager.getConnection(CONN_STR);
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, programID);
            preparedStatement.setString(2, name);
            preparedStatement.setBinaryStream(3, stream, bytecode.length);
            log.info(""INSERT INTO ProgramMessageSymbols(programID, name, "" + ""bytecode) VALUES ("" + programID + "", '"" + name + ""', "" + ""<bytecode>)"");
            preparedStatement.executeUpdate();
            statement = connection.createStatement();
            query = ""SELECT * FROM ProgramMessageSymbols WHERE "" + ""programID =  "" + programID + "" AND "" + ""name      = '"" + name + ""'"";
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to add program message symbol failed."";
                log.error(msg);
                ;
                throw new AdaptationException(msg);
            }
            programMessageSymbol = getProgramMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in addProgramMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                preparedStatement.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return programMessageSymbol;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",False
900006,607724,16958918,"    public void copyFile(String oldPathFile, String newPathFile) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPathFile);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPathFile);
                FileOutputStream fs = new FileOutputStream(newPathFile);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            message = (""���Ƶ����ļ���������"");
        }
    }
","    public static boolean copyFile(final String src, final String dest) {
        if (fileExists(src)) {
            try {
                FileChannel srcChannel = new FileInputStream(src).getChannel();
                FileChannel dstChannel = new FileOutputStream(dest).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
                return true;
            } catch (IOException e) {
                Logger.getAnonymousLogger().severe(e.getLocalizedMessage());
            }
        }
        return false;
    }
",True
900007,3229361,10095726,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(QZ.PHRASES.getPhrase(""25"") + "" "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(QZ.PHRASES.getPhrase(""26"") + "" "" + QZ.PHRASES.getPhrase(""27"") + "": "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""29"") + "": "" + dest_name);
                    System.out.print(QZ.PHRASES.getPhrase(""19"") + dest_name + QZ.PHRASES.getPhrase(""30"") + "": "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(QZ.PHRASES.getPhrase(""31""));
                } else throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""32"") + "": "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""33"") + "": "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""34"") + "": "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            while (true) {
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
                ;
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    @Override
    public void addApplication(Application app) {
        logger.info(""Adding a new application "" + app.getName() + "" by "" + app.getOrganisation() + "" ("" + app.getEmail() + "") "");
        app.setRegtime(new Timestamp(new Date().getTime()));
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update((app.getName() + app.getEmail() + app.getRegtime()).getBytes());
            byte byteData[] = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            app.setAppid(sb.toString());
        } catch (NoSuchAlgorithmException ex) {
            java.util.logging.Logger.getLogger(ApplicationDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(app.toString());
        SqlParameterSource parameters = new BeanPropertySqlParameterSource(app);
        Number appUid = insertApplication.executeAndReturnKey(parameters);
        app.setId(appUid.longValue());
    }
",False
900008,20515802,21947196,"    private static synchronized void calcLocalFileHash() {
        long startTime = System.currentTimeMillis();
        if (currentFileHash != null) return;
        List fileList = getAllFiles(""/"", new AllFilesFilter());
        int len = 0;
        byte[] buf = new byte[1024];
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            for (Iterator i = fileList.iterator(); i.hasNext(); ) {
                String path = (String) i.next();
                LocalFileResource lfr = new LocalFileResource(path);
                if (lfr.isDirectory()) {
                    digest.update(path.getBytes(""UTF-8""));
                    continue;
                }
                InputStream stream = lfr.getFileAsInputStream();
                while ((len = stream.read(buf)) != -1) {
                    digest.update(buf, 0, len);
                }
                stream.close();
            }
            currentFileHash = new String(Hex.encodeHex(digest.digest()));
        } catch (Exception e) {
            log.error(""No SHA found ...?"", e);
            currentFileHash = ""unknown"" + System.currentTimeMillis();
        } finally {
            if (log.isDebugEnabled()) log.debug(""Needed "" + (System.currentTimeMillis() - startTime) + ""ms for hash calculation"");
        }
    }
","    public synchronized String encrypt(final String pPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(pPassword.getBytes(""UTF-8""));
        final byte raw[] = md.digest();
        return BASE64Encoder.encodeBuffer(raw);
    }
",True
900009,1313409,299684,"    public void setPilot(PilotData pilotData) throws UsernameNotValidException {
        try {
            if (pilotData.username.trim().equals("""") || pilotData.password.trim().equals("""")) throw new UsernameNotValidException(1, ""Username or password missing"");
            PreparedStatement psta;
            if (pilotData.id == 0) {
                psta = jdbc.prepareStatement(""INSERT INTO pilot "" + ""(name, address1, address2, zip, city, state, country, birthdate, "" + ""pft_theory, pft, medical, passenger, instructor, loc_language, "" + ""loc_country, loc_variant, username, password, id) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,pilot_id_seq.nextval)"");
            } else {
                psta = jdbc.prepareStatement(""UPDATE pilot SET "" + ""name = ?, address1 = ?, address2 = ?, "" + ""zip = ?, city = ?, state = ?, country = ?, birthdate = ?, pft_theory = ?,"" + ""pft = ?, medical = ?, passenger = ?, instructor = ?, loc_language = ?, "" + ""loc_country = ?, loc_variant = ?, username = ?, password = ? "" + ""WHERE id = ?"");
            }
            psta.setString(1, pilotData.name);
            psta.setString(2, pilotData.address1);
            psta.setString(3, pilotData.address2);
            psta.setString(4, pilotData.zip);
            psta.setString(5, pilotData.city);
            psta.setString(6, pilotData.state);
            psta.setString(7, pilotData.country);
            if (pilotData.birthdate != null) psta.setLong(8, pilotData.birthdate.getTime()); else psta.setNull(8, java.sql.Types.INTEGER);
            if (pilotData.pft_theory != null) psta.setLong(9, pilotData.pft_theory.getTime()); else psta.setNull(9, java.sql.Types.INTEGER);
            if (pilotData.pft != null) psta.setLong(10, pilotData.pft.getTime()); else psta.setNull(10, java.sql.Types.INTEGER);
            if (pilotData.medical != null) psta.setLong(11, pilotData.medical.getTime()); else psta.setNull(11, java.sql.Types.INTEGER);
            if (pilotData.passenger) psta.setString(12, ""Y""); else psta.setString(12, ""N"");
            if (pilotData.instructor) psta.setString(13, ""Y""); else psta.setString(13, ""N"");
            psta.setString(14, pilotData.loc_language);
            psta.setString(15, pilotData.loc_country);
            psta.setString(16, pilotData.loc_variant);
            psta.setString(17, pilotData.username);
            psta.setString(18, pilotData.password);
            if (pilotData.id != 0) {
                psta.setInt(19, pilotData.id);
            }
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException sql) {
            jdbc.rollback();
            sql.printStackTrace();
            throw new UsernameNotValidException(2, ""Username allready exist"");
        }
    }
","    public static void main(String[] args) throws Exception {
        String urlString = ""http://php.tech.sina.com.cn/download/d_load.php?d_id=7877&down_id=151542"";
        urlString = EncodeUtils.encodeURL(urlString);
        URL url = new URL(urlString);
        System.out.println(""第一次："" + url);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        HttpURLConnection.setFollowRedirects(true);
        Map req = conn.getRequestProperties();
        System.out.println(""第一次请求头："");
        printMap(req);
        conn.connect();
        System.out.println(""第一次响应："");
        System.out.println(conn.getResponseMessage());
        int code = conn.getResponseCode();
        System.out.println(""第一次code:"" + code);
        printMap(conn.getHeaderFields());
        System.out.println(conn.getURL().getFile());
        if (code == 404 && !(conn.getURL() + """").equals(urlString)) {
            System.out.println(conn.getURL());
            String tmp = URLEncoder.encode(conn.getURL().toString(), ""gbk"");
            System.out.println(URLEncoder.encode(""在线音乐播放脚本"", ""GBK""));
            System.out.println(tmp);
            url = new URL(tmp);
            System.out.println(""第二次："" + url);
            conn = (HttpURLConnection) url.openConnection();
            System.out.println(""第二次响应："");
            System.out.println(""code:"" + code);
            printMap(conn.getHeaderFields());
        }
    }
",False
900010,604392,2247987,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public static void main(String argv[]) {
        Matrix A, B, C, Z, O, I, R, S, X, SUB, M, T, SQ, DEF, SOL;
        int errorCount = 0;
        int warningCount = 0;
        double tmp, s;
        double[] columnwise = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12. };
        double[] rowwise = { 1., 4., 7., 10., 2., 5., 8., 11., 3., 6., 9., 12. };
        double[][] avals = { { 1., 4., 7., 10. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] rankdef = avals;
        double[][] tvals = { { 1., 2., 3. }, { 4., 5., 6. }, { 7., 8., 9. }, { 10., 11., 12. } };
        double[][] subavals = { { 5., 8., 11. }, { 6., 9., 12. } };
        double[][] rvals = { { 1., 4., 7. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] pvals = { { 4., 1., 1. }, { 1., 2., 3. }, { 1., 3., 6. } };
        double[][] ivals = { { 1., 0., 0., 0. }, { 0., 1., 0., 0. }, { 0., 0., 1., 0. } };
        double[][] evals = { { 0., 1., 0., 0. }, { 1., 0., 2.e-7, 0. }, { 0., -2.e-7, 0., 1. }, { 0., 0., 1., 0. } };
        double[][] square = { { 166., 188., 210. }, { 188., 214., 240. }, { 210., 240., 270. } };
        double[][] sqSolution = { { 13. }, { 15. } };
        double[][] condmat = { { 1., 3. }, { 7., 9. } };
        int rows = 3, cols = 4;
        int invalidld = 5;
        int raggedr = 0;
        int raggedc = 4;
        int validld = 3;
        int nonconformld = 4;
        int ib = 1, ie = 2, jb = 1, je = 3;
        int[] rowindexset = { 1, 2 };
        int[] badrowindexset = { 1, 3 };
        int[] columnindexset = { 1, 2, 3 };
        int[] badcolumnindexset = { 1, 2, 4 };
        double columnsummax = 33.;
        double rowsummax = 30.;
        double sumofdiagonals = 15;
        double sumofsquares = 650;
        print(""\nTesting constructors and constructor-like methods...\n"");
        try {
            A = new Matrix(columnwise, invalidld);
            errorCount = try_failure(errorCount, ""Catch invalid length in packed constructor... "", ""exception not thrown for invalid input"");
        } catch (IllegalArgumentException e) {
            try_success(""Catch invalid length in packed constructor... "", e.getMessage());
        }
        try {
            A = new Matrix(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to default constructor... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructor... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        try {
            A = Matrix.constructWithCopy(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to constructWithCopy... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructWithCopy... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        A = new Matrix(columnwise, validld);
        B = new Matrix(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        C = B.minus(A);
        avals[0][0] = tmp;
        B = Matrix.constructWithCopy(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        if ((tmp - B.get(0, 0)) != 0.0) {
            errorCount = try_failure(errorCount, ""constructWithCopy... "", ""copy not effected... data visible outside"");
        } else {
            try_success(""constructWithCopy... "", """");
        }
        avals[0][0] = columnwise[0];
        I = new Matrix(ivals);
        try {
            check(I, Matrix.identity(3, 4));
            try_success(""identity... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""identity... "", ""identity Matrix not successfully created"");
        }
        print(""\nTesting access methods...\n"");
        B = new Matrix(avals);
        if (B.getRowDimension() != rows) {
            errorCount = try_failure(errorCount, ""getRowDimension... "", """");
        } else {
            try_success(""getRowDimension... "", """");
        }
        if (B.getColumnDimension() != cols) {
            errorCount = try_failure(errorCount, ""getColumnDimension... "", """");
        } else {
            try_success(""getColumnDimension... "", """");
        }
        B = new Matrix(avals);
        double[][] barray = B.getArray();
        if (barray != avals) {
            errorCount = try_failure(errorCount, ""getArray... "", """");
        } else {
            try_success(""getArray... "", """");
        }
        barray = B.getArrayCopy();
        if (barray == avals) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not (deep) copied"");
        }
        try {
            check(barray, avals);
            try_success(""getArrayCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not successfully (deep) copied"");
        }
        double[] bpacked = B.getColumnPackedCopy();
        try {
            check(bpacked, columnwise);
            try_success(""getColumnPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getColumnPackedCopy... "", ""data not successfully (deep) copied by columns"");
        }
        bpacked = B.getRowPackedCopy();
        try {
            check(bpacked, rowwise);
            try_success(""getRowPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getRowPackedCopy... "", ""data not successfully (deep) copied by rows"");
        }
        try {
            tmp = B.get(B.getRowDimension(), B.getColumnDimension() - 1);
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                tmp = B.get(B.getRowDimension() - 1, B.getColumnDimension());
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""get(int,int)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            if (B.get(B.getRowDimension() - 1, B.getColumnDimension() - 1) != avals[B.getRowDimension() - 1][B.getColumnDimension() - 1]) {
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""Matrix entry (i,j) not successfully retreived"");
            } else {
                try_success(""get(int,int)... "", """");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        SUB = new Matrix(subavals);
        try {
            M = B.getMatrix(ib, ie + B.getRowDimension() + 1, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(ib, ie, badcolumnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie + B.getRowDimension() + 1, columnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, columnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, badcolumnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.set(B.getRowDimension(), B.getColumnDimension() - 1, 0.);
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.set(B.getRowDimension() - 1, B.getColumnDimension(), 0.);
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""set(int,int,double)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            B.set(ib, jb, 0.);
            tmp = B.get(ib, jb);
            try {
                check(tmp, 0.);
                try_success(""set(int,int,double)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Matrix element not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        M = new Matrix(2, 3, 0.);
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, jb, je, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, jb, je + B.getColumnDimension() + 1, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, jb, je, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, jb, je)), M);
                try_success(""setMatrix(int,int,int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, columnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, badcolumnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, columnindexset)), M);
                try_success(""setMatrix(int,int,int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, jb, je + B.getColumnDimension() + 1, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, jb, je, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, jb, je, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, jb, je)), M);
                try_success(""setMatrix(int[],int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, badcolumnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, columnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, columnindexset)), M);
                try_success(""setMatrix(int[],int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""submatrix not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        print(""\nTesting array-like methods...\n"");
        S = new Matrix(columnwise, nonconformld);
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        A = R;
        try {
            S = A.minus(S);
            errorCount = try_failure(errorCount, ""minus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minus conformance check... "", """");
        }
        if (A.minus(R).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minus... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minus... "", """");
        }
        A = R.copy();
        A.minusEquals(R);
        Z = new Matrix(A.getRowDimension(), A.getColumnDimension());
        try {
            A.minusEquals(S);
            errorCount = try_failure(errorCount, ""minusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minusEquals conformance check... "", """");
        }
        if (A.minus(Z).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minusEquals... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minusEquals... "", """");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        C = A.minus(B);
        try {
            S = A.plus(S);
            errorCount = try_failure(errorCount, ""plus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plus conformance check... "", """");
        }
        try {
            check(C.plus(B), A);
            try_success(""plus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plus... "", ""(C = A - B, but C + B != A)"");
        }
        C = A.minus(B);
        C.plusEquals(B);
        try {
            A.plusEquals(S);
            errorCount = try_failure(errorCount, ""plusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plusEquals conformance check... "", """");
        }
        try {
            check(C, A);
            try_success(""plusEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plusEquals... "", ""(C = A - B, but C = C + B != A)"");
        }
        A = R.uminus();
        try {
            check(A.plus(R), Z);
            try_success(""uminus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""uminus... "", ""(-A + A != zeros)"");
        }
        A = R.copy();
        O = new Matrix(A.getRowDimension(), A.getColumnDimension(), 1.0);
        C = A.arrayLeftDivide(R);
        try {
            S = A.arrayLeftDivide(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivide conformance check... "", """");
        }
        try {
            check(C, O);
            try_success(""arrayLeftDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivide... "", ""(M.\\M != ones)"");
        }
        try {
            A.arrayLeftDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivideEquals conformance check... "", """");
        }
        A.arrayLeftDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayLeftDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals... "", ""(M.\\M != ones)"");
        }
        A = R.copy();
        try {
            A.arrayRightDivide(S);
            errorCount = try_failure(errorCount, ""arrayRightDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivide conformance check... "", """");
        }
        C = A.arrayRightDivide(R);
        try {
            check(C, O);
            try_success(""arrayRightDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivide... "", ""(M./M != ones)"");
        }
        try {
            A.arrayRightDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivideEquals conformance check... "", """");
        }
        A.arrayRightDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayRightDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals... "", ""(M./M != ones)"");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        try {
            S = A.arrayTimes(S);
            errorCount = try_failure(errorCount, ""arrayTimes conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimes conformance check... "", """");
        }
        C = A.arrayTimes(B);
        try {
            check(C.arrayRightDivideEquals(B), A);
            try_success(""arrayTimes... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimes... "", ""(A = R, C = A.*B, but C./B != A)"");
        }
        try {
            A.arrayTimesEquals(S);
            errorCount = try_failure(errorCount, ""arrayTimesEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimesEquals conformance check... "", """");
        }
        A.arrayTimesEquals(B);
        try {
            check(A.arrayRightDivideEquals(B), R);
            try_success(""arrayTimesEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimesEquals... "", ""(A = R, A = A.*B, but A./B != R)"");
        }
        print(""\nTesting I/O methods...\n"");
        try {
            DecimalFormat fmt = new DecimalFormat(""0.0000E00"");
            fmt.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
            PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
            A.print(FILE, fmt, 10);
            FILE.close();
            R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
            if (A.minus(R).norm1() < .001) {
                try_success(""print()/read()..."", """");
            } else {
                errorCount = try_failure(errorCount, ""print()/read()..."", ""Matrix read from file does not match Matrix printed to file"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            try {
                e.printStackTrace(System.out);
                warningCount = try_warning(warningCount, ""print()/read()..."", ""Formatting error... will try JDK1.1 reformulation..."");
                DecimalFormat fmt = new DecimalFormat(""0.0000"");
                PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
                A.print(FILE, fmt, 10);
                FILE.close();
                R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
                if (A.minus(R).norm1() < .001) {
                    try_success(""print()/read()..."", """");
                } else {
                    errorCount = try_failure(errorCount, ""print()/read() (2nd attempt) ..."", ""Matrix read from file does not match Matrix printed to file"");
                }
            } catch (java.io.IOException ioe) {
                warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
            }
        }
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        String tmpname = ""TMPMATRIX.serial"";
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(tmpname));
            out.writeObject(R);
            ObjectInputStream sin = new ObjectInputStream(new FileInputStream(tmpname));
            A = (Matrix) sin.readObject();
            try {
                check(A, R);
                try_success(""writeObject(Matrix)/readObject(Matrix)..."", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""Matrix not serialized correctly"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""writeObject()/readObject()..."", ""unexpected I/O error, unable to run serialization test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""unexpected error in serialization test"");
        }
        print(""\nTesting linear algebra methods...\n"");
        A = new Matrix(columnwise, 3);
        T = new Matrix(tvals);
        T = A.transpose();
        try {
            check(A.transpose(), T);
            try_success(""transpose..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""transpose()..."", ""transpose unsuccessful"");
        }
        A.transpose();
        try {
            check(A.norm1(), columnsummax);
            try_success(""norm1..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""norm1()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normInf(), rowsummax);
            try_success(""normInf()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normInf()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normF(), Math.sqrt(sumofsquares));
            try_success(""normF..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normF()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.trace(), sumofdiagonals);
            try_success(""trace()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""trace()..."", ""incorrect trace calculation"");
        }
        try {
            check(A.getMatrix(0, A.getRowDimension() - 1, 0, A.getRowDimension() - 1).det(), 0.);
            try_success(""det()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""det()..."", ""incorrect determinant calculation"");
        }
        SQ = new Matrix(square);
        try {
            check(A.times(A.transpose()), SQ);
            try_success(""times(Matrix)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(Matrix)..."", ""incorrect Matrix-Matrix product calculation"");
        }
        try {
            check(A.times(0.), Z);
            try_success(""times(double)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(double)..."", ""incorrect Matrix-scalar product calculation"");
        }
        A = new Matrix(columnwise, 4);
        QRDecomposition QR = A.qr();
        R = QR.getR();
        try {
            check(A, QR.getQ().times(R));
            try_success(""QRDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""QRDecomposition..."", ""incorrect QR decomposition calculation"");
        }
        SingularValueDecomposition SVD = A.svd();
        try {
            check(A, SVD.getU().times(SVD.getS().times(SVD.getV().transpose())));
            try_success(""SingularValueDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""SingularValueDecomposition..."", ""incorrect singular value decomposition calculation"");
        }
        DEF = new Matrix(rankdef);
        try {
            check(DEF.rank(), Math.min(DEF.getRowDimension(), DEF.getColumnDimension()) - 1);
            try_success(""rank()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""rank()..."", ""incorrect rank calculation"");
        }
        B = new Matrix(condmat);
        SVD = B.svd();
        double[] singularvalues = SVD.getSingularValues();
        try {
            check(B.cond(), singularvalues[0] / singularvalues[Math.min(B.getRowDimension(), B.getColumnDimension()) - 1]);
            try_success(""cond()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""cond()..."", ""incorrect condition number calculation"");
        }
        int n = A.getColumnDimension();
        A = A.getMatrix(0, n - 1, 0, n - 1);
        A.set(0, 0, 0.);
        LUDecomposition LU = A.lu();
        try {
            check(A.getMatrix(LU.getPivot(), 0, n - 1), LU.getL().times(LU.getU()));
            try_success(""LUDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""LUDecomposition..."", ""incorrect LU decomposition calculation"");
        }
        X = A.inverse();
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""inverse()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""inverse()..."", ""incorrect inverse calculation"");
        }
        O = new Matrix(SUB.getRowDimension(), 1, 1.0);
        SOL = new Matrix(sqSolution);
        SQ = SUB.getMatrix(0, SUB.getRowDimension() - 1, 0, SUB.getRowDimension() - 1);
        try {
            check(SQ.solve(SOL), O);
            try_success(""solve()..."", """");
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""solve()..."", e1.getMessage());
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""solve()..."", e.getMessage());
        }
        A = new Matrix(pvals);
        CholeskyDecomposition Chol = A.chol();
        Matrix L = Chol.getL();
        try {
            check(A, L.times(L.transpose()));
            try_success(""CholeskyDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition..."", ""incorrect Cholesky decomposition calculation"");
        }
        X = Chol.solve(Matrix.identity(3, 3));
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""CholeskyDecomposition solve()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition solve()..."", ""incorrect Choleskydecomposition solve calculation"");
        }
        EigenvalueDecomposition Eig = A.eig();
        Matrix D = Eig.getD();
        Matrix V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (symmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (symmetric)..."", ""incorrect symmetric Eigenvalue decomposition calculation"");
        }
        A = new Matrix(evals);
        Eig = A.eig();
        D = Eig.getD();
        V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (nonsymmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (nonsymmetric)..."", ""incorrect nonsymmetric Eigenvalue decomposition calculation"");
        }
        print(""\nTestMatrix completed.\n"");
        print(""Total errors reported: "" + Integer.toString(errorCount) + ""\n"");
        print(""Total warnings reported: "" + Integer.toString(warningCount) + ""\n"");
    }
",True
900011,12646521,13665830,"        public boolean check(int timeout) {
            StringBuilder result = null;
            java.net.URL url;
            java.io.InputStream in = null;
            try {
                url = new java.net.URL(location + ""/prisms?method=test"");
                java.net.URLConnection conn = url.openConnection();
                conn.setConnectTimeout(timeout);
                in = conn.getInputStream();
                java.io.Reader reader = new java.io.InputStreamReader(in);
                result = new StringBuilder();
                int read = reader.read();
                while (read >= 0) {
                    result.append((char) read);
                    read = reader.read();
                }
            } catch (java.io.IOException e) {
                log.error(""Instance check failed"", e);
                if (in != null) try {
                    in.close();
                } catch (java.io.IOException e2) {
                }
            }
            return result != null && result.toString().startsWith(""success"");
        }
","    public static void main(String[] args) {
        Usage u = new ccngetmeta();
        for (int i = 0; i < args.length - 3; i++) {
            if (!CommonArguments.parseArguments(args, i, u)) {
                u.usage();
                System.exit(1);
            }
            if (CommonParameters.startArg > i + 1) i = CommonParameters.startArg - 1;
        }
        if (args.length != CommonParameters.startArg + 3) {
            u.usage();
            System.exit(1);
        }
        try {
            int readsize = 1024;
            CCNHandle handle = CCNHandle.open();
            String metaArg = args[CommonParameters.startArg + 1];
            if (!metaArg.startsWith(""/"")) metaArg = ""/"" + metaArg;
            ContentName fileName = MetadataProfile.getLatestVersion(ContentName.fromURI(args[CommonParameters.startArg]), ContentName.fromNative(metaArg), CommonParameters.timeout, handle);
            if (fileName == null) {
                System.out.println(""File "" + args[CommonParameters.startArg] + "" does not exist"");
                System.exit(1);
            }
            if (VersioningProfile.hasTerminalVersion(fileName)) {
            } else {
                System.out.println(""File "" + fileName + "" does not exist...  exiting"");
                System.exit(1);
            }
            File theFile = new File(args[CommonParameters.startArg + 2]);
            if (theFile.exists()) {
                System.out.println(""Overwriting file: "" + args[CommonParameters.startArg + 1]);
            }
            FileOutputStream output = new FileOutputStream(theFile);
            long starttime = System.currentTimeMillis();
            CCNInputStream input;
            if (CommonParameters.unversioned) input = new CCNInputStream(fileName, handle); else input = new CCNFileInputStream(fileName, handle);
            if (CommonParameters.timeout != null) {
                input.setTimeout(CommonParameters.timeout);
            }
            byte[] buffer = new byte[readsize];
            int readcount = 0;
            long readtotal = 0;
            while ((readcount = input.read(buffer)) != -1) {
                readtotal += readcount;
                output.write(buffer, 0, readcount);
                output.flush();
            }
            if (CommonParameters.verbose) System.out.println(""ccngetfile took: "" + (System.currentTimeMillis() - starttime) + ""ms"");
            System.out.println(""Retrieved content "" + args[CommonParameters.startArg + 1] + "" got "" + readtotal + "" bytes."");
            System.exit(0);
        } catch (ConfigurationException e) {
            System.out.println(""Configuration exception in ccngetfile: "" + e.getMessage());
            e.printStackTrace();
        } catch (MalformedContentNameStringException e) {
            System.out.println(""Malformed name: "" + args[CommonParameters.startArg] + "" "" + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Cannot write file or read content. "" + e.getMessage());
            e.printStackTrace();
        }
        System.exit(1);
    }
",False
900012,19217522,12044335,"    boolean copyFileStructure(File oldFile, File newFile) {
        if (oldFile == null || newFile == null) return false;
        File searchFile = newFile;
        do {
            if (oldFile.equals(searchFile)) return false;
            searchFile = searchFile.getParentFile();
        } while (searchFile != null);
        if (oldFile.isDirectory()) {
            if (progressDialog != null) {
                progressDialog.setDetailFile(oldFile, ProgressDialog.COPY);
            }
            if (simulateOnly) {
            } else {
                if (!newFile.mkdirs()) return false;
            }
            File[] subFiles = oldFile.listFiles();
            if (subFiles != null) {
                if (progressDialog != null) {
                    progressDialog.addWorkUnits(subFiles.length);
                }
                for (int i = 0; i < subFiles.length; i++) {
                    File oldSubFile = subFiles[i];
                    File newSubFile = new File(newFile, oldSubFile.getName());
                    if (!copyFileStructure(oldSubFile, newSubFile)) return false;
                    if (progressDialog != null) {
                        progressDialog.addProgress(1);
                        if (progressDialog.isCancelled()) return false;
                    }
                }
            }
        } else {
            if (simulateOnly) {
            } else {
                FileReader in = null;
                FileWriter out = null;
                try {
                    in = new FileReader(oldFile);
                    out = new FileWriter(newFile);
                    int count;
                    while ((count = in.read()) != -1) out.write(count);
                } catch (FileNotFoundException e) {
                    return false;
                } catch (IOException e) {
                    return false;
                } finally {
                    try {
                        if (in != null) in.close();
                        if (out != null) out.close();
                    } catch (IOException e) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
","    JcrFile createBody(Part part) throws IOException, MessagingException {
        JcrFile body = new JcrFile();
        body.setName(""part"");
        ByteArrayOutputStream pout = new ByteArrayOutputStream();
        IOUtils.copy(part.getInputStream(), pout);
        body.setDataProvider(new JcrDataProviderImpl(TYPE.BYTES, pout.toByteArray()));
        body.setMimeType(part.getContentType());
        body.setLastModified(java.util.Calendar.getInstance());
        return body;
    }
",True
900013,15260218,17994731,"    public static String md5Encode16(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(s.getBytes(""utf-8""));
            byte b[] = md.digest();
            int i;
            StringBuilder buf = new StringBuilder("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString().substring(8, 24);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static String encrypt(String txt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(txt.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",True
900014,161844,22556551,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    private void copyOneFile(String oldPath, String newPath) {
        File copiedFile = new File(newPath);
        try {
            FileInputStream source = new FileInputStream(oldPath);
            FileOutputStream destination = new FileOutputStream(copiedFile);
            FileChannel sourceFileChannel = source.getChannel();
            FileChannel destinationFileChannel = destination.getChannel();
            long size = sourceFileChannel.size();
            sourceFileChannel.transferTo(0, size, destinationFileChannel);
            source.close();
            destination.close();
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
",True
900015,10079611,9956094,"    public static void copy(File source, File sink) throws IOException {
        if (source == null) throw new NullPointerException(""Source file must not be null"");
        if (sink == null) throw new NullPointerException(""Target file must not be null"");
        if (!source.exists()) throw new IOException(""Source file "" + source.getPath() + "" does not exist"");
        if (!source.isFile()) throw new IOException(""Source file "" + source.getPath() + "" is not a regular file"");
        if (!source.canRead()) throw new IOException(""Source file "" + source.getPath() + "" can not be read (missing acces right)"");
        if (!sink.exists()) throw new IOException(""Target file "" + sink.getPath() + "" does not exist"");
        if (!sink.isFile()) throw new IOException(""Target file "" + sink.getPath() + "" is not a regular file"");
        if (!sink.canWrite()) throw new IOException(""Target file "" + sink.getPath() + "" is write protected"");
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new FileInputStream(source);
            output = new FileOutputStream(sink);
            byte[] buffer = new byte[1024];
            while (input.available() > 0) {
                int bread = input.read(buffer);
                if (bread > 0) output.write(buffer, 0, bread);
            }
        } finally {
            if (input != null) try {
                input.close();
            } catch (IOException x) {
            }
            if (output != null) try {
                output.close();
            } catch (IOException x) {
            }
        }
    }
","    public void importNotesFromServer() {
        boolean downloaded = true;
        try {
            makeBackupFile();
            File f = new File(UserSettings.getInstance().getNotesFile());
            FileOutputStream fos = new FileOutputStream(f);
            String urlString = protocol + ""://"" + UserSettings.getInstance().getServerAddress() + UserSettings.getInstance().getServerDir() + f.getName();
            setDefaultAuthenticator();
            URL url = new URL(urlString);
            HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
            InputStream is = urlc.getInputStream();
            int nextByte = is.read();
            while (nextByte != -1) {
                fos.write(nextByte);
                nextByte = is.read();
            }
            fos.close();
            if (urlc.getResponseCode() != HttpURLConnection.HTTP_OK) {
                downloaded = false;
            }
        } catch (SSLHandshakeException e) {
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""error.sslcertificateerror""), I18N.getInstance().getString(""error.title""), JOptionPane.ERROR_MESSAGE);
            downloaded = false;
        } catch (Exception e) {
            downloaded = false;
        }
        if (downloaded) {
            deleteBackupFile();
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""info.notesfiledownloaded""), I18N.getInstance().getString(""info.title""), JOptionPane.INFORMATION_MESSAGE);
        } else {
            restoreFileFromBackup();
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""error.notesfilenotdownloaded""), I18N.getInstance().getString(""error.title""), JOptionPane.ERROR_MESSAGE);
        }
    }
",False
900016,12523607,16166059,"    public void render(ServiceContext serviceContext) throws Exception {
        if (serviceContext.getTemplateName() == null) throw new Exception(""no Template defined for service: "" + serviceContext.getServiceInfo().getRefName());
        File f = new File(serviceContext.getTemplateName());
        serviceContext.getResponse().setContentLength((int) f.length());
        InputStream in = new FileInputStream(f);
        IOUtils.copy(in, serviceContext.getResponse().getOutputStream(), 0, (int) f.length());
        in.close();
    }
","    public void transform(File inputMatrixFile, MatrixIO.Format inputFormat, File outputMatrixFile) throws IOException {
        FileChannel original = new FileInputStream(inputMatrixFile).getChannel();
        FileChannel copy = new FileOutputStream(outputMatrixFile).getChannel();
        copy.transferFrom(original, 0, original.size());
        original.close();
        copy.close();
    }
",True
900017,13665830,3584277,"    public static void main(String[] args) {
        Usage u = new ccngetmeta();
        for (int i = 0; i < args.length - 3; i++) {
            if (!CommonArguments.parseArguments(args, i, u)) {
                u.usage();
                System.exit(1);
            }
            if (CommonParameters.startArg > i + 1) i = CommonParameters.startArg - 1;
        }
        if (args.length != CommonParameters.startArg + 3) {
            u.usage();
            System.exit(1);
        }
        try {
            int readsize = 1024;
            CCNHandle handle = CCNHandle.open();
            String metaArg = args[CommonParameters.startArg + 1];
            if (!metaArg.startsWith(""/"")) metaArg = ""/"" + metaArg;
            ContentName fileName = MetadataProfile.getLatestVersion(ContentName.fromURI(args[CommonParameters.startArg]), ContentName.fromNative(metaArg), CommonParameters.timeout, handle);
            if (fileName == null) {
                System.out.println(""File "" + args[CommonParameters.startArg] + "" does not exist"");
                System.exit(1);
            }
            if (VersioningProfile.hasTerminalVersion(fileName)) {
            } else {
                System.out.println(""File "" + fileName + "" does not exist...  exiting"");
                System.exit(1);
            }
            File theFile = new File(args[CommonParameters.startArg + 2]);
            if (theFile.exists()) {
                System.out.println(""Overwriting file: "" + args[CommonParameters.startArg + 1]);
            }
            FileOutputStream output = new FileOutputStream(theFile);
            long starttime = System.currentTimeMillis();
            CCNInputStream input;
            if (CommonParameters.unversioned) input = new CCNInputStream(fileName, handle); else input = new CCNFileInputStream(fileName, handle);
            if (CommonParameters.timeout != null) {
                input.setTimeout(CommonParameters.timeout);
            }
            byte[] buffer = new byte[readsize];
            int readcount = 0;
            long readtotal = 0;
            while ((readcount = input.read(buffer)) != -1) {
                readtotal += readcount;
                output.write(buffer, 0, readcount);
                output.flush();
            }
            if (CommonParameters.verbose) System.out.println(""ccngetfile took: "" + (System.currentTimeMillis() - starttime) + ""ms"");
            System.out.println(""Retrieved content "" + args[CommonParameters.startArg + 1] + "" got "" + readtotal + "" bytes."");
            System.exit(0);
        } catch (ConfigurationException e) {
            System.out.println(""Configuration exception in ccngetfile: "" + e.getMessage());
            e.printStackTrace();
        } catch (MalformedContentNameStringException e) {
            System.out.println(""Malformed name: "" + args[CommonParameters.startArg] + "" "" + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Cannot write file or read content. "" + e.getMessage());
            e.printStackTrace();
        }
        System.exit(1);
    }
","    public static int copyFile(File src, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(src).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
        return 1;
    }
",True
900018,5675396,23535752,"    private void putFile(String location, String file) throws Exception {
        System.out.println(""Put file to "" + location);
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""PUT"");
        conn.setDoOutput(true);
        RDFFormat dataFormat = RDFFormat.forFileName(file, RDFFormat.RDFXML);
        conn.setRequestProperty(""Content-Type"", dataFormat.getDefaultMIMEType());
        InputStream dataStream = ProtocolTest.class.getResourceAsStream(file);
        try {
            OutputStream connOut = conn.getOutputStream();
            try {
                IOUtil.transfer(dataStream, connOut);
            } finally {
                connOut.close();
            }
        } finally {
            dataStream.close();
        }
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
","    public String getCipherString(String source) throws CadenaNoCifradaException {
        String encryptedSource = null;
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(source.getBytes(encoding), 0, source.length());
            sha1hash = md.digest();
            encryptedSource = convertToHex(sha1hash);
        } catch (Exception e) {
            throw new CadenaNoCifradaException(e);
        }
        return encryptedSource;
    }
",False
900019,20378673,2244282,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    private InputStream loadSource(String url) throws ClientProtocolException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        httpclient.getParams().setParameter(HTTP.USER_AGENT, ""Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 6.0)"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        return entity.getContent();
    }
",False
900020,12393199,18880056,"    public int getDBVersion() throws MigrationException {
        int dbVersion;
        PreparedStatement ps;
        try {
            Connection conn = getConnection();
            ps = conn.prepareStatement(""SELECT version FROM "" + getTablename());
            try {
                ResultSet rs = ps.executeQuery();
                try {
                    if (rs.next()) {
                        dbVersion = rs.getInt(1);
                        if (rs.next()) {
                            throw new MigrationException(""Too many version in table: "" + getTablename());
                        }
                    } else {
                        ps.close();
                        ps = conn.prepareStatement(""INSERT INTO "" + getTablename() + "" (version) VALUES (?)"");
                        ps.setInt(1, 1);
                        try {
                            ps.executeUpdate();
                        } finally {
                            ps.close();
                        }
                        dbVersion = 1;
                    }
                } finally {
                    rs.close();
                }
            } finally {
                ps.close();
            }
        } catch (SQLException e) {
            logger.log(Level.WARNING, ""Could not access "" + tablename + "": "" + e);
            dbVersion = 0;
            Connection conn = getConnection();
            try {
                if (!conn.getAutoCommit()) {
                    conn.rollback();
                }
                conn.setAutoCommit(false);
            } catch (SQLException e1) {
                throw new MigrationException(""Could not reset transaction state"", e1);
            }
        }
        return dbVersion;
    }
","    public static File extract(File source, String filename, File target) {
        if (source.exists() == false || filename == null || filename.trim().length() < 1 || target == null) return null;
        boolean isDirectory = (filename.lastIndexOf(""/"") == filename.length() - 1);
        try {
            Map contents = (Map) jarContents.get(source.getPath());
            if (contents == null) {
                contents = new HashMap();
                jarContents.put(source.getPath(), contents);
                ZipInputStream input = new ZipInputStream(new FileInputStream(source));
                ZipEntry zipEntry = null;
                while ((zipEntry = input.getNextEntry()) != null) {
                    if (zipEntry.isDirectory()) continue;
                    contents.put(zipEntry.getName(), zipEntry);
                }
                input.close();
            }
            if (isDirectory) {
                Iterator it = contents.keySet().iterator();
                while (it.hasNext()) {
                    String next = (String) it.next();
                    if (next.startsWith(filename)) {
                        ZipEntry zipEntry = (ZipEntry) contents.get(next);
                        int n = filename.length();
                        File newTarget = new File(target, zipEntry.getName().substring(n));
                        extract(source, next, newTarget);
                    }
                }
                return target;
            }
            ZipEntry entry = (ZipEntry) contents.get(filename);
            ZipFile input = new ZipFile(source);
            InputStream in = input.getInputStream(entry);
            target.getParentFile().mkdirs();
            int bytesRead;
            byte[] buffer = new byte[1024];
            FileOutputStream output = new FileOutputStream(target);
            while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead);
            output.close();
            input.close();
            return target;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
",False
900021,3567576,5634854,"    protected static String md5(String s) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(s.getBytes());
        byte digest[] = md.digest();
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            result.append(Integer.toHexString(0xFF & digest[i]));
        }
        return result.toString();
    }
","    private static void checkClients() {
        try {
            sendMultiListEntry('l');
        } catch (Exception e) {
            if (Util.getDebugLevel() > 90) e.printStackTrace();
        }
        try {
            if (CANT_CHECK_CLIENTS != null) KeyboardHero.removeStatus(CANT_CHECK_CLIENTS);
            URL url = new URL(URL_STR + ""?req=clients"" + (server != null ? ""&port="" + server.getLocalPort() : """"));
            URLConnection connection = url.openConnection(getProxy());
            connection.setRequestProperty(""User-Agent"", USER_AGENT);
            BufferedReader bufferedRdr = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String ln;
            if (Util.getDebugLevel() > 30) Util.debug(""URL: "" + url);
            while ((ln = bufferedRdr.readLine()) != null) {
                String[] parts = ln.split("":"", 2);
                if (parts.length < 2) {
                    Util.debug(12, ""Line read in checkClients: "" + ln);
                    continue;
                }
                try {
                    InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]));
                    boolean notFound = true;
                    if (Util.getDebugLevel() > 25) Util.debug(""NEW Address: "" + address.toString());
                    synchronized (clients) {
                        Iterator<Client> iterator = clients.iterator();
                        while (iterator.hasNext()) {
                            final Client client = iterator.next();
                            if (client.socket.isClosed()) {
                                iterator.remove();
                                continue;
                            }
                            if (Util.getDebugLevel() > 26 && client.address != null) Util.debug(""Address: "" + client.address.toString());
                            if (address.equals(client.address)) {
                                notFound = false;
                                break;
                            }
                        }
                    }
                    if (notFound) {
                        connectClient(address);
                    }
                } catch (NumberFormatException e) {
                }
            }
            bufferedRdr.close();
        } catch (MalformedURLException e) {
            Util.conditionalError(PORT_IN_USE, ""Err_PortInUse"");
            Util.error(Util.getMsg(""Err_CantCheckClients""));
        } catch (FileNotFoundException e) {
            Util.error(Util.getMsg(""Err_CantCheckClients_Proxy""), Util.getMsg(""Err_FileNotFound""));
        } catch (SocketException e) {
            Util.error(Util.getMsg(""Err_CantCheckClients_Proxy""), e.getLocalizedMessage());
        } catch (Exception e) {
            CANT_CHECK_CLIENTS.setException(e.toString());
            KeyboardHero.addStatus(CANT_CHECK_CLIENTS);
        }
    }
",False
900022,5520449,2060356,"    protected void init() {
        if (this.strUrl != null) {
            InputStream in = null;
            try {
                URL url = ClassLoader.getSystemClassLoader().getResource(strUrl);
                if (url != null) {
                    in = url.openStream();
                    if (in != null) {
                        props.load(in);
                    }
                }
            } catch (IOException e) {
                Logger.defaultLogger().error(""Error during framework properties loading"", e);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException ignored) {
                    }
                }
            }
        }
    }
","    private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) {
        List res = new ArrayList();
        File app_dir = getApplicationFile(""plugins"");
        if (!(app_dir.exists()) && app_dir.isDirectory()) {
            listener.messageLogged(LoggerChannel.LT_ERROR, ""Application dir '"" + app_dir + ""' not found"");
            return (new LaunchablePlugin[0]);
        }
        File[] plugins = app_dir.listFiles();
        if (plugins == null || plugins.length == 0) {
            listener.messageLogged(LoggerChannel.LT_ERROR, ""Application dir '"" + app_dir + ""' empty"");
            return (new LaunchablePlugin[0]);
        }
        for (int i = 0; i < plugins.length; i++) {
            File plugin_dir = plugins[i];
            if (!plugin_dir.isDirectory()) {
                continue;
            }
            try {
                ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader();
                ClassLoader root_cl = classLoader;
                File[] contents = plugin_dir.listFiles();
                if (contents == null || contents.length == 0) {
                    continue;
                }
                String[] plugin_version = { null };
                String[] plugin_id = { null };
                contents = getHighestJarVersions(contents, plugin_version, plugin_id, true);
                for (int j = 0; j < contents.length; j++) {
                    classLoader = addFileToClassPath(root_cl, classLoader, contents[j]);
                }
                Properties props = new Properties();
                File properties_file = new File(plugin_dir, ""plugin.properties"");
                if (properties_file.exists()) {
                    FileInputStream fis = null;
                    try {
                        fis = new FileInputStream(properties_file);
                        props.load(fis);
                    } finally {
                        if (fis != null) {
                            fis.close();
                        }
                    }
                } else {
                    if (classLoader instanceof URLClassLoader) {
                        URLClassLoader current = (URLClassLoader) classLoader;
                        URL url = current.findResource(""plugin.properties"");
                        if (url != null) {
                            props.load(url.openStream());
                        }
                    }
                }
                String plugin_class = (String) props.get(""plugin.class"");
                if (plugin_class == null || plugin_class.indexOf(';') != -1) {
                    continue;
                }
                Class c = classLoader.loadClass(plugin_class);
                Plugin plugin = (Plugin) c.newInstance();
                if (plugin instanceof LaunchablePlugin) {
                    preloaded_plugins.put(plugin_class, plugin);
                    res.add(plugin);
                }
            } catch (Throwable e) {
                listener.messageLogged(""Load of plugin in '"" + plugin_dir + ""' fails"", e);
            }
        }
        LaunchablePlugin[] x = new LaunchablePlugin[res.size()];
        res.toArray(x);
        return (x);
    }
",False
900023,9913454,9296325,"    private void createScript(File scriptsLocation, String relativePath, String scriptContent) {
        Writer fileWriter = null;
        try {
            File scriptFile = new File(scriptsLocation.getAbsolutePath() + ""/"" + relativePath);
            scriptFile.getParentFile().mkdirs();
            fileWriter = new FileWriter(scriptFile);
            IOUtils.copy(new StringReader(scriptContent), fileWriter);
        } catch (IOException e) {
            throw new UnitilsException(e);
        } finally {
            IOUtils.closeQuietly(fileWriter);
        }
    }
","    public static Board readStream(InputStream is) throws IOException {
        StringWriter stringWriter = new StringWriter();
        IOUtils.copy(is, stringWriter);
        String s = stringWriter.getBuffer().toString();
        Board board = read(s);
        return board;
    }
",True
900024,17921696,9918989,"    private String generateStorageDir(String stringToBeHashed) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(stringToBeHashed.getBytes());
        byte[] hashedKey = digest.digest();
        return Util.encodeArrayToHexadecimalString(hashedKey);
    }
","    private byte[] hash(String data, HashAlg alg) {
        try {
            MessageDigest digest = MessageDigest.getInstance(alg.toString());
            digest.update(data.getBytes());
            byte[] hash = digest.digest();
            return hash;
        } catch (NoSuchAlgorithmException e) {
        }
        return null;
    }
",True
900025,10298327,16341721,"    private String encode(String arg) {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(arg.getBytes());
            byte[] md5sum = digest.digest();
            final BigInteger bigInt = new BigInteger(1, md5sum);
            final String output = bigInt.toString(16);
            return output;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""MD5 required: "" + e.getMessage(), e);
        }
    }
","    public boolean isPasswordCorrect(String attempt) {
        try {
            MessageDigest digest = MessageDigest.getInstance(attempt);
            digest.update(salt);
            digest.update(attempt.getBytes(""UTF-8""));
            byte[] attemptHash = digest.digest();
            return attemptHash.equals(hash);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(UserRecord.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(UserRecord.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
",True
900026,5775448,19436818,"    private void writeData(IBaseType dataType, Writer writer) throws XMLStreamException {
        InputStream isData;
        DataType data = (DataType) baseType;
        if (data.isSetInputStream()) {
            isData = data.getInputStream();
            try {
                IOUtils.copy(isData, writer);
            } catch (IOException e) {
                throw new XMLStreamException(""DataType fail writing streaming data "", e);
            }
        } else if (data.isSetOutputStream()) {
            throw new XMLStreamException(""DataType only can write streaming input, its an output stream (only for reading) "");
        } else {
            new CharactersEventImpl(startElement.getLocation(), String.valueOf(baseType.asData()), false).writeAsEncodedUnicode(writer);
        }
    }
","    private void collectImageFile(@NotNull final Progress progress, @NotNull final File collectedDirectory) throws IOException {
        final File file = new File(collectedDirectory, ActionBuilderUtils.getString(ACTION_BUILDER, ""configSource.image.name""));
        final FileOutputStream fos = new FileOutputStream(file);
        try {
            final FileChannel outChannel = fos.getChannel();
            try {
                final int numOfFaceObjects = faceObjects.size();
                progress.setLabel(ActionBuilderUtils.getString(ACTION_BUILDER, ""archCollectImages""), numOfFaceObjects);
                final ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
                final Charset charset = Charset.forName(""ISO-8859-1"");
                int i = 0;
                for (final FaceObject faceObject : faceObjects) {
                    final String face = faceObject.getFaceName();
                    final String path = archFaceProvider.getFilename(face);
                    try {
                        final FileInputStream fin = new FileInputStream(path);
                        try {
                            final FileChannel inChannel = fin.getChannel();
                            final long imageSize = inChannel.size();
                            byteBuffer.clear();
                            byteBuffer.put((""IMAGE "" + (faceObjects.isIncludeFaceNumbers() ? i + "" "" : """") + imageSize + "" "" + face + ""\n"").getBytes(charset));
                            byteBuffer.flip();
                            outChannel.write(byteBuffer);
                            inChannel.transferTo(0L, imageSize, outChannel);
                        } finally {
                            fin.close();
                        }
                    } catch (final FileNotFoundException ignored) {
                        ACTION_BUILDER.showMessageDialog(progress.getParentComponent(), ""archCollectErrorFileNotFound"", path);
                        return;
                    } catch (final IOException e) {
                        ACTION_BUILDER.showMessageDialog(progress.getParentComponent(), ""archCollectErrorIOException"", path, e);
                        return;
                    }
                    if (i++ % 100 == 0) {
                        progress.setValue(i);
                    }
                }
                progress.setValue(faceObjects.size());
            } finally {
                outChannel.close();
            }
        } finally {
            fos.close();
        }
    }
",True
900027,8344457,4147990,"    private static void addFileToZip(String path, String srcFile, ZipOutputStream zip, String prefix, String suffix) throws Exception {
        File folder = new File(srcFile);
        if (folder.isDirectory()) {
            addFolderToZip(path, srcFile, zip, prefix, suffix);
        } else {
            if (isFileNameMatch(folder.getName(), prefix, suffix)) {
                FileInputStream fis = new FileInputStream(srcFile);
                zip.putNextEntry(new ZipEntry(path + ""/"" + folder.getName()));
                IOUtils.copy(fis, zip);
                fis.close();
            }
        }
    }
","    public static void copyFile(File dst, File src, boolean append) throws FileNotFoundException, IOException {
        dst.createNewFile();
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        long startAt = 0;
        if (append) startAt = out.size();
        in.transferTo(startAt, in.size(), out);
        out.close();
        in.close();
    }
",True
900028,12579,11245902,"    @Override
    public DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {
        String url = request.getParameter(URL_PARAM_NAME);
        if (StringUtils.isEmpty(url)) {
            log.error(""url parameter not provided."");
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""url parameter not provided"");
        }
        Reader reader;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        } catch (MalformedURLException e) {
            log.error(""url is malformed: "" + url);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""url is malformed: "" + url);
        } catch (IOException e) {
            log.error(""Couldn't read from url: "" + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""Couldn't read from url: "" + url);
        }
        DataTable dataTable = null;
        ULocale requestLocale = DataSourceHelper.getLocaleFromRequest(request);
        try {
            dataTable = CsvDataSourceHelper.read(reader, null, true, requestLocale);
        } catch (IOException e) {
            log.error(""Couldn't read from url: "" + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""Couldn't read from url: "" + url);
        }
        return dataTable;
    }
","    public static void uploadFile(File in, String out, String host, int port, String path, String login, String password, boolean renameIfExist) throws IOException {
        FTPClient ftp = null;
        try {
            m_logCat.info(""Uploading "" + in + "" to "" + host + "":"" + port + "" at "" + path);
            ftp = new FTPClient();
            int reply;
            ftp.connect(host, port);
            m_logCat.info(""Connected to "" + host + ""... Trying to authenticate"");
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                m_logCat.error(""FTP server "" + host + "" refused connection."");
                throw new IOException(""Cannot connect to the FTP Server: connection refused."");
            }
            if (!ftp.login(login, password)) {
                ftp.logout();
                throw new IOException(""Cannot connect to the FTP Server: login / password is invalid!"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            if (!ftp.changeWorkingDirectory(path)) {
                m_logCat.warn(""Remote working directory: "" + path + ""does not exist on the FTP Server ..."");
                m_logCat.info(""Trying to create remote directory: "" + path);
                if (!ftp.makeDirectory(path)) {
                    m_logCat.error(""Failed to create remote directory: "" + path);
                    throw new IOException(""Failed to store "" + in + "" in the remote directory: "" + path);
                }
                if (!ftp.changeWorkingDirectory(path)) {
                    m_logCat.error(""Failed to change directory. Unexpected error"");
                    throw new IOException(""Failed to change to remote directory : "" + path);
                }
            }
            if (out == null) {
                out = in.getName();
                if (out.startsWith(""/"")) {
                    out = out.substring(1);
                }
            }
            if (renameIfExist) {
                String[] files = ftp.listNames();
                String f = in + out;
                for (int i = 0; i < files.length; i++) {
                    if (files[i].equals(out)) {
                        m_logCat.debug(""Found existing file on the server: "" + out);
                        boolean rename_ok = false;
                        String bak = ""_bak"";
                        int j = 0;
                        String newExt = null;
                        while (!rename_ok) {
                            if (j == 0) newExt = bak; else newExt = bak + j;
                            if (ftp.rename(out, out + newExt)) {
                                m_logCat.info(out + "" renamed to "" + out + newExt);
                                rename_ok = true;
                            } else {
                                m_logCat.warn(""Renaming to "" + out + newExt + "" has failed!, trying again ..."");
                                j++;
                            }
                        }
                        break;
                    }
                }
            }
            InputStream input = new FileInputStream(in);
            m_logCat.info(""Starting transfert of "" + in);
            ftp.storeFile(out, input);
            m_logCat.info(in + "" uploaded successfully"");
            input.close();
            ftp.logout();
        } catch (FTPConnectionClosedException e) {
            m_logCat.error(""Server closed connection."", e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
    }
",False
900029,23677151,10793696,"	public static IProject CreateJavaProject(String name, IPath classpath) throws CoreException {
		// Create and Open New Project in Workspace
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		IWorkspaceRoot root = workspace.getRoot();
		IProject project = root.getProject(name);
		project.create(null);
		project.open(null);
		
		// Add Java Nature to new Project
		IProjectDescription desc = project.getDescription();
		desc.setNatureIds(new String[] { JavaCore.NATURE_ID});
		project.setDescription(desc, null);
		
		// Get Java Project Object
		IJavaProject javaProj = JavaCore.create(project);
		
		// Set Output Folder
		IFolder binDir = project.getFolder(""bin"");
		IPath binPath = binDir.getFullPath();
		javaProj.setOutputLocation(binPath, null);
		
		// Set Project's Classpath
		IClasspathEntry cpe = JavaCore.newLibraryEntry(classpath, null, null);
		javaProj.setRawClasspath(new IClasspathEntry[] {cpe}, null);
		
		return project;
	}
","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",False
900030,106625,20869815,"    public boolean open() {
        try {
            URL url = new URL(resource);
            conn = url.openConnection();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } catch (MalformedURLException e) {
            System.out.println(""Uable to connect URL:"" + resource);
            return false;
        } catch (IOException e) {
            System.out.println(""IOExeption when connecting to URL"" + resource);
            return false;
        }
        return true;
    }
","    private static String encode(String str, String method) {
        MessageDigest md = null;
        String dstr = null;
        try {
            md = MessageDigest.getInstance(method);
            md.update(str.getBytes());
            dstr = new BigInteger(1, md.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return dstr;
    }
",False
900031,9895196,18298938,"    public static String md5(String plain) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
            PApplet.println(""[ERROR]: md5()   "" + e);
            return """";
        }
        md5.reset();
        md5.update(plain.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i += 1) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        return hexString.toString();
    }
","    public void loginOAuth() throws OAuthMessageSignerException, OAuthExpectationFailedException, OAuthCommunicationException, ClientProtocolException, IOException, IllegalStateException, SAXException, ParserConfigurationException, FactoryConfigurationError, AndroidException {
        String url = getAuthentificationURL();
        HttpGet reqLogin = new HttpGet(url);
        consumer = new CommonsHttpOAuthConsumer(getConsumerKey(), getConsumerSecret());
        consumer.sign(reqLogin);
        HttpClient httpClient = new DefaultHttpClient();
        HttpResponse resLogin = httpClient.execute(reqLogin);
        if (resLogin.getEntity() == null) {
            throw new AuthRemoteException();
        }
        Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(resLogin.getEntity().getContent());
        Element eOAuthToken = (Element) document.getElementsByTagName(""oauth_token"").item(0);
        if (eOAuthToken == null) {
            throw new AuthRemoteException();
        }
        Node e = eOAuthToken.getFirstChild();
        String sOAuthToken = e.getNodeValue();
        System.out.println(""token: "" + sOAuthToken);
        Element eOAuthTokenSecret = (Element) document.getElementsByTagName(""oauth_token_secret"").item(0);
        if (eOAuthTokenSecret == null) {
            throw new AuthRemoteException();
        }
        e = eOAuthTokenSecret.getFirstChild();
        String sOAuthTokenSecret = e.getNodeValue();
        System.out.println(""Secret: "" + sOAuthTokenSecret);
        consumer.setTokenWithSecret(sOAuthToken, sOAuthTokenSecret);
    }
",False
900032,7938416,10287987,"    @Override
    @RemoteMethod
    public synchronized boolean copy(int idAnexo) {
        try {
            Anexo anexo = selectById(idAnexo);
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            Usuario usuario = (Usuario) auth.getPrincipal();
            if (anexo.getAssinado() == 1 && anexo.getIdAssinadoPor() != usuario.getIdUsuario()) {
                deleteAnexoFromTemp(anexo);
                return false;
            }
            Carteira carteiraUsuario = carteiraService.selectById(usuario.getIdCarteira());
            DocumentoDetalhes documentoDetalhes = anexo.getDocumentoDetalhes();
            Set<Documento> documentos = documentoDetalhes.getDocumentosByCarteira();
            boolean havePermission = false;
            for (Documento documento : documentos) {
                Carteira carteiraDocumento = documento.getCarteira();
                if (carteiraDocumento != null) {
                    if (carteiraDocumento.getIdCarteira() == carteiraUsuario.getIdCarteira()) {
                        havePermission = true;
                        System.out.println(""tem permisssao: "" + havePermission);
                        break;
                    }
                }
            }
            if (!havePermission) {
                System.out.println(""Não tem permissao."");
                return false;
            }
            FileInputStream fis = new FileInputStream(new File(config.baseDir + ""/temp/"" + anexo.getAnexoCaminho()));
            FileOutputStream fos = new FileOutputStream(new File(config.baseDir + ""/arquivos_upload_direto/"" + anexo.getAnexoCaminho()));
            IOUtils.copy(fis, fos);
            String txtHistorico = ""(Edição) -"" + anexo.getAnexoNome() + ""-"";
            txtHistorico += usuario.getUsuLogin();
            Historico historico = new Historico();
            historico.setCarteira(carteiraUsuario);
            historico.setDataHoraHistorico(new Date());
            historico.setHistorico(txtHistorico);
            historico.setDocumentoDetalhes(documentoDetalhes);
            historico.setUsuario(usuario);
            historicoService.save(historico);
            return deleteAnexoFromTemp(anexo);
        } catch (FileNotFoundException e) {
            System.out.println(""FileNotFoundException"");
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
            return false;
        } catch (Exception e) {
            System.out.println(""AnexoServiceImpl.copy ERRO DESCONHECIDO"");
            e.printStackTrace();
            return false;
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900033,1676011,6491370,"    ServiceDescription getServiceDescription() throws ConfigurationException {
        final XPath pathsXPath = this.xPathFactory.newXPath();
        try {
            final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE);
            final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT);
            ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName());
            Property[] serviceProperties = getServiceProperties(serviceDescriptionNode);
            builder.author(getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.CREATOR_ELEMENT));
            builder.classname(this.canonicalServiceName);
            builder.description(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.DESCRIPTION_ELEMENT));
            final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT);
            final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode);
            String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT);
            if (identifier == null || """".equals(identifier)) {
                try {
                    final MessageDigest identDigest = MessageDigest.getInstance(""MD5"");
                    identDigest.update(this.canonicalServiceName.getBytes());
                    final String versionInfo = (serviceVersion != null) ? serviceVersion : """";
                    identDigest.update(versionInfo.getBytes());
                    final URI toolIDURI = toolDescription.getIdentifier();
                    final String toolIdentifier = toolIDURI == null ? """" : toolIDURI.toString();
                    identDigest.update(toolIdentifier.getBytes());
                    final BigInteger md5hash = new BigInteger(identDigest.digest());
                    identifier = md5hash.toString(16);
                } catch (NoSuchAlgorithmException nsae) {
                    throw new RuntimeException(nsae);
                }
            }
            builder.identifier(identifier);
            builder.version(serviceVersion);
            builder.tool(toolDescription);
            builder.instructions(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT));
            builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT));
            builder.logo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.LOGO_ELEMENT));
            builder.serviceProvider(this.serviceProvider);
            final DBMigrationPathFactory migrationPathFactory = new DBMigrationPathFactory(this.configuration);
            final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths();
            builder.paths(MigrationPathConverter.toPlanetsPaths(migrationPaths));
            builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(new URI[0]));
            builder.parameters(getUniqueParameters(migrationPaths));
            builder.properties(serviceProperties);
            return builder.build();
        } catch (XPathExpressionException xPathExpressionException) {
            throw new ConfigurationException(String.format(""Failed parsing the '%s' element in the '%s' element."", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), xPathExpressionException);
        } catch (NullPointerException nullPointerException) {
            throw new ConfigurationException(String.format(""Failed parsing the '%s' element in the '%s' element."", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), nullPointerException);
        }
    }
","    @Override
    protected Object transform(Row inputs) throws FunctionException {
        StringBuffer buffer = new StringBuffer();
        for (IColumn c : inputs.getColumns()) {
            buffer.append(c.getValueAsString() + ""|"");
        }
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(buffer.toString().getBytes());
            byte[] hash = digest.digest();
            return getHex(hash);
        } catch (Exception e) {
            throw new FunctionException(e);
        }
    }
",True
900034,7492253,19307122,"    protected Connection openRelativeFile(String file) throws IOException {
        if (cachedBits == null) {
            cachedBits = new ByteArray(url.openConnection().getInputStream()).getBytes();
        }
        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(cachedBits));
        ZipEntry zentry;
        while (true) {
            zentry = zin.getNextEntry();
            if (zentry == null) {
                throw new IOException(""Couldn't find resource "" + file + "" in ZIP-file"");
            }
            if (zentry.getName().equals(file)) {
                return new Connection(zin, zentry.getSize());
            }
        }
    }
","    public static byte[] sendParamPost(String urlString, String param) {
        try {
            URL url = new URL(urlString + ""?"" + param);
            HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setDoOutput(true);
            urlConn.setDefaultUseCaches(false);
            urlConn.setDoInput(true);
            urlConn.setRequestMethod(""POST"");
            urlConn.connect();
            OutputStream ops = urlConn.getOutputStream();
            ops.close();
            InputStream is = urlConn.getInputStream();
            byte[] resultBytes = new byte[urlConn.getContentLength()];
            byte[] tempByte = new byte[1024];
            int length = 0;
            int index = 0;
            while ((length = is.read(tempByte)) != -1) {
                System.arraycopy(tempByte, 0, resultBytes, index, length);
                index += length;
            }
            is.close();
            return resultBytes;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
",False
900035,16579945,2168608,"    public he3Decode(String in_file) {
        try {
            File out = new File(in_file + extension);
            File in = new File(in_file);
            int file_size = (int) in.length();
            FileInputStream in_stream = new FileInputStream(in_file);
            out.createNewFile();
            FileOutputStream out_stream = new FileOutputStream(out.getName());
            ByteArrayOutputStream os = new ByteArrayOutputStream(file_size);
            byte byte_arr[] = new byte[8];
            int buff_size = byte_arr.length;
            int _fetched = 0;
            int _chars_read = 0;
            System.out.println(appname + "".\n"" + ""decoding: "" + in_file + ""\n"" + ""decoding to: "" + in_file + extension + ""\n"" + ""\nreading: "");
            while (_fetched < file_size) {
                _chars_read = in_stream.read(byte_arr, 0, buff_size);
                if (_chars_read == -1) break;
                os.write(byte_arr, 0, _chars_read);
                _fetched += _chars_read;
                System.out.print(""*"");
            }
            System.out.print(""\ndecoding: "");
            out_stream.write(_decode((ByteArrayOutputStream) os));
            System.out.print(""complete\n\n"");
        } catch (java.io.FileNotFoundException fnfEx) {
            System.err.println(""Exception: "" + fnfEx.getMessage());
        } catch (java.io.IOException ioEx) {
            System.err.println(""Exception: "" + ioEx.getMessage());
        }
    }
","    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_CONTACT""));
            pst.setInt(1, contact.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }
",False
900036,4005293,481375,"    public static String translate(String s, String type) {
        try {
            String result = null;
            URL url = new URL(""http://www.excite.co.jp/world/english/"");
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""before="" + URLEncoder.encode(s, ""SJIS"") + ""&wb_lp="");
            out.print(type);
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""SJIS""));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int textPos = inputLine.indexOf(""name=\""after\"""");
                if (textPos >= 0) {
                    int ltrPos = inputLine.indexOf("">"", textPos + 11);
                    if (ltrPos >= 0) {
                        int closePos = inputLine.indexOf(""<"", ltrPos + 1);
                        if (closePos >= 0) {
                            result = inputLine.substring(ltrPos + 1, closePos);
                            break;
                        } else {
                            result = inputLine.substring(ltrPos + 1);
                            break;
                        }
                    }
                }
            }
            in.close();
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
","    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }
",False
900037,438086,21264253,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public static String calculate(String str) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-256"");
            md.update(str.getBytes());
            byte byteData[] = md.digest();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException ex) {
            return null;
        }
    }
",False
900038,21704695,2245320,"    public String hmacSHA256(String message, byte[] key) {
        MessageDigest sha256 = null;
        try {
            sha256 = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            throw new java.lang.AssertionError(this.getClass().getName() + "".hmacSHA256(): SHA-256 algorithm not found!"");
        }
        if (key.length > 64) {
            sha256.update(key);
            key = sha256.digest();
            sha256.reset();
        }
        byte block[] = new byte[64];
        for (int i = 0; i < key.length; ++i) block[i] = key[i];
        for (int i = key.length; i < block.length; ++i) block[i] = 0;
        for (int i = 0; i < 64; ++i) block[i] ^= 0x36;
        sha256.update(block);
        try {
            sha256.update(message.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new java.lang.AssertionError(""ITunesU.hmacSH256(): UTF-8 encoding not supported!"");
        }
        byte[] hash = sha256.digest();
        sha256.reset();
        for (int i = 0; i < 64; ++i) block[i] ^= (0x36 ^ 0x5c);
        sha256.update(block);
        sha256.update(hash);
        hash = sha256.digest();
        char[] hexadecimals = new char[hash.length * 2];
        for (int i = 0; i < hash.length; ++i) {
            for (int j = 0; j < 2; ++j) {
                int value = (hash[i] >> (4 - 4 * j)) & 0xf;
                char base = (value < 10) ? ('0') : ('a' - 10);
                hexadecimals[i * 2 + j] = (char) (base + value);
            }
        }
        return new String(hexadecimals);
    }
","    void writeToFile(String dir, InputStream input, String fileName) throws FileNotFoundException, IOException {
        makeDirs(dir);
        FileOutputStream fo = null;
        try {
            System.out.println(Thread.currentThread().getName() + "" : "" + ""Writing file "" + fileName + "" to path "" + dir);
            File file = new File(dir, fileName);
            fo = new FileOutputStream(file);
            IOUtils.copy(input, fo);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Failed to write "" + fileName);
        }
    }
",False
900039,2673851,11656405,"    protected void initializeFromURL(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        String message = this.validateURLConnection(connection, DBASE_CONTENT_TYPES);
        if (message != null) {
            throw new IOException(message);
        }
        this.channel = Channels.newChannel(WWIO.getBufferedInputStream(connection.getInputStream()));
        this.initialize();
    }
","    public static String addWeibo(String weibo, File pic, String uid) throws Throwable {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""_surl"", """"));
        qparams.add(new BasicNameValuePair(""_t"", ""0""));
        qparams.add(new BasicNameValuePair(""location"", ""home""));
        qparams.add(new BasicNameValuePair(""module"", ""stissue""));
        if (pic != null) {
            String picId = upLoadImg(pic, uid);
            qparams.add(new BasicNameValuePair(""pic_id"", picId));
        }
        qparams.add(new BasicNameValuePair(""rank"", ""weibo""));
        qparams.add(new BasicNameValuePair(""text"", weibo));
        HttpPost post = getHttpPost(""http://weibo.com/aj/mblog/add?__rnd=1333611402611"", uid);
        UrlEncodedFormEntity params = new UrlEncodedFormEntity(qparams, HTTP.UTF_8);
        post.setEntity(params);
        HttpResponse response = client.execute(post);
        HttpEntity entity = response.getEntity();
        String content = EntityUtils.toString(entity, HTTP.UTF_8);
        post.abort();
        return content;
    }
",False
900040,10601019,11433309,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {
        int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte();
        if (startByte >= 0) {
            FileInputStream fis = new FileInputStream(file);
            FileChannel fc = fis.getChannel();
            ByteBuffer bb = ByteBuffer.allocate(startByte);
            fc.read(bb);
            FileOutputStream out = new FileOutputStream(outputFile);
            out.write(bb.array());
            out.close();
            fc.close();
            fis.close();
            return outputFile;
        }
        throw new TagNotFoundException(""There is no ID3v2Tag data in this file"");
    }
",True
900041,21386162,4579205,"    public void writeToFile(File file, File source) throws IOException {
        BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(file));
        BufferedInputStream bin = new BufferedInputStream(new FileInputStream(source));
        bin.skip(header.getHeaderEndingOffset());
        for (long i = 0; i < this.streamLength; i++) {
            bout.write(bin.read());
        }
        bin.close();
        bout.close();
    }
","    public static void copyFile(String source, String destination) throws IOException {
        File srcDir = new File(source);
        File[] files = srcDir.listFiles();
        FileChannel in = null;
        FileChannel out = null;
        for (File file : files) {
            try {
                in = new FileInputStream(file).getChannel();
                File outFile = new File(destination, file.getName());
                out = new FileOutputStream(outFile).getChannel();
                in.transferTo(0, in.size(), out);
            } finally {
                if (in != null) in.close();
                if (out != null) out.close();
            }
        }
    }
",True
900042,12894191,426705,"    @Override
    public void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String directURL = request.getRequestURL().toString();
        response.setCharacterEncoding(""gbk"");
        PrintWriter out = response.getWriter();
        try {
            directURL = urlTools.urlFilter(directURL, true);
            URL url = new URL(directURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""gbk""));
            String line;
            while ((line = in.readLine()) != null) {
                out.println(line);
            }
            in.close();
        } catch (Exception e) {
            out.println(""file not find"");
        }
        out.flush();
    }
","    private InputStream getPart() throws IOException {
        HttpGet get = new HttpGet(url);
        get.addHeader(""Range"", ""bytes="" + startAt + ""-"");
        HttpResponse res = client.execute(get);
        System.out.println(""requesting kBs from "" + startAt + ""     server reply:"" + res.getStatusLine());
        if (res.getStatusLine().getStatusCode() == 403 || res.getStatusLine().toString().toLowerCase().contains(""forbidden"")) {
            get.abort();
            get = new HttpGet(url);
            get.addHeader(""Range"", ""bytes="" + startAt + ""-"" + (startAt + downLimit));
            res = client.execute(get);
            System.out.println(""Again requesting from kBs "" + startAt + ""     server reply:"" + res.getStatusLine());
            startAt += downLimit;
        } else {
            complete = true;
        }
        return res.getEntity() == null ? null : res.getEntity().getContent();
    }
",False
900043,21456137,7300267,"    @TestTargetNew(level = TestLevel.COMPLETE, notes = """", method = ""getPeerPrincipal"", args = {  })
    public final void test_getPeerPrincipal() throws Exception {
        try {
            URL url = new URL(""https://localhost:55555"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                connection.getPeerPrincipal();
                fail(""IllegalStateException wasn't thrown"");
            } catch (IllegalStateException ise) {
            }
        } catch (Exception e) {
            fail(""Unexpected exception "" + e + "" for exception case"");
        }
        HttpsURLConnection con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.508"");
        try {
            Principal p = con.getPeerPrincipal();
            fail(""SSLPeerUnverifiedException wasn't thrown"");
        } catch (SSLPeerUnverifiedException e) {
        }
        con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.509"");
        try {
            Principal p = con.getPeerPrincipal();
            assertNotNull(p);
        } catch (Exception e) {
            fail(""Unexpected exception "" + e);
        }
    }
","    public void appendMessage(MimeMessage oMsg) throws FolderClosedException, StoreClosedException, MessagingException {
        if (DebugFile.trace) {
            DebugFile.writeln(""Begin DBFolder.appendMessage()"");
            DebugFile.incIdent();
        }
        final String EmptyString = """";
        if (!((DBStore) getStore()).isConnected()) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new StoreClosedException(getStore(), ""Store is not connected"");
        }
        if (0 == (iOpenMode & READ_WRITE)) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, ""Folder is not open is READ_WRITE mode"");
        }
        if ((0 == (iOpenMode & MODE_MBOX)) && (0 == (iOpenMode & MODE_BLOB))) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new javax.mail.FolderClosedException(this, ""Folder is not open in MBOX nor BLOB mode"");
        }
        String gu_mimemsg;
        if (oMsg.getClass().getName().equals(""com.knowgate.hipermail.DBMimeMessage"")) {
            gu_mimemsg = ((DBMimeMessage) oMsg).getMessageGuid();
            if (((DBMimeMessage) oMsg).getFolder() == null) ((DBMimeMessage) oMsg).setFolder(this);
        } else {
            gu_mimemsg = Gadgets.generateUUID();
        }
        String gu_workarea = ((DBStore) getStore()).getUser().getString(DB.gu_workarea);
        int iSize = oMsg.getSize();
        if (DebugFile.trace) DebugFile.writeln(""MimeMessage.getSize() = "" + String.valueOf(iSize));
        String sContentType, sContentID, sMessageID, sDisposition, sContentMD5, sDescription, sFileName, sEncoding, sSubject, sPriority, sMsgCharSeq;
        long lPosition = -1;
        try {
            sMessageID = oMsg.getMessageID();
            if (sMessageID == null || EmptyString.equals(sMessageID)) {
                try {
                    sMessageID = oMsg.getHeader(""X-Qmail-Scanner-Message-ID"", null);
                } catch (Exception ignore) {
                }
            }
            if (sMessageID != null) sMessageID = MimeUtility.decodeText(sMessageID);
            sContentType = oMsg.getContentType();
            if (sContentType != null) sContentType = MimeUtility.decodeText(sContentType);
            sContentID = oMsg.getContentID();
            if (sContentID != null) sContentID = MimeUtility.decodeText(sContentID);
            sDisposition = oMsg.getDisposition();
            if (sDisposition != null) sDisposition = MimeUtility.decodeText(sDisposition);
            sContentMD5 = oMsg.getContentMD5();
            if (sContentMD5 != null) sContentMD5 = MimeUtility.decodeText(sContentMD5);
            sDescription = oMsg.getDescription();
            if (sDescription != null) sDescription = MimeUtility.decodeText(sDescription);
            sFileName = oMsg.getFileName();
            if (sFileName != null) sFileName = MimeUtility.decodeText(sFileName);
            sEncoding = oMsg.getEncoding();
            if (sEncoding != null) sEncoding = MimeUtility.decodeText(sEncoding);
            sSubject = oMsg.getSubject();
            if (sSubject != null) sSubject = MimeUtility.decodeText(sSubject);
            sPriority = null;
            sMsgCharSeq = null;
        } catch (UnsupportedEncodingException uee) {
            throw new MessagingException(uee.getMessage(), uee);
        }
        BigDecimal dPgMessage = null;
        try {
            dPgMessage = getNextMessage();
        } catch (SQLException sqle) {
            throw new MessagingException(sqle.getMessage(), sqle);
        }
        String sBoundary = getPartsBoundary(oMsg);
        if (DebugFile.trace) DebugFile.writeln(""part boundary is \"""" + (sBoundary == null ? ""null"" : sBoundary) + ""\"""");
        if (sMessageID == null) sMessageID = gu_mimemsg; else if (sMessageID.length() == 0) sMessageID = gu_mimemsg;
        Timestamp tsSent;
        if (oMsg.getSentDate() != null) tsSent = new Timestamp(oMsg.getSentDate().getTime()); else tsSent = null;
        Timestamp tsReceived;
        if (oMsg.getReceivedDate() != null) tsReceived = new Timestamp(oMsg.getReceivedDate().getTime()); else tsReceived = new Timestamp(new java.util.Date().getTime());
        try {
            String sXPriority = oMsg.getHeader(""X-Priority"", null);
            if (sXPriority == null) sPriority = null; else {
                sPriority = """";
                for (int x = 0; x < sXPriority.length(); x++) {
                    char cAt = sXPriority.charAt(x);
                    if (cAt >= (char) 48 || cAt <= (char) 57) sPriority += cAt;
                }
                sPriority = Gadgets.left(sPriority, 10);
            }
        } catch (MessagingException msge) {
            if (DebugFile.trace) DebugFile.writeln(""MessagingException "" + msge.getMessage());
        }
        boolean bIsSpam = false;
        try {
            String sXSpam = oMsg.getHeader(""X-Spam-Flag"", null);
            if (sXSpam != null) bIsSpam = (sXSpam.toUpperCase().indexOf(""YES"") >= 0 || sXSpam.toUpperCase().indexOf(""TRUE"") >= 0 || sXSpam.indexOf(""1"") >= 0);
        } catch (MessagingException msge) {
            if (DebugFile.trace) DebugFile.writeln(""MessagingException "" + msge.getMessage());
        }
        if (DebugFile.trace) DebugFile.writeln(""MimeMessage.getFrom()"");
        Address[] aFrom = null;
        try {
            aFrom = oMsg.getFrom();
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln(""From AddressException "" + adre.getMessage());
        }
        InternetAddress oFrom;
        if (aFrom != null) {
            if (aFrom.length > 0) oFrom = (InternetAddress) aFrom[0]; else oFrom = null;
        } else oFrom = null;
        if (DebugFile.trace) DebugFile.writeln(""MimeMessage.getReplyTo()"");
        Address[] aReply = null;
        InternetAddress oReply;
        try {
            aReply = oMsg.getReplyTo();
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln(""Reply-To AddressException "" + adre.getMessage());
        }
        if (aReply != null) {
            if (aReply.length > 0) oReply = (InternetAddress) aReply[0]; else oReply = null;
        } else {
            if (DebugFile.trace) DebugFile.writeln(""no reply-to address found"");
            oReply = null;
        }
        if (DebugFile.trace) DebugFile.writeln(""MimeMessage.getRecipients()"");
        Address[] oTo = null;
        Address[] oCC = null;
        Address[] oBCC = null;
        try {
            oTo = oMsg.getRecipients(MimeMessage.RecipientType.TO);
            oCC = oMsg.getRecipients(MimeMessage.RecipientType.CC);
            oBCC = oMsg.getRecipients(MimeMessage.RecipientType.BCC);
        } catch (AddressException adre) {
            if (DebugFile.trace) DebugFile.writeln(""Recipient AddressException "" + adre.getMessage());
        }
        Properties pFrom = new Properties(), pTo = new Properties(), pCC = new Properties(), pBCC = new Properties();
        if (DebugFile.trace) DebugFile.writeln(""MimeMessage.getFlags()"");
        Flags oFlgs = oMsg.getFlags();
        if (oFlgs == null) oFlgs = new Flags();
        MimePart oText = null;
        ByteArrayOutputStream byOutStrm = null;
        File oFile = null;
        MboxFile oMBox = null;
        if ((iOpenMode & MODE_MBOX) != 0) {
            try {
                if (DebugFile.trace) DebugFile.writeln(""new File("" + Gadgets.chomp(sFolderDir, File.separator) + oCatg.getStringNull(DB.nm_category, ""null"") + "".mbox)"");
                oFile = getFile();
                lPosition = oFile.length();
                if (DebugFile.trace) DebugFile.writeln(""message position is "" + String.valueOf(lPosition));
                oMBox = new MboxFile(oFile, MboxFile.READ_WRITE);
                if (DebugFile.trace) DebugFile.writeln(""new ByteArrayOutputStream("" + String.valueOf(iSize > 0 ? iSize : 16000) + "")"");
                byOutStrm = new ByteArrayOutputStream(iSize > 0 ? iSize : 16000);
                oMsg.writeTo(byOutStrm);
                sMsgCharSeq = byOutStrm.toString(""ISO8859_1"");
                byOutStrm.close();
            } catch (IOException ioe) {
                try {
                    if (oMBox != null) oMBox.close();
                } catch (Exception ignore) {
                }
                if (DebugFile.trace) DebugFile.decIdent();
                throw new MessagingException(ioe.getMessage(), ioe);
            }
        }
        try {
            if (oMsg.getClass().getName().equals(""com.knowgate.hipermail.DBMimeMessage"")) oText = ((DBMimeMessage) oMsg).getBody(); else {
                oText = new DBMimeMessage(oMsg).getBody();
            }
            if (DebugFile.trace) DebugFile.writeln(""ByteArrayOutputStream byOutStrm = new ByteArrayOutputStream("" + oText.getSize() + "")"");
            byOutStrm = new ByteArrayOutputStream(oText.getSize() > 0 ? oText.getSize() : 8192);
            oText.writeTo(byOutStrm);
            if (null == sContentMD5) {
                MD5 oMd5 = new MD5();
                oMd5.Init();
                oMd5.Update(byOutStrm.toByteArray());
                sContentMD5 = Gadgets.toHexString(oMd5.Final());
                oMd5 = null;
            }
        } catch (IOException ioe) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException(""IOException "" + ioe.getMessage(), ioe);
        } catch (OutOfMemoryError oom) {
            if (DebugFile.trace) DebugFile.decIdent();
            throw new MessagingException(""OutOfMemoryError "" + oom.getMessage());
        }
        String sSQL = ""INSERT INTO "" + DB.k_mime_msgs + ""(gu_mimemsg,gu_workarea,gu_category,id_type,id_content,id_message,id_disposition,len_mimemsg,tx_md5,de_mimemsg,file_name,tx_encoding,tx_subject,dt_sent,dt_received,tx_email_from,nm_from,tx_email_reply,nm_to,id_priority,bo_answered,bo_deleted,bo_draft,bo_flagged,bo_recent,bo_seen,bo_spam,pg_message,nu_position,by_content) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"";
        if (DebugFile.trace) DebugFile.writeln(""Connection.prepareStatement("" + sSQL + "")"");
        PreparedStatement oStmt = null;
        try {
            oStmt = oConn.prepareStatement(sSQL);
            oStmt.setString(1, gu_mimemsg);
            oStmt.setString(2, gu_workarea);
            if (oCatg.isNull(DB.gu_category)) oStmt.setNull(3, Types.CHAR); else oStmt.setString(3, oCatg.getString(DB.gu_category));
            oStmt.setString(4, Gadgets.left(sContentType, 254));
            oStmt.setString(5, Gadgets.left(sContentID, 254));
            oStmt.setString(6, Gadgets.left(sMessageID, 254));
            oStmt.setString(7, Gadgets.left(sDisposition, 100));
            if ((iOpenMode & MODE_MBOX) != 0) {
                iSize = sMsgCharSeq.length();
                oStmt.setInt(8, iSize);
            } else {
                if (iSize >= 0) oStmt.setInt(8, iSize); else oStmt.setNull(8, Types.INTEGER);
            }
            oStmt.setString(9, Gadgets.left(sContentMD5, 32));
            oStmt.setString(10, Gadgets.left(sDescription, 254));
            oStmt.setString(11, Gadgets.left(sFileName, 254));
            oStmt.setString(12, Gadgets.left(sEncoding, 16));
            oStmt.setString(13, Gadgets.left(sSubject, 254));
            oStmt.setTimestamp(14, tsSent);
            oStmt.setTimestamp(15, tsReceived);
            if (null == oFrom) {
                oStmt.setNull(16, Types.VARCHAR);
                oStmt.setNull(17, Types.VARCHAR);
            } else {
                oStmt.setString(16, Gadgets.left(oFrom.getAddress(), 254));
                oStmt.setString(17, Gadgets.left(oFrom.getPersonal(), 254));
            }
            if (null == oReply) oStmt.setNull(18, Types.VARCHAR); else oStmt.setString(18, Gadgets.left(oReply.getAddress(), 254));
            Address[] aRecipients;
            String sRecipientName;
            aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.TO);
            if (null != aRecipients) if (aRecipients.length == 0) aRecipients = null;
            if (null != aRecipients) {
                sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                oStmt.setString(19, Gadgets.left(sRecipientName, 254));
            } else {
                aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.CC);
                if (null != aRecipients) {
                    if (aRecipients.length > 0) {
                        sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                        if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                        oStmt.setString(19, Gadgets.left(sRecipientName, 254));
                    } else oStmt.setNull(19, Types.VARCHAR);
                } else {
                    aRecipients = oMsg.getRecipients(MimeMessage.RecipientType.BCC);
                    if (null != aRecipients) {
                        if (aRecipients.length > 0) {
                            sRecipientName = ((InternetAddress) aRecipients[0]).getPersonal();
                            if (null == sRecipientName) sRecipientName = ((InternetAddress) aRecipients[0]).getAddress();
                            oStmt.setString(19, Gadgets.left(sRecipientName, 254));
                        } else oStmt.setNull(19, Types.VARCHAR);
                    } else {
                        oStmt.setNull(19, Types.VARCHAR);
                    }
                }
            }
            if (null == sPriority) oStmt.setNull(20, Types.VARCHAR); else oStmt.setString(20, sPriority);
            if (oConn.getDataBaseProduct() == JDCConnection.DBMS_ORACLE) {
                if (DebugFile.trace) DebugFile.writeln(""PreparedStatement.setBigDecimal(21, ...)"");
                oStmt.setBigDecimal(21, new BigDecimal(oFlgs.contains(Flags.Flag.ANSWERED) ? ""1"" : ""0""));
                oStmt.setBigDecimal(22, new BigDecimal(oFlgs.contains(Flags.Flag.DELETED) ? ""1"" : ""0""));
                oStmt.setBigDecimal(23, new BigDecimal(0));
                oStmt.setBigDecimal(24, new BigDecimal(oFlgs.contains(Flags.Flag.FLAGGED) ? ""1"" : ""0""));
                oStmt.setBigDecimal(25, new BigDecimal(oFlgs.contains(Flags.Flag.RECENT) ? ""1"" : ""0""));
                oStmt.setBigDecimal(26, new BigDecimal(oFlgs.contains(Flags.Flag.SEEN) ? ""1"" : ""0""));
                oStmt.setBigDecimal(27, new BigDecimal(bIsSpam ? ""1"" : ""0""));
                oStmt.setBigDecimal(28, dPgMessage);
                if ((iOpenMode & MODE_MBOX) != 0) oStmt.setBigDecimal(29, new BigDecimal(lPosition)); else oStmt.setNull(29, Types.NUMERIC);
                if (DebugFile.trace) DebugFile.writeln(""PreparedStatement.setBinaryStream(30, new ByteArrayInputStream("" + String.valueOf(byOutStrm.size()) + ""))"");
                if (byOutStrm.size() > 0) oStmt.setBinaryStream(30, new ByteArrayInputStream(byOutStrm.toByteArray()), byOutStrm.size()); else oStmt.setNull(30, Types.LONGVARBINARY);
            } else {
                if (DebugFile.trace) DebugFile.writeln(""PreparedStatement.setShort(21, ...)"");
                oStmt.setShort(21, (short) (oFlgs.contains(Flags.Flag.ANSWERED) ? 1 : 0));
                oStmt.setShort(22, (short) (oFlgs.contains(Flags.Flag.DELETED) ? 1 : 0));
                oStmt.setShort(23, (short) (0));
                oStmt.setShort(24, (short) (oFlgs.contains(Flags.Flag.FLAGGED) ? 1 : 0));
                oStmt.setShort(25, (short) (oFlgs.contains(Flags.Flag.RECENT) ? 1 : 0));
                oStmt.setShort(26, (short) (oFlgs.contains(Flags.Flag.SEEN) ? 1 : 0));
                oStmt.setShort(27, (short) (bIsSpam ? 1 : 0));
                oStmt.setBigDecimal(28, dPgMessage);
                if ((iOpenMode & MODE_MBOX) != 0) oStmt.setBigDecimal(29, new BigDecimal(lPosition)); else oStmt.setNull(29, Types.NUMERIC);
                if (DebugFile.trace) DebugFile.writeln(""PreparedStatement.setBinaryStream(30, new ByteArrayInputStream("" + String.valueOf(byOutStrm.size()) + ""))"");
                if (byOutStrm.size() > 0) oStmt.setBinaryStream(30, new ByteArrayInputStream(byOutStrm.toByteArray()), byOutStrm.size()); else oStmt.setNull(30, Types.LONGVARBINARY);
            }
            if (DebugFile.trace) DebugFile.writeln(""Statement.executeUpdate()"");
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
        } catch (SQLException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(DB.k_mime_msgs + "" "" + sqle.getMessage(), sqle);
        }
        if ((iOpenMode & MODE_BLOB) != 0) {
            try {
                byOutStrm.close();
            } catch (IOException ignore) {
            }
            byOutStrm = null;
        }
        try {
            Object oContent = oMsg.getContent();
            if (oContent instanceof MimeMultipart) {
                try {
                    saveMimeParts(oMsg, sMsgCharSeq, sBoundary, gu_mimemsg, sMessageID, dPgMessage.intValue(), 0);
                } catch (MessagingException msge) {
                    try {
                        if (oMBox != null) oMBox.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        oConn.rollback();
                    } catch (Exception ignore) {
                    }
                    throw new MessagingException(msge.getMessage(), msge.getNextException());
                }
            }
        } catch (Exception xcpt) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(""MimeMessage.getContent() "" + xcpt.getMessage(), xcpt);
        }
        sSQL = ""SELECT "" + DB.gu_contact + "","" + DB.gu_company + "","" + DB.tx_name + "","" + DB.tx_surname + "","" + DB.tx_surname + "" FROM "" + DB.k_member_address + "" WHERE "" + DB.tx_email + ""=? AND "" + DB.gu_workarea + ""=? UNION SELECT "" + DB.gu_user + "",'****************************USER',"" + DB.nm_user + "","" + DB.tx_surname1 + "","" + DB.tx_surname2 + "" FROM "" + DB.k_users + "" WHERE ("" + DB.tx_main_email + ""=? OR "" + DB.tx_alt_email + ""=?) AND "" + DB.gu_workarea + ""=?"";
        if (DebugFile.trace) DebugFile.writeln(""Connection.prepareStatement("" + sSQL + "")"");
        PreparedStatement oAddr = null;
        try {
            oAddr = oConn.prepareStatement(sSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet oRSet;
            InternetAddress oInetAdr;
            String sTxEmail, sGuCompany, sGuContact, sGuUser, sTxName, sTxSurname1, sTxSurname2, sTxPersonal;
            if (oFrom != null) {
                oAddr.setString(1, oFrom.getAddress());
                oAddr.setString(2, gu_workarea);
                oAddr.setString(3, oFrom.getAddress());
                oAddr.setString(4, oFrom.getAddress());
                oAddr.setString(5, gu_workarea);
                oRSet = oAddr.executeQuery();
                if (oRSet.next()) {
                    sGuContact = oRSet.getString(1);
                    if (oRSet.wasNull()) sGuContact = ""null"";
                    sGuCompany = oRSet.getString(2);
                    if (oRSet.wasNull()) sGuCompany = ""null"";
                    if (sGuCompany.equals(""****************************USER"")) {
                        sTxName = oRSet.getString(3);
                        if (oRSet.wasNull()) sTxName = """";
                        sTxSurname1 = oRSet.getString(4);
                        if (oRSet.wasNull()) sTxSurname1 = """";
                        sTxSurname2 = oRSet.getString(4);
                        if (oRSet.wasNull()) sTxSurname2 = """";
                        sTxPersonal = Gadgets.left(sTxName + "" "" + sTxSurname1 + "" "" + sTxSurname2, 254).replace(',', ' ').trim();
                    } else sTxPersonal = ""null"";
                    pFrom.put(oFrom.getAddress(), sGuContact + "","" + sGuCompany + "","" + sTxPersonal);
                } else pFrom.put(oFrom.getAddress(), ""null,null,null"");
                oRSet.close();
            }
            if (DebugFile.trace) DebugFile.writeln(""from count = "" + pFrom.size());
            if (oTo != null) {
                for (int t = 0; t < oTo.length; t++) {
                    oInetAdr = (InternetAddress) oTo[t];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = ""null"";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = ""null"";
                        if (sGuCompany.equals(""****************************USER"")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = """";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = """";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = """";
                            sTxPersonal = Gadgets.left(sTxName + "" "" + sTxSurname1 + "" "" + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = ""null"";
                        pTo.put(sTxEmail, sGuContact + "","" + sGuCompany + "","" + sTxPersonal);
                    } else pTo.put(sTxEmail, ""null,null,null"");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln(""to count = "" + pTo.size());
            if (oCC != null) {
                for (int c = 0; c < oCC.length; c++) {
                    oInetAdr = (InternetAddress) oCC[c];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = ""null"";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = ""null"";
                        if (sGuCompany.equals(""****************************USER"")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = """";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = """";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = """";
                            sTxPersonal = Gadgets.left(sTxName + "" "" + sTxSurname1 + "" "" + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = ""null"";
                        pCC.put(sTxEmail, sGuContact + "","" + sGuCompany + "","" + sTxPersonal);
                    } else pCC.put(sTxEmail, ""null,null,null"");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln(""cc count = "" + pCC.size());
            if (oBCC != null) {
                for (int b = 0; b < oBCC.length; b++) {
                    oInetAdr = (InternetAddress) oBCC[b];
                    sTxEmail = Gadgets.left(oInetAdr.getAddress(), 254);
                    oAddr.setString(1, sTxEmail);
                    oAddr.setString(2, gu_workarea);
                    oAddr.setString(3, sTxEmail);
                    oAddr.setString(4, sTxEmail);
                    oAddr.setString(5, gu_workarea);
                    oRSet = oAddr.executeQuery();
                    if (oRSet.next()) {
                        sGuContact = oRSet.getString(1);
                        if (oRSet.wasNull()) sGuContact = ""null"";
                        sGuCompany = oRSet.getString(2);
                        if (oRSet.wasNull()) sGuCompany = ""null"";
                        if (sGuCompany.equals(""****************************USER"")) {
                            sTxName = oRSet.getString(3);
                            if (oRSet.wasNull()) sTxName = """";
                            sTxSurname1 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname1 = """";
                            sTxSurname2 = oRSet.getString(4);
                            if (oRSet.wasNull()) sTxSurname2 = """";
                            sTxPersonal = Gadgets.left(sTxName + "" "" + sTxSurname1 + "" "" + sTxSurname2, 254).replace(',', ' ').trim();
                        } else sTxPersonal = ""null"";
                        pBCC.put(sTxEmail, sGuContact + "","" + sGuCompany);
                    } else pBCC.put(sTxEmail, ""null,null,null"");
                    oRSet.close();
                }
            }
            if (DebugFile.trace) DebugFile.writeln(""bcc count = "" + pBCC.size());
            oAddr.close();
            sSQL = ""INSERT INTO "" + DB.k_inet_addrs + "" (gu_mimemsg,id_message,tx_email,tp_recipient,gu_user,gu_contact,gu_company,tx_personal) VALUES ('"" + gu_mimemsg + ""','"" + sMessageID + ""',?,?,?,?,?,?)"";
            if (DebugFile.trace) DebugFile.writeln(""Connection.prepareStatement("" + sSQL + "")"");
            oStmt = oConn.prepareStatement(sSQL);
            java.util.Enumeration oMailEnum;
            String[] aRecipient;
            if (!pFrom.isEmpty()) {
                oMailEnum = pFrom.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pFrom.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, ""from"");
                    if (aRecipient[0].equals(""null"") && aRecipient[1].equals(""null"")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals(""****************************USER"")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals(""null"") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals(""null"") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals(""null"")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln(""Statement.executeUpdate()"");
                    oStmt.executeUpdate();
                }
            }
            if (!pTo.isEmpty()) {
                oMailEnum = pTo.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pTo.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, ""to"");
                    if (aRecipient[0].equals(""null"") && aRecipient[1].equals(""null"")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals(""****************************USER"")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals(""null"") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals(""null"") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals(""null"")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln(""Statement.executeUpdate()"");
                    oStmt.executeUpdate();
                }
            }
            if (!pCC.isEmpty()) {
                oMailEnum = pCC.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pCC.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, ""cc"");
                    if (aRecipient[0].equals(""null"") && aRecipient[1].equals(""null"")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals(""****************************USER"")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setString(4, null);
                        oStmt.setString(5, null);
                    } else {
                        oStmt.setString(3, null);
                        oStmt.setString(4, aRecipient[0].equals(""null"") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals(""null"") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals(""null"")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    if (DebugFile.trace) DebugFile.writeln(""Statement.executeUpdate()"");
                    oStmt.executeUpdate();
                }
            }
            if (!pBCC.isEmpty()) {
                oMailEnum = pBCC.keys();
                while (oMailEnum.hasMoreElements()) {
                    sTxEmail = (String) oMailEnum.nextElement();
                    aRecipient = Gadgets.split(pBCC.getProperty(sTxEmail), ',');
                    oStmt.setString(1, sTxEmail);
                    oStmt.setString(2, ""bcc"");
                    if (aRecipient[0].equals(""null"") && aRecipient[1].equals(""null"")) {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else if (aRecipient[1].equals(""****************************USER"")) {
                        oStmt.setString(3, aRecipient[0]);
                        oStmt.setNull(4, Types.CHAR);
                        oStmt.setNull(5, Types.CHAR);
                    } else {
                        oStmt.setNull(3, Types.CHAR);
                        oStmt.setString(4, aRecipient[0].equals(""null"") ? null : aRecipient[0]);
                        oStmt.setString(5, aRecipient[1].equals(""null"") ? null : aRecipient[1]);
                    }
                    if (aRecipient[2].equals(""null"")) oStmt.setNull(6, Types.VARCHAR); else oStmt.setString(6, aRecipient[2]);
                    oStmt.executeUpdate();
                }
            }
            oStmt.close();
            oStmt = null;
            oStmt = oConn.prepareStatement(""UPDATE "" + DB.k_categories + "" SET "" + DB.len_size + ""="" + DB.len_size + ""+"" + String.valueOf(iSize) + "" WHERE "" + DB.gu_category + ""=?"");
            oStmt.setString(1, getCategory().getString(DB.gu_category));
            oStmt.executeUpdate();
            oStmt.close();
            oStmt = null;
            if ((iOpenMode & MODE_MBOX) != 0) {
                if (DebugFile.trace) DebugFile.writeln(""MboxFile.appendMessage("" + (oMsg.getContentID() != null ? oMsg.getContentID() : """") + "")"");
                oMBox.appendMessage(sMsgCharSeq);
                oMBox.close();
                oMBox = null;
            }
            if (DebugFile.trace) DebugFile.writeln(""Connection.commit()"");
            oConn.commit();
        } catch (SQLException sqle) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oAddr) oAddr.close();
                oAddr = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(sqle.getMessage(), sqle);
        } catch (IOException ioe) {
            try {
                if (oMBox != null) oMBox.close();
            } catch (Exception ignore) {
            }
            try {
                if (null != oStmt) oStmt.close();
                oStmt = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oAddr) oAddr.close();
                oAddr = null;
            } catch (Exception ignore) {
            }
            try {
                if (null != oConn) oConn.rollback();
            } catch (Exception ignore) {
            }
            throw new MessagingException(ioe.getMessage(), ioe);
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln(""End DBFolder.appendMessage() : "" + gu_mimemsg);
        }
    }
",False
900044,7760990,17261985,"    public DatabaseDefinitionFactory(final DBIf db, final String adapter) throws IOException {
        _db = db;
        LOG.debug(""Loading adapter: "" + adapter);
        final URL url = getClass().getClassLoader().getResource(""adapter/"" + adapter + "".properties"");
        _props = new Properties();
        _props.load(url.openStream());
        if (adapter.equals(""mysql"")) {
            _modifier = new MySQLModifier(this);
        } else if (adapter.equals(""postgresql"")) {
            _modifier = new PostgresModifier(this);
        } else if (adapter.equals(""hypersonic"")) {
            _modifier = new HSQLModifier(this);
        } else if (adapter.equals(""oracle"")) {
            _modifier = new OracleModifier(this);
        } else if (adapter.equals(""mssql"")) {
            _modifier = new MSSQLModifier(this);
        } else {
            _modifier = null;
        }
    }
","    public int doEndTag() throws JspException {
        HttpSession session = pageContext.getSession();
        try {
            IntactUserI user = (IntactUserI) session.getAttribute(Constants.USER_KEY);
            String urlStr = user.getSourceURL();
            if (urlStr == null) {
                return EVAL_PAGE;
            }
            URL url = null;
            try {
                url = new URL(urlStr);
            } catch (MalformedURLException me) {
                String decodedUrl = URLDecoder.decode(urlStr, ""UTF-8"");
                pageContext.getOut().write(""The source is malformed : <a href=\"""" + decodedUrl + ""\"" target=\""_blank\"">"" + decodedUrl + ""</a>"");
                return EVAL_PAGE;
            }
            StringBuffer httpContent = new StringBuffer();
            httpContent.append(""<!-- URL : "" + urlStr + ""-->"");
            String tmpLine;
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                while ((tmpLine = reader.readLine()) != null) {
                    httpContent.append(tmpLine);
                }
                reader.close();
            } catch (IOException ioe) {
                user.resetSourceURL();
                String decodedUrl = URLDecoder.decode(urlStr, ""UTF-8"");
                pageContext.getOut().write(""Unable to display the source at : <a href=\"""" + decodedUrl + ""\"" target=\""_blank\"">"" + decodedUrl + ""</a>"");
                return EVAL_PAGE;
            }
            pageContext.getOut().write(httpContent.toString());
        } catch (Exception e) {
            e.printStackTrace();
            throw new JspException(""Error when trying to get HTTP content"");
        }
        return EVAL_PAGE;
    }
",True
900045,6214331,441377,"    public static void copyFile(File src, File dest) {
        try {
            FileInputStream in = new FileInputStream(src);
            FileOutputStream out = new FileOutputStream(dest);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(ioe);
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900046,2791310,14856221,"    protected synchronized AbstractBaseObject insert(AbstractBaseObject obj) throws ApplicationException {
        PreparedStatement preStat = null;
        StringBuffer sqlStat = new StringBuffer();
        DmsRelationalWord tmpDmsRelationalWord = (DmsRelationalWord) ((DmsRelationalWord) obj).clone();
        synchronized (dbConn) {
            try {
                Integer nextID = getNextPrimaryID();
                Timestamp currTime = Utility.getCurrentTimestamp();
                sqlStat.append(""INSERT "");
                sqlStat.append(""INTO   DMS_RELATIONAL_WORD(ID, RECORD_STATUS, UPDATE_COUNT, CREATOR_ID, CREATE_DATE, UPDATER_ID, UPDATE_DATE, WORD, PARENT_ID, TYPE) "");
                sqlStat.append(""VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "");
                preStat = dbConn.prepareStatement(sqlStat.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                setPrepareStatement(preStat, 1, nextID);
                setPrepareStatement(preStat, 2, tmpDmsRelationalWord.getRecordStatus());
                setPrepareStatement(preStat, 3, new Integer(0));
                setPrepareStatement(preStat, 4, tmpDmsRelationalWord.getCreatorID());
                setPrepareStatement(preStat, 5, currTime);
                setPrepareStatement(preStat, 6, tmpDmsRelationalWord.getUpdaterID());
                setPrepareStatement(preStat, 7, currTime);
                if (tmpDmsRelationalWord.getWord() == null || """".equals(tmpDmsRelationalWord.getWord().trim())) {
                    return null;
                }
                setPrepareStatement(preStat, 8, tmpDmsRelationalWord.getWord());
                setPrepareStatement(preStat, 9, tmpDmsRelationalWord.getParentID());
                setPrepareStatement(preStat, 10, tmpDmsRelationalWord.getType());
                preStat.executeUpdate();
                tmpDmsRelationalWord.setID(nextID);
                tmpDmsRelationalWord.setCreatorID(tmpDmsRelationalWord.getCreatorID());
                tmpDmsRelationalWord.setCreateDate(currTime);
                tmpDmsRelationalWord.setUpdaterID(tmpDmsRelationalWord.getUpdaterID());
                tmpDmsRelationalWord.setUpdateDate(currTime);
                tmpDmsRelationalWord.setUpdateCount(new Integer(0));
                tmpDmsRelationalWord.setCreatorName(UserInfoFactory.getUserFullName(tmpDmsRelationalWord.getCreatorID()));
                tmpDmsRelationalWord.setUpdaterName(UserInfoFactory.getUserFullName(tmpDmsRelationalWord.getUpdaterID()));
                dbConn.commit();
                return (tmpDmsRelationalWord);
            } catch (Exception e) {
                try {
                    dbConn.rollback();
                } catch (Exception ee) {
                }
                log.error(e, e);
                throw new ApplicationException(ErrorConstant.DB_INSERT_ERROR, e);
            } finally {
                try {
                    preStat.close();
                } catch (Exception ignore) {
                } finally {
                    preStat = null;
                }
            }
        }
    }
","    public static String encodeByMd5(String str) {
        try {
            if (str == null) {
                str = """";
            }
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes(""utf-8""));
            byte[] b = md5.digest();
            int i;
            StringBuffer buff = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i += 256;
                }
                if (i < 16) {
                    buff.append(""0"");
                }
                buff.append(Integer.toHexString(i));
            }
            return buff.toString();
        } catch (Exception e) {
            return str;
        }
    }
",False
900047,10467996,23641084,"    public void copyFile(String oldPath, String newPath) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPath);
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            System.out.println(""复制单个文件操作出错"");
            e.printStackTrace();
        }
    }
","    @Override
    public void run() {
        EventType type = event.getEventType();
        IBaseObject field = event.getField();
        log.info(""select----->"" + field.getAttribute(IDatafield.URL));
        try {
            IParent parent = field.getParent();
            String name = field.getName();
            if (type == EventType.ON_BTN_CLICK) {
                invoke(parent, ""eventRule_"" + name);
                Object value = event.get(Event.ARG_VALUE);
                if (value != null && value instanceof String[]) {
                    String[] args = (String[]) value;
                    for (String arg : args) log.info(""argument data: "" + arg);
                }
            } else if (type == EventType.ON_BEFORE_DOWNLOAD) invoke(parent, ""eventRule_"" + name); else if (type == EventType.ON_VALUE_CHANGE) {
                String pattern = (String) event.get(Event.ARG_PATTERN);
                Object value = event.get(Event.ARG_VALUE);
                Class cls = field.getDataType();
                if (cls == null || value == null || value.getClass().equals(cls)) field.setValue(value); else if (pattern == null) field.setValue(ConvertUtils.convert(value.toString(), cls)); else if (Date.class.isAssignableFrom(cls)) field.setValue(new SimpleDateFormat(pattern).parse((String) value)); else if (Number.class.isAssignableFrom(cls)) field.setValue(new DecimalFormat(pattern).parse((String) value)); else field.setValue(new MessageFormat(pattern).parse((String) value));
                invoke(parent, ""checkRule_"" + name);
                invoke(parent, ""defaultRule_"" + name);
            } else if (type == EventType.ON_ROW_SELECTED) {
                log.info(""table row selected."");
                Object selected = event.get(Event.ARG_ROW_INDEX);
                if (selected instanceof Integer) presentation.setSelectedRowIndex((IModuleList) field, (Integer) selected); else if (selected instanceof List) {
                    String s = """";
                    String conn = """";
                    for (Integer item : (List<Integer>) selected) {
                        s = s + conn + item;
                        conn = "","";
                    }
                    log.info(""row "" + s + "" line(s) been selected."");
                }
            } else if (type == EventType.ON_ROW_DBLCLICK) {
                log.info(""table row double-clicked."");
                presentation.setSelectedRowIndex((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX));
            } else if (type == EventType.ON_ROW_INSERT) {
                log.info(""table row inserted."");
                listAdd((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX));
            } else if (type == EventType.ON_ROW_REMOVE) {
                log.info(""table row removed."");
                listRemove((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX));
            } else if (type == EventType.ON_FILE_UPLOAD) {
                log.info(""file uploaded."");
                InputStream is = (InputStream) event.get(Event.ARG_VALUE);
                String uploadFileName = (String) event.get(Event.ARG_FILE_NAME);
                log.info(""<-----file name:"" + uploadFileName);
                OutputStream os = (OutputStream) field.getValue();
                IOUtils.copy(is, os);
                is.close();
                os.close();
            }
        } catch (Exception e) {
            if (field != null) log.info(""field type is :"" + field.getDataType().getName());
            log.info(""select"", e);
        }
    }
",True
900048,15193,19653581,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""Copy: no such source file: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""Copy: source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""Copy: destination file is unwriteable: "" + toFileName);
            if (JOptionPane.showConfirmDialog(null, ""Overwrite File ?"", ""Overwrite File"", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) return;
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""Copy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""Copy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""Copy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public List<SuspectFileProcessingStatus> retrieve() throws Exception {
        BufferedOutputStream bos = null;
        try {
            String listFilePath = GeneralUtils.generateAbsolutePath(getDownloadDirectoryPath(), getListName(), ""/"");
            listFilePath = listFilePath.concat("".xml"");
            if (!new File(getDownloadDirectoryPath()).exists()) {
                FileUtils.forceMkdir(new File(getDownloadDirectoryPath()));
            }
            FileOutputStream listFileOutputStream = new FileOutputStream(listFilePath);
            bos = new BufferedOutputStream(listFileOutputStream);
            InputStream is = null;
            if (getUseProxy()) {
                is = URLUtils.getResponse(getUrl(), getUserName(), getPassword(), URLUtils.HTTP_GET_METHOD, getProxyHost(), getProxyPort());
                IOUtils.copyLarge(is, bos);
            } else {
                URLUtils.getResponse(getUrl(), getUserName(), getPassword(), bos, null);
            }
            bos.flush();
            bos.close();
            File listFile = new File(listFilePath);
            if (!listFile.exists()) {
                throw new IllegalStateException(""The list file did not get created"");
            }
            if (isLoggingInfo()) {
                logInfo(""Downloaded list file : "" + listFile);
            }
            List<SuspectFileProcessingStatus> sfpsList = new ArrayList<SuspectFileProcessingStatus>();
            String loadType = GeneralConstants.LOAD_TYPE_FULL;
            String feedType = GeneralConstants.EMPTY_TOKEN;
            String listName = getListName();
            String errorCode = """";
            String description = """";
            SuspectFileProcessingStatus sfps = getSuspectsLoaderService().storeFileIntoListIncomingDir(listFile, loadType, feedType, listName, errorCode, description);
            sfpsList.add(sfps);
            if (isLoggingInfo()) {
                logInfo(""Retrieved list file with SuspectFileProcessingStatus: "" + sfps);
            }
            return sfpsList;
        } finally {
            if (null != bos) {
                bos.close();
            }
        }
    }
",True
900049,18731109,597134,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900050,16200294,834053,"    @Override
    public String fetchElectronicEdition(Publication pub) {
        final String url = pub.getEe();
        HttpMethod method = null;
        String responseBody = """";
        method = new GetMethod(url);
        method.setFollowRedirects(true);
        try {
            if (StringUtils.isNotBlank(method.getURI().getScheme())) {
                InputStream is = null;
                StringWriter writer = new StringWriter();
                try {
                    client.executeMethod(method);
                    Header contentType = method.getResponseHeader(""Content-Type"");
                    if (contentType != null && StringUtils.isNotBlank(contentType.getValue()) && contentType.getValue().indexOf(""text/html"") >= 0) {
                        is = method.getResponseBodyAsStream();
                        IOUtils.copy(is, writer);
                        responseBody = writer.toString();
                    } else {
                        logger.info(""ignoring non-text/html response from page: "" + url + "" content-type:"" + contentType);
                    }
                } catch (HttpException he) {
                    logger.error(""Http error connecting to '"" + url + ""'"");
                    logger.error(he.getMessage());
                } catch (IOException ioe) {
                    logger.error(""Unable to connect to '"" + url + ""'"");
                } finally {
                    IOUtils.closeQuietly(is);
                    IOUtils.closeQuietly(writer);
                }
            }
        } catch (URIException e) {
            logger.error(e);
        } finally {
            method.releaseConnection();
        }
        return responseBody;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900051,292999,2996859,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public void run() {
        StringBuffer xml;
        String tabName;
        Element guiElement;
        setBold(monitor.getReading());
        setBold(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Working"");
        HttpMethod method = null;
        xml = new StringBuffer();
        File tempfile = new File(url);
        if (tempfile.exists()) {
            try {
                InputStream in = new FileInputStream(tempfile);
                int temp;
                while ((temp = in.read()) != -1) {
                    xml.append((char) temp);
                }
                in.close();
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading XML file from local file"");
                e.printStackTrace(System.err);
                return;
            }
        } else {
            try {
                HttpClient client = new HttpClient();
                method = new GetMethod(url);
                int response = client.executeMethod(method);
                if (response == 200) {
                    InputStream in = method.getResponseBodyAsStream();
                    int temp;
                    while ((temp = in.read()) != -1) {
                        xml.append((char) temp);
                    }
                    in.close();
                } else {
                    if (method != null) {
                        method.releaseConnection();
                    }
                    System.out.println(""Loading Monitor Failed. Incorrect response from HTTP Server "" + response);
                    return;
                }
            } catch (IOException e) {
                if (method != null) {
                    method.releaseConnection();
                }
                System.out.println(""Loading Monitor Failed, error while reading XML file from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        setPlain(monitor.getReading());
        setPlain(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Done"");
        setBold(monitor.getValidating());
        setBold(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Working"");
        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();
        try {
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));
            if (method != null) {
                method.releaseConnection();
            }
            Element root = document.getDocumentElement();
            NodeList temp = root.getElementsByTagName(""resource"");
            for (int j = 0; j < temp.getLength(); j++) {
                Element resource = (Element) temp.item(j);
                resources.add(new URL(resource.getAttribute(""url"")));
            }
            NodeList connections = root.getElementsByTagName(""jmxserver"");
            for (int j = 0; j < connections.getLength(); j++) {
                Element connection = (Element) connections.item(j);
                String name = connection.getAttribute(""name"");
                String tempUrl = connection.getAttribute(""url"");
                String auth = connection.getAttribute(""auth"");
                if (tempUrl.indexOf(""${host}"") != -1) {
                    HostDialog dialog = new HostDialog(Config.getHosts());
                    String host = dialog.showDialog();
                    if (host == null) {
                        System.out.println(""Host can not be null, unable to create panel."");
                        return;
                    }
                    tempUrl = tempUrl.replaceAll(""\\$\\{host\\}"", host);
                    Config.addHost(host);
                }
                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);
                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));
                if (auth != null && auth.equalsIgnoreCase(""true"")) {
                    LoginTrueService loginService = new LoginTrueService();
                    JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService);
                    if (status != JXLoginPanel.Status.SUCCEEDED) {
                        return;
                    }
                    server.setUsername(loginService.getName());
                    server.setPassword(loginService.getPassword());
                }
                servers.put(name, server);
                NodeList listeners = connection.getElementsByTagName(""listener"");
                for (int i = 0; i < listeners.getLength(); i++) {
                    Element attribute = (Element) listeners.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String filtertype = attribute.getAttribute(""filterType"");
                    TaskNotificationListener listener = new TaskNotificationListener();
                    NotificationFilterSupport filter = new NotificationFilterSupport();
                    if (filtertype == null || """".equals(filtertype)) {
                        filter = null;
                    } else {
                        filter.enableType(filtertype);
                    }
                    Task task = new Task(-1, Task.LISTEN, server);
                    task.setMbean(mbean);
                    task.setListener(listener);
                    task.setFilter(filter);
                    server.getWorker().addTask(task);
                    if (tasks.get(taskname) != null) {
                        System.out.println(""Task "" + taskname + "" already exists."");
                        return;
                    }
                    List<Task> hashTempList = new ArrayList<Task>();
                    hashTempList.add(task);
                    tasks.put(taskname, hashTempList);
                }
                NodeList attributes = connection.getElementsByTagName(""attribute"");
                for (int i = 0; i < attributes.getLength(); i++) {
                    Element attribute = (Element) attributes.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String attributename = attribute.getAttribute(""attributename"");
                    String frequency = attribute.getAttribute(""frequency"");
                    String onEvent = attribute.getAttribute(""onEvent"");
                    if (frequency.equalsIgnoreCase(""onchange"")) {
                        TaskNotificationListener listener = new TaskNotificationListener();
                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
                        filter.enableAttribute(attributename);
                        Task task = new Task(-1, Task.LISTEN, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        task.setListener(listener);
                        task.setFilter(filter);
                        server.getWorker().addTask(task);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);
                        task2.setAttribute(att);
                        task2.setMbean(mbean);
                        server.getWorker().addTask(task2);
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        hashTempList.add(task2);
                        tasks.put(taskname, hashTempList);
                    } else {
                        int frequency2 = Integer.parseInt(frequency);
                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        tasks.put(taskname, hashTempList);
                        TaskNotificationListener listener = null;
                        if (onEvent != null && !"""".equals(onEvent)) {
                            Task tempTask = tasks.get(onEvent).get(0);
                            if (tempTask == null) {
                                System.out.println(onEvent + "" was not found."");
                                return;
                            } else {
                                listener = (TaskNotificationListener) tempTask.getListener();
                            }
                        }
                        if (listener == null) {
                            server.getWorker().addTask(task);
                        } else {
                            listener.addTask(task);
                        }
                    }
                }
            }
            NodeList guiTemp = root.getElementsByTagName(""gui"");
            guiElement = (Element) guiTemp.item(0);
            tabName = guiElement.getAttribute(""name"");
            if (MonitorServer.contains(tabName)) {
                JOptionPane.showMessageDialog(null, ""This panel is already open, stoping creating of panel."", ""Panel already exists"", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
                if (monitor.getTab().getComponent(i).equals(monitor)) {
                    monitor.getTab().setTitleAt(i, tabName);
                    break;
                }
            }
            NodeList tempBindings = root.getElementsByTagName(""binding"");
            for (int i = 0; i < tempBindings.getLength(); i++) {
                Element binding = (Element) tempBindings.item(i);
                String guiname = binding.getAttribute(""guiname"");
                String tmethod = binding.getAttribute(""method"");
                String taskname = binding.getAttribute(""taskname"");
                String formater = binding.getAttribute(""formater"");
                BindingContainer tempBinding;
                if (formater == null || (formater != null && formater.equals(""""))) {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname);
                } else {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);
                }
                bindings.add(tempBinding);
            }
        } catch (Exception e) {
            System.err.println(""Exception message: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, couldnt parse XML file."");
            e.printStackTrace(System.err);
            return;
        }
        setPlain(monitor.getValidating());
        setPlain(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Done"");
        setBold(monitor.getDownload());
        setBold(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Working"");
        List<File> jarFiles = new ArrayList<File>();
        File cacheDir = new File(Config.getCacheDir());
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        for (URL resUrl : resources) {
            try {
                HttpClient client = new HttpClient();
                HttpMethod methodRes = new GetMethod(resUrl.toString());
                int response = client.executeMethod(methodRes);
                if (response == 200) {
                    int index = resUrl.toString().lastIndexOf(""/"") + 1;
                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));
                    FileOutputStream out = new FileOutputStream(file);
                    InputStream in = methodRes.getResponseBodyAsStream();
                    int readTemp = 0;
                    while ((readTemp = in.read()) != -1) {
                        out.write(readTemp);
                    }
                    System.out.println(file.getName() + "" downloaded."");
                    methodRes.releaseConnection();
                    if (file.getName().endsWith("".jar"")) {
                        jarFiles.add(file);
                    }
                } else {
                    methodRes.releaseConnection();
                    System.out.println(""Loading Monitor Failed. Unable to get resource "" + url);
                    return;
                }
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading resource file "" + ""from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        URL[] urls = new URL[jarFiles.size()];
        try {
            for (int i = 0; i < jarFiles.size(); i++) {
                File file = jarFiles.get(i);
                File newFile = new File(Config.getCacheDir() + ""/"" + System.currentTimeMillis() + file.getName());
                FileInputStream in = new FileInputStream(file);
                FileOutputStream out = new FileOutputStream(newFile);
                int n = 0;
                byte[] buf = new byte[1024];
                while ((n = in.read(buf, 0, 1024)) > -1) {
                    out.write(buf, 0, n);
                }
                out.close();
                out.close();
                in.close();
                urls[i] = new URL(""file:"" + newFile.getAbsolutePath());
            }
        } catch (Exception e1) {
            System.out.println(""Unable to load jar files."");
            e1.printStackTrace();
        }
        URLClassLoader loader = new URLClassLoader(urls);
        engine.setClassLoader(loader);
        setPlain(monitor.getDownload());
        setPlain(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Done"");
        setBold(monitor.getGui());
        setBold(monitor.getGuiStatus());
        monitor.getGuiStatus().setText(""      Working"");
        Container container;
        try {
            String tempXml = xml.toString();
            int start = tempXml.indexOf(""<gui"");
            start = tempXml.indexOf('>', start) + 1;
            int end = tempXml.indexOf(""</gui>"");
            container = engine.render(new StringReader(tempXml.substring(start, end)));
        } catch (Exception e) {
            e.printStackTrace(System.err);
            System.err.println(""Exception msg: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, error creating gui."");
            return;
        }
        for (BindingContainer bcon : bindings) {
            List<Task> temp = tasks.get(bcon.getTask());
            if (temp == null) {
                System.out.println(""Task with name "" + bcon.getTask() + "" doesnt exist."");
            } else {
                for (Task task : temp) {
                    if (task != null) {
                        Object comp = engine.find(bcon.getComponent());
                        if (comp != null) {
                            if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {
                                TaskNotificationListener listener = (TaskNotificationListener) task.getListener();
                                if (bcon.getFormater() == null) {
                                    listener.addResultListener(new Binding(comp, bcon.getMethod()));
                                } else {
                                    listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                                }
                            } else {
                                if (bcon.getFormater() == null) {
                                    task.addResultListener(new Binding(comp, bcon.getMethod()));
                                } else {
                                    task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                                }
                            }
                        } else {
                            System.out.println(""Refering to gui name, "" + bcon.getComponent() + "", that doesnt exist. Unable to create monitor."");
                            return;
                        }
                    } else {
                        System.out.println(""Refering to task name, "" + bcon.getTask() + "", that doesnt exist. Unable to create monitor."");
                        return;
                    }
                }
            }
        }
        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
            if (monitor.getTab().getComponent(i).equals(monitor)) {
                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));
                break;
            }
        }
        System.out.println(""Connecting to server(s)."");
        Enumeration e = servers.keys();
        List<JmxWorker> list = new ArrayList<JmxWorker>();
        while (e.hasMoreElements()) {
            JmxWorker worker = servers.get(e.nextElement()).getWorker();
            worker.setRunning(true);
            worker.start();
            list.add(worker);
        }
        MonitorServer.add(tabName, list);
        Config.addUrl(url);
    }
",True
900052,19380360,5678658,"    private void copyPhoto(final IPhoto photo, final Map.Entry<String, Integer> size) {
        final File fileIn = new File(storageService.getPhotoPath(photo, storageService.getOriginalDir()));
        final File fileOut = new File(storageService.getPhotoPath(photo, size.getKey()));
        InputStream fileInputStream;
        OutputStream fileOutputStream;
        try {
            fileInputStream = new FileInputStream(fileIn);
            fileOutputStream = new FileOutputStream(fileOut);
            IOUtils.copy(fileInputStream, fileOutputStream);
            fileInputStream.close();
            fileOutputStream.close();
        } catch (final IOException e) {
            log.error(""file io exception"", e);
            return;
        }
    }
","    private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException {
        List<String> signatureResourceNames = new LinkedList<String>();
        ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), ""UTF8"", true, true);
        ZipArchiveEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextZipEntry())) {
            if (""_rels/.rels"".equals(zipEntry.getName())) {
                break;
            }
        }
        if (null == zipEntry) {
            LOG.debug(""no _rels/.rels relationship part present"");
            return signatureResourceNames;
        }
        String dsOriginPart = null;
        JAXBElement<CTRelationships> packageRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream);
        CTRelationships packageRelationships = packageRelationshipsElement.getValue();
        List<CTRelationship> packageRelationshipList = packageRelationships.getRelationship();
        for (CTRelationship packageRelationship : packageRelationshipList) {
            if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_ORIGIN_REL_TYPE.equals(packageRelationship.getType())) {
                dsOriginPart = packageRelationship.getTarget();
                break;
            }
        }
        if (null == dsOriginPart) {
            LOG.debug(""no Digital Signature Origin part present"");
            return signatureResourceNames;
        }
        LOG.debug(""Digital Signature Origin part: "" + dsOriginPart);
        String dsOriginName = dsOriginPart.substring(dsOriginPart.lastIndexOf(""/"") + 1);
        LOG.debug(""Digital Signature Origin base: "" + dsOriginName);
        String dsOriginSegment = dsOriginPart.substring(0, dsOriginPart.lastIndexOf(""/"")) + ""/"";
        LOG.debug(""Digital Signature Origin segment: "" + dsOriginSegment);
        String dsOriginRels = dsOriginSegment + ""_rels/"" + dsOriginName + "".rels"";
        LOG.debug(""Digital Signature Origin relationship part: "" + dsOriginRels);
        if (dsOriginRels.startsWith(""/"")) {
            dsOriginRels = dsOriginRels.substring(1);
        }
        zipInputStream = new ZipArchiveInputStream(url.openStream(), ""UTF8"", true, true);
        while (null != (zipEntry = zipInputStream.getNextZipEntry())) {
            if (dsOriginRels.equals(zipEntry.getName())) {
                break;
            }
        }
        if (null == zipEntry) {
            LOG.debug(""no Digital Signature Origin relationship part present"");
            return signatureResourceNames;
        }
        JAXBElement<CTRelationships> dsoRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream);
        CTRelationships dsoRelationships = dsoRelationshipsElement.getValue();
        List<CTRelationship> dsoRelationshipList = dsoRelationships.getRelationship();
        for (CTRelationship dsoRelationship : dsoRelationshipList) {
            if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) {
                String signatureResourceName;
                if (dsoRelationship.getTarget().startsWith(""/"")) {
                    signatureResourceName = dsoRelationship.getTarget();
                } else {
                    signatureResourceName = dsOriginSegment + dsoRelationship.getTarget();
                }
                if (signatureResourceName.startsWith(""/"")) {
                    signatureResourceName = signatureResourceName.substring(1);
                }
                LOG.debug(""signature resource name: "" + signatureResourceName);
                signatureResourceNames.add(signatureResourceName);
            }
        }
        return signatureResourceNames;
    }
",False
900053,13618436,1677876,"    @Override
    protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException {
        monitor.beginTask(CheatSheetsPlugin.INSTANCE.getString(""_UI_CreateJavaProject_message"", new String[] { projectName }), 5);
        IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1));
        if (project != null) {
            IProjectDescription description = project.getDescription();
            if (!description.hasNature(JavaCore.NATURE_ID)) {
                IJavaProject javaProject = JavaCore.create(project);
                if (javaProject != null) {
                    String[] natures = description.getNatureIds();
                    String[] javaNatures = new String[natures.length + 1];
                    System.arraycopy(natures, 0, javaNatures, 0, natures.length);
                    javaNatures[natures.length] = JavaCore.NATURE_ID;
                    description.setNatureIds(javaNatures);
                    project.setDescription(description, new SubProgressMonitor(monitor, 1));
                    IFolder sourceFolder = project.getFolder(SOURCE_FOLDER);
                    if (!sourceFolder.exists()) {
                        sourceFolder.create(true, true, new SubProgressMonitor(monitor, 1));
                    }
                    javaProject.setOutputLocation(project.getFolder(OUTPUT_FOLDER).getFullPath(), new SubProgressMonitor(monitor, 1));
                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(sourceFolder.getFullPath()), JavaCore.newContainerEntry(new Path(""org.eclipse.jdt.launching.JRE_CONTAINER"")) };
                    javaProject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));
                }
            }
        }
        monitor.done();
        return project;
    }
","    public static String upload_file(String sessionid, String localFilePath, String remoteTagPath) {
        String jsonstring = ""If you see this message, there is some problem inside the function:upload_file()"";
        String srcPath = localFilePath;
        String uploadUrl = ""https://s2.cloud.cm/rpc/json/?session_id="" + sessionid + ""&c=Storage&m=upload_file&tag="" + remoteTagPath;
        String end = ""\r\n"";
        String twoHyphens = ""--"";
        String boundary = ""******"";
        try {
            URL url = new URL(uploadUrl);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod(""POST"");
            httpURLConnection.setRequestProperty(""Connection"", ""Keep-Alive"");
            httpURLConnection.setRequestProperty(""Charset"", ""UTF-8"");
            httpURLConnection.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary="" + boundary);
            DataOutputStream dos = new DataOutputStream(httpURLConnection.getOutputStream());
            dos.writeBytes(twoHyphens + boundary + end);
            dos.writeBytes(""Content-Disposition: form-data; name=\""file\""; filename=\"""" + srcPath.substring(srcPath.lastIndexOf(""/"") + 1) + ""\"""" + end);
            dos.writeBytes(end);
            FileInputStream fis = new FileInputStream(srcPath);
            byte[] buffer = new byte[8192];
            int count = 0;
            while ((count = fis.read(buffer)) != -1) {
                dos.write(buffer, 0, count);
            }
            fis.close();
            dos.writeBytes(end);
            dos.writeBytes(twoHyphens + boundary + twoHyphens + end);
            dos.flush();
            InputStream is = httpURLConnection.getInputStream();
            InputStreamReader isr = new InputStreamReader(is, ""utf-8"");
            BufferedReader br = new BufferedReader(isr);
            jsonstring = br.readLine();
            dos.close();
            is.close();
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
",False
900054,17542341,12082135,"    public GEItem lookup(final String itemName) {
        try {
            URL url = new URL(GrandExchange.HOST + ""/m=itemdb_rs/results.ws?query="" + itemName + ""&price=all&members="");
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String input;
            while ((input = br.readLine()) != null) {
                if (input.contains(""<div id=\""search_results_text\"">"")) {
                    input = br.readLine();
                    if (input.contains(""Your search for"")) {
                        return null;
                    }
                } else if (input.startsWith(""<td><img src="")) {
                    Matcher matcher = GrandExchange.PATTERN.matcher(input);
                    if (matcher.find()) {
                        if (matcher.group(2).contains(itemName)) {
                            return lookup(Integer.parseInt(matcher.group(1)));
                        }
                    }
                }
            }
        } catch (IOException ignored) {
        }
        return null;
    }
","    public static Set<Province> getProvincias(String pURL) {
        Set<Province> result = new HashSet<Province>();
        String iniProv = ""<prov>"";
        String finProv = ""</prov>"";
        String iniNomProv = ""<np>"";
        String finNomProv = ""</np>"";
        String iniCodigo = ""<cpine>"";
        String finCodigo = ""</cpine>"";
        int ini, fin;
        try {
            URL url = new URL(pURL);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            Province provincia;
            while ((str = br.readLine()) != null) {
                if (str.contains(iniProv)) {
                    provincia = new Province();
                    while ((str = br.readLine()) != null && !str.contains(finProv)) {
                        if (str.contains(iniNomProv)) {
                            ini = str.indexOf(iniNomProv) + iniNomProv.length();
                            fin = str.indexOf(finNomProv);
                            provincia.setDescription(str.substring(ini, fin));
                        }
                        if (str.contains(iniCodigo)) {
                            ini = str.indexOf(iniCodigo) + iniCodigo.length();
                            fin = str.indexOf(finCodigo);
                            provincia.setCodeProvince(Integer.parseInt(str.substring(ini, fin)));
                        }
                    }
                    result.add(provincia);
                }
            }
            br.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
",True
900055,21295980,14581601,"    protected URLConnection openURLConnection() throws IOException {
        final String locator = getMediaLocator();
        if (locator == null) {
            return null;
        }
        final URL url;
        try {
            url = new URL(locator);
        } catch (MalformedURLException ex) {
            throw new IllegalArgumentException(ex);
        }
        final URLConnection connection = url.openConnection();
        connection.connect();
        return connection;
    }
","    public static void fileCopy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",False
900056,11939185,6569409,"    public static String getMD5(String password) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            String pwd = new BigInteger(1, md5.digest()).toString(16);
            return pwd;
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return password;
    }
","    public String obfuscateString(String string) {
        String obfuscatedString = null;
        try {
            MessageDigest md = MessageDigest.getInstance(ENCRYPTION_ALGORITHM);
            md.update(string.getBytes());
            byte[] digest = md.digest();
            obfuscatedString = new String(Base64.encode(digest)).replace(DELIM_PATH, '=');
        } catch (NoSuchAlgorithmException e) {
            StatusHandler.log(""SHA not available"", null);
            obfuscatedString = LABEL_FAILED_TO_OBFUSCATE;
        }
        return obfuscatedString;
    }
",True
900057,16094377,23099329,"    protected void xInitGUI() {
        this.jlHead.setText(formater.getText(""select_marc21_title""));
        this.jlResId.setText(formater.getText(""select_marc21_label_text""));
        this.jlResId.setToolTipText(formater.getText(""select_marc21_label_description""));
        ElvisListModel model = new ElvisListModel();
        this.jlResourceList.setModel(model);
        try {
            URL urlListResources = new URL(ElvisRegistry.getInstance().getProperty(""elvis.server"") + ""/servlet/listResources?xpath=document()//Book"");
            InputStream streamResources = urlListResources.openStream();
            XmlPullParser xpp = XmlPullParserFactory.newInstance().newPullParser();
            xpp.setInput(new InputStreamReader(streamResources));
            int type = xpp.getEventType();
            while (type != XmlPullParser.END_DOCUMENT) {
                if (type == XmlPullParser.START_TAG && ""Resource"".equals(xpp.getName())) {
                    model.add(xpp.getAttributeValue("""", ""resId""), xpp.getAttributeValue("""", ""author""), xpp.getAttributeValue("""", ""title""));
                }
                type = xpp.next();
            }
            streamResources.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (XmlPullParserException xppe) {
            xppe.printStackTrace();
        }
        ListSelectionModel selectionModel = this.jlResourceList.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {

            /**
				 * @param  e  Description of the Parameter
				 * @see       javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
				 */
            public void valueChanged(ListSelectionEvent e) {
                int index = e.getFirstIndex();
                boolean isAdjusting = e.getValueIsAdjusting();
                if (!isAdjusting) {
                    ElvisListModel _model = (ElvisListModel) jlResourceList.getModel();
                    jtfResId.setText(_model.get(index).getId());
                }
            }
        });
    }
","    @Override
    public void close() throws IOException {
        super.close();
        byte[] signatureData = toByteArray();
        ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile));
        ZipEntry zipEntry;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) {
                ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
                zipOutputStream.putNextEntry(newZipEntry);
                LOG.debug(""copying "" + zipEntry.getName());
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        zipInputStream.close();
        zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE);
        LOG.debug(""writing "" + zipEntry.getName());
        zipOutputStream.putNextEntry(zipEntry);
        IOUtils.write(signatureData, zipOutputStream);
        zipOutputStream.close();
    }
",False
900058,9983757,3246556,"    public static void copyFiles(String strPath, String dstPath) throws IOException {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + File.separatorChar + list[i];
                String src1 = src.getAbsolutePath() + File.separatorChar + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
","    public static void copyFile(File source, String target) throws FileNotFoundException, IOException {
        File fout = new File(target);
        fout.mkdirs();
        fout.delete();
        fout = new File(target);
        FileChannel in = new FileInputStream(source).getChannel();
        FileChannel out = new FileOutputStream(target).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",True
900059,9647574,23525240,"    private void FindAvail() throws ParserConfigurationException, SQLException {
        Savepoint sp1;
        String availsql = ""select xmlquery('$c/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]' "";
        availsql += ""passing hp_administrator.availability.AVAIL as \""c\"") "";
        availsql += "" from hp_administrator.availability "";
        availsql += "" where date = '"" + booking_details.getDate() + ""' and train_no like '"" + booking_details.getTrain_no() + ""'"";
        System.out.println(availsql);
        String availxml = """";
        String seatxml = """";
        String navailstr = """";
        String nspavailstr = """";
        String currentcoachstr = """";
        String srctillstr = """", srcavailstr = """", srcmaxstr = """";
        Integer srctill, srcavail, srcmax;
        Integer navailcoach;
        Integer nspavailcoach, seatstart, seatcnt, alloccnt;
        String routesrcstr = """", routedeststr = """";
        PreparedStatement pstseat;
        Statement stavail, stavailupd, stseatupd, stseat;
        ResultSet rsavail, rsseat;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document docavail, docseattmp, docseatfin, docseat;
        Element rootavail, rootseat;
        Node n;
        try {
            stavail = conn.createStatement();
            sp1 = conn.setSavepoint();
            rsavail = stavail.executeQuery(availsql);
            if (rsavail.next()) availxml = rsavail.getString(1);
            System.out.println(availxml);
            StringBuffer StringBuffer1 = new StringBuffer(availxml);
            ByteArrayInputStream Bis1 = new ByteArrayInputStream(StringBuffer1.toString().getBytes(""UTF-16""));
            docavail = db.parse(Bis1);
            StringWriter sw;
            OutputFormat formatter;
            formatter = new OutputFormat();
            formatter.setPreserveSpace(true);
            formatter.setEncoding(""UTF-8"");
            formatter.setOmitXMLDeclaration(true);
            XMLSerializer serializer;
            rootavail = docavail.getDocumentElement();
            NodeList coachlist = rootavail.getElementsByTagName(""coach"");
            Element currentcoach, minseat;
            Element routesrc, routedest, nextstn, dest, user, agent;
            NodeList nl, nl1;
            number_of_tickets_rem = booking_details.getNoOfPersons();
            int tickpos = 0;
            firsttime = true;
            boolean enterloop;
            for (int i = 0; i < coachlist.getLength(); i++) {
                currentcoach = (Element) coachlist.item(i);
                currentcoachstr = currentcoach.getAttribute(""number"");
                String coachmaxstr = currentcoach.getAttribute(""coachmax"");
                Integer coachmax = Integer.parseInt(coachmaxstr.trim());
                routesrc = (Element) currentcoach.getFirstChild();
                routedest = (Element) currentcoach.getLastChild();
                routedest = (Element) routedest.getPreviousSibling().getPreviousSibling().getPreviousSibling();
                routesrcstr = routesrc.getNodeName();
                routedeststr = routedest.getNodeName();
                String seatsql = ""select xmlquery('$c/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]' "";
                seatsql += "" passing hp_administrator.book_tickets.SEAT as \""c\"") from hp_administrator.book_tickets "";
                seatsql += "" where  date = '"" + booking_details.getDate() + ""' and train_no like '"" + booking_details.getTrain_no() + ""' "";
                System.out.println(""route  :"" + sourcenws);
                System.out.println(""route  :"" + destnnws);
                System.out.println(""route src :"" + routesrcstr);
                System.out.println(""route dest :"" + routedeststr);
                System.out.println(seatsql);
                stseat = conn.createStatement();
                rsseat = stseat.executeQuery(seatsql);
                if (rsseat.next()) seatxml = rsseat.getString(1);
                StringBuffer StringBuffer2 = new StringBuffer(seatxml);
                ByteArrayInputStream Bis2 = new ByteArrayInputStream(StringBuffer2.toString().getBytes(""UTF-16""));
                docseat = db.parse(Bis2);
                rootseat = docseat.getDocumentElement();
                enterloop = false;
                if (routesrcstr.equals(sourcenws) && routedeststr.equals(destnnws)) {
                    System.out.println(""case 1"");
                    navailstr = routesrc.getTextContent();
                    navailcoach = Integer.parseInt(navailstr.trim());
                    if (useragent) nspavailstr = routesrc.getAttribute(""agent""); else nspavailstr = routesrc.getAttribute(""user"");
                    nspavailcoach = Integer.parseInt(nspavailstr.trim());
                    srctillstr = routesrc.getAttribute(sourcenws + ""TILL"");
                    srctill = Integer.parseInt(srctillstr.trim());
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    srcavailstr = routesrc.getTextContent();
                    srcavail = Integer.parseInt(srcavailstr.trim());
                    seatstart = coachmax - srctill + 1;
                    seatcnt = srcmax;
                    alloccnt = srcmax - srcavail;
                    seatstart += alloccnt;
                    seatcnt -= alloccnt;
                    Element seat, stn;
                    NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                    seat = (Element) nl3.item(0);
                    if (booking_details.getNoOfPersons() <= navailcoach && booking_details.getNoOfPersons() <= nspavailcoach) {
                        coach.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        seatno.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        navailcoach -= booking_details.getNoOfPersons();
                        nspavailcoach -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + navailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        int updvar = stavailupd.executeUpdate(availupdstr);
                        if (updvar > 0) System.out.println(""upda avail success"");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        updvar = stseatupd.executeUpdate(seatupdstr);
                        if (updvar > 0) System.out.println(""upda seat success"");
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + nspavailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        updvar = stavailupd.executeUpdate(availupdstr);
                        if (updvar > 0) System.out.println(""upda"" + sp + "" success"");
                        break;
                    }
                    while (navailcoach > 0 && nspavailcoach > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                        navailcoach--;
                        nspavailcoach--;
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        seatstart++;
                        System.out.println(seat.getFirstChild().getTextContent().trim());
                        seatno.add(seat.getFirstChild().getTextContent().trim());
                        booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent(""0"");
                            stn = (Element) stn.getNextSibling();
                        }
                        String availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + navailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + sp + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + nspavailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                } else if (routesrcstr.equals(sourcenws) && !routedeststr.equals(destnnws)) {
                    System.out.println(""case 2"");
                    String excesssrcstr = routesrc.getTextContent();
                    System.out.println(excesssrcstr);
                    Integer excesssrc = Integer.parseInt(excesssrcstr.trim());
                    NodeList nl2 = currentcoach.getElementsByTagName(destnnws);
                    Element e2 = (Element) nl2.item(0);
                    String desttillstr = e2.getAttribute(destnnws + ""TILL"");
                    System.out.println(desttillstr);
                    Integer desttillcnt = Integer.parseInt(desttillstr.trim());
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    String spexcesssrcstr = """", spdesttillstr = """";
                    if (useragent) {
                        spexcesssrcstr = routesrc.getAttribute(""agent"");
                        spdesttillstr = e2.getAttribute(""agenttill"");
                    } else {
                        spexcesssrcstr = routesrc.getAttribute(""user"");
                        spdesttillstr = e2.getAttribute(""usertill"");
                    }
                    System.out.println(spdesttillstr);
                    System.out.println(spexcesssrcstr);
                    Integer spdesttillcnt = Integer.parseInt(spdesttillstr.trim());
                    Integer spexcesssrc = Integer.parseInt(spexcesssrcstr.trim());
                    Element seat, stn;
                    if (booking_details.getNoOfPersons() <= desttillcnt && booking_details.getNoOfPersons() <= spdesttillcnt) {
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        desttillcnt -= booking_details.getNoOfPersons();
                        spdesttillcnt -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update avail success"");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println(""update seat success"");
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update "" + sp + "" success"");
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt > 0 && booking_details.getNoOfPersons() <= spdesttillcnt + spexcesssrc) {
                        int diff = 0;
                        if (booking_details.getNoOfPersons() > spdesttillcnt) diff = booking_details.getNoOfPersons() - spdesttillcnt;
                        tickpos = 0;
                        boolean initflg = true;
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                            if (spdesttillcnt != 0) {
                                desttillcnt--;
                                spdesttillcnt--;
                            }
                            System.out.println(""desttillcnt="" + desttillcnt + "" spdes = "" + desttillcnt + ""initflg ="" + initflg);
                            if (spdesttillcnt == 0 && initflg == true) {
                                alloccnt = srcmax - excesssrc;
                                seatstart = 1 + alloccnt;
                                initflg = false;
                                seat = (Element) seat.getParentNode().getFirstChild();
                            }
                        }
                        excesssrc -= diff;
                        spexcesssrc -= diff;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update avail success"");
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + excesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update avail success"");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println(""update seat success"");
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update "" + sp + "" success"");
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + spexcesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update "" + sp + "" success"");
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt == 0 && booking_details.getNoOfPersons() <= spexcesssrc) {
                        alloccnt = srcmax - excesssrc;
                        seatstart = 1 + alloccnt;
                        tickpos = 0;
                        boolean initflg = true;
                        NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                        seat = (Element) nl3.item(0);
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                            System.out.println(""desttillcnt="" + desttillcnt + "" spdes = "" + desttillcnt + ""initflg ="" + initflg);
                        }
                        excesssrc -= booking_details.getNoOfPersons();
                        spexcesssrc -= booking_details.getNoOfPersons();
                        ;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + excesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        int upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update avail success"");
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        System.out.println(seatupdstr);
                        stseatupd = conn.createStatement();
                        upst = stseatupd.executeUpdate(seatupdstr);
                        if (upst > 0) System.out.println(""update seat success"");
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + spexcesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupd);
                        stavailupd = conn.createStatement();
                        upst = stavailupd.executeUpdate(availupd);
                        if (upst > 0) System.out.println(""update "" + sp + "" success"");
                        break;
                    }
                    NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                    seat = (Element) nl3.item(0);
                    seatstart = 1;
                    String sp = """";
                    if (useragent) sp = ""agent""; else sp = ""user"";
                    while (spexcesssrc + spdesttillcnt > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        if (spdesttillcnt > 0) {
                            seatstart = coachmax - desttillcnt + 1;
                            desttillcnt--;
                            spdesttillcnt--;
                            String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                            availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                            availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        } else if (spdesttillcnt == 0) {
                            alloccnt = srcmax - excesssrc;
                            seatstart = 1 + alloccnt;
                            excesssrc--;
                            spexcesssrc--;
                            String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                            availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + excesssrc + ""\"""";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                            availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + spexcesssrc + ""\"""";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        }
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent(""0"");
                            stn = (Element) stn.getNextSibling();
                        }
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                } else if (!routesrcstr.equals(sourcenws) && routedeststr.equals(destnnws)) {
                    System.out.println(""case 3"");
                    NodeList nl2 = currentcoach.getElementsByTagName(sourcenws);
                    Element e2 = (Element) nl2.item(0);
                    navailstr = e2.getTextContent();
                    System.out.println(navailstr);
                    navailcoach = Integer.parseInt(navailstr.trim());
                    if (useragent) nspavailstr = e2.getAttribute(""agent""); else nspavailstr = e2.getAttribute(""user"");
                    System.out.println(nspavailstr);
                    nspavailcoach = Integer.parseInt(nspavailstr.trim());
                    srctillstr = e2.getAttribute(sourcenws + ""TILL"");
                    System.out.println(srctillstr);
                    srctill = Integer.parseInt(srctillstr.trim());
                    srcmaxstr = e2.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    seatstart = coachmax - srctill + 1;
                    seatcnt = srcmax;
                    alloccnt = srcmax - navailcoach;
                    seatstart += alloccnt;
                    seatcnt -= alloccnt;
                    Element seat, stn;
                    NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                    seat = (Element) nl3.item(0);
                    if (booking_details.getNoOfPersons() <= navailcoach && booking_details.getNoOfPersons() <= nspavailcoach) {
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        navailcoach -= booking_details.getNoOfPersons();
                        nspavailcoach -= booking_details.getNoOfPersons();
                        String availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + navailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + nspavailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        break;
                    }
                    while (navailcoach > 0 && nspavailcoach > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                        navailcoach--;
                        nspavailcoach--;
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        seatstart++;
                        System.out.println(seat.getFirstChild().getTextContent().trim());
                        seatno.add(seat.getFirstChild().getTextContent().trim());
                        booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent(""0"");
                            stn = (Element) stn.getNextSibling();
                        }
                        String availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + navailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupdstr = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupdstr += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + nspavailcoach + ""\"""";
                        availupdstr += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        System.out.println(availupdstr);
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupdstr);
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        System.out.println(""!@#------->"" + seatupdstr);
                        stseatupd = conn.createStatement();
                    }
                } else if (!routesrcstr.equals(sourcenws) && !routedeststr.equals(destnnws)) {
                    System.out.println(""case 4"");
                    srcmaxstr = routesrc.getAttribute(sourcenws);
                    System.out.println(srcmaxstr);
                    srcmax = Integer.parseInt(srcmaxstr.trim());
                    Element seat, stn;
                    NodeList nl2 = currentcoach.getElementsByTagName(sourcenws);
                    Element e2 = (Element) nl2.item(0);
                    navailstr = e2.getTextContent();
                    Integer excesssrc = Integer.parseInt(navailstr.trim());
                    nl2 = currentcoach.getElementsByTagName(destnnws);
                    e2 = (Element) nl2.item(0);
                    navailstr = e2.getAttribute(destnnws + ""TILL"");
                    Integer desttillcnt = Integer.parseInt(navailstr.trim());
                    String spexcesssrcstr = """", spdesttillstr = """";
                    if (useragent) {
                        spexcesssrcstr = routesrc.getAttribute(""agent"");
                        spdesttillstr = e2.getAttribute(""agenttill"");
                    } else {
                        spexcesssrcstr = routesrc.getAttribute(""user"");
                        spdesttillstr = e2.getAttribute(""usertill"");
                    }
                    Integer spdesttillcnt = Integer.parseInt(spdesttillstr.trim());
                    Integer spexcesssrc = Integer.parseInt(spexcesssrcstr.trim());
                    NodeList nl3 = rootseat.getElementsByTagName(""seat"");
                    seat = (Element) nl3.item(0);
                    boolean initflg = true;
                    if (booking_details.getNoOfPersons() <= spdesttillcnt) {
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        number_of_tickets_rem = 0;
                        desttillcnt -= booking_details.getNoOfPersons();
                        spdesttillcnt -= booking_details.getNoOfPersons();
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    } else if (booking_details.getNoOfPersons() > spdesttillcnt && spdesttillcnt > 0 && booking_details.getNoOfPersons() <= spdesttillcnt + spexcesssrc) {
                        int diff = 0;
                        if (booking_details.getNoOfPersons() > spdesttillcnt) diff = booking_details.getNoOfPersons() - spdesttillcnt;
                        seatstart = coachmax - desttillcnt + 1;
                        seatcnt = desttillcnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                            if (spdesttillcnt != 0) {
                                desttillcnt--;
                                spdesttillcnt--;
                            }
                            if (spdesttillcnt == 0 && initflg == true) {
                                alloccnt = srcmax - excesssrc;
                                seatstart = 1 + alloccnt;
                                initflg = false;
                            }
                        }
                        excesssrc -= diff;
                        spexcesssrc -= diff;
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + excesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                        availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + spexcesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    } else if (spdesttillcnt == 0 && booking_details.getNoOfPersons() <= spexcesssrc) {
                        alloccnt = srcmax - excesssrc;
                        seatstart = 1 + alloccnt;
                        coach.clear();
                        seatno.clear();
                        booking_details.coachlist.clear();
                        booking_details.seatlist.clear();
                        for (tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                            coach.add(currentcoachstr);
                            booking_details.coachlist.add(currentcoachstr);
                            while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                                seat = (Element) seat.getNextSibling();
                            }
                            seatstart++;
                            System.out.println(seat.getFirstChild().getTextContent().trim());
                            seatno.add(seat.getFirstChild().getTextContent().trim());
                            booking_details.seatlist.add(seat.getFirstChild().getTextContent().trim());
                            nl3 = seat.getElementsByTagName(sourcenws);
                            stn = (Element) nl3.item(0);
                            while (!stn.getNodeName().equals(destnnws)) {
                                stn.setTextContent(""0"");
                                stn = (Element) stn.getNextSibling();
                            }
                        }
                        excesssrc -= booking_details.getNoOfPersons();
                        spexcesssrc -= booking_details.getNoOfPersons();
                        number_of_tickets_rem = 0;
                        if (!firsttime) conn.rollback(sp1);
                        String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + excesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                        String sp = """";
                        if (useragent) sp = ""agent""; else sp = ""user"";
                        availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                        availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + spexcesssrc + ""\"""";
                        availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                        stavailupd = conn.createStatement();
                        stavailupd.executeUpdate(availupd);
                        break;
                    }
                    seatstart = 1;
                    String sp = """";
                    if (useragent) sp = ""agent""; else sp = ""user"";
                    while (spexcesssrc + spdesttillcnt > 0 && number_of_tickets_rem > 0) {
                        if (firsttime) {
                            sp1 = conn.setSavepoint();
                            firsttime = false;
                        }
                        enterloop = true;
                        if (spdesttillcnt > 0) {
                            seatstart = coachmax - desttillcnt + 1;
                            desttillcnt--;
                            spdesttillcnt--;
                            String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                            availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + destnnws + ""TILL"" + "" with \"""" + desttillcnt + ""\"" "";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL modify do replace value of "";
                            availupd += ""$new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + destnnws + ""/@"" + sp + ""till"" + "" with \"""" + spdesttillcnt + ""\"" "";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        } else if (spdesttillcnt == 0) {
                            alloccnt = srcmax - excesssrc;
                            seatstart = 1 + alloccnt;
                            excesssrc--;
                            spexcesssrc--;
                            String availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                            availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + ""/@"" + sp + "" with \"""" + excesssrc + ""\"""";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                            availupd = ""update hp_administrator.availability set AVAIL = xmlquery( 'transform copy $new := $AVAIL  modify do "";
                            availupd += "" replace value of $new/coach_status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""]/"" + sourcenws + "" with \"""" + spexcesssrc + ""\"""";
                            availupd += "" return  $new')  where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                            stavailupd = conn.createStatement();
                            stavailupd.executeUpdate(availupd);
                        }
                        while (Integer.parseInt(seat.getFirstChild().getTextContent().trim()) < seatstart) {
                            seat = (Element) seat.getNextSibling();
                        }
                        nl3 = seat.getElementsByTagName(sourcenws);
                        stn = (Element) nl3.item(0);
                        while (!stn.getNodeName().equals(destnnws)) {
                            stn.setTextContent(""0"");
                            stn = (Element) stn.getNextSibling();
                        }
                        coach.add(currentcoachstr);
                        booking_details.coachlist.add(currentcoachstr);
                        tickpos++;
                        number_of_tickets_rem--;
                    }
                    if (enterloop) {
                        sw = new StringWriter();
                        serializer = new XMLSerializer(sw, formatter);
                        serializer.serialize(docseat);
                        String seatupdstr = ""update hp_administrator.book_tickets set SEAT = xmlquery( 'transform copy $new := $SEAT "";
                        seatupdstr += "" modify do replace $new/status/class[@type=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoachstr + ""\""] with "" + sw.toString();
                        seatupdstr += "" return $new') where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""'  "";
                        stseatupd = conn.createStatement();
                        stseatupd.executeUpdate(seatupdstr);
                    }
                }
            }
            availfin = true;
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (SAXException e) {
            conn.rollback();
            e.printStackTrace();
        } catch (IOException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
","    private void gravaOp(Vector<?> op) {
        PreparedStatement ps = null;
        String sql = null;
        ResultSet rs = null;
        int seqop = 0;
        Date dtFabrOP = null;
        try {
            sql = ""SELECT MAX(SEQOP) FROM PPOP WHERE CODEMP=? AND CODFILIAL=? AND CODOP=?"";
            ps = con.prepareStatement(sql);
            ps.setInt(1, Aplicativo.iCodEmp);
            ps.setInt(2, ListaCampos.getMasterFilial(""PPOP""));
            ps.setInt(3, txtCodOP.getVlrInteger().intValue());
            rs = ps.executeQuery();
            if (rs.next()) {
                seqop = rs.getInt(1) + 1;
            }
            rs.close();
            ps.close();
            con.commit();
            sql = ""SELECT DTFABROP FROM PPOP WHERE CODEMP=? AND CODFILIAL=? AND CODOP=? AND SEQOP=?"";
            ps = con.prepareStatement(sql);
            ps.setInt(1, Aplicativo.iCodEmp);
            ps.setInt(2, ListaCampos.getMasterFilial(""PPOP""));
            ps.setInt(3, txtCodOP.getVlrInteger().intValue());
            ps.setInt(4, txtSeqOP.getVlrInteger().intValue());
            rs = ps.executeQuery();
            if (rs.next()) {
                dtFabrOP = rs.getDate(1);
            }
            rs.close();
            ps.close();
            con.commit();
            sql = ""INSERT INTO PPOP (CODEMP,CODFILIAL,CODOP,SEQOP,CODEMPPD,CODFILIALPD,CODPROD,SEQEST,DTFABROP,"" + ""QTDPREVPRODOP,QTDFINALPRODOP,DTVALIDPDOP,CODEMPLE,CODFILIALLE,CODLOTE,CODEMPTM,CODFILIALTM,CODTIPOMOV,"" + ""CODEMPAX,CODFILIALAX,CODALMOX,CODEMPOPM,CODFILIALOPM,CODOPM,SEQOPM,QTDDISTIOP,QTDSUGPRODOP)"" + "" VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"";
            ps = con.prepareStatement(sql);
            ps.setInt(1, Aplicativo.iCodEmp);
            ps.setInt(2, ListaCampos.getMasterFilial(""PPOP""));
            ps.setInt(3, txtCodOP.getVlrInteger().intValue());
            ps.setInt(4, seqop);
            ps.setInt(5, Aplicativo.iCodEmp);
            ps.setInt(6, ListaCampos.getMasterFilial(""PPESTRUTURA""));
            ps.setInt(7, ((Integer) op.elementAt(4)).intValue());
            ps.setInt(8, ((Integer) op.elementAt(6)).intValue());
            ps.setDate(9, dtFabrOP);
            ps.setFloat(10, ((BigDecimal) op.elementAt(7)).floatValue());
            ps.setFloat(11, 0);
            ps.setDate(12, (Funcoes.strDateToSqlDate((String) op.elementAt(11))));
            ps.setInt(13, Aplicativo.iCodEmp);
            ps.setInt(14, ListaCampos.getMasterFilial(""EQLOTE""));
            ps.setString(15, ((String) op.elementAt(10)));
            ps.setInt(16, Aplicativo.iCodEmp);
            ps.setInt(17, ListaCampos.getMasterFilial(""EQTIPOMOV""));
            ps.setInt(18, buscaTipoMov());
            ps.setInt(19, ((Integer) op.elementAt(13)).intValue());
            ps.setInt(20, ((Integer) op.elementAt(14)).intValue());
            ps.setInt(21, ((Integer) op.elementAt(12)).intValue());
            ps.setInt(22, Aplicativo.iCodEmp);
            ps.setInt(23, ListaCampos.getMasterFilial(""PPOP""));
            ps.setInt(24, txtCodOP.getVlrInteger().intValue());
            ps.setInt(25, txtSeqOP.getVlrInteger().intValue());
            ps.setFloat(26, ((BigDecimal) op.elementAt(9)).floatValue());
            ps.setFloat(27, ((BigDecimal) op.elementAt(7)).floatValue());
            ps.executeUpdate();
            ps.close();
            con.commit();
            geraRMA(seqop);
        } catch (SQLException e) {
            Funcoes.mensagemErro(null, ""Erro ao gerar OP's de distribui��o!\n"" + e.getMessage());
            try {
                con.rollback();
            } catch (SQLException eb) {
            }
        }
    }
",True
900060,22321272,161844,"    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900061,8416636,10330323,"    private static byte[] Md5f(String plainText) {
        byte[] ab = new byte[16];
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainText.getBytes());
            byte b[] = md.digest();
            ab = b;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return ab;
    }
","    public void getFile(String url, String filepath) throws BggException {
        System.out.println(url);
        int retry = retryCount + 1;
        lastURL = url;
        for (retriedCount = 0; retriedCount < retry; retriedCount++) {
            int responseCode = -1;
            try {
                HttpURLConnection con = null;
                BufferedInputStream bis = null;
                OutputStream osw = null;
                try {
                    con = (HttpURLConnection) new URL(url).openConnection();
                    con.setDoInput(true);
                    setHeaders(con);
                    con.setRequestMethod(""GET"");
                    responseCode = con.getResponseCode();
                    bis = new BufferedInputStream(con.getInputStream());
                    int data;
                    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filepath));
                    while ((data = bis.read()) != -1) bos.write(data);
                    bos.flush();
                    bos.close();
                    break;
                } finally {
                    try {
                        bis.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        osw.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        con.disconnect();
                    } catch (Exception ignore) {
                    }
                }
            } catch (IOException ioe) {
                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
                if (retriedCount == retryCount) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
            }
            try {
                Thread.sleep(retryIntervalMillis);
            } catch (InterruptedException ignore) {
            }
        }
    }
",False
900062,9593609,11482931,"    public static void main(String[] args) throws Exception {
        File rootDir = new File(""C:\\dev\\workspace_fgd\\gouvqc_crggid\\WebContent\\WEB-INF\\upload"");
        File storeDir = new File(rootDir, ""storeDir"");
        File workDir = new File(rootDir, ""workDir"");
        LoggerFacade loggerFacade = new CommonsLoggingLogger(logger);
        final FileResourceManager frm = new SmbFileResourceManager(storeDir.getPath(), workDir.getPath(), true, loggerFacade);
        frm.start();
        final String resourceId = ""811375c8-7cae-4429-9a0e-9222f47dab45"";
        {
            if (!frm.resourceExists(resourceId)) {
                String txId = frm.generatedUniqueTxId();
                frm.startTransaction(txId);
                FileInputStream inputStream = new FileInputStream(resourceId);
                frm.createResource(txId, resourceId);
                OutputStream outputStream = frm.writeResource(txId, resourceId);
                IOUtils.copy(inputStream, outputStream);
                IOUtils.closeQuietly(inputStream);
                IOUtils.closeQuietly(outputStream);
                frm.prepareTransaction(txId);
                frm.commitTransaction(txId);
            }
        }
        for (int i = 0; i < 30; i++) {
            final int index = i;
            new Thread() {

                @Override
                public void run() {
                    try {
                        String txId = frm.generatedUniqueTxId();
                        frm.startTransaction(txId);
                        InputStream inputStream = frm.readResource(resourceId);
                        frm.prepareTransaction(txId);
                        frm.commitTransaction(txId);
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (début)"");
                        }
                        String contenu = TikaUtils.getParsedContent(inputStream, ""file.pdf"");
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (fin)"");
                        }
                    } catch (ResourceManagerSystemException e) {
                        throw new RuntimeException(e);
                    } catch (ResourceManagerException e) {
                        throw new RuntimeException(e);
                    } catch (TikaException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }.start();
        }
        Thread.sleep(60000);
        frm.stop(FileResourceManager.SHUTDOWN_MODE_NORMAL);
    }
","    public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {
        if (!outputDirectory.exists()) {
            outputDirectory.createFolder();
        }
        ZipUtils.extractZip(new ClasspathResource(classResolver, ""/com/erinors/tapestry/tapdoc/standalone/resources.zip""), outputDirectory);
        for (Library library : libraryModels) {
            String libraryName = library.getName();
            String libraryLocation = library.getLocation();
            outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder();
            try {
                {
                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Library.xsl""), ""libraryName"", libraryName);
                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(""index.html"");
                    Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                }
                {
                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""ComponentIndex.xsl""), ""libraryName"", libraryName);
                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(""components.html"");
                    Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            for (Component component : library.getComponents()) {
                String componentName = component.getName();
                System.out.println(""Generating "" + libraryName + "":"" + componentName + ""..."");
                Map<String, String> parameters = new HashMap<String, String>();
                parameters.put(""libraryName"", libraryName);
                parameters.put(""componentName"", componentName);
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Component.xsl""), parameters);
                Writer out = null;
                try {
                    FileObject index = outputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true));
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                    Resource specificationLocation = component.getSpecificationLocation();
                    if (specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL() != null) {
                        File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL().toURI());
                        FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile(""resource"");
                        if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) {
                            File[] files = srcResourcesDirectory.listFiles();
                            if (files != null) {
                                for (File resource : files) {
                                    if (resource.isFile() && !resource.isHidden()) {
                                        FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName());
                                        resourceFileObject.createFile();
                                        InputStream inResource = null;
                                        OutputStream outResource = null;
                                        try {
                                            inResource = new FileInputStream(resource);
                                            outResource = resourceFileObject.getContent().getOutputStream();
                                            IOUtils.copy(inResource, outResource);
                                        } finally {
                                            IOUtils.closeQuietly(inResource);
                                            IOUtils.closeQuietly(outResource);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    throw new RuntimeException(e);
                } finally {
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        {
            Writer out = null;
            try {
                {
                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""LibraryIndex.xsl""));
                    FileObject index = outputDirectory.resolveFile(""libraries.html"");
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                }
                {
                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Overview.xsl""));
                    FileObject index = outputDirectory.resolveFile(""overview.html"");
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                }
                {
                    String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""AllComponents.xsl""));
                    FileObject index = outputDirectory.resolveFile(""allcomponents.html"");
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            } finally {
                IOUtils.closeQuietly(out);
            }
        }
    }
",True
900063,9103010,15849787,"    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        if ((this.jTree2.getSelectionPath() == null) || !(this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode)) {
            Msg.showMsg(""Devi selezionare lo stile sotto il quale caricare la ricetta!"", this);
            return;
        }
        if ((this.txtUser.getText() == null) || (this.txtUser.getText().length() == 0)) {
            Msg.showMsg(""Il nome utente è obbligatorio!"", this);
            return;
        }
        if ((this.txtPwd.getPassword() == null) || (this.txtPwd.getPassword().length == 0)) {
            Msg.showMsg(""La password è obbligatoria!"", this);
            return;
        }
        this.nomeRicetta = this.txtNome.getText();
        if ((this.nomeRicetta == null) || (this.nomeRicetta.length() == 0)) {
            Msg.showMsg(""Il nome della ricetta è obbligatorio!"", this);
            return;
        }
        StyleTreeNode node = null;
        if (this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode) {
            node = (StyleTreeNode) this.jTree2.getSelectionPath().getLastPathComponent();
        }
        try {
            String data = URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(this.txtUser.getText(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""pwd"", ""UTF-8"") + ""="" + URLEncoder.encode(new String(this.txtPwd.getPassword()), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""id_stile"", ""UTF-8"") + ""="" + URLEncoder.encode(node.getIdStile(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""nome_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.nomeRicetta, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""xml_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.xml, ""UTF-8"");
            URL url = new URL(""http://"" + Main.config.getRemoteServer() + ""/upload_ricetta.asp?"" + data);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            String str = """";
            while ((line = rd.readLine()) != null) {
                str += line;
            }
            rd.close();
            Msg.showMsg(str, this);
            doDefaultCloseAction();
        } catch (Exception e) {
            Utils.showException(e, ""Errore in upload"", this);
        }
        reloadTree();
    }
","    public static Document getDocument(String string, String defaultCharset) {
        DOMParser parser = new DOMParser();
        try {
            URL url = new URL(string);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setConnectTimeout(10000);
            con.setUseCaches(false);
            con.addRequestProperty(""_"", UUID.randomUUID().toString());
            String contentType = con.getContentType();
            if (contentType == null) {
                return null;
            }
            String charsetSearch = contentType.replaceFirst(""(?i).*charset=(.*)"", ""$1"");
            String contentTypeCharset = con.getContentEncoding();
            BufferedReader reader = null;
            if (!contentType.equals(charsetSearch)) {
                contentTypeCharset = charsetSearch;
            }
            if (contentTypeCharset == null) {
                reader = new BufferedReader(new InputStreamReader(con.getInputStream(), defaultCharset));
            } else {
                reader = new BufferedReader(new InputStreamReader(con.getInputStream(), contentTypeCharset));
            }
            InputSource source = new InputSource(reader);
            parser.setFeature(""http://xml.org/sax/features/namespaces"", false);
            parser.parse(source);
            Document document = parser.getDocument();
            String metaTagCharset = getMetaTagCharset(document);
            if (metaTagCharset != null && !metaTagCharset.equals(contentTypeCharset)) {
                HttpURLConnection reconnection = (HttpURLConnection) url.openConnection();
                reconnection.setConnectTimeout(10000);
                reconnection.setUseCaches(false);
                reconnection.addRequestProperty(""_"", UUID.randomUUID().toString());
                reader = new BufferedReader(new InputStreamReader(reconnection.getInputStream(), metaTagCharset));
                source = new InputSource(reader);
                parser.setFeature(""http://xml.org/sax/features/namespaces"", false);
                parser.parse(source);
                document = parser.getDocument();
            }
            reader.close();
            return document;
        } catch (DOMException e) {
            if (!""UTF-8"".equals(defaultCharset)) {
                return getDocument(string, ""UTF-8"");
            }
            return null;
        } catch (Exception ex) {
            return null;
        }
    }
",False
900064,5935063,15588201,"    public String generateKey(Message msg) {
        String text = msg.getDefaultMessage();
        String meaning = msg.getMeaning();
        if (text == null) {
            return null;
        }
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Error initializing MD5"", e);
        }
        try {
            md5.update(text.getBytes(""UTF-8""));
            if (meaning != null) {
                md5.update(meaning.getBytes(""UTF-8""));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""UTF-8 unsupported"", e);
        }
        return StringUtils.toHexString(md5.digest());
    }
","    public void copy(File source, File destination) {
        try {
            FileInputStream fileInputStream = new FileInputStream(source);
            FileOutputStream fileOutputStream = new FileOutputStream(destination);
            FileChannel inputChannel = fileInputStream.getChannel();
            FileChannel outputChannel = fileOutputStream.getChannel();
            transfer(inputChannel, outputChannel, source.length(), 1024 * 1024 * 32, true, true);
            fileInputStream.close();
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900065,14782656,16491858,"    private static Long statusSWGCraftTime() {
        long current = System.currentTimeMillis() / 1000L;
        if (current < (previousStatusCheck + SWGCraft.STATUS_CHECK_DELAY)) return previousStatusTime;
        URL url = null;
        try {
            synchronized (previousStatusTime) {
                if (current >= previousStatusCheck + SWGCraft.STATUS_CHECK_DELAY) {
                    url = SWGCraft.getStatusTextURL();
                    String statusTime = ZReader.read(url.openStream());
                    previousStatusTime = Long.valueOf(statusTime);
                    previousStatusCheck = current;
                }
                return previousStatusTime;
            }
        } catch (UnknownHostException e) {
            SWGCraft.showUnknownHostDialog(url, e);
        } catch (Throwable e) {
            SWGAide.printDebug(""cmgr"", 1, ""SWGResourceManager:statusSWGCraftTime:"", e.toString());
        }
        return Long.valueOf(0);
    }
","    public boolean openConnection(String url, Properties props) throws SQLException {
        try {
            Class.forName(RunConfig.getInstance().getDriverNameJDBC());
            if (url == null) url = RunConfig.getInstance().getConnectionUrlJDBC();
            connection = DriverManager.getConnection(url, props);
            if (statementTable == null) statementTable = new Hashtable<String, PreparedStatement>();
            if (resultTable == null) resultTable = new Hashtable<String, ResultSet>();
            clearStatus();
            return true;
        } catch (Exception e) {
            setStatus(e);
            return false;
        }
    }
",False
900066,9547229,10797166,"            public void run() {
                String masterUrl = ""http://localhost:"" + masterJetty.getLocalPort() + ""/solr/replication?command="" + ReplicationHandler.CMD_DETAILS;
                URL url;
                InputStream stream = null;
                try {
                    url = new URL(masterUrl);
                    stream = url.openStream();
                    response = IOUtils.toString(stream);
                    if (response.contains(""<str name=\""status\"">success</str>"")) {
                        success = true;
                    }
                    stream.close();
                } catch (Exception e) {
                    fail = e.getMessage();
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            }
","    public static String readFromUrl(String url) {
        URL url_ = null;
        URLConnection uc = null;
        BufferedReader in = null;
        StringBuilder str = new StringBuilder();
        try {
            url_ = new URL(url);
            uc = url_.openConnection();
            in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) str.append(inputLine);
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str.toString();
    }
",False
900067,18284810,6790585,"    protected void discoverFactories() {
        DataSourceRegistry registry = this;
        try {
            ClassLoader loader = DataSetURI.class.getClassLoader();
            Enumeration<URL> urls;
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    if (s.trim().length() > 0) {
                        List<String> extensions = null;
                        List<String> mimeTypes = null;
                        String factoryClassName = s;
                        try {
                            Class c = Class.forName(factoryClassName);
                            DataSourceFactory f = (DataSourceFactory) c.newInstance();
                            try {
                                Method m = c.getMethod(""extensions"", new Class[0]);
                                extensions = (List<String>) m.invoke(f, new Object[0]);
                            } catch (NoSuchMethodException ex) {
                            } catch (InvocationTargetException ex) {
                                ex.printStackTrace();
                            }
                            try {
                                Method m = c.getMethod(""mimeTypes"", new Class[0]);
                                mimeTypes = (List<String>) m.invoke(f, new Object[0]);
                            } catch (NoSuchMethodException ex) {
                            } catch (InvocationTargetException ex) {
                                ex.printStackTrace();
                            }
                        } catch (ClassNotFoundException ex) {
                            ex.printStackTrace();
                        } catch (InstantiationException ex) {
                            ex.printStackTrace();
                        } catch (IllegalAccessException ex) {
                            ex.printStackTrace();
                        }
                        if (extensions != null) {
                            for (String e : extensions) {
                                registry.registerExtension(factoryClassName, e, null);
                            }
                        }
                        if (mimeTypes != null) {
                            for (String m : mimeTypes) {
                                registry.registerMimeType(factoryClassName, m);
                            }
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private void sendToServer(String fichaID, String respostas) throws FileNotFoundException, ParserConfigurationException, SAXException, IOException, URISyntaxException {
        ArrayList params = new ArrayList();
        params.add(new BasicNameValuePair(""xml"", respostas));
        params.add(new BasicNameValuePair(""idForm"", fichaID));
        URI uri = URIUtils.createURI(""http"", ""172.20.9.144"", 8080, ""/PSFServer/SaveAnswers"", URLEncodedUtils.format(params, ""UTF-8""), null);
        HttpPost request = new HttpPost(uri);
        request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
        HttpClient client = new DefaultHttpClient();
        HttpResponse httpResponse = client.execute(request);
        BufferedReader in = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()));
        StringBuffer sb = new StringBuffer("""");
        String line = """";
        String NL = System.getProperty(""line.separator"");
        while ((line = in.readLine()) != null) {
            sb.append(line + NL);
        }
        in.close();
        String resposta = sb.toString();
        if (resposta != null || resposta != """") {
            new DatabaseManager(this).getWritableDatabase().execSQL(""delete from "" + DatabaseManager.getTableDados());
        }
        backToMain();
    }
",True
900068,8230744,21970882,"    protected void performInsertTest() throws Exception {
        Connection conn = connect();
        EntityDescriptor ed = repository.getEntityDescriptor(User.class);
        User testUser = new User();
        Date now = new Date();
        conn.setAutoCommit(false);
        testUser.setUsername(""rednose"");
        testUser.setUCreated(""dbUtilTest"");
        testUser.setUModified(""dbUtilTest"");
        testUser.setDtCreated(now);
        testUser.setDtModified(now);
        String sql = dbUtil.genInsert(ed, testUser);
        Statement st = conn.createStatement();
        long id = 0;
        System.err.println(""Insert: "" + sql);
        int rv = st.executeUpdate(sql, dbUtil.supportsGeneratedKeyQuery() ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);
        if (rv > 0) {
            if (dbUtil.supportsGeneratedKeyQuery()) {
                ResultSet rs = st.getGeneratedKeys();
                if (rs.next()) id = rs.getLong(1);
            } else {
                id = queryId(ed, now, ""dbUtilTest"", conn, dbUtil);
            }
            if (id > 0) testUser.setId(id); else rv = 0;
        }
        conn.rollback();
        assertTrue(""oups, insert failed?"", id != 0);
        System.err.println(""successfully created user with id #"" + id + "" temporarily"");
    }
","    public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException {
        InfoUnitXMLData iur = new InfoUnitXMLData(STRUCTURE_RDF);
        rdf = iur.load(""rdf"");
        rdfResource = rdf.ft(""resource"");
        rdfParseType = rdf.ft(""parse type"");
        try {
            PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), ""UTF-8""));
            URL urlModel = new URL(model);
            BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()));
            String finalTag = ""</"" + rdf.ft(""main"") + "">"";
            String line = inr.readLine();
            while (line != null && !line.equalsIgnoreCase(finalTag)) {
                outw.println(line);
                line = inr.readLine();
            }
            inr.close();
            InfoNode nodeType = infoRoot.path(rdf.ft(""constraint""));
            String type = null;
            if (nodeType != null) {
                type = nodeType.getValue().toString();
                try {
                    infoRoot.removeChildNode(nodeType);
                } catch (InvalidChildInfoNode error) {
                }
            } else if (mainResourceClass != null) type = mainResourceClass; else type = rdf.ft(""description"");
            outw.println(""   <"" + type + "" "" + rdf.ft(""about"") + ""=\"""" + ((infoNamespaces == null) ? infoRoot.getLabel() : infoNamespaces.convertEntity(infoRoot.getLabel().toString())) + ""\"">"");
            Set<InfoNode> nl = infoRoot.getChildren();
            writeNodeList(nl, outw, 5);
            outw.println(""   </"" + type + "">"");
            if (line != null) outw.println(finalTag);
            outw.close();
        } catch (IOException error) {
            throw new InfoUnitIOException(error.getMessage());
        }
    }
",False
900069,324681,19741469,"    public boolean import_status(String filename) {
        int pieceId;
        int i, j, col, row;
        int rotation;
        int number;
        boolean byurl = false;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            for (i = 0; i < board.colnb; i++) {
                for (j = 0; j < board.rownb; j++) {
                    unplace_piece_at(i, j);
                }
            }
            while (true) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
","    public static InputStream getData(DataTransferDescriptor desc, GlobusCredential creds) throws Exception {
        URL url = new URL(desc.getUrl());
        if (url.getProtocol().equals(""http"")) {
            URLConnection conn = url.openConnection();
            conn.connect();
            return conn.getInputStream();
        } else if (url.getProtocol().equals(""https"")) {
            if (creds != null) {
                GlobusGSSCredentialImpl cred = new GlobusGSSCredentialImpl(creds, GSSCredential.INITIATE_AND_ACCEPT);
                GSIHttpURLConnection connection = new GSIHttpURLConnection(url);
                connection.setGSSMode(GSIConstants.MODE_SSL);
                connection.setCredentials(cred);
                return connection.getInputStream();
            } else {
                throw new Exception(""To use the https protocol to retrieve data from the Transfer Service you must have credentials"");
            }
        }
        throw new Exception(""Protocol "" + url.getProtocol() + "" not supported."");
    }
",False
900070,386013,6134110,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (doAuth(request, response)) {
            Connection conn = null;
            try {
                int UID = icsm.getIntChatSession(request).getUID();
                conn = getJDBCConnection(icsm.getHeavyDatabaseConnectionPool(), request, response, HttpServletResponse.SC_SERVICE_UNAVAILABLE);
                if (conn == null) return;
                ResultSet rs = IntChatDatabaseOperations.executeQuery(conn, ""SELECT id FROM ic_messagetypes WHERE templatename='"" + IntChatConstants.MessageTemplates.IC_FILES + ""' LIMIT 1"");
                if (rs.next()) {
                    int fileTypeID = rs.getInt(""id"");
                    String recipients = request.getHeader(IntChatConstants.HEADER_FILERECIPIENTS);
                    rs.getStatement().close();
                    rs = null;
                    if (recipients != null) {
                        HashMap<String, String> hm = Tools.parseMultiparamLine(request.getHeader(""Content-Disposition""));
                        String fileName = URLDecoder.decode(hm.get(""filename""), IntChatServerDefaults.ENCODING);
                        long fileLength = (request.getHeader(""Content-Length"") != null ? Long.parseLong(request.getHeader(""Content-Length"")) : -1);
                        fileLength = (request.getHeader(IntChatConstants.HEADER_FILELENGTH) != null ? Long.parseLong(request.getHeader(IntChatConstants.HEADER_FILELENGTH)) : fileLength);
                        long maxFileSize = RuntimeParameters.getIntValue(ParameterNames.MAX_FILE_SIZE) * 1048576;
                        if (maxFileSize > 0 && fileLength > maxFileSize) {
                            request.getInputStream().close();
                            response.sendError(HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE);
                            return;
                        }
                        long now = System.currentTimeMillis();
                        long nextid = ic_messages_id_seq.nextval();
                        IntChatServletInputStream in = new IntChatServletInputStream(request);
                        IntChatMessage icm = null;
                        conn.setAutoCommit(false);
                        try {
                            PreparedStatement ps = conn.prepareStatement(""INSERT INTO ic_messages (id, tid, mhead, mbody, mdate, sid) VALUES (?, ?, ?, ?, ?, ?)"");
                            ps.setLong(1, nextid);
                            ps.setInt(2, fileTypeID);
                            ps.setString(3, fileName);
                            ps.setString(4, Long.toString(fileLength));
                            ps.setLong(5, now);
                            ps.setInt(6, UID);
                            ps.executeUpdate();
                            ps.close();
                            if (!insertBLOB(conn, in, fileLength, nextid, maxFileSize)) {
                                conn.rollback();
                                return;
                            }
                            icm = new IntChatMessage(false, fileTypeID, null, null);
                            String[] id = recipients.split("","");
                            int id1;
                            for (int i = 0; i < id.length; i++) {
                                id1 = Integer.parseInt(id[i].trim());
                                IntChatDatabaseOperations.executeUpdate(conn, ""INSERT INTO ic_recipients (mid, rid) VALUES ('"" + nextid + ""', '"" + id1 + ""')"");
                                icm.addTo(id1);
                            }
                            conn.commit();
                        } catch (Exception e) {
                            conn.rollback();
                            throw e;
                        } finally {
                            conn.setAutoCommit(true);
                        }
                        if (icm != null) {
                            icm.setID(nextid);
                            icm.setDate(new Timestamp(now - TimeZone.getDefault().getOffset(now)));
                            icm.setFrom(UID);
                            icm.setHeadText(fileName);
                            icm.setBodyText(Long.toString(fileLength));
                            icsm.onClientSentMessage(icm);
                        }
                        response.setStatus(HttpServletResponse.SC_OK);
                    } else {
                        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    }
                } else {
                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                }
                if (rs != null) {
                    rs.getStatement().close();
                    rs = null;
                }
            } catch (RetryRequest rr) {
                throw rr;
            } catch (Exception e) {
                Tools.makeErrorResponse(request, response, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
            } finally {
                try {
                    if (conn != null) icsm.getHeavyDatabaseConnectionPool().releaseConnection(conn);
                } catch (Exception e) {
                }
            }
        }
    }
",False
900071,285947,16579662,"    public void process(String dir) {
        String[] list = new File(dir).list();
        if (list == null) return;
        int n = list.length;
        long[] bubblesort = new long[list.length + 1];
        if (!statustext) {
            IJ.log(""Current Directory is: "" + dir);
            IJ.log("" "");
            IJ.log(""DICOM File Name / "" + prefix1 + "" / "" + prefix2 + "" / "" + prefix3 + "" / "" + pick);
            IJ.log("" "");
        }
        for (int i = 0; i < n; i++) {
            IJ.showStatus(i + ""/"" + n);
            File f = new File(dir + list[i]);
            if (!f.isDirectory()) {
                ImagePlus img = new Opener().openImage(dir, list[i]);
                if (img != null && img.getStackSize() == 1) {
                    if (!scoutengine(img)) return;
                    if (!statustext) {
                        IJ.log(list[i] + ""/"" + whichprefix1 + ""/"" + whichprefix2 + ""/"" + whichprefix3 + ""/"" + whichcase);
                    }
                    int lastDigit = whichcase.length() - 1;
                    while (lastDigit > 0) {
                        if (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1; else break;
                    }
                    if (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);
                    bubblesort[i] = Long.parseLong(whichcase);
                }
            }
        }
        if (statussorta || statussortd || statustext) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (statussorta) {
                        if (bubblesort[i] > bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    } else {
                        if (bubblesort[i] < bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    }
                }
            }
            IJ.log("" "");
            for (int i = 0; i < n; i++) {
                if (!statustext) {
                    IJ.log(list[i] + "" / "" + bubblesort[i]);
                } else {
                    IJ.log(dir + list[i]);
                }
            }
        }
        if (open_as_stack || only_images) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (bubblesort[i] > bubblesort[i + 1]) {
                        long temp = bubblesort[i];
                        tempp = list[i];
                        bubblesort[i] = bubblesort[i + 1];
                        list[i] = list[i + 1];
                        bubblesort[i + 1] = temp;
                        list[i + 1] = tempp;
                        sorted = false;
                    }
                }
            }
            if (only_images) {
                Opener o = new Opener();
                int counter = 0;
                IJ.log("" "");
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break; else {
                        ImagePlus imp = o.openImage(path);
                        counter++;
                        if (imp != null) {
                            IJ.log(counter + "" + "" + path);
                            imp.show();
                        } else IJ.log(counter + "" - "" + path);
                    }
                }
                return;
            }
            int width = 0, height = 0, type = 0;
            ImageStack stack = null;
            double min = Double.MAX_VALUE;
            double max = -Double.MAX_VALUE;
            int k = 0;
            try {
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break;
                    if (list[i].endsWith("".txt"")) continue;
                    ImagePlus imp = new Opener().openImage(path);
                    if (imp != null && stack == null) {
                        width = imp.getWidth();
                        height = imp.getHeight();
                        type = imp.getType();
                        ColorModel cm = imp.getProcessor().getColorModel();
                        if (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);
                    }
                    if (stack != null) k = stack.getSize() + 1;
                    IJ.showStatus(k + ""/"" + n);
                    IJ.showProgress((double) k / n);
                    if (imp == null) IJ.log(list[i] + "": unable to open""); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + "": wrong dimensions""); else if (imp.getType() != type) IJ.log(list[i] + "": wrong type""); else {
                        ImageProcessor ip = imp.getProcessor();
                        if (grayscale) ip = ip.convertToByte(true);
                        if (halfSize) ip = ip.resize(width / 2, height / 2);
                        if (ip.getMin() < min) min = ip.getMin();
                        if (ip.getMax() > max) max = ip.getMax();
                        String label = imp.getTitle();
                        String info = (String) imp.getProperty(""Info"");
                        if (info != null) label += ""\n"" + info;
                        stack.addSlice(label, ip);
                    }
                    System.gc();
                }
            } catch (OutOfMemoryError e) {
                IJ.outOfMemory(""FolderOpener"");
                stack.trim();
            }
            if (stack != null && stack.getSize() > 0) {
                ImagePlus imp2 = new ImagePlus(""Stack"", stack);
                if (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);
                imp2.show();
            }
            IJ.showProgress(1.0);
        }
    }
","    public void insertComponent() throws SQLException {
        Connection connection = null;
        PreparedStatement ps = null;
        try {
            Class.forName(""com.mysql.jdbc.Driver"");
            connection = (Connection) DriverManager.getConnection(this.jdbcURL);
            connection.setAutoCommit(false);
            String query = ""INSERT INTO components(name,rate,quantity, description) VALUES(?,?,?,?)"";
            ps = (PreparedStatement) connection.prepareStatement(query);
            ps.setString(1, this.name);
            ps.setDouble(2, this.rate);
            ps.setInt(3, this.quantity);
            ps.setString(4, this.description);
            ps.executeUpdate();
            connection.commit();
        } catch (Exception ex) {
            connection.rollback();
        } finally {
            try {
                connection.close();
            } catch (Exception ex) {
            }
            try {
                ps.close();
            } catch (Exception ex) {
            }
        }
    }
",False
900072,16239141,8651990,"    private void renameTo(File from, File to) {
        if (!from.exists()) return;
        if (to.exists()) to.delete();
        boolean worked = false;
        try {
            worked = from.renameTo(to);
        } catch (Exception e) {
            database.logError(this, """" + e, null);
        }
        if (!worked) {
            database.logWarning(this, ""Could not rename GEDCOM to "" + to.getAbsolutePath(), null);
            try {
                to.delete();
                final FileReader in = new FileReader(from);
                final FileWriter out = new FileWriter(to);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
                from.delete();
            } catch (Exception e) {
                database.logError(this, """" + e, null);
            }
        }
    }
","    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException, NotFoundException {
        try {
            resolveFileAttachment();
        } catch (NoFileByTheIdException e) {
            throw new NotFoundException(e.getLocalizedMessage());
        }
        DefinableEntity owningEntity = fa.getOwner().getEntity();
        InputStream in = getFileModule().readFile(owningEntity.getParentBinder(), owningEntity, fa);
        try {
            if (range != null) {
                if (logger.isDebugEnabled()) logger.debug(""sendContent: ranged content: "" + toString(fa));
                PartialGetHelper.writeRange(in, range, out);
            } else {
                if (logger.isDebugEnabled()) logger.debug(""sendContent: send whole file "" + toString(fa));
                IOUtils.copy(in, out);
            }
            out.flush();
        } catch (ReadingException e) {
            throw new IOException(e);
        } catch (WritingException e) {
            throw new IOException(e);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",True
900073,10220823,19753981,"    @Test
    public void testCopy() throws IOException {
        final byte[] input = { 0x00, 0x01, 0x7F, 0x03, 0x40 };
        final byte[] verification = input.clone();
        Assert.assertNotSame(""Expecting verification to be a new array."", input, verification);
        final ByteArrayInputStream in = new ByteArrayInputStream(input);
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        final byte[] output = out.toByteArray();
        Assert.assertTrue(""Expecting input to be unchanged."", Arrays.equals(verification, input));
        Assert.assertTrue(""Expecting output to be like input."", Arrays.equals(verification, output));
        Assert.assertNotSame(""Expecting output to be a new array."", input, output);
        Assert.assertNotSame(""Expecting output to be a new array."", verification, output);
    }
","    private void download(String address, String localFileName, String host, int porta) {
        InputStream in = null;
        URLConnection conn = null;
        OutputStream out = null;
        System.out.println(""Update.download() BAIXANDO "" + address);
        try {
            URL url = new URL(address);
            out = new BufferedOutputStream(new FileOutputStream(localFileName));
            if (host != """" && host != null) {
                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(host, porta));
                conn = url.openConnection(proxy);
            } else {
                conn = url.openConnection();
            }
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
            System.out.println(localFileName + ""\t"" + numWritten);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
    }
",False
900074,9714373,19142737,"    private void loadOverrideProperties(String uri) {
        try {
            File f = new File(uri);
            Properties temp = new Properties();
            if (f.exists()) {
                info(""Found config override file "" + f.getAbsolutePath());
                try {
                    InputStream readStream = new BufferedInputStream(new FileInputStream(f));
                    try {
                        temp.load(readStream);
                    } finally {
                        readStream.close();
                    }
                } catch (IOException iex) {
                    warning(""Error while loading override properties file; skipping."", iex);
                    return;
                }
            } else {
                InputStream in = null;
                try {
                    URL url = new URL(uri);
                    in = new BufferedInputStream(url.openStream());
                    info(""Found config override URI "" + uri);
                    temp.load(in);
                } catch (MalformedURLException e) {
                    warning(""URI for override properties is malformed, skipping: "" + uri);
                    return;
                } catch (IOException e) {
                    warning(""Overridden properties could not be loaded from URI: "" + uri, e);
                    return;
                } finally {
                    if (in != null) try {
                        in.close();
                    } catch (IOException e) {
                    }
                }
            }
            Enumeration elem = this.properties.keys();
            List lp = Collections.list(elem);
            Collections.sort(lp);
            Iterator iter = lp.iterator();
            int cnt = 0;
            while (iter.hasNext()) {
                String key = (String) iter.next();
                String val = temp.getProperty(key);
                if (val != null) {
                    this.properties.setProperty(key, val);
                    finer(""  "" + key + "" -> "" + val);
                    cnt++;
                }
            }
            finer(""Configuration: "" + cnt + "" properties overridden from secondary properties file."");
            Enumeration allRead = temp.keys();
            List ap = Collections.list(allRead);
            Collections.sort(ap);
            iter = ap.iterator();
            cnt = 0;
            while (iter.hasNext()) {
                String key = (String) iter.next();
                String val = temp.getProperty(key);
                if (val != null) {
                    this.properties.setProperty(key, val);
                    finer(""  (+)"" + key + "" -> "" + val);
                    cnt++;
                }
            }
            finer(""Configuration: "" + cnt + "" properties added from secondary properties file."");
        } catch (SecurityException e) {
            System.err.println(e.getLocalizedMessage());
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",False
900075,1447440,5350703,"    public static String fetch(String str_url) throws IOException {
        URL url;
        URLConnection connection;
        String jsonText = """";
        url = new URL(str_url);
        connection = url.openConnection();
        InputStream is = connection.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line = null;
        while ((line = br.readLine()) != null) {
            jsonText += line;
        }
        return jsonText;
    }
","    public static void readUrlWriteFileTest(String url, String fileName) throws Exception {
        System.out.println(""Initiated reading source queue URL: "" + url);
        InputStream instream = new URL(url).openStream();
        Serializer serializer = new Serializer();
        Response response = (Response) serializer.parse(instream);
        Queue queue = response.getQueue();
        instream.close();
        System.out.println(""Completed reading source queue URL (jobs="" + queue.size() + "")"");
        System.out.println(""Initiated writing target queue File: "" + fileName);
        OutputStream outstream = new FileOutputStream(fileName);
        serializer.write(response, outstream);
        outstream.close();
        System.out.println(""Completed writing target queue file."");
    }
",False
900076,10005624,8969949,"            public Object run() {
                try {
                    MessageDigest digest = MessageDigest.getInstance(""SHA"");
                    digest.update(buf.toString().getBytes());
                    byte[] data = digest.digest();
                    serialNum = new BASE64Encoder().encode(data);
                    return serialNum;
                } catch (NoSuchAlgorithmException exp) {
                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);
                    return buf.toString();
                }
            }
","    public static String getHash(String uri) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance(""MD5"");
        mDigest.update(uri.getBytes());
        byte d[] = mDigest.digest();
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < d.length; i++) {
            hash.append(Integer.toHexString(0xFF & d[i]));
        }
        return hash.toString();
    }
",True
900077,23498321,7231926,"    static final void saveModule(Module module, DBConnector connector) throws IOException {
        String type = ""pre"";
        if (module.isPreModule()) type = ""pre""; else if (module.isPostModule()) type = ""post""; else if (module.isExceptionModule()) type = ""exception""; else throw new IllegalArgumentException(""Module must be of a known type."");
        Properties props = module.getState();
        Connection con = null;
        PreparedStatement ps = null;
        Statement st = null;
        try {
            con = connector.getDB();
            con.setAutoCommit(false);
            st = con.createStatement();
            st.executeUpdate(""DELETE FROM instance where id="" + module.getId());
            st.executeUpdate(""DELETE FROM instance_property where instance_id="" + module.getId());
            ps = con.prepareStatement(""INSERT INTO instance VALUES (?, ?, ?, ?)"");
            ps.setInt(1, module.getId());
            ps.setBoolean(2, module.getActive());
            ps.setString(3, module.getClass().getName());
            ps.setString(4, type);
            ps.executeUpdate();
            ps.close();
            ps = con.prepareStatement(""INSERT INTO instance_property values(?, ?, ?)"");
            for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) {
                String key = (String) keys.nextElement();
                String value = props.getProperty(key);
                ps.setInt(1, module.getId());
                ps.setString(2, key);
                ps.setString(3, value);
                ps.addBatch();
            }
            ps.executeBatch();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            throw new IOException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ignore) {
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ignore) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ignore) {
                }
            }
        }
    }
","    public static PipeID getPipeIDForService(ServiceDescriptor descriptor) {
        PipeID id = null;
        URI uri = descriptor.getUri();
        if (uri != null) {
            try {
                id = (PipeID) IDFactory.fromURI(uri);
            } catch (URISyntaxException e) {
                throw new RuntimeException(""Error creating id for pipe "" + uri, e);
            }
        }
        if (id == null) {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
            }
            String idToHash = descriptor.getName();
            if (descriptor.getHost() != null) {
                idToHash += descriptor.getHost();
            }
            md.update(idToHash.getBytes());
            id = IDFactory.newPipeID(InfrastructurePeerGroupID, md.digest());
        }
        return id;
    }
",False
900078,13988825,3533516,"    private void setNodekeyInJsonResponse(String service) throws Exception {
        String filename = this.baseDirectory + service + "".json"";
        Scanner s = new Scanner(new File(filename));
        PrintWriter fw = new PrintWriter(new File(filename + "".new""));
        while (s.hasNextLine()) {
            fw.println(s.nextLine().replaceAll(""NODEKEY"", this.key));
        }
        s.close();
        fw.close();
        (new File(filename + "".new"")).renameTo(new File(filename));
    }
","    public boolean saveLecturerecordingsXMLOnWebserver() {
        boolean error = false;
        FTPClient ftp = new FTPClient();
        String lecture = """";
        try {
            URL url = new URL(""http://localhost:8080/virtPresenterVerwalter/lecturerecordings.jsp?seminarid="" + this.getSeminarID());
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(http.getInputStream()));
            String zeile = """";
            while ((zeile = in.readLine()) != null) {
                lecture += zeile + ""\n"";
            }
            in.close();
            http.disconnect();
        } catch (Exception e) {
            System.err.println(""Konnte lecturerecordings.xml nicht lesen."");
        }
        try {
            int reply;
            ftp.connect(this.getWebserver().getUrl());
            System.out.println(""Connected to "" + this.getWebserver().getUrl() + ""."");
            System.out.print(ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println(""FTP server refused connection."");
                return false;
            }
            if (!ftp.login(this.getWebserver().getFtpBenutzer(), this.getWebserver().getFtpPasswort())) {
                System.err.println(""FTP server: Login incorrect"");
            }
            String tmpSeminarID = this.getSeminarID();
            if (tmpSeminarID == null) tmpSeminarID = ""unbekannt"";
            try {
                ftp.changeWorkingDirectory(this.getWebserver().getDefaultPath() + ""/"" + tmpSeminarID + ""/lectures/"");
            } catch (Exception e) {
                ftp.makeDirectory(this.getWebserver().getDefaultPath() + ""/"" + tmpSeminarID + ""/lectures/"");
                ftp.changeWorkingDirectory(this.getWebserver().getDefaultPath() + ""/"" + tmpSeminarID + ""/lectures/"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ByteArrayInputStream lectureIn = new ByteArrayInputStream(lecture.getBytes());
            System.err.println(""FTP Verzeichnis: "" + ftp.printWorkingDirectory());
            ftp.storeFile(""lecturerecordings.xml"", lectureIn);
            lectureIn.close();
            ftp.logout();
            ftp.disconnect();
        } catch (IOException e) {
            System.err.println(""Job "" + this.getId() + "": Datei lecturerecordings.xml konnte nicht auf Webserver kopiert werden."");
            error = true;
            e.printStackTrace();
        } catch (NullPointerException e) {
            System.err.println(""Job "" + this.getId() + "": Datei lecturerecordings.xml konnte nicht auf Webserver kopiert werden. (Kein Webserver zugewiesen)"");
            error = true;
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
        return error;
    }
",False
900079,12660385,10072636,"            @Override
            public boolean accept(File file) {
                if (file.getName().equals("".svn"")) {
                    return false;
                }
                final long modify = file.lastModified();
                final long time = DateUtils.toDate(""2012-03-21 17:43"", ""yyyy-MM-dd HH:mm"").getTime();
                if (modify >= time) {
                    if (file.isFile()) {
                        File f = new File(StringsUtils.replace(file.getAbsolutePath(), filePath2, filePath1));
                        f.getParentFile().mkdirs();
                        try {
                            IOUtils.copyFile(file, f);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        System.out.println(f.getName());
                    }
                }
                return true;
            }
","    public Blowfish(String password) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes());
        } catch (Exception e) {
            Log.error(e.getMessage(), e);
        }
        m_bfish = new BlowfishCBC(digest.digest(), 0);
        digest.reset();
    }
",False
900080,8709483,337322,"        private void saveAttachment(long messageId, Part attachment, boolean saveAsNew) throws IOException, MessagingException {
            long attachmentId = -1;
            Uri contentUri = null;
            int size = -1;
            File tempAttachmentFile = null;
            if ((!saveAsNew) && (attachment instanceof LocalAttachmentBodyPart)) {
                attachmentId = ((LocalAttachmentBodyPart) attachment).getAttachmentId();
            }
            if (attachment.getBody() != null) {
                Body body = attachment.getBody();
                if (body instanceof LocalAttachmentBody) {
                    contentUri = ((LocalAttachmentBody) body).getContentUri();
                } else {
                    InputStream in = attachment.getBody().getInputStream();
                    tempAttachmentFile = File.createTempFile(""att"", null, mAttachmentsDir);
                    FileOutputStream out = new FileOutputStream(tempAttachmentFile);
                    size = IOUtils.copy(in, out);
                    in.close();
                    out.close();
                }
            }
            if (size == -1) {
                String disposition = attachment.getDisposition();
                if (disposition != null) {
                    String s = MimeUtility.getHeaderParameter(disposition, ""size"");
                    if (s != null) {
                        size = Integer.parseInt(s);
                    }
                }
            }
            if (size == -1) {
                size = 0;
            }
            String storeData = Utility.combine(attachment.getHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA), ',');
            String name = MimeUtility.getHeaderParameter(attachment.getContentType(), ""name"");
            String contentId = attachment.getContentId();
            if (attachmentId == -1) {
                ContentValues cv = new ContentValues();
                cv.put(""message_id"", messageId);
                cv.put(""content_uri"", contentUri != null ? contentUri.toString() : null);
                cv.put(""store_data"", storeData);
                cv.put(""size"", size);
                cv.put(""name"", name);
                cv.put(""mime_type"", attachment.getMimeType());
                cv.put(""content_id"", contentId);
                attachmentId = mDb.insert(""attachments"", ""message_id"", cv);
            } else {
                ContentValues cv = new ContentValues();
                cv.put(""content_uri"", contentUri != null ? contentUri.toString() : null);
                cv.put(""size"", size);
                cv.put(""content_id"", contentId);
                cv.put(""message_id"", messageId);
                mDb.update(""attachments"", cv, ""id = ?"", new String[] { Long.toString(attachmentId) });
            }
            if (tempAttachmentFile != null) {
                File attachmentFile = new File(mAttachmentsDir, Long.toString(attachmentId));
                tempAttachmentFile.renameTo(attachmentFile);
                attachment.setBody(new LocalAttachmentBody(contentUri, mContext));
                ContentValues cv = new ContentValues();
                cv.put(""content_uri"", contentUri != null ? contentUri.toString() : null);
                mDb.update(""attachments"", cv, ""id = ?"", new String[] { Long.toString(attachmentId) });
            }
            if (attachment instanceof LocalAttachmentBodyPart) {
                ((LocalAttachmentBodyPart) attachment).setAttachmentId(attachmentId);
            }
        }
","    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",True
900081,13626014,22634542,"    public void createPartControl(Composite parent) {
        FormToolkit toolkit;
        toolkit = new FormToolkit(parent.getDisplay());
        form = toolkit.createForm(parent);
        form.setText(""Apple Inc."");
        toolkit.decorateFormHeading(form);
        form.getBody().setLayout(new GridLayout());
        chart = createChart();
        final DateAxis dateAxis = new DateAxis();
        viewer = new GraphicalViewerImpl();
        viewer.setRootEditPart(new ScalableRootEditPart());
        viewer.setEditPartFactory(new ChartEditPartFactory(dateAxis));
        viewer.createControl(form.getBody());
        viewer.setContents(chart);
        viewer.setEditDomain(new EditDomain());
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(""selectionChanged "" + event.getSelection());
            }
        });
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                deleteAction.update();
            }
        });
        ActionRegistry actionRegistry = new ActionRegistry();
        createActions(actionRegistry);
        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);
        viewer.setContextMenu(cmProvider);
        getSite().setSelectionProvider(viewer);
        deleteAction.setSelectionProvider(viewer);
        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {

            public void stackChanged(CommandStackEvent event) {
                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());
                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());
            }
        });
        Data data = Data.getData();
        chart.setInput(data);
        DateRange dateRange = new DateRange(0, 50);
        dateAxis.setDates(data.date);
        dateAxis.setSelectedRange(dateRange);
        slider = new Slider(form.getBody(), SWT.NONE);
        slider.setMinimum(0);
        slider.setMaximum(data.close.length - 1);
        slider.setSelection(dateRange.start);
        slider.setThumb(dateRange.length);
        slider.addListener(SWT.Selection, new Listener() {

            public void handleEvent(Event event) {
                DateRange r = new DateRange(slider.getSelection(), slider.getThumb());
                dateAxis.setSelectedRange(r);
            }
        });
        final Scale spinner = new Scale(form.getBody(), SWT.NONE);
        spinner.setMinimum(5);
        spinner.setMaximum(data.close.length - 1);
        spinner.setSelection(dateRange.length);
        spinner.addListener(SWT.Selection, new Listener() {

            public void handleEvent(Event event) {
                slider.setThumb(spinner.getSelection());
                DateRange r = new DateRange(slider.getSelection(), slider.getThumb());
                dateAxis.setSelectedRange(r);
            }
        });
        GridDataFactory.defaultsFor(viewer.getControl()).grab(true, true).align(GridData.FILL, GridData.FILL).applyTo(viewer.getControl());
        GridDataFactory.defaultsFor(slider).grab(true, false).align(GridData.FILL, GridData.FILL).grab(true, false).applyTo(slider);
        GridDataFactory.defaultsFor(spinner).grab(true, false).align(GridData.FILL, GridData.FILL).grab(true, false).applyTo(spinner);
        getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
    }
","    public void run(IAction action) {
        Shell shell = new Shell();
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new GraphicalPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
",False
900082,15858891,18133461,"    @Override
    public void send() {
        BufferedReader in = null;
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
        } catch (ConnectException ce) {
            logger.error(""MockupExecutableCommand excute fail: "" + ce.getMessage());
        } catch (Exception e) {
            logger.error(""MockupExecutableCommand excute fail: "" + e.getMessage());
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error(""BufferedReader could not be closed"", e);
                }
            }
        }
    }
","    private static StringBuffer downloadHTTPPage(URL url) throws Exception {
        URLConnection con = url.openConnection();
        con.setReadTimeout(0);
        StringBuffer sb = new StringBuffer();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String line = null;
        while (null != (line = br.readLine())) {
            sb.append(line);
        }
        br.close();
        return sb;
    }
",False
900083,20189177,15683090,"    private static void stampaFoglioRisposte(HttpSession httpSess, Appelli appello, Elaborati el, StringBuffer retVal, boolean primaVolta, String url, boolean anonimo) {
        InputStream is = null;
        String html = null;
        final int MAX_RIGHE_PER_PAGINA = 25;
        long totaleDomande = EsamiDAO.trovaQuanteDomandeElaborato(el.getID());
        long numPagine = 0, totalePagine = (long) Math.ceil(totaleDomande / 50.0);
        String urlBarcode = null;
        while (numPagine < totalePagine) {
            try {
                urlBarcode = URLEncoder.encode(HtmlCodeForPrint.creaBarcode("""" + appello.getID() + ""-"" + el.getID() + ""-"" + (numPagine + 1), url), ""UTF-8"");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
            }
            String jsp = url + ""jsp/StampaRisposte.jsp?base="" + (numPagine * MAX_RIGHE_PER_PAGINA) + ""&urlbarcode="" + urlBarcode;
            try {
                URL urlJSP = new URL(jsp);
                is = urlJSP.openStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int letto = is.read();
                while (letto != -1) {
                    baos.write(letto);
                    letto = is.read();
                }
                html = baos.toString();
            } catch (IOException ex) {
                Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } finally {
                try {
                    is.close();
                } catch (IOException ex) {
                    Logger.getLogger(GestioneStampaAppello.class.getName()).log(Level.SEVERE, null, ex);
                }
                numPagine++;
            }
        }
        retVal.append(html);
    }
","    private void doUpload(UploadKind uploadKind, WriteKind writeKind) throws Exception {
        int n = 512 * 1024;
        AtomicInteger total = new AtomicInteger(0);
        ServerSocket ss = startSinkServer(total);
        URL url = new URL(""http://localhost:"" + ss.getLocalPort() + ""/test1"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(""POST"");
        if (uploadKind == UploadKind.CHUNKED) {
            conn.setChunkedStreamingMode(-1);
        } else {
            conn.setFixedLengthStreamingMode(n);
        }
        OutputStream out = conn.getOutputStream();
        if (writeKind == WriteKind.BYTE_BY_BYTE) {
            for (int i = 0; i < n; ++i) {
                out.write('x');
            }
        } else {
            byte[] buf = new byte[writeKind == WriteKind.SMALL_BUFFERS ? 256 : 64 * 1024];
            Arrays.fill(buf, (byte) 'x');
            for (int i = 0; i < n; i += buf.length) {
                out.write(buf, 0, Math.min(buf.length, n - i));
            }
        }
        out.close();
        assertTrue(conn.getResponseCode() > 0);
        assertEquals(uploadKind == UploadKind.CHUNKED ? -1 : n, total.get());
    }
",False
900084,19826765,1092728,"    private String xifraPassword() throws Exception {
        String password2 = instance.getUsuaris().getPassword2();
        MessageDigest m = MessageDigest.getInstance(""MD5"");
        m.update(password2.getBytes(), 0, password2.length());
        password2 = new BigInteger(1, m.digest()).toString(16);
        return password2;
    }
","    public String encodePassword(String rawPass, Object salt) {
        MessageDigest sha;
        try {
            sha = MessageDigest.getInstance(""SHA"");
        } catch (java.security.NoSuchAlgorithmException e) {
            throw new LdapDataAccessException(""No SHA implementation available!"");
        }
        sha.update(rawPass.getBytes());
        if (salt != null) {
            Assert.isInstanceOf(byte[].class, salt, ""Salt value must be a byte array"");
            sha.update((byte[]) salt);
        }
        byte[] hash = combineHashAndSalt(sha.digest(), (byte[]) salt);
        return (salt == null ? SHA_PREFIX : SSHA_PREFIX) + new String(Base64.encodeBase64(hash));
    }
",True
900085,8558207,1971286,"    private byte[] _generate() throws NoSuchAlgorithmException {
        if (host == null) {
            try {
                seed = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                seed = ""localhost/127.0.0.1"";
            } catch (SecurityException e) {
                seed = ""localhost/127.0.0.1"";
            }
            host = seed;
        } else {
            seed = host;
        }
        seed = seed + new Date().toString();
        seed = seed + Long.toString(rnd.nextLong());
        md = MessageDigest.getInstance(algorithm);
        md.update(seed.getBytes());
        return md.digest();
    }
","    public XmlDocument parseLocation(String locationUrl) {
        URL url = null;
        try {
            url = new URL(locationUrl);
        } catch (MalformedURLException e) {
            throw new XmlBuilderException(""could not parse URL "" + locationUrl, e);
        }
        try {
            return parseInputStream(url.openStream());
        } catch (IOException e) {
            throw new XmlBuilderException(""could not open connection to URL "" + locationUrl, e);
        }
    }
",False
900086,12646521,2240927,"        public boolean check(int timeout) {
            StringBuilder result = null;
            java.net.URL url;
            java.io.InputStream in = null;
            try {
                url = new java.net.URL(location + ""/prisms?method=test"");
                java.net.URLConnection conn = url.openConnection();
                conn.setConnectTimeout(timeout);
                in = conn.getInputStream();
                java.io.Reader reader = new java.io.InputStreamReader(in);
                result = new StringBuilder();
                int read = reader.read();
                while (read >= 0) {
                    result.append((char) read);
                    read = reader.read();
                }
            } catch (java.io.IOException e) {
                log.error(""Instance check failed"", e);
                if (in != null) try {
                    in.close();
                } catch (java.io.IOException e2) {
                }
            }
            return result != null && result.toString().startsWith(""success"");
        }
","    public boolean getFile(String pRemoteDirectory, String pLocalDirectory, String pFileName) throws IOException {
        FTPClient fc = new FTPClient();
        fc.connect(getRemoteHost());
        fc.login(getUserName(), getPassword());
        fc.changeWorkingDirectory(pRemoteDirectory);
        String workingDirectory = fc.printWorkingDirectory();
        FileOutputStream fos = null;
        logInfo(""Connected to remote host="" + getRemoteHost() + ""; userName="" + getUserName() + ""; "" + ""; remoteDirectory="" + pRemoteDirectory + ""; localDirectory="" + pLocalDirectory + ""; workingDirectory="" + workingDirectory);
        try {
            fos = new FileOutputStream(pLocalDirectory + ""/"" + pFileName);
            boolean retrieved = fc.retrieveFile(pFileName, fos);
            if (true == retrieved) {
                logInfo(""Successfully retrieved file: "" + pFileName);
            } else {
                logError(""Could not retrieve file: "" + pFileName);
            }
            return retrieved;
        } finally {
            if (null != fos) {
                fos.flush();
                fos.close();
            }
        }
    }
",False
900087,9552054,22900247,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) dir.mkdir();
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException {
        File[] sourceFiles = sourceDirectory.listFiles(FILE_FILTER);
        File[] sourceDirectories = sourceDirectory.listFiles(DIRECTORY_FILTER);
        targetDirectory.mkdirs();
        if (sourceFiles != null && sourceFiles.length > 0) {
            for (int i = 0; i < sourceFiles.length; i++) {
                File sourceFile = sourceFiles[i];
                FileInputStream fis = new FileInputStream(sourceFile);
                FileOutputStream fos = new FileOutputStream(targetDirectory + File.separator + sourceFile.getName());
                FileChannel fcin = fis.getChannel();
                FileChannel fcout = fos.getChannel();
                ByteBuffer buf = ByteBuffer.allocateDirect(8192);
                long size = fcin.size();
                long n = 0;
                while (n < size) {
                    buf.clear();
                    if (fcin.read(buf) < 0) {
                        break;
                    }
                    buf.flip();
                    n += fcout.write(buf);
                }
                fcin.close();
                fcout.close();
                fis.close();
                fos.close();
            }
        }
        if (sourceDirectories != null && sourceDirectories.length > 0) {
            for (int i = 0; i < sourceDirectories.length; i++) {
                File directory = sourceDirectories[i];
                File newTargetDirectory = new File(targetDirectory, directory.getName());
                copyDirectory(directory, newTargetDirectory);
            }
        }
    }
",True
900088,11103539,12122713,"    public void compressFile(String filePath) {
        String outPut = filePath + "".zip"";
        try {
            FileInputStream in = new FileInputStream(filePath);
            GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(outPut));
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
            in.close();
            out.close();
        } catch (Exception c) {
            c.printStackTrace();
        }
    }
","    private void readVersion() {
        URL url = ClassLoader.getSystemResource(""version"");
        if (url == null) {
            return;
        }
        BufferedReader reader = null;
        String line = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(""Version="")) {
                    version = (line.split(""=""))[1];
                }
                if (line.startsWith(""Revision="")) {
                    revision = (line.split(""=""))[1];
                }
                if (line.startsWith(""Date="")) {
                    String sSec = (line.split(""=""))[1];
                    Long lSec = Long.valueOf(sSec);
                    compileDate = new Date(lSec);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return;
    }
",False
900089,18427451,2069219,"    static void cleanFile(File file) {
        final Counter cnt = new Counter();
        final File out = new File(FileUtils.appendToFileName(file.getAbsolutePath(), "".cleaned""));
        final SAMFileReader reader = new SAMFileReader(file);
        final SAMRecordIterator it = reader.iterator();
        final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out);
        if (!it.hasNext()) return;
        log.info(""Cleaning file "" + file + "" to "" + out.getName());
        SAMRecord last = it.next();
        writer.addAlignment(last);
        while (it.hasNext()) {
            final SAMRecord now = it.next();
            final int start1 = last.getAlignmentStart();
            final int start2 = now.getAlignmentStart();
            final int end1 = last.getAlignmentEnd();
            final int end2 = now.getAlignmentEnd();
            if (start1 == start2 && end1 == end2) {
                log.debug(""Discarding record "" + now.toString());
                cnt.count();
                continue;
            }
            writer.addAlignment(now);
            last = now;
        }
        writer.close();
        reader.close();
        log.info(file + "" done, discarded "" + cnt.getCount() + "" reads"");
        exe.shutdown();
    }
","    public static void copieFichier(File fichier1, File fichier2) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(fichier1).getChannel();
            out = new FileOutputStream(fichier2).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900090,10968489,357304,"    private void storeFieldMap(Content c, Connection conn) throws SQLException {
        SQLDialect dialect = getDatabase().getSQLDialect();
        if (TRANSACTIONS_ENABLED) {
            conn.setAutoCommit(false);
        }
        try {
            Object thisKey = c.getPrimaryKey();
            deleteFieldContent(thisKey, conn);
            PreparedStatement ps = null;
            StructureItem nextItem;
            Map fieldMap = c.getFieldMap();
            String type;
            Object value, siKey;
            for (Iterator i = c.getStructure().getStructureItems().iterator(); i.hasNext(); ) {
                nextItem = (StructureItem) i.next();
                type = nextItem.getDataType().toUpperCase();
                siKey = nextItem.getPrimaryKey();
                value = fieldMap.get(nextItem.getName());
                if (type.equals(StructureItem.DATE)) {
                    ps = conn.prepareStatement(sqlConstants.get(""INSERT_DATE_FIELD""));
                    ps.setObject(1, thisKey);
                    ps.setObject(2, siKey);
                    dialect.setDate(ps, 3, (java.util.Date) value);
                    ps.executeUpdate();
                } else if (type.equals(StructureItem.INT) || type.equals(StructureItem.FLOAT) || type.equals(StructureItem.VARCHAR)) {
                    ps = conn.prepareStatement(sqlConstants.get(""INSERT_"" + type + ""_FIELD""));
                    ps.setObject(1, thisKey);
                    ps.setObject(2, siKey);
                    if (value != null) {
                        ps.setObject(3, value);
                    } else {
                        int sqlType = Types.INTEGER;
                        if (type.equals(StructureItem.FLOAT)) {
                            sqlType = Types.FLOAT;
                        } else if (type.equals(StructureItem.VARCHAR)) {
                            sqlType = Types.VARCHAR;
                        }
                        ps.setNull(3, sqlType);
                    }
                    ps.executeUpdate();
                } else if (type.equals(StructureItem.TEXT)) {
                    setTextField(c, siKey, (String) value, conn);
                }
                if (ps != null) {
                    ps.close();
                    ps = null;
                }
            }
            if (TRANSACTIONS_ENABLED) {
                conn.commit();
            }
        } catch (SQLException e) {
            if (TRANSACTIONS_ENABLED) {
                conn.rollback();
            }
            throw e;
        } finally {
            if (TRANSACTIONS_ENABLED) {
                conn.setAutoCommit(true);
            }
        }
    }
","    public static String get(String strUrl) {
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            conn.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""User-Agent:"", ""Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/523.12.2 (KHTML, like Gecko) Version/3.0.4 Safari/523.12.2"");
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += '\n' + s;
            }
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
",False
900091,4477205,11650020,"    private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException {
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream(srcFile);
            FileChannel iChannel = is.getChannel();
            os = new FileOutputStream(destFile, false);
            FileChannel oChannel = os.getChannel();
            long doneBytes = 0L;
            long todoBytes = srcFile.length();
            while (todoBytes != 0L) {
                long iterationBytes = Math.min(todoBytes, chunkSize);
                long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes);
                if (iterationBytes != transferredLength) {
                    throw new IOException(""Error during file transfer: expected "" + iterationBytes + "" bytes, only "" + transferredLength + "" bytes copied."");
                }
                doneBytes += transferredLength;
                todoBytes -= transferredLength;
            }
        } finally {
            if (is != null) {
                is.close();
            }
            if (os != null) {
                os.close();
            }
        }
        boolean successTimestampOp = destFile.setLastModified(srcFile.lastModified());
        if (!successTimestampOp) {
            log.warn(""Could not change timestamp for {}. Index synchronization may be slow."", destFile);
        }
    }
","    public static String encrypt(String message) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(message.getBytes());
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(digest.digest());
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return null;
        }
    }
",False
900092,22924615,18611368,"            @Override
            public void run() {
                try {
                    bitmapDrawable = new BitmapDrawable(new URL(url).openStream());
                    imageCache.put(id, new SoftReference<Drawable>(bitmapDrawable));
                    log(""image::: put:  id = "" + id + "" "");
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                handler.post(new Runnable() {

                    @Override
                    public void run() {
                        iv.setImageDrawable(bitmapDrawable);
                    }
                });
            }
","    private static void downloadFile(URL url, File destFile) throws Exception {
        try {
            URLConnection urlConnection = url.openConnection();
            File tmpFile = null;
            try {
                tmpFile = File.createTempFile(""remoteLib_"", null);
                InputStream in = null;
                FileOutputStream out = null;
                try {
                    in = urlConnection.getInputStream();
                    out = new FileOutputStream(tmpFile);
                    IOUtils.copy(in, out);
                } finally {
                    if (out != null) {
                        out.close();
                    }
                    if (in != null) {
                        in.close();
                    }
                }
                FileUtils.copyFile(tmpFile, destFile);
            } finally {
                if (tmpFile != null) {
                    tmpFile.delete();
                }
            }
        } catch (Exception ex) {
            throw new RuntimeException(""Could not download URL: "" + url, ex);
        }
    }
",False
900093,22331867,13243880,"    protected void removeMessage(ReplicationMessage message) {
        logger.info(String.format(""remove replication message: %d"", message.getId()));
        ConnectionProvider cp = null;
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            SessionFactoryImplementor impl = (SessionFactoryImplementor) portalDao.getSessionFactory();
            cp = impl.getConnectionProvider();
            conn = cp.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(""delete from light_replication_message where id=?"");
            ps.setLong(1, message.getId());
            ps.executeUpdate();
            conn.commit();
            ps.close();
            conn.close();
        } catch (Exception e) {
            try {
                conn.rollback();
                ps.close();
                conn.close();
            } catch (Exception se) {
            }
        }
    }
","    public int[] bubbleSort(int[] data) {
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data.length - i - 1; j++) {
                if (data[j] > data[j + 1]) {
                    int temp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = temp;
                }
            }
        }
        return data;
    }
",False
900094,17793612,15480455,"        public SequenceIterator call(SequenceIterator[] arguments, XPathContext context) throws XPathException {
            try {
                String encodedString = ((StringValue) arguments[0].next()).getStringValue();
                byte[] decodedBytes = Base64.decode(encodedString);
                if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) {
                    ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
                    GZIPInputStream zis = new GZIPInputStream(bis);
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(zis, baos);
                    decodedBytes = baos.toByteArray();
                }
                Document doc = XmlUtils.stringToDocument(new String(decodedBytes, ""UTF-8""));
                Source source = new DOMSource(doc.getDocumentElement());
                XPathEvaluator evaluator = new XPathEvaluator(context.getConfiguration());
                NodeInfo[] infos = new NodeInfo[] { evaluator.setSource(source) };
                return new ArrayIterator(infos);
            } catch (Exception e) {
                throw new XPathException(""Could not base64 decode string"", e);
            }
        }
","    public static void TestDBStore() throws PDException, Exception {
        StoreDDBB StDB = new StoreDDBB(""jdbc:derby://localhost:1527/Prodoc"", ""Prodoc"", ""Prodoc"", ""org.apache.derby.jdbc.ClientDriver;STBLOB"");
        System.out.println(""Driver["" + StDB.getDriver() + ""] Tabla  ["" + StDB.getTable() + ""]"");
        StDB.Connect();
        FileInputStream in = new FileInputStream(""/tmp/readme.htm"");
        StDB.Insert(""12345678-1"", ""1.0"", in);
        int TAMBUFF = 1024 * 64;
        byte Buffer[] = new byte[TAMBUFF];
        InputStream Bytes;
        Bytes = StDB.Retrieve(""12345678-1"", ""1.0"");
        FileOutputStream fo = new FileOutputStream(""/tmp/12345679.htm"");
        int readed = Bytes.read(Buffer);
        while (readed != -1) {
            fo.write(Buffer, 0, readed);
            readed = Bytes.read(Buffer);
        }
        Bytes.close();
        fo.close();
        StDB.Delete(""12345678-1"", ""1.0"");
        StDB.Disconnect();
    }
",True
900095,23677119,21930706,"	public static void copyFile6(File srcFile, File destFile) throws FileNotFoundException {
		Scanner s = new Scanner(srcFile);
		PrintWriter pw = new PrintWriter(destFile);
		while(s.hasNextLine()) {
			pw.println(s.nextLine());
		}
		pw.close();
		s.close();
	}
","    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
",True
900096,21246898,9830269,"    public static void main(String[] args) throws ParseException, FileNotFoundException, IOException {
        InputStream input = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream(""definition_template""));
        Translator t = new Translator(input, ""UTF8"");
        Node template = Translator.Start();
        File langs = new File(""support/support/translate/languages"");
        for (File f : langs.listFiles()) {
            if (f.getName().endsWith("".lng"")) {
                input = new BufferedInputStream(new FileInputStream(f));
                try {
                    Translator.ReInit(input, ""UTF8"");
                } catch (java.lang.NullPointerException e) {
                    new Translator(input, ""UTF8"");
                }
                Node newFile = Translator.Start();
                ArrayList<Addition> additions = new ArrayList<Addition>();
                syncKeys(template, newFile, additions);
                ArrayList<String> fileLines = new ArrayList<String>();
                Scanner scanner = new Scanner(new BufferedReader(new FileReader(f)));
                while (scanner.hasNextLine()) {
                    fileLines.add(scanner.nextLine());
                }
                int offset = 0;
                for (Addition a : additions) {
                    System.out.println(""Key added "" + a + "" to "" + f.getName());
                    if (a.afterLine < 0 || a.afterLine >= fileLines.size()) {
                        fileLines.add(a.getAddition(0));
                    } else {
                        fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0));
                    }
                }
                f.delete();
                Writer writer = new BufferedWriter(new FileWriter(f));
                for (String s : fileLines) writer.write(s + ""\n"");
                writer.close();
                System.out.println(""Language "" + f.getName() + "" had "" + additions.size() + "" additions"");
            }
        }
        File defFile = new File(langs, ""language.lng"");
        defFile.delete();
        defFile.createNewFile();
        InputStream copyStream = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream(""definition_template""));
        OutputStream out = new BufferedOutputStream(new FileOutputStream(defFile));
        int c = 0;
        while ((c = copyStream.read()) >= 0) out.write(c);
        out.close();
        System.out.println(""Languages updated."");
    }
","                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
",True
900097,11238287,6128274,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option encodingOption = cmdLineParser.addStringOption('c', ""charset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String encoding = (String) cmdLineParser.getOptionValue(encodingOption);
            if (encoding == null || encoding.trim().equals("""")) {
                encoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(outputFile.getName()).getValue();
            }
            if (""tex"".equals(format)) {
                Reader reader = new LatexEncoderReader(new FileReader(inputFile));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of output file "" + outputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
","    private void compress(File target, Set<File> files) throws CacheOperationException, ConfigurationException {
        ZipOutputStream zipOutput = null;
        try {
            zipOutput = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(target)));
            for (File file : files) {
                BufferedInputStream fileInput = null;
                File cachePathName = new File(cacheFolder, file.getPath());
                try {
                    if (!cachePathName.exists()) {
                        throw new CacheOperationException(""Expected to add file ''{0}'' to export archive ''{1}'' (Account : {2}) but it "" + ""has gone missing (cause unknown). This can indicate implementation or deployment "" + ""error. Aborting export operation as a safety precaution."", cachePathName.getPath(), target.getAbsolutePath(), account.getOid());
                    }
                    fileInput = new BufferedInputStream(new FileInputStream(cachePathName));
                    ZipEntry entry = new ZipEntry(file.getPath());
                    entry.setSize(cachePathName.length());
                    entry.setTime(cachePathName.lastModified());
                    zipOutput.putNextEntry(entry);
                    cacheLog.debug(""Added new export zip entry ''{0}''."", file.getPath());
                    int count, total = 0;
                    int buffer = 2048;
                    byte[] data = new byte[buffer];
                    while ((count = fileInput.read(data, 0, buffer)) != -1) {
                        zipOutput.write(data, 0, count);
                        total += count;
                    }
                    zipOutput.flush();
                    if (total != cachePathName.length()) {
                        throw new CacheOperationException(""Only wrote {0} out of {1} bytes when archiving file ''{2}'' (Account : {3}). "" + ""This could have occured either due implementation error or file I/O error. "" + ""Aborting archive operation to prevent a potentially corrupt export archive to "" + ""be created."", total, cachePathName.length(), cachePathName.getPath(), account.getOid());
                    } else {
                        cacheLog.debug(""Wrote {0} out of {1} bytes to zip entry ''{2}''"", total, cachePathName.length(), file.getPath());
                    }
                } catch (SecurityException e) {
                    throw new ConfigurationException(""Security manager has denied r/w access when attempting to read file ''{0}'' and "" + ""write it to archive ''{1}'' (Account : {2}) : {3}"", e, cachePathName.getPath(), target, account.getOid(), e.getMessage());
                } catch (IllegalArgumentException e) {
                    throw new CacheOperationException(""Error creating ZIP archive for account ID = {0} : {1}"", e, account.getOid(), e.getMessage());
                } catch (FileNotFoundException e) {
                    throw new CacheOperationException(""Attempted to include file ''{0}'' in export archive but it has gone missing "" + ""(Account : {1}). Possible implementation error in local file cache. Aborting  "" + ""export operation as a precaution ({2})"", e, cachePathName.getPath(), account.getOid(), e.getMessage());
                } catch (ZipException e) {
                    throw new CacheOperationException(""Error writing export archive for account ID = {0} : {1}"", e, account.getOid(), e.getMessage());
                } catch (IOException e) {
                    throw new CacheOperationException(""I/O error while creating export archive for account ID = {0}. "" + ""Operation aborted ({1})"", e, account.getOid(), e.getMessage());
                } finally {
                    if (zipOutput != null) {
                        try {
                            zipOutput.closeEntry();
                        } catch (Throwable t) {
                            cacheLog.warn(""Unable to close zip entry for file ''{0}'' in export archive ''{1}'' "" + ""(Account : {2}) : {3}."", t, file.getPath(), target.getAbsolutePath(), account.getOid(), t.getMessage());
                        }
                    }
                    if (fileInput != null) {
                        try {
                            fileInput.close();
                        } catch (Throwable t) {
                            cacheLog.warn(""Failed to close input stream from file ''{0}'' being added "" + ""to export archive (Account : {1}) : {2}"", t, cachePathName.getPath(), account.getOid(), t.getMessage());
                        }
                    }
                }
            }
        } catch (FileNotFoundException e) {
            throw new CacheOperationException(""Unable to create target export archive ''{0}'' for account {1) : {2}"", e, target, account.getOid(), e.getMessage());
        } finally {
            try {
                if (zipOutput != null) {
                    zipOutput.close();
                }
            } catch (Throwable t) {
                cacheLog.warn(""Failed to close the stream to export archive ''{0}'' : {1}."", t, target, t.getMessage());
            }
        }
    }
",True
900098,20826307,250595,"    public static void createZipFromDataset(String localResourceId, File dataset, File metadata) {
        CommunicationLogger.warning(""System entered ZipFactory"");
        try {
            String tmpDir = System.getProperty(""java.io.tmpdir"");
            String outFilename = tmpDir + ""/"" + localResourceId + "".zip"";
            CommunicationLogger.warning(""File name: "" + outFilename);
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outFilename));
            byte[] buf = new byte[1024];
            FileInputStream in = new FileInputStream(dataset);
            out.putNextEntry(new ZipEntry(dataset.getName()));
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in = new FileInputStream(metadata);
            out.putNextEntry(new ZipEntry(metadata.getName()));
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.closeEntry();
            in.close();
            out.close();
        } catch (IOException e) {
            System.out.println(""IO EXCEPTION: "" + e.getMessage());
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900099,10941155,12909291,"    private void detachFile(File file, Block b) throws IOException {
        File tmpFile = volume.createDetachFile(b, file.getName());
        try {
            IOUtils.copyBytes(new FileInputStream(file), new FileOutputStream(tmpFile), 16 * 1024, true);
            if (file.length() != tmpFile.length()) {
                throw new IOException(""Copy of file "" + file + "" size "" + file.length() + "" into file "" + tmpFile + "" resulted in a size of "" + tmpFile.length());
            }
            FileUtil.replaceFile(tmpFile, file);
        } catch (IOException e) {
            boolean done = tmpFile.delete();
            if (!done) {
                DataNode.LOG.info(""detachFile failed to delete temporary file "" + tmpFile);
            }
            throw e;
        }
    }
","    public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.setContentType(s_contentType);
        response.setHeader(""Cache-control"", ""no-cache"");
        InputStream graphStream = getGraphStream(request);
        OutputStream out = getOutputStream(response);
        IOUtils.copy(graphStream, out);
        out.flush();
    }
",True
900100,2269290,6150596,"    public final void copyFile(final File fromFile, final File toFile) throws IOException {
        this.createParentPathIfNeeded(toFile);
        final FileChannel sourceChannel = new FileInputStream(fromFile).getChannel();
        final FileChannel targetChannel = new FileOutputStream(toFile).getChannel();
        final long sourceFileSize = sourceChannel.size();
        sourceChannel.transferTo(0, sourceFileSize, targetChannel);
    }
","    public static String md5(String texto) {
        String resultado;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(texto.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            resultado = hash.toString(16);
            if (resultado.length() < 32) {
                char chars[] = new char[32 - resultado.length()];
                Arrays.fill(chars, '0');
                resultado = new String(chars) + resultado;
            }
        } catch (NoSuchAlgorithmException e) {
            resultado = e.toString();
        }
        return resultado;
    }
",False
900101,22098632,16545678,"    private String getMd5(String base64image) {
        String token = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(base64image.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            token = hash.toString(16);
        } catch (NoSuchAlgorithmException nsae) {
        }
        return token;
    }
","    private boolean copyFile(File inFile, File outFile) {
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new FileReader(inFile));
            writer = new BufferedWriter(new FileWriter(outFile));
            while (reader.ready()) {
                writer.write(reader.read());
            }
            writer.flush();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                    return false;
                }
            }
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException ex) {
                    return false;
                }
            }
        }
        return true;
    }
",False
900102,908793,14696592,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException {
        if (algorithm == null) {
            throw new IllegalArgumentException(""THE ALGORITHM MUST NOT BE NULL"");
        }
        if (password == null) {
            throw new IllegalArgumentException(""THE PASSWORD MUST NOT BE NULL"");
        }
        if (salt == null) {
            salt = """";
        }
        String result = null;
        try {
            MessageDigest md = MessageDigest.getInstance(algorithm);
            md.update(password.getBytes());
            md.update(salt.getBytes());
            result = SecurityHelper.byteArrayToHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new DruidSafeRuntimeException(e);
        }
        return result;
    }
",False
900103,13997019,13868519,"    public String read(String url) throws IOException {
        URL myurl = new URL(url);
        BufferedReader in = new BufferedReader(new InputStreamReader(myurl.openStream()));
        StringBuffer sb = new StringBuffer();
        String inputLine;
        while ((inputLine = in.readLine()) != null) sb.append(inputLine);
        in.close();
        return sb.toString();
    }
","    public static void addClasses(URL url) {
        BufferedReader reader = null;
        String line;
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if ((line.length() == 0) || line.startsWith("";"")) {
                    continue;
                }
                try {
                    classes.add(Class.forName(line, true, cl));
                } catch (Throwable t) {
                }
            }
        } catch (Throwable t) {
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (Throwable t) {
                }
            }
        }
    }
",True
900104,4477205,8677887,"    private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException {
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream(srcFile);
            FileChannel iChannel = is.getChannel();
            os = new FileOutputStream(destFile, false);
            FileChannel oChannel = os.getChannel();
            long doneBytes = 0L;
            long todoBytes = srcFile.length();
            while (todoBytes != 0L) {
                long iterationBytes = Math.min(todoBytes, chunkSize);
                long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes);
                if (iterationBytes != transferredLength) {
                    throw new IOException(""Error during file transfer: expected "" + iterationBytes + "" bytes, only "" + transferredLength + "" bytes copied."");
                }
                doneBytes += transferredLength;
                todoBytes -= transferredLength;
            }
        } finally {
            if (is != null) {
                is.close();
            }
            if (os != null) {
                os.close();
            }
        }
        boolean successTimestampOp = destFile.setLastModified(srcFile.lastModified());
        if (!successTimestampOp) {
            log.warn(""Could not change timestamp for {}. Index synchronization may be slow."", destFile);
        }
    }
","    public Document getWsdlDomResource(String aResourceName) throws SdlException {
        logger.debug(""getWsdlDomResource() "" + aResourceName);
        InputStream in = null;
        try {
            URL url = getDeploymentContext().getResourceURL(aResourceName);
            if (url == null) {
                logger.error(""url is null"");
                return null;
            } else {
                logger.debug(""loading wsdl document "" + aResourceName);
                in = url.openStream();
                return getSdlParser().loadWsdlDocument(in, null);
            }
        } catch (Throwable t) {
            logger.error(""Error: "" + t + "" for "" + aResourceName);
            throw new SdlDeploymentException(MessageFormat.format(""unable to load: {0} from {1}"", new Object[] { aResourceName, getDeploymentContext().getDeploymentLocation() }), t);
        } finally {
            SdlCloser.close(in);
        }
    }
",False
900105,20169230,22079999,"    @Override
    public String addUserIdentity(OpenIDItem identity, long userId) throws DatabaseException {
        if (identity == null) throw new NullPointerException(""identity"");
        if (identity.getIdentity() == null || """".equals(identity.getIdentity())) throw new NullPointerException(""identity.getIdentity()"");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn(""Unable to set autocommit off"", e);
        }
        String retID = ""exist"";
        PreparedStatement insSt = null, seqSt = null;
        try {
            int modified = 0;
            insSt = getConnection().prepareStatement(INSERT_IDENTITY_STATEMENT);
            insSt.setLong(1, userId);
            insSt.setString(2, identity.getIdentity());
            modified = insSt.executeUpdate();
            seqSt = getConnection().prepareStatement(USER_IDENTITY_VALUE);
            ResultSet rs = seqSt.executeQuery();
            while (rs.next()) {
                retID = rs.getString(1);
            }
            if (modified == 1) {
                getConnection().commit();
                LOGGER.debug(""DB has been updated. Queries: \"""" + seqSt + ""\"" and \"""" + insSt + ""\"""");
            } else {
                getConnection().rollback();
                LOGGER.debug(""DB has not been updated -> rollback! Queries: \"""" + seqSt + ""\"" and \"""" + insSt + ""\"""");
                retID = ""error"";
            }
        } catch (SQLException e) {
            LOGGER.error(e);
            retID = ""error"";
        } finally {
            closeConnection();
        }
        return retID;
    }
","    public static SubstanceSkin.ColorSchemes getColorSchemes(URL url) {
        List<SubstanceColorScheme> schemes = new ArrayList<SubstanceColorScheme>();
        BufferedReader reader = null;
        Color ultraLight = null;
        Color extraLight = null;
        Color light = null;
        Color mid = null;
        Color dark = null;
        Color ultraDark = null;
        Color foreground = null;
        String name = null;
        ColorSchemeKind kind = null;
        boolean inColorSchemeBlock = false;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while (true) {
                String line = reader.readLine();
                if (line == null) break;
                line = line.trim();
                if (line.length() == 0) continue;
                if (line.startsWith(""#"")) {
                    continue;
                }
                if (line.indexOf(""{"") >= 0) {
                    if (inColorSchemeBlock) {
                        throw new IllegalArgumentException(""Already in color scheme definition"");
                    }
                    inColorSchemeBlock = true;
                    name = line.substring(0, line.indexOf(""{"")).trim();
                    continue;
                }
                if (line.indexOf(""}"") >= 0) {
                    if (!inColorSchemeBlock) {
                        throw new IllegalArgumentException(""Not in color scheme definition"");
                    }
                    inColorSchemeBlock = false;
                    if ((name == null) || (kind == null) || (ultraLight == null) || (extraLight == null) || (light == null) || (mid == null) || (dark == null) || (ultraDark == null) || (foreground == null)) {
                        throw new IllegalArgumentException(""Incomplete specification"");
                    }
                    Color[] colors = new Color[] { ultraLight, extraLight, light, mid, dark, ultraDark, foreground };
                    if (kind == ColorSchemeKind.LIGHT) {
                        schemes.add(getLightColorScheme(name, colors));
                    } else {
                        schemes.add(getDarkColorScheme(name, colors));
                    }
                    name = null;
                    kind = null;
                    ultraLight = null;
                    extraLight = null;
                    light = null;
                    mid = null;
                    dark = null;
                    ultraDark = null;
                    foreground = null;
                    continue;
                }
                String[] split = line.split(""="");
                if (split.length != 2) {
                    throw new IllegalArgumentException(""Unsupported format in line "" + line);
                }
                String key = split[0].trim();
                String value = split[1].trim();
                if (""kind"".equals(key)) {
                    if (kind == null) {
                        if (""Light"".equals(value)) {
                            kind = ColorSchemeKind.LIGHT;
                            continue;
                        }
                        if (""Dark"".equals(value)) {
                            kind = ColorSchemeKind.DARK;
                            continue;
                        }
                        throw new IllegalArgumentException(""Unsupported format in line "" + line);
                    }
                    throw new IllegalArgumentException(""'kind' should only be defined once"");
                }
                if (""colorUltraLight"".equals(key)) {
                    if (ultraLight == null) {
                        ultraLight = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'ultraLight' should only be defined once"");
                }
                if (""colorExtraLight"".equals(key)) {
                    if (extraLight == null) {
                        extraLight = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'extraLight' should only be defined once"");
                }
                if (""colorLight"".equals(key)) {
                    if (light == null) {
                        light = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'light' should only be defined once"");
                }
                if (""colorMid"".equals(key)) {
                    if (mid == null) {
                        mid = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'mid' should only be defined once"");
                }
                if (""colorDark"".equals(key)) {
                    if (dark == null) {
                        dark = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'dark' should only be defined once"");
                }
                if (""colorUltraDark"".equals(key)) {
                    if (ultraDark == null) {
                        ultraDark = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'ultraDark' should only be defined once"");
                }
                if (""colorForeground"".equals(key)) {
                    if (foreground == null) {
                        foreground = Color.decode(value);
                        continue;
                    }
                    throw new IllegalArgumentException(""'foreground' should only be defined once"");
                }
                throw new IllegalArgumentException(""Unsupported format in line "" + line);
            }
            ;
        } catch (IOException ioe) {
            throw new IllegalArgumentException(ioe);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ioe) {
                }
            }
        }
        return new SubstanceSkin.ColorSchemes(schemes);
    }
",False
900106,22654851,9434056,"    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
","        @Override
        void execute(Connection conn, Component parent, String context, ProgressMonitor progressBar, ProgressWrapper progressWrapper) throws Exception {
            Statement statement = null;
            try {
                conn.setAutoCommit(false);
                statement = conn.createStatement();
                String deleteSql = getDeleteSql(m_compositionId);
                statement.executeUpdate(deleteSql);
                conn.commit();
                s_compostionCache.delete(new Integer(m_compositionId));
            } catch (SQLException ex) {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                throw ex;
            } finally {
                if (statement != null) {
                    statement.close();
                }
            }
        }
",False
900107,15144864,7726949,"    public static String encryptMd5(String plaintext) {
        String hashtext = """";
        try {
            MessageDigest m;
            m = MessageDigest.getInstance(""MD5"");
            m.reset();
            m.update(plaintext.getBytes());
            byte[] digest = m.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hashtext;
    }
","    protected static String readUrl(URL url) throws IOException {
        BufferedReader in = null;
        StringBuffer buf = new StringBuffer();
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            final char[] charBuf = new char[1024];
            int len = 0;
            while ((len = in.read(charBuf)) != -1) buf.append(charBuf, 0, len);
        } finally {
            if (in != null) in.close();
        }
        return buf.toString();
    }
",False
900108,11572565,952242,"    public static final boolean copy(File source, File target, boolean overwrite) {
        if (!overwrite && target.exists()) {
            LOGGER.error(""Target file exist and it not permitted to overwrite it !"");
            return false;
        }
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(target).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException e) {
            LOGGER.error(e.getLocalizedMessage());
            if (LOGGER.isDebugEnabled()) e.printStackTrace();
            return false;
        } catch (IOException e) {
            LOGGER.error(e.getLocalizedMessage());
            if (LOGGER.isDebugEnabled()) e.printStackTrace();
            return false;
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
            try {
                out.close();
            } catch (Exception e) {
            }
        }
        return true;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900109,11238195,14484136,"    public void init() {
        System.out.println(""Init applet..."");
        int port = Integer.parseInt(getParameter(""port""));
        int useUDP = Integer.parseInt(getParameter(""udp""));
        boolean bUseUDP = false;
        if (useUDP > 0) bUseUDP = true;
        m_strWorld = getParameter(""world"");
        m_strHost = this.getCodeBase().getHost();
        try {
            new EnvironmentMap(getParameter(""vrwmap""));
        } catch (Throwable t) {
            System.out.println(t.getMessage());
        }
        URL urlExperiment = null;
        InputStream expStream = null;
        try {
            String strPathExperiment = getParameter(""experiment"");
            if (strPathExperiment.length() > 0) {
                urlExperiment = new URL(getCodeBase(), strPathExperiment);
                expStream = urlExperiment.openStream();
            }
        } catch (java.net.MalformedURLException e) {
            System.out.println(""Couldn't open url experiment: badly specified URL "" + e.getMessage());
        } catch (Throwable t) {
            System.out.println(""Couldn't open url experiment: "" + t.getMessage());
        }
        try {
            System.out.println(""Creating client, logging to "" + m_strWorld);
            m_VRWClient = new VRWClient(m_strHost, port, true, bUseUDP);
            m_VRWClient.setInApplet(true);
            m_VRWClient.login(m_strWorld);
        } catch (java.io.IOException e) {
            System.out.println(""IOException creating the VRWClient"");
        }
        try {
            jsobj = JSObject.getWindow(this);
        } catch (Throwable t) {
            System.out.println(""Exception getting Java Script Interface: "" + t.getMessage());
        }
        refApplet = this;
        m_frmVRWConsole = new VRWConsoleFrame();
        m_frmVRWConsole.setTitle(""VRW Client Console"");
        m_frmVRWConsole.pack();
        m_frmVRWConsole.setSize(Math.max(300, m_frmVRWConsole.getSize().width), Math.max(200, m_frmVRWConsole.getSize().height));
        if (expStream != null) {
            System.out.println(""Passing experiment stream to VRWConsoleFrame"");
            m_frmVRWConsole.loadExperiment(expStream);
        }
        m_frmVRWConsole.setVisible(true);
    }
","    public void copyJarContent(File jarPath, File targetDir) throws IOException {
        log.info(""Copying natives from "" + jarPath.getName());
        JarFile jar = new JarFile(jarPath);
        Enumeration<JarEntry> entries = jar.entries();
        while (entries.hasMoreElements()) {
            JarEntry file = entries.nextElement();
            File f = new File(targetDir, file.getName());
            log.info(""Copying native - "" + file.getName());
            File parentFile = f.getParentFile();
            parentFile.mkdirs();
            if (file.isDirectory()) {
                f.mkdir();
                continue;
            }
            InputStream is = null;
            FileOutputStream fos = null;
            try {
                is = jar.getInputStream(file);
                fos = new FileOutputStream(f);
                IOUtils.copy(is, fos);
            } finally {
                if (fos != null) fos.close();
                if (is != null) is.close();
            }
        }
    }
",False
900110,18956017,11145818,"        public void writeFile(OutputStream outputStream) throws IOException {
            InputStream inputStream = null;
            if (file != null) {
                try {
                    inputStream = new FileInputStream(file);
                    IOUtils.copy(inputStream, outputStream);
                } finally {
                    if (inputStream != null) {
                        IOUtils.closeQuietly(inputStream);
                    }
                }
            }
        }
","    private void copy(File sourceFile, File destinationFile) {
        try {
            FileChannel in = new FileInputStream(sourceFile).getChannel();
            FileChannel out = new FileOutputStream(destinationFile).getChannel();
            try {
                in.transferTo(0, in.size(), out);
                in.close();
                out.close();
            } catch (IOException e) {
            }
        } catch (FileNotFoundException e) {
        }
    }
",True
900111,21868018,5567860,"    public void process() throws Exception {
        String searchXML = FileUtils.readFileToString(new File(getSearchRequestRelativeFilePath()));
        Map<String, String> parametersMap = new HashMap<String, String>();
        parametersMap.put(""searchXML"", searchXML);
        String proxyHost = null;
        int proxyPort = -1;
        String serverUserName = null;
        String serverUserPassword = null;
        FileOutputStream fos = null;
        if (getUseProxy()) {
            serverUserName = getServerUserName();
            serverUserPassword = getServerUserPassword();
        }
        if (getUseProxy()) {
            proxyHost = getProxyHost();
            proxyPort = getProxyPort();
        }
        try {
            InputStream responseInputStream = URLUtils.getHttpResponse(getSearchBaseURL(), serverUserName, serverUserPassword, URLUtils.HTTP_POST_METHOD, proxyHost, proxyPort, parametersMap, -1);
            fos = new FileOutputStream(getSearchResponseRelativeFilePath());
            IOUtils.copyLarge(responseInputStream, fos);
        } finally {
            if (null != fos) {
                fos.flush();
                fos.close();
            }
        }
    }
","    public String getClass(EmeraldjbBean eb) throws EmeraldjbException {
        Entity entity = (Entity) eb;
        StringBuffer sb = new StringBuffer();
        String myPackage = getPackageName(eb);
        sb.append(""package "" + myPackage + "";\n"");
        sb.append(""\n"");
        DaoValuesGenerator valgen = new DaoValuesGenerator();
        String values_class_name = valgen.getClassName(entity);
        sb.append(""\n"");
        List importList = new Vector();
        importList.add(""java.io.FileOutputStream;"");
        importList.add(""java.io.FileInputStream;"");
        importList.add(""java.io.DataInputStream;"");
        importList.add(""java.io.DataOutputStream;"");
        importList.add(""java.io.IOException;"");
        importList.add(""java.sql.Date;"");
        importList.add(valgen.getPackageName(eb) + ""."" + values_class_name + "";"");
        Iterator it = importList.iterator();
        while (it.hasNext()) {
            String importName = (String) it.next();
            sb.append(""import "" + importName + ""\n"");
        }
        sb.append(""\n"");
        String proto_version = entity.getPatternValue(GeneratorConst.PATTERN_STREAM_PROTO_VERSION, ""1"");
        String streamer_class_name = getClassName(entity);
        sb.append(""public class "" + streamer_class_name + ""\n"");
        sb.append(""{"" + ""\n  public static final int PROTO_VERSION="" + proto_version + "";"");
        sb.append(""\n\n"");
        StringBuffer f_writer = new StringBuffer();
        StringBuffer f_reader = new StringBuffer();
        boolean has_times = false;
        boolean has_strings = false;
        it = entity.getMembers().iterator();
        while (it.hasNext()) {
            Member member = (Member) it.next();
            String nm = member.getName();
            String getter = ""obj."" + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_GET, member);
            String setter = ""obj."" + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member);
            String pad = ""    "";
            JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType());
            f_writer.append(gen_type.getToBinaryCode(pad, ""dos"", getter + ""()""));
            f_reader.append(gen_type.getFromBinaryCode(pad, ""din"", setter));
        }
        String reader_vars = """";
        sb.append(""\n  public static void writeToFile(String file_nm, "" + values_class_name + "" obj) throws IOException"" + ""\n  {"" + ""\n    if (file_nm==null || file_nm.length()==0) throw new IOException(\""Bad file name (null or zero length)\"");"" + ""\n    if (obj==null) throw new IOException(\""Bad value object parameter, cannot write null object to file\"");"" + ""\n    FileOutputStream fos = new FileOutputStream(file_nm);"" + ""\n    DataOutputStream dos = new DataOutputStream(fos);"" + ""\n    writeStream(dos, obj);"" + ""\n    fos.close();"" + ""\n  } // end of writeToFile"" + ""\n"" + ""\n  public static void readFromFile(String file_nm, "" + values_class_name + "" obj) throws IOException"" + ""\n  {"" + ""\n    if (file_nm==null || file_nm.length()==0) throw new IOException(\""Bad file name (null or zero length)\"");"" + ""\n    if (obj==null) throw new IOException(\""Bad value object parameter, cannot write null object to file\"");"" + ""\n    FileInputStream fis = new FileInputStream(file_nm);"" + ""\n    DataInputStream dis = new DataInputStream(fis);"" + ""\n    readStream(dis, obj);"" + ""\n    fis.close();"" + ""\n  } // end of readFromFile"" + ""\n"" + ""\n  public static void writeStream(DataOutputStream dos, "" + values_class_name + "" obj) throws IOException"" + ""\n  {"" + ""\n    dos.writeByte(PROTO_VERSION);"" + ""\n    "" + f_writer + ""\n  } // end of writeStream"" + ""\n"" + ""\n  public static void readStream(DataInputStream din, "" + values_class_name + "" obj) throws IOException"" + ""\n  {"" + ""\n    int proto_version = din.readByte();"" + ""\n    if (proto_version=="" + proto_version + "") readStreamV1(din,obj);"" + ""\n  } // end of readStream"" + ""\n"" + ""\n  public static void readStreamV1(DataInputStream din, "" + values_class_name + "" obj) throws IOException"" + ""\n  {"" + reader_vars + f_reader + ""\n  } // end of readStreamV1"" + ""\n"" + ""\n} // end of classs"" + ""\n\n"" + ""\n//**************"" + ""\n// End of file"" + ""\n//**************"");
        return sb.toString();
    }
",True
900112,10536444,1312612,"        public static void copyFile(File source, File destination) throws IOException {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[4096];
            int read = -1;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            out.flush();
            out.close();
            in.close();
        }
","    public void initFromXml(final String xmlFileName) throws java.net.MalformedURLException, ConfigurationException, IOException {
        if (xmlInitialized) {
            return;
        }
        templates = null;
        MergeTemplateWriter.setTokenList(getTokenProvider().getKnownTokens());
        java.net.URL url = new FileFinder().getUrl(getTokenProvider().getClass(), xmlFileName);
        InputStreamReader xmlFileReader = new InputStreamReader(url.openStream());
        KnownTemplates temps = MergeTemplateWriter.importFromXML(xmlFileReader);
        xmlFileReader.close();
        KnownTemplates.setDefaultInstance(temps);
        setTemplates(temps);
        setInitialized(true);
    }
",False
900113,4897872,6371609,"    protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""start executeUpdates"");
        }
        PreparedStatement stmt = null;
        Connection conn = null;
        int rowsAffected = 0;
        try {
            conn = ds.getConnection();
            conn.setAutoCommit(false);
            conn.rollback();
            conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
            if (olVersionCheck != null) {
                stmt = conn.prepareStatement(olVersionCheck.getQuery());
                stmt.setObject(1, olVersionCheck.getId());
                ResultSet rs = stmt.executeQuery();
                rs.next();
                Number olVersion = (Number) rs.getObject(""olVersion"");
                stmt.close();
                stmt = null;
                if (olVersion.intValue() != olVersionCheck.getOlVersionToCheck().intValue()) {
                    rowsAffected = -1;
                }
            }
            if (rowsAffected >= 0) {
                for (UpdateStatement query : statements) {
                    stmt = conn.prepareStatement(query.getQuery());
                    if (query.getParams() != null) {
                        for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) {
                            Object object = query.getParams()[parameterIndex - 1];
                            stmt.setObject(parameterIndex, object);
                        }
                    }
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("" **** Sending statement:\n"" + query.getQuery());
                    }
                    rowsAffected += stmt.executeUpdate();
                    stmt.close();
                    stmt = null;
                }
            }
            conn.commit();
            conn.close();
            conn = null;
        } catch (SQLException e) {
            if (""23000"".equals(e.getSQLState())) {
                LOGGER.info(""Integrity constraint violation"", e);
                throw new UniqueConstaintException();
            }
            throw new DaoException(""error.databaseError"", e);
        } finally {
            try {
                if (stmt != null) {
                    LOGGER.debug(""closing open statement!"");
                    stmt.close();
                }
            } catch (SQLException e) {
                throw new DaoException(""error.databaseError"", e);
            } finally {
                stmt = null;
            }
            try {
                if (conn != null) {
                    LOGGER.debug(""rolling back open connection!"");
                    conn.rollback();
                    conn.setAutoCommit(true);
                    conn.close();
                }
            } catch (SQLException e) {
                throw new DaoException(""error.databaseError"", e);
            } finally {
                conn = null;
            }
        }
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""finish executeUpdates"");
        }
        return rowsAffected;
    }
","    public void addUserToRealm(final NewUser user) {
        try {
            connection.setAutoCommit(false);
            final String pass, salt;
            final List<RealmWithEncryptedPass> realmPass = new ArrayList<RealmWithEncryptedPass>();
            Realm realm;
            String username;
            username = user.username.toLowerCase(locale);
            PasswordHasher ph = PasswordFactory.getInstance().getPasswordHasher();
            pass = ph.hashPassword(user.password);
            salt = ph.getSalt();
            realmPass.add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
            if (user.realms != null) {
                for (String realmName : user.realms) {
                    realm = cm.getRealm(realmName);
                    realmPass.add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                }
                user.realms = null;
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.updatePassword""));
                    psImpl.setString(1, pass);
                    psImpl.setString(2, salt);
                    psImpl.setInt(3, user.userId);
                    psImpl.executeUpdate();
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    Iterator<RealmWithEncryptedPass> iter1 = realmPass.iterator();
                    while (iter1.hasNext()) {
                        rwep = iter1.next();
                        realm = (RealmDb) rwep.realm;
                        psImpl.setInt(1, realm.getRealmId());
                        psImpl.setInt(2, user.userId);
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, rwep.password);
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.removeUser(user.userId);
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",True
900114,2481505,9580883,"    @Override
    public void run() {
        try {
            File[] inputFiles = new File[this.previousFiles != null ? this.previousFiles.length + 1 : 1];
            File copiedInput = new File(this.randomFolder, this.inputFile.getName());
            IOUtils.copyFile(this.inputFile, copiedInput);
            inputFiles[inputFiles.length - 1] = copiedInput;
            if (previousFiles != null) {
                for (int i = 0; i < this.previousFiles.length; i++) {
                    File prev = this.previousFiles[i];
                    File copiedPrev = new File(this.randomFolder, prev.getName());
                    IOUtils.copyFile(prev, copiedPrev);
                    inputFiles[i] = copiedPrev;
                }
            }
            org.happycomp.radiog.Activator activator = org.happycomp.radiog.Activator.getDefault();
            if (this.exportedMP3File != null) {
                EncodingUtils.encodeToWavAndThenMP3(inputFiles, this.exportedWavFile, this.exportedMP3File, this.deleteOnExit, this.randomFolder, activator.getCommandsMap());
            } else {
                EncodingUtils.encodeToWav(inputFiles, this.exportedWavFile, randomFolder, activator.getCommandsMap());
            }
            if (encodeMonitor != null) {
                encodeMonitor.setEncodingFinished(true);
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
        }
    }
","    public String translate(String before, int translateType) throws CoreException {
        if (before == null) throw new IllegalArgumentException(""before is null."");
        if ((translateType != ENGLISH_TO_JAPANESE) && (translateType != JAPANESE_TO_ENGLISH)) {
            throw new IllegalArgumentException(""Invalid translateType. value="" + translateType);
        }
        try {
            URL url = new URL(config.getTranslatorSiteUrl());
            URLConnection connection = url.openConnection();
            sendTranslateRequest(before, translateType, connection);
            String afterContents = receiveTranslatedResponse(connection);
            String afterStartKey = config.getTranslationResultStart();
            String afterEndKey = config.getTranslationResultEnd();
            int startLength = afterStartKey.length();
            int startPos = afterContents.indexOf(afterStartKey);
            if (startPos != -1) {
                int endPos = afterContents.indexOf(afterEndKey, startPos);
                if (endPos != -1) {
                    String after = afterContents.substring(startPos + startLength, endPos);
                    after = replaceEntities(after);
                    return after;
                } else {
                    throwCoreException(ERROR_END_KEYWORD_NOT_FOUND, ""End keyword not found."", null);
                }
            } else {
                throwCoreException(ERROR_START_KEYWORD_NOT_FOUND, ""Start keyword not found."", null);
            }
        } catch (IOException e) {
            throwCoreException(ERROR_IO, e.getMessage(), e);
        }
        throw new IllegalStateException(""CoreException not occurd."");
    }
",False
900115,20334946,16899717,"    public static String doPost(String http_url, String post_data) {
        if (post_data == null) {
            post_data = """";
        }
        try {
            URLConnection conn = new URL(http_url).openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(post_data);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buffer = new StringBuffer();
            while ((line = in.readLine()) != null) {
                buffer.append(line);
                buffer.append(""\n"");
            }
            return buffer.toString();
        } catch (IOException e) {
            ;
        } catch (ClassCastException e) {
            e.printStackTrace();
        }
        return null;
    }
","    public static String loadURLToString(String url, String EOL) throws FileNotFoundException, IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
        String result = """";
        String str;
        while ((str = in.readLine()) != null) {
            result += str + EOL;
        }
        in.close();
        return result;
    }
",False
900116,4645054,13354644,"        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath, Vector images) {
            int i;
            lengthOfTask = images.size();
            Element dataBaseXML = new Element(""dataBase"");
            for (i = 0; ((i < images.size()) && !stop && !cancel); i++) {
                Vector imagen = new Vector(2);
                imagen = (Vector) images.elementAt(i);
                String element = (String) imagen.elementAt(0);
                current = i;
                String pathSrc = System.getProperty(""user.dir"") + File.separator + ""images"" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(File.separator) + 1, pathSrc.length());
                String pathDst = directoryPath + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector<String> keyWords = new Vector<String>();
                keyWords = TIGDataBase.asociatedConceptSearch(element);
                Element image = new Element(""image"");
                image.setAttribute(""name"", name);
                if (keyWords.size() != 0) {
                    for (int k = 0; k < keyWords.size(); k++) {
                        Element category = new Element(""category"");
                        category.setText(keyWords.get(k).trim());
                        image.addContent(category);
                    }
                }
                dataBaseXML.addContent(image);
            }
            Document doc = new Document(dataBaseXML);
            try {
                XMLOutputter out = new XMLOutputter();
                FileOutputStream f = new FileOutputStream(directoryPath + ""images.xml"");
                out.output(doc, f);
                f.flush();
                f.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            current = lengthOfTask;
        }
","    public void addUrl(URL url) throws IOException, SAXException {
        InputStream inStream = url.openStream();
        String path = url.getPath();
        int slashInx = path.lastIndexOf('/');
        String name = path.substring(slashInx + 1);
        Document doc = docBuild.parse(inStream);
        Element root = doc.getDocumentElement();
        String rootTag = root.getTagName();
        if (rootTag.equals(""graphml"")) {
            NodeList graphNodes = root.getElementsByTagName(""graph"");
            for (int i = 0; i < graphNodes.getLength(); i++) {
                Element elem = (Element) graphNodes.item(i);
                String graphName = elem.getAttribute(""id"");
                if (graphName == null) {
                    graphName = name;
                }
                addStructure(new GraphSpec(graphName));
                urlRefs.put(graphName, url);
            }
        } else if (rootTag.equals(""tree"")) {
            addStructure(new TreeSpec(name));
            urlRefs.put(name, url);
        } else {
            throw new IllegalArgumentException(""Format of "" + url + "" not understood."");
        }
        inStream.close();
    }
",False
900117,10330989,12039036,"    public DialogueSymbole(final JFrame jframe, final Element el, final String srcAttr) {
        super(jframe, JaxeResourceBundle.getRB().getString(""symbole.Insertion""), true);
        this.jframe = jframe;
        this.el = el;
        final String nomf = el.getAttribute(srcAttr);
        boolean applet = false;
        try {
            final File dossierSymboles = new File(""symboles"");
            if (!dossierSymboles.exists()) {
                JOptionPane.showMessageDialog(jframe, JaxeResourceBundle.getRB().getString(""erreur.SymbolesNonTrouve""), JaxeResourceBundle.getRB().getString(""erreur.Erreur""), JOptionPane.ERROR_MESSAGE);
                return;
            }
            liste = chercherImages(dossierSymboles);
        } catch (AccessControlException ex) {
            applet = true;
            try {
                final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(""symboles/liste.txt"");
                BufferedReader in = new BufferedReader(new InputStreamReader(urlListe.openStream()));
                final ArrayList<File> listeImages = new ArrayList<File>();
                String ligne = null;
                while ((ligne = in.readLine()) != null) {
                    if (!"""".equals(ligne.trim())) listeImages.add(new File(""symboles/"" + ligne.trim()));
                }
                liste = listeImages.toArray(new File[listeImages.size()]);
            } catch (IOException ex2) {
                LOG.error(ex2);
            }
        }
        final JPanel cpane = new JPanel(new BorderLayout());
        setContentPane(cpane);
        final GridLayout grille = new GridLayout((int) Math.ceil(liste.length / 13.0), 13, 10, 10);
        final JPanel spane = new JPanel(grille);
        cpane.add(spane, BorderLayout.CENTER);
        ichoix = 0;
        final MyMouseListener ecouteur = new MyMouseListener();
        labels = new JLabel[liste.length];
        for (int i = 0; i < liste.length; i++) {
            if (nomf != null && !"""".equals(nomf) && nomf.equals(liste[i].getPath())) ichoix = i;
            URL urlIcone;
            try {
                if (applet) {
                    final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(""symboles/liste.txt"");
                    final String baseURL = urlListe.toString().substring(0, urlListe.toString().indexOf(""symboles/liste.txt""));
                    urlIcone = new URL(baseURL + liste[i].getPath());
                } else urlIcone = liste[i].toURL();
            } catch (MalformedURLException ex) {
                LOG.error(ex);
                break;
            }
            final Icon ic = new ImageIcon(urlIcone);
            final JLabel label = new JLabel(ic);
            label.addMouseListener(ecouteur);
            labels[i] = label;
            spane.add(label);
        }
        final JPanel bpane = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        final JButton boutonAnnuler = new JButton(JaxeResourceBundle.getRB().getString(""bouton.Annuler""));
        boutonAnnuler.addActionListener(this);
        boutonAnnuler.setActionCommand(""Annuler"");
        bpane.add(boutonAnnuler);
        final JButton boutonOK = new JButton(JaxeResourceBundle.getRB().getString(""bouton.OK""));
        boutonOK.addActionListener(this);
        boutonOK.setActionCommand(""OK"");
        bpane.add(boutonOK);
        cpane.add(bpane, BorderLayout.SOUTH);
        getRootPane().setDefaultButton(boutonOK);
        choix(ichoix);
        pack();
        if (jframe != null) {
            final Rectangle r = jframe.getBounds();
            setLocation(r.x + r.width / 4, r.y + r.height / 4);
        } else {
            final Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            setLocation((screen.width - getSize().width) / 3, (screen.height - getSize().height) / 3);
        }
    }
","    public static ArrayList<Credential> importCredentials(String urlString) {
        ArrayList<Credential> results = new ArrayList<Credential>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""-----END PGP SIGNATURE-----"")) {
                    Credential credential = ProfileParser.parseCredential(buff.toString(), true);
                    results.add(credential);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
            System.err.println(e);
        }
        return results;
    }
",True
900118,2963526,22919892,"    public static void write(File file, InputStream source) throws IOException {
        OutputStream outputStream = null;
        assert file != null : ""file must not be null."";
        assert file.isFile() : ""file must be a file."";
        assert file.canWrite() : ""file must be writable."";
        assert source != null : ""source must not be null."";
        try {
            outputStream = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copy(source, outputStream);
            outputStream.flush();
        } finally {
            IOUtils.closeQuietly(outputStream);
        }
    }
","    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            String result = new BigInteger(1, m.digest()).toString(16);
            while (result.length() < 32) {
                result = '0' + result;
            }
            return result;
        } catch (NoSuchAlgorithmException ex) {
            return null;
        }
    }
",False
900119,23349376,343779,"    public TreeMap getStrainMap() {
        TreeMap strainMap = new TreeMap();
        String server = """";
        try {
            Datasource[] ds = DatasourceManager.getDatasouce(alias, version, DatasourceManager.ALL_CONTAINS_GROUP);
            for (int i = 0; i < ds.length; i++) {
                if (ds[i].getDescription().startsWith(MOUSE_DBSNP)) {
                    if (ds[i].getServer().length() == 0) {
                        Connection con = ds[i].getConnection();
                        strainMap = Action.lineMode.regularSQL.GenotypeDataSearchAction.getStrainMap(con);
                        break;
                    } else {
                        server = ds[i].getServer();
                        HashMap serverUrlMap = InitXml.getInstance().getServerMap();
                        String serverUrl = (String) serverUrlMap.get(server);
                        URL url = new URL(serverUrl + servletName);
                        URLConnection uc = url.openConnection();
                        uc.setDoOutput(true);
                        OutputStream os = uc.getOutputStream();
                        StringBuffer buf = new StringBuffer();
                        buf.append(""viewType=getstrains"");
                        buf.append(""&hHead="" + hHead);
                        buf.append(""&hCheck="" + version);
                        PrintStream ps = new PrintStream(os);
                        ps.print(buf.toString());
                        ps.close();
                        ObjectInputStream ois = new ObjectInputStream(uc.getInputStream());
                        strainMap = (TreeMap) ois.readObject();
                        ois.close();
                    }
                }
            }
        } catch (Exception e) {
            log.error(""strain map"", e);
        }
        return strainMap;
    }
","    public void loadSourceCode() {
        if (getResourceName() != null) {
            String filename = getResourceName() + "".java"";
            sourceCode = new String(""<html><body bgcolor=\""#ffffff\""><pre>"");
            InputStream is;
            InputStreamReader isr;
            CodeViewer cv = new CodeViewer();
            URL url;
            try {
                url = getClass().getResource(filename);
                is = url.openStream();
                isr = new InputStreamReader(is);
                BufferedReader reader = new BufferedReader(isr);
                String line = reader.readLine();
                while (line != null) {
                    sourceCode += cv.syntaxHighlight(line) + "" \n "";
                    line = reader.readLine();
                }
                sourceCode += new String(""</pre></body></html>"");
            } catch (Exception ex) {
                sourceCode = ""Could not load file: "" + filename;
            }
        }
    }
",False
900120,1455792,22207784,"    public void generate(String rootDir, RootModel root) throws Exception {
        IOUtils.copyStream(HTMLGenerator.class.getResourceAsStream(""stylesheet.css""), new FileOutputStream(new File(rootDir, ""stylesheet.css"")));
        Velocity.init();
        VelocityContext context = new VelocityContext();
        context.put(""model"", root);
        context.put(""util"", new VelocityUtils());
        context.put(""msg"", messages);
        processTemplate(""index.html"", new File(rootDir, ""index.html""), context);
        processTemplate(""list.html"", new File(rootDir, ""list.html""), context);
        processTemplate(""summary.html"", new File(rootDir, ""summary.html""), context);
        File imageDir = new File(rootDir, ""images"");
        imageDir.mkdir();
        IOUtils.copyStream(HTMLGenerator.class.getResourceAsStream(""primarykey.gif""), new FileOutputStream(new File(imageDir, ""primarykey.gif"")));
        File tableDir = new File(rootDir, ""tables"");
        tableDir.mkdir();
        for (TableModel table : root.getTables()) {
            context.put(""table"", table);
            processTemplate(""table.html"", new File(tableDir, table.getTableName() + "".html""), context);
        }
    }
","    public static void copyURLToFile(URL source, File destination) throws IOException {
        InputStream input = source.openStream();
        try {
            FileOutputStream output = openOutputStream(destination);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(output);
            }
        } finally {
            IOUtils.closeQuietly(input);
        }
    }
",True
900121,6242999,7954779,"    private boolean sendMsg(TACMessage msg) {
        try {
            String msgStr = msg.getMessageString();
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""Content-Length"", """" + msgStr.length());
            conn.setDoOutput(true);
            OutputStream output = conn.getOutputStream();
            output.write(msgStr.getBytes());
            output.flush();
            InputStream input = conn.getInputStream();
            int len = conn.getContentLength();
            int totalRead = 0;
            int read;
            byte[] content = new byte[len];
            while ((len > totalRead) && (read = input.read(content, totalRead, len - totalRead)) > 0) {
                totalRead += read;
            }
            output.close();
            input.close();
            if (len < totalRead) {
                log.severe(""truncated message response for "" + msg.getType());
                return false;
            } else {
                msgStr = new String(content);
                msg.setReceivedMessage(msgStr);
                msg.deliverMessage();
            }
            return true;
        } catch (Exception e) {
            log.log(Level.SEVERE, ""could not send message"", e);
            return false;
        }
    }
","    public void filter(File source, File destination, MNamespace mNamespace) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(source));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destination));
        int line = 0;
        int column = 0;
        Stack parseStateStack = new Stack();
        parseStateStack.push(new ParseState(mNamespace));
        for (Iterator i = codePieces.iterator(); i.hasNext(); ) {
            NamedCodePiece cp = (NamedCodePiece) i.next();
            while (line < cp.getStartLine()) {
                line++;
                column = 0;
                writer.write(reader.readLine());
                writer.newLine();
            }
            while (column < cp.getStartPosition()) {
                writer.write(reader.read());
                column++;
            }
            cp.write(writer, parseStateStack, column);
            while (line < cp.getEndLine()) {
                line++;
                column = 0;
                reader.readLine();
            }
            while (column < cp.getEndPosition()) {
                column++;
                reader.read();
            }
        }
        String data;
        while ((data = reader.readLine()) != null) {
            writer.write(data);
            writer.newLine();
        }
        reader.close();
        writer.close();
    }
",False
900122,1951103,13741605,"    private List<File> ungzipFile(File directory, File compressedFile) throws IOException {
        List<File> files = new ArrayList<File>();
        TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile)));
        try {
            TarArchiveEntry entry = in.getNextTarEntry();
            while (entry != null) {
                if (entry.isDirectory()) {
                    log.warn(""TAR archive contains directories which are being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                String fn = new File(entry.getName()).getName();
                if (fn.startsWith(""."")) {
                    log.warn(""TAR archive contains a hidden file which is being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                File targetFile = new File(directory, fn);
                if (targetFile.exists()) {
                    log.warn(""TAR archive contains duplicate filenames, only the first is being extracted"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                files.add(targetFile);
                log.debug(""Extracting file: "" + entry.getName() + "" to: "" + targetFile.getAbsolutePath());
                OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile));
                InputStream entryIn = new FileInputStream(entry.getFile());
                IOUtils.copy(entryIn, fout);
                fout.close();
                entryIn.close();
            }
        } finally {
            in.close();
        }
        return files;
    }
","    public static boolean copy(String source, String dest) {
        int bytes;
        byte array[] = new byte[BUFFER_LEN];
        try {
            InputStream is = new FileInputStream(source);
            OutputStream os = new FileOutputStream(dest);
            while ((bytes = is.read(array, 0, BUFFER_LEN)) > 0) os.write(array, 0, bytes);
            is.close();
            os.close();
            return true;
        } catch (IOException e) {
            return false;
        }
    }
",True
900123,19130322,5483489,"    private String sha1(String s) {
        String encrypt = s;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            sha.update(s.getBytes());
            byte[] digest = sha.digest();
            final StringBuffer buffer = new StringBuffer();
            for (int i = 0; i < digest.length; ++i) {
                final byte b = digest[i];
                final int value = (b & 0x7F) + (b < 0 ? 128 : 0);
                buffer.append(value < 16 ? ""0"" : """");
                buffer.append(Integer.toHexString(value));
            }
            encrypt = buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return encrypt;
    }
","    public static String getMD5(String in) {
        if (in == null) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(in.getBytes());
            byte[] hash = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                String hex = Integer.toHexString(0xFF & hash[i]);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (Exception e) {
            Debug.logException(e);
        }
        return null;
    }
",True
900124,4960417,550697,"    public static boolean writeFileByBinary(InputStream pIs, File pFile, boolean pAppend) {
        boolean flag = false;
        try {
            FileOutputStream fos = new FileOutputStream(pFile, pAppend);
            IOUtils.copy(pIs, fos);
            fos.flush();
            fos.close();
            pIs.close();
            flag = true;
        } catch (Exception e) {
            LOG.error(""将字节流写入�?"" + pFile.getName() + ""出现异常�?"", e);
        }
        return flag;
    }
","    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",True
900125,21273055,8359775,"    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }
","    public static void shakeSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int k = 0;
        int left = 0;
        int right = a.length - 1;
        while (right - left > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
            k = a.length - 1;
            for (int i = left; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            left = k;
        }
    }
",True
900126,17585729,8117216,"    private File sendQuery(String query) throws MusicBrainzException {
        File xmlServerResponse = null;
        try {
            xmlServerResponse = new File(SERVER_RESPONSE_FILE);
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String response = """";
            String line = """";
            System.out.println(""    Respuesta del servidor: \n"");
            while ((line = in.readLine()) != null) {
                response += line;
            }
            xmlServerResponse = new File(SERVER_RESPONSE_FILE);
            System.out.println(""    Ruta del archivo XML -> "" + xmlServerResponse.getAbsolutePath());
            BufferedWriter out = new BufferedWriter(new FileWriter(xmlServerResponse));
            out.write(response);
            out.close();
            System.out.println(""Tamanho del xmlFile -> "" + xmlServerResponse.length());
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
            String msg = e.getMessage();
            if (e instanceof FileNotFoundException) {
                msg = ""ERROR: MusicBrainz URL used is not found:\n"" + msg;
            } else {
            }
            throw new MusicBrainzException(msg);
        }
        return xmlServerResponse;
    }
","    private void copyLocalFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",False
900127,7051649,12440169,"    private void copyFile(String inputPath, String basis, String filename) throws GLMRessourceFileException {
        try {
            FileChannel inChannel = new FileInputStream(new File(inputPath)).getChannel();
            File target = new File(basis, filename);
            FileChannel outChannel = new FileOutputStream(target).getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
            inChannel.close();
            outChannel.close();
        } catch (Exception e) {
            throw new GLMRessourceFileException(7);
        }
    }
","    public String openFileAsText(String resource) throws IOException {
        StringWriter wtr = new StringWriter();
        InputStreamReader rdr = new InputStreamReader(openFile(resource));
        try {
            IOUtils.copy(rdr, wtr);
        } finally {
            IOUtils.closeQuietly(rdr);
        }
        return wtr.toString();
    }
",True
900128,17534703,13396233,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900129,18488106,16850375,"    public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException {
        InputSource source = new InputSource(inputUrl.openStream());
        Document logDoc = DomUtil.getNewDom();
        XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs);
        reader.parse(source);
        InputStream logStream = DomUtil.serializeToInputStream(logDoc, ""utf-8"");
        System.out.println(""Creating message file \"""" + messageFile.getAbsolutePath() + ""\""..."");
        OutputStream fos = new FileOutputStream(messageFile);
        IOUtils.copy(logStream, fos);
        return logDoc;
    }
","    public static void compress(File srcFile, File destFile) throws IOException {
        InputStream input = null;
        OutputStream output = null;
        try {
            input = new BufferedInputStream(new FileInputStream(srcFile));
            output = new GZIPOutputStream(new FileOutputStream(destFile));
            IOUtils.copyLarge(input, output);
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
    }
",True
900130,5907126,4471000,"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String contentId = req.getParameter(CONTENT_ID);
        String contentType = req.getParameter(CONTENT_TYPE);
        if (contentId == null || contentType == null) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ""Content id or content type not specified"");
            return;
        }
        try {
            switch(ContentType.valueOf(contentType)) {
                case IMAGE:
                    resp.setContentType(""image/jpeg"");
                    break;
                case AUDIO:
                    resp.setContentType(""audio/mp3"");
                    break;
                case VIDEO:
                    resp.setContentType(""video/mpeg"");
                    break;
                default:
                    throw new IllegalStateException(""Invalid content type specified"");
            }
        } catch (IllegalArgumentException e) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ""Invalid content type specified"");
            return;
        }
        String baseUrl = this.getServletContext().getInitParameter(BASE_URL);
        URL url = new URL(baseUrl + ""/"" + contentType.toLowerCase() + ""/"" + contentId);
        URLConnection conn = url.openConnection();
        resp.setContentLength(conn.getContentLength());
        IOUtils.copy(conn.getInputStream(), resp.getOutputStream());
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900131,1958222,5746452,"    protected void writeSnapshot(final String message, final String details) {
        try {
            URL url = proxyAddress == null ? new URL(url_spec) : new URL(""http"", proxyAddress, proxyPort, url_spec);
            LOG.info(""connect to "" + url);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            HttpQueryWriter out = new HttpQueryWriter(connection.getOutputStream());
            out.addParameter(""error"", message);
            out.addParameter(""trace"", details);
            out.close();
            InputStream in = connection.getInputStream();
            int c;
            StringBuffer result = new StringBuffer();
            while ((c = in.read()) != -1) {
                result.append((char) c);
            }
            LOG.info(result);
            in.close();
        } catch (UnknownHostException e) {
            LOG.info(""could not find host (unknown host) to submit log to"");
        } catch (IOException e) {
            LOG.debug(""i/o problem submitting log"", e);
        }
    }
","    private void fileUpload() throws IOException {
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        if (zShareAccount.loginsuccessful) {
            httppost.setHeader(""Cookie"", zShareAccount.getSidcookie() + "";"" + zShareAccount.getMysessioncookie());
        } else {
            httppost.setHeader(""Cookie"", sidcookie + "";"" + mysessioncookie);
        }
        generateZShareID();
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        mpEntity.addPart("""", new MonitoredFileBody(file, uploadProgress));
        mpEntity.addPart(""TOS"", new StringBody(""1""));
        httppost.setEntity(mpEntity);
        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());
        status = UploadStatus.UPLOADING;
        NULogger.getLogger().info(""Now uploading your file into zshare.net"");
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity resEntity = response.getEntity();
        NULogger.getLogger().info(response.getStatusLine().toString());
        if (resEntity != null) {
            uploadresponse = EntityUtils.toString(resEntity);
        }
        uploadresponse = uploadresponse.replaceAll(""\n"", """");
        uploadresponse = uploadresponse.substring(uploadresponse.indexOf(""index2.php""));
        uploadresponse = uploadresponse.substring(0, uploadresponse.indexOf(""\"">here""));
        uploadresponse = uploadresponse.replaceAll(""amp;"", """");
        if (zShareAccount.loginsuccessful) {
            uploadresponse = zShareAccount.getZsharelink() + uploadresponse;
        } else {
            uploadresponse = zsharelink + uploadresponse;
        }
        uploadresponse = uploadresponse.replaceAll("" "", ""%20"");
        NULogger.getLogger().log(Level.INFO, ""resp : {0}"", uploadresponse);
        httpclient.getConnectionManager().shutdown();
    }
",False
900132,20955452,21204167,"    private void criarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""INSERT INTO multipla_escolha (id_questao, texto, gabarito) VALUES (?,?,?)"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setInt(1, q.getIdQuestao());
                stmt.setString(2, alternativa.getTexto());
                stmt.setBoolean(3, alternativa.getGabarito());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    private String getEncryptedPassword() {
        String encrypted;
        char[] pwd = password.getPassword();
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(new String(pwd).getBytes(""UTF-8""));
            byte[] digested = md.digest();
            encrypted = new String(Base64Coder.encode(digested));
        } catch (Exception e) {
            encrypted = new String(pwd);
        }
        for (int i = 0; i < pwd.length; i++) pwd[i] = 0;
        return encrypted;
    }
",False
900133,4591683,359188,"    public static void copyFile(File source, File dest) throws IOException {
        if (source.equals(dest)) throw new IOException(""Source and destination cannot be the same file path"");
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        if (!dest.exists()) dest.createNewFile();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
","    public void delUser(User user) throws SQLException, IOException, ClassNotFoundException {
        String dbUserID;
        String stockSymbol;
        Statement stmt = con.createStatement();
        try {
            con.setAutoCommit(false);
            dbUserID = user.getUserID();
            if (getUser(dbUserID) != null) {
                ResultSet rs1 = stmt.executeQuery(""SELECT userID, symbol "" + ""FROM UserStocks WHERE userID = '"" + dbUserID + ""'"");
                while (rs1.next()) {
                    try {
                        stockSymbol = rs1.getString(""symbol"");
                        delUserStocks(dbUserID, stockSymbol);
                    } catch (SQLException ex) {
                        throw new SQLException(""Deletion of user stock holding failed: "" + ex.getMessage());
                    }
                }
                try {
                    stmt.executeUpdate(""DELETE FROM Users WHERE "" + ""userID = '"" + dbUserID + ""'"");
                } catch (SQLException ex) {
                    throw new SQLException(""User deletion failed: "" + ex.getMessage());
                }
            } else throw new IOException(""User not found in database - cannot delete."");
            try {
                con.commit();
            } catch (SQLException ex) {
                throw new SQLException(""Transaction commit failed: "" + ex.getMessage());
            }
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException sqx) {
                throw new SQLException(""Transaction failed then rollback failed: "" + sqx.getMessage());
            }
            throw new SQLException(""Transaction failed; was rolled back: "" + ex.getMessage());
        }
        stmt.close();
    }
",False
900134,4960420,12542684,"    public static boolean writeFileB2C(InputStream pIs, File pFile, boolean pAppend) {
        boolean flag = false;
        try {
            FileWriter fw = new FileWriter(pFile, pAppend);
            IOUtils.copy(pIs, fw);
            fw.flush();
            fw.close();
            pIs.close();
            flag = true;
        } catch (Exception e) {
            LOG.error(""将字节流写入�?"" + pFile.getName() + ""出现异常�?"", e);
        }
        return flag;
    }
","    public ServiceAdapterIfc deploy(String session, String name, byte jarBytes[], String jarName, String serviceClass, String serviceInterface) throws RemoteException, MalformedURLException, StartServiceException, SessionException {
        try {
            File jarFile = new File(jarName);
            jarName = jarFile.getName();
            String jarName2 = jarName;
            jarFile = new File(jarName2);
            int n = 0;
            while (jarFile.exists()) {
                jarName2 = jarName + n++;
                jarFile = new File(jarName2);
            }
            FileOutputStream fos = new FileOutputStream(jarName2);
            IOUtils.copy(new ByteArrayInputStream(jarBytes), fos);
            SCClassLoader cl = new SCClassLoader(new URL[] { new URL(""file://"" + jarFile.getAbsolutePath()) }, getMasterNode().getSCClassLoaderCounter());
            return startService(session, name, serviceClass, serviceInterface, cl);
        } catch (SessionException e) {
            throw e;
        } catch (Exception e) {
            throw new StartServiceException(""Could not deploy service: "" + e.getMessage(), e);
        }
    }
",True
900135,3520277,15479412,"    private void downloadFile(String directory, String fileName) {
        URL url = null;
        String urlstr = updateURL + directory + fileName;
        int position = 0;
        try {
            Logger.msg(threadName + ""Download new file from "" + urlstr);
            url = new URL(urlstr);
            URLConnection conn = url.openConnection();
            BufferedInputStream in = new BufferedInputStream(conn.getInputStream());
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(updateDirectory + System.getProperty(""file.separator"") + fileName));
            int i = in.read();
            while (i != -1) {
                if (isInterrupted()) {
                    setWasInterrupted();
                    in.close();
                    out.flush();
                    out.close();
                    interrupt();
                    return;
                }
                out.write(i);
                i = in.read();
                position += 1;
                if (position % 1000 == 0) {
                    Enumeration<DownloadFilesListener> en = listener.elements();
                    while (en.hasMoreElements()) {
                        DownloadFilesListener currentListener = en.nextElement();
                        currentListener.progress(1000);
                    }
                }
            }
            Enumeration<DownloadFilesListener> en = listener.elements();
            while (en.hasMoreElements()) {
                DownloadFilesListener currentListener = en.nextElement();
                currentListener.progress(1000);
            }
            in.close();
            out.flush();
            out.close();
            Logger.msg(threadName + ""Saved file "" + fileName + "" to "" + updateDirectory + System.getProperty(""file.separator"") + fileName);
        } catch (Exception e) {
            Logger.err(threadName + ""Error ("" + e.toString() + "")"");
        }
    }
","    private ImageReader findImageReader(URL url) {
        ImageInputStream input = null;
        try {
            input = ImageIO.createImageInputStream(url.openStream());
        } catch (IOException e) {
            logger.log(Level.WARNING, ""zly adres URL obrazka "" + url, e);
        }
        ImageReader reader = null;
        if (input != null) {
            Iterator readers = ImageIO.getImageReaders(input);
            while ((reader == null) && (readers != null) && readers.hasNext()) {
                reader = (ImageReader) readers.next();
            }
            reader.setInput(input);
        }
        return reader;
    }
",False
900136,1362134,20514913,"    public void delete(int row) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                int max = findMaxRank(stmt);
                if ((row < 1) || (row > max)) throw new IllegalArgumentException(""Row number not between 1 and "" + max);
                stmt.executeUpdate(""delete from WordClassifications where Rank = "" + row);
                for (int i = row; i < max; ++i) stmt.executeUpdate(""update WordClassifications set Rank = "" + i + "" where Rank = "" + (i + 1));
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    private void saveCampaign() throws HeadlessException {
        try {
            dbConnection.setAutoCommit(false);
            dbConnection.setSavepoint();
            String sql = ""UPDATE campaigns SET "" + ""queue = ? ,"" + ""adjustRatioPeriod = ?, "" + ""asterisk = ?, "" + ""context = ?,"" + ""extension = ?, "" + ""dialContext = ?, "" + ""dialPrefix = ?,"" + ""dialTimeout = ?, "" + ""dialingMethod = ?,"" + ""dialsPerFreeResourceRatio = ?, "" + ""maxIVRChannels = ?, "" + ""maxDialingThreads = ?,"" + ""maxDialsPerFreeResourceRatio = ?,"" + ""minDialsPerFreeResourceRatio = ?, "" + ""maxTries = ?, "" + ""firstRetryAfterMinutes = ?,"" + ""secondRetryAfterMinutes = ?, "" + ""furtherRetryAfterMinutes = ?, "" + ""startDate = ?, "" + ""endDate = ?,"" + ""popUpURL = ?, "" + ""contactBatchSize = ?, "" + ""retriesBatchPct = ?, "" + ""reschedulesBatchPct = ?, "" + ""allowReschedule = ?, "" + ""rescheduleToOnself = ?, "" + ""script = ?,"" + ""agentsCanUpdateContacts = ?, "" + ""hideContactFields = ?, "" + ""afterCallWork = ?, "" + ""reserveAvailableAgents = ?, "" + ""useDNCList = ?, "" + ""enableAgentDNC = ?, "" + ""contactsFilter = ?, "" + ""DNCTo = ?,"" + ""callRecordingPolicy = ?, "" + ""callRecordingPercent = ?, "" + ""callRecordingMaxAge = ?, "" + ""WHERE name = ?"";
            PreparedStatement statement = dbConnection.prepareStatement(sql);
            int i = 1;
            statement.setString(i++, txtQueue.getText());
            statement.setInt(i++, Integer.valueOf(txtAdjustRatio.getText()));
            statement.setString(i++, """");
            statement.setString(i++, txtContext.getText());
            statement.setString(i++, txtExtension.getText());
            statement.setString(i++, txtDialContext.getText());
            statement.setString(i++, txtDialPrefix.getText());
            statement.setInt(i++, 30000);
            statement.setInt(i++, cboDialingMethod.getSelectedIndex());
            statement.setFloat(i++, Float.valueOf(txtInitialDialingRatio.getText()));
            statement.setInt(i++, Integer.valueOf(txtMaxIVRChannels.getText()));
            statement.setInt(i++, Integer.valueOf(txtDialLimit.getText()));
            statement.setFloat(i++, Float.valueOf(txtMaxDialingRatio.getText()));
            statement.setFloat(i++, Float.valueOf(txtMinDialingRatio.getText()));
            statement.setInt(i++, Integer.valueOf(txtMaxRetries.getText()));
            statement.setInt(i++, Integer.valueOf(txtFirstRetry.getText()));
            statement.setInt(i++, Integer.valueOf(txtSecondRetry.getText()));
            statement.setInt(i++, Integer.valueOf(txtFurtherRetries.getText()));
            statement.setDate(i++, Date.valueOf(txtStartDate.getText()));
            statement.setDate(i++, Date.valueOf(txtEndDate.getText()));
            statement.setString(i++, txtURL.getText());
            statement.setInt(i++, Integer.valueOf(txtContactBatchSize.getText()));
            statement.setInt(i++, Integer.valueOf(txtRetryBatchPct.getText()));
            statement.setInt(i++, Integer.valueOf(txtRescheduleBatchPct.getText()));
            statement.setInt(i++, chkAgentCanReschedule.isSelected() ? 1 : 0);
            statement.setInt(i++, chkAgentCanRescheduleSelf.isSelected() ? 1 : 0);
            statement.setString(i++, txtScript.getText());
            statement.setInt(i++, chkAgentCanUpdateContacts.isSelected() ? 1 : 0);
            statement.setString(i++, """");
            statement.setInt(i++, Integer.valueOf(txtACW.getText()));
            statement.setInt(i++, Integer.valueOf(txtReserveAgents.getText()));
            statement.setInt(i++, cboDNCListPreference.getSelectedIndex());
            statement.setInt(i++, 1);
            statement.setString(i++, """");
            statement.setInt(i++, 0);
            statement.setInt(i++, cboRecordingPolicy.getSelectedIndex());
            statement.setInt(i++, Integer.valueOf(txtRecordingPct.getText()));
            statement.setInt(i++, Integer.valueOf(txtRecordingMaxAge.getText()));
            statement.setString(i++, campaign);
            statement.executeUpdate();
            dbConnection.commit();
        } catch (SQLException ex) {
            try {
                dbConnection.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex1);
            }
            JOptionPane.showMessageDialog(this.getRootPane(), ex.getLocalizedMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).log(Level.SEVERE, null, ex);
        }
    }
",True
900137,7038631,3778979,"    private FileLog(LOG_LEVEL displayLogLevel, LOG_LEVEL logLevel, String logPath) {
        this.logLevel = logLevel;
        this.displayLogLevel = displayLogLevel;
        if (null != logPath) {
            logFile = new File(logPath, ""current.log"");
            log(LOG_LEVEL.DEBUG, ""FileLog"", ""Initialising logfile "" + logFile.getAbsolutePath() + "" ."");
            try {
                if (logFile.exists()) {
                    if (!logFile.renameTo(new File(logPath, System.currentTimeMillis() + "".log""))) {
                        File newFile = new File(logPath, System.currentTimeMillis() + "".log"");
                        if (newFile.exists()) {
                            log(LOG_LEVEL.WARN, ""FileLog"", ""The file ("" + newFile.getAbsolutePath() + newFile.getName() + "") already exists, will overwrite it."");
                            newFile.delete();
                        }
                        newFile.createNewFile();
                        FileInputStream inStream = new FileInputStream(logFile);
                        FileOutputStream outStream = new FileOutputStream(newFile);
                        byte buffer[] = null;
                        int offSet = 0;
                        while (inStream.read(buffer, offSet, 2048) != -1) {
                            outStream.write(buffer);
                            offSet += 2048;
                        }
                        inStream.close();
                        outStream.close();
                        logFile.delete();
                        logFile = new File(logPath, ""current.log"");
                    }
                }
                logFile.createNewFile();
            } catch (IOException e) {
                logFile = null;
            }
        } else {
            logFile = null;
        }
    }
","    public void addURL(String urlSpec) throws IOException {
        URL url = new URL(urlSpec);
        for (int i = 0; i < urls.size(); i++) {
            if (((URL) urls.elementAt(i)).equals(url)) {
                Logger.logWarning(""Attempt to add an URL twice: "" + url);
                return;
            }
        }
        InputStream stream = url.openStream();
        stream.close();
        urls.addElement(urlSpec);
        Logger.logDebug(""Added "" + url);
    }
",False
900138,10084530,16491858,"    private InputStream urlToInputStream(URL url) throws IOException {
        URLConnection conn = url.openConnection();
        conn.setRequestProperty(""User-Agent"", IE);
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate"");
        conn.connect();
        String encoding = conn.getContentEncoding();
        if ((encoding != null) && encoding.equalsIgnoreCase(""gzip"")) return new GZIPInputStream(conn.getInputStream()); else if ((encoding != null) && encoding.equalsIgnoreCase(""deflate"")) return new InflaterInputStream(conn.getInputStream(), new Inflater(true)); else return conn.getInputStream();
    }
","    public boolean openConnection(String url, Properties props) throws SQLException {
        try {
            Class.forName(RunConfig.getInstance().getDriverNameJDBC());
            if (url == null) url = RunConfig.getInstance().getConnectionUrlJDBC();
            connection = DriverManager.getConnection(url, props);
            if (statementTable == null) statementTable = new Hashtable<String, PreparedStatement>();
            if (resultTable == null) resultTable = new Hashtable<String, ResultSet>();
            clearStatus();
            return true;
        } catch (Exception e) {
            setStatus(e);
            return false;
        }
    }
",False
900139,17019840,10271558,"    public Set<Plugin<?>> loadPluginImplementationMetaData() throws PluginRegistryException {
        try {
            final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginImplementationMetaInfPath);
            pluginImplsSet.clear();
            if (urls != null) {
                while (urls.hasMoreElements()) {
                    final URL url = urls.nextElement();
                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.found"", ""classes"", url.getPath()));
                    InputStream resourceInput = null;
                    Reader reader = null;
                    BufferedReader buffReader = null;
                    String line;
                    try {
                        resourceInput = url.openStream();
                        reader = new InputStreamReader(resourceInput);
                        buffReader = new BufferedReader(reader);
                        line = buffReader.readLine();
                        while (line != null) {
                            try {
                                pluginImplsSet.add(inspectPluginImpl(Class.forName(line.trim())));
                                echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.processing"", ""class"", line));
                                line = buffReader.readLine();
                            } catch (final ClassNotFoundException cnfe) {
                                throw new PluginRegistryException(""plugin.error.load.classnotfound"", cnfe, pluginImplementationMetaInfPath, line);
                            } catch (final LinkageError ncfe) {
                                if (LOGGER.isDebugEnabled()) {
                                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.linkageError"", ""class"", line, ncfe.getMessage()));
                                }
                                line = buffReader.readLine();
                            }
                        }
                    } catch (final IOException ioe) {
                        throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, url.getFile(), ioe.getMessage());
                    } finally {
                        if (buffReader != null) {
                            buffReader.close();
                        }
                        if (reader != null) {
                            reader.close();
                        }
                        if (resourceInput != null) {
                            resourceInput.close();
                        }
                    }
                }
            }
            return Collections.unmodifiableSet(pluginImplsSet);
        } catch (final IOException ioe) {
            throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, pluginImplementationMetaInfPath, ioe.getMessage());
        }
    }
","    private void processBasicContent() {
        String[] packageNames = sourceCollector.getPackageNames();
        for (int i = 0; i < packageNames.length; i++) {
            XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i]);
            File dir = new File(outputDir, packageNames[i]);
            dir.mkdirs();
            Set pkgDirs = new HashSet();
            for (int j = 0; j < sources.length; j++) {
                XdcSource source = sources[j];
                Properties patterns = source.getPatterns();
                if (patterns != null) {
                    tables.put(""patterns"", patterns);
                }
                pkgDirs.add(source.getFile().getParentFile());
                DialectHandler dialectHandler = source.getDialectHandler();
                Writer out = null;
                try {
                    String sourceFilePath = source.getFile().getAbsolutePath();
                    source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null);
                    String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + ""/source-header.xsl"", tables);
                    source.setRootComment(rootComment);
                    Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables);
                    if (LOG.isInfoEnabled()) {
                        LOG.info(""Processing source file "" + sourceFilePath);
                    }
                    out = IOUtils.getWriter(new File(dir, source.getFile().getName() + "".html""), docencoding);
                    XmlUtils.printHtml(out, htmlDoc);
                    if (sourceProcessor != null) {
                        sourceProcessor.processSource(source, encoding, docencoding);
                    }
                    XdcSource.clearProcessingProperties(baseProperties);
                } catch (XmlException e) {
                    LOG.error(e.getMessage(), e);
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                } finally {
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            LOG.error(e.getMessage(), e);
                        }
                    }
                }
            }
            for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) {
                File docFilesDir = new File((File) iter.next(), ""xdc-doc-files"");
                if (docFilesDir.exists() && docFilesDir.isDirectory()) {
                    File targetDir = new File(dir, ""xdc-doc-files"");
                    targetDir.mkdirs();
                    try {
                        IOUtils.copyTree(docFilesDir, targetDir);
                    } catch (IOException e) {
                        LOG.error(e.getMessage(), e);
                    }
                }
            }
        }
    }
",False
900140,1965036,22643538,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (101, 'john')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (201, 'johns dog')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (101, 'instance', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (201, 'instance', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (101, 'hasa', 201)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'QV+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('does', '1', 'HV+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('john', '1', 'S+ | DO-', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('a', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[D-] & (S+ | DO-)', 200)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('have', '1', 'S- & HV- & QV- & DO+', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('QV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, Type, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('have', 1, 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into ProperNouns (Noun, SenseNumber, ObjectId) values ('john', 1, 101)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'set_return_status true', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'set_return_status false', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, '', 'actor', 1, 'hasa', 200, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) "" + ""values (4, 1, 2)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) "" + ""values (4, 2, 3)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values (4, 'have - question')"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('have', 3, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'actor', 100)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Tutorial 2 Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
","    InputStream createInputStream(FileInfo fi) throws IOException, MalformedURLException {
        if (fi.inputStream != null) return fi.inputStream; else if (fi.url != null && !fi.url.equals("""")) return new URL(fi.url + fi.fileName).openStream(); else {
            File f = new File(fi.directory + fi.fileName);
            if (f == null || f.isDirectory()) return null; else {
                InputStream is = new FileInputStream(f);
                if (fi.compression >= FileInfo.LZW) is = new RandomAccessStream(is);
                return is;
            }
        }
    }
",False
900141,8250359,91017,"    private static synchronized InputStream tryFailoverServer(String url, String currentlyActiveServer, int status, IOException e) throws MalformedURLException, IOException {
        logger.log(Level.WARNING, ""problems connecting to geonames server "" + currentlyActiveServer, e);
        if (geoNamesServerFailover == null || currentlyActiveServer.equals(geoNamesServerFailover)) {
            if (currentlyActiveServer.equals(geoNamesServerFailover)) {
                timeOfLastFailureMainServer = 0;
            }
            throw e;
        }
        timeOfLastFailureMainServer = System.currentTimeMillis();
        logger.info(""trying to connect to failover server "" + geoNamesServerFailover);
        URLConnection conn = new URL(geoNamesServerFailover + url).openConnection();
        String userAgent = USER_AGENT + "" failover from "" + geoNamesServer;
        if (status != 0) {
            userAgent += "" "" + status;
        }
        conn.setRequestProperty(""User-Agent"", userAgent);
        InputStream in = conn.getInputStream();
        return in;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",False
900142,3024986,2915107,"    @Test
    public void testCopy_readerToOutputStream_nullOut() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        try {
            IOUtils.copy(reader, (OutputStream) null);
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    public static void unZip(String unZipfileName, String outputDirectory) throws IOException, FileNotFoundException {
        FileOutputStream fileOut;
        File file;
        ZipEntry zipEntry;
        ZipInputStream zipIn = new ZipInputStream(new BufferedInputStream(new FileInputStream(unZipfileName)), encoder);
        while ((zipEntry = zipIn.getNextEntry()) != null) {
            file = new File(outputDirectory + File.separator + zipEntry.getName());
            if (zipEntry.isDirectory()) {
                createDirectory(file.getPath(), """");
            } else {
                File parent = file.getParentFile();
                if (!parent.exists()) {
                    createDirectory(parent.getPath(), """");
                }
                fileOut = new FileOutputStream(file);
                int readedBytes;
                while ((readedBytes = zipIn.read(buf)) > 0) {
                    fileOut.write(buf, 0, readedBytes);
                }
                fileOut.close();
            }
            zipIn.closeEntry();
        }
    }
",True
900143,2374764,834053,"    private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest alg = MessageDigest.getInstance(algorithm);
        alg.reset();
        alg.update(new String(passwd).getBytes());
        byte[] digest = alg.digest();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xff & digest[i]);
            if (hex.length() == 1) {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900144,4147990,22246374,"    public static void copyFile(File dst, File src, boolean append) throws FileNotFoundException, IOException {
        dst.createNewFile();
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        long startAt = 0;
        if (append) startAt = out.size();
        in.transferTo(startAt, in.size(), out);
        out.close();
        in.close();
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900145,3654358,6814632,"    public static String getFileContents(String path) {
        BufferedReader buffReader = null;
        if (path.indexOf(""://"") != -1) {
            URL url = null;
            try {
                url = new URL(path);
            } catch (MalformedURLException e) {
                logger.warn(""Malformed URL: \"""" + path + ""\"""");
            }
            try {
                String encoding = XMLKit.getDeclaredXMLEncoding(url.openStream());
                buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            } catch (IOException e) {
                logger.warn(""I/O error trying to read \"""" + path + ""\"""");
            }
        } else {
            File toRead = null;
            try {
                toRead = getExistingFile(path);
            } catch (FileNotFoundException e) {
                throw new UserError(new FileNotFoundException(path));
            }
            if (toRead.isAbsolute()) {
                String parent = toRead.getParent();
                try {
                    workingDirectory.push(URLTools.createValidURL(parent));
                } catch (FileNotFoundException e) {
                    throw new DeveloperError(""Created an invalid parent file: \"""" + parent + ""\""."", e);
                }
            }
            if (toRead.exists() && !toRead.isDirectory()) {
                path = toRead.getAbsolutePath();
                try {
                    String encoding = XMLKit.getDeclaredXMLEncoding(new FileInputStream(path));
                    buffReader = new BufferedReader(new InputStreamReader(new FileInputStream(path), encoding));
                } catch (IOException e) {
                    logger.warn(""I/O error trying to read \"""" + path + ""\"""");
                    return null;
                }
            } else {
                assert toRead.exists() : ""getExistingFile() returned a non-existent file"";
                if (toRead.isDirectory()) {
                    throw new UserError(new FileAlreadyExistsAsDirectoryException(toRead));
                }
            }
        }
        StringBuilder result = new StringBuilder();
        String line;
        try {
            while ((line = buffReader.readLine()) != null) {
                result.append(line);
            }
            buffReader.close();
        } catch (IOException e) {
            logger.warn(""I/O error trying to read \"""" + path + ""\"""");
            return null;
        }
        return result.toString();
    }
","    protected void setOuterIP() {
        try {
            URL url = new URL(""http://elm-ve.sf.net/ipCheck/ipCheck.cgi"");
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader br = new BufferedReader(isr);
            String ip = br.readLine();
            ip = ip.trim();
            bridgeOutIPTF.setText(ip);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900146,20239269,2746011,"    public static void joinFiles(FileValidator validator, File target, File[] sources) {
        FileOutputStream fos = null;
        try {
            if (!validator.verifyFile(target)) return;
            fos = new FileOutputStream(target);
            FileInputStream fis = null;
            byte[] bytes = new byte[512];
            for (int i = 0; i < sources.length; i++) {
                fis = new FileInputStream(sources[i]);
                int nbread = 0;
                try {
                    while ((nbread = fis.read(bytes)) > -1) {
                        fos.write(bytes, 0, nbread);
                    }
                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, ioe, i18n.getString(""Failure""), JOptionPane.ERROR_MESSAGE);
                } finally {
                    fis.close();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, i18n.getString(""Failure""), JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (IOException e) {
            }
        }
    }
","    @RequestMapping(value = ""/privatefiles/{file_name}"")
    public void getFile(@PathVariable(""file_name"") String fileName, HttpServletResponse response, Principal principal) {
        try {
            Boolean validUser = false;
            final String currentUser = principal.getName();
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (!auth.getPrincipal().equals(new String(""anonymousUser""))) {
                MetabolightsUser metabolightsUser = (MetabolightsUser) auth.getPrincipal();
                if (metabolightsUser != null && metabolightsUser.isCurator()) validUser = true;
            }
            if (currentUser != null) {
                Study study = studyService.getBiiStudy(fileName, true);
                Collection<User> users = study.getUsers();
                Iterator<User> iter = users.iterator();
                while (iter.hasNext()) {
                    User user = iter.next();
                    if (user.getUserName().equals(currentUser)) {
                        validUser = true;
                        break;
                    }
                }
            }
            if (!validUser) throw new RuntimeException(PropertyLookup.getMessage(""Entry.notAuthorised""));
            try {
                InputStream is = new FileInputStream(privateFtpDirectory + fileName + "".zip"");
                response.setContentType(""application/zip"");
                IOUtils.copy(is, response.getOutputStream());
            } catch (Exception e) {
                throw new RuntimeException(PropertyLookup.getMessage(""Entry.fileMissing""));
            }
            response.flushBuffer();
        } catch (IOException ex) {
            logger.info(""Error writing file to output stream. Filename was '"" + fileName + ""'"");
            throw new RuntimeException(""IOError writing file to output stream"");
        }
    }
",True
900147,6013590,1527633,"    public void saveUserUpFile(UserInfo userInfo, String distFileName, InputStream instream) throws IOException {
        String fullPicFile = BBSCSUtil.getUserWebFilePath(userInfo.getId()) + distFileName;
        String fullPicFileSmall = BBSCSUtil.getUserWebFilePath(userInfo.getId()) + distFileName + Constant.IMG_SMALL_FILEPREFIX;
        OutputStream bos = new FileOutputStream(fullPicFile);
        IOUtils.copy(instream, bos);
        ImgUtil.reduceImg(fullPicFile, fullPicFileSmall, this.getSysConfig().getFaceWidth(), this.getSysConfig().getFaceHigh(), 0);
    }
","    public String getWebcontent(final String link, final String postdata) {
        final StringBuffer response = new StringBuffer();
        try {
            DisableSSLCertificateCheckUtil.disableChecks();
            final URL url = new URL(link);
            final URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            final OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(postdata);
            wr.flush();
            final BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String content = """";
            while ((content = rd.readLine()) != null) {
                response.append(content);
                response.append('\n');
            }
            wr.close();
            rd.close();
        } catch (final Exception e) {
            LOG.error(""getWebcontent(String link, String postdata): "" + e.toString() + ""\012"" + link + ""\012"" + postdata);
        }
        return response.toString();
    }
",False
900148,330896,367770,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900149,11314012,8558409,"    public static java.io.ByteArrayOutputStream getFileByteStream(URL _url) {
        java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
        try {
            InputStream input = _url.openStream();
            IOUtils.copy(input, buffer);
            IOUtils.closeQuietly(input);
        } catch (Exception err) {
            throw new RuntimeException(err);
        }
        return buffer;
    }
","    public static final void zip(final ZipOutputStream out, final File f, String base) throws Exception {
        if (f.isDirectory()) {
            final File[] fl = f.listFiles();
            base = base.length() == 0 ? """" : base + File.separator;
            for (final File element : fl) {
                zip(out, element, base + element.getName());
            }
        } else {
            out.putNextEntry(new org.apache.tools.zip.ZipEntry(base));
            final FileInputStream in = new FileInputStream(f);
            IOUtils.copyStream(in, out);
            in.close();
        }
        Thread.sleep(10);
    }
",True
900150,16929855,952021,"    public void runTask(HashMap pjobParms) throws Exception {
        FTPClient lftpClient = null;
        FileInputStream lfisSourceFile = null;
        JBJFPluginDefinition lpluginCipher = null;
        IJBJFPluginCipher theCipher = null;
        try {
            JBJFFTPDefinition lxmlFTP = null;
            if (getFTPDefinition() != null) {
                lxmlFTP = getFTPDefinition();
                this.mstrSourceDirectory = lxmlFTP.getSourceDirectory();
                this.mstrTargetDirectory = lxmlFTP.getTargetDirectory();
                this.mstrFilename = lxmlFTP.getFilename();
                this.mstrRemoteServer = lxmlFTP.getServer();
                if (getResources().containsKey(""plugin-cipher"")) {
                    lpluginCipher = (JBJFPluginDefinition) getResources().get(""plugin-cipher"");
                }
                if (lpluginCipher != null) {
                    theCipher = getTaskPlugins().getCipherPlugin(lpluginCipher.getPluginId());
                }
                if (theCipher != null) {
                    this.mstrServerUsr = theCipher.decryptString(lxmlFTP.getUser());
                    this.mstrServerPwd = theCipher.decryptString(lxmlFTP.getPass());
                } else {
                    this.mstrServerUsr = lxmlFTP.getUser();
                    this.mstrServerPwd = lxmlFTP.getPass();
                }
            } else {
                throw new Exception(""Work unit [ "" + SHORT_NAME + "" ] is missing an FTP Definition.  Please check"" + "" your JBJF Batch Definition file an make sure"" + "" this work unit has a <resource> element added"" + "" within the <task> element."");
            }
            lfisSourceFile = new FileInputStream(mstrSourceDirectory + File.separator + mstrFilename);
            lftpClient = new FTPClient();
            lftpClient.connect(mstrRemoteServer);
            lftpClient.setFileType(lxmlFTP.getFileTransferType());
            if (!FTPReply.isPositiveCompletion(lftpClient.getReplyCode())) {
                throw new Exception(""FTP server [ "" + mstrRemoteServer + "" ] refused connection."");
            }
            if (!lftpClient.login(mstrServerUsr, mstrServerPwd)) {
                throw new Exception(""Unable to login to server [ "" + mstrTargetDirectory + "" ]."");
            }
            if (!lftpClient.changeWorkingDirectory(mstrTargetDirectory)) {
                throw new Exception(""Unable to change to remote directory [ "" + mstrTargetDirectory + ""]"");
            }
            lftpClient.enterLocalPassiveMode();
            if (!lftpClient.storeFile(mstrFilename, lfisSourceFile)) {
                throw new Exception(""Unable to upload [ "" + mstrSourceDirectory + ""/"" + mstrFilename + "" ]"" + "" to "" + mstrTargetDirectory + File.separator + mstrFilename + "" to "" + mstrRemoteServer);
            }
            lfisSourceFile.close();
            lftpClient.logout();
        } catch (Exception e) {
            throw e;
        } finally {
            if (lftpClient != null && lftpClient.isConnected()) {
                try {
                    lftpClient.disconnect();
                } catch (IOException ioe) {
                }
            }
            if (lfisSourceFile != null) {
                try {
                    lfisSourceFile.close();
                } catch (Exception e) {
                }
            }
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900151,11314012,4318399,"    public static java.io.ByteArrayOutputStream getFileByteStream(URL _url) {
        java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
        try {
            InputStream input = _url.openStream();
            IOUtils.copy(input, buffer);
            IOUtils.closeQuietly(input);
        } catch (Exception err) {
            throw new RuntimeException(err);
        }
        return buffer;
    }
","    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) {
        LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList();
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        for (int i = 0; i < fileList.size(); i++) {
            if (fileList.get(i).getId().equals(entry.getName())) {
                for (int j = 0; j < restoreList.size(); j++) {
                    if ((fileList.get(i).getName() + ""."" + fileList.get(i).getType()).equals(restoreList.get(j))) {
                        counter += 1;
                        File outputFile = new File(outputDir, fileList.get(i).getName() + ""."" + fileList.get(i).getType());
                        if (!outputFile.getParentFile().exists()) {
                            createDir(outputFile.getParentFile());
                        }
                        BufferedInputStream inputStream;
                        BufferedOutputStream outputStream;
                        try {
                            inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
                            outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
                            IOUtils.copy(inputStream, outputStream);
                            outputStream.close();
                            inputStream.close();
                        } catch (IOException ex) {
                            throw new BackupException(ex.getMessage());
                        }
                    }
                }
            }
        }
    }
",True
900152,7667,15804547,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    protected static void copyOrMove(File sourceLocation, File targetLocation, boolean move) throws IOException {
        String[] children;
        int i;
        InputStream in;
        OutputStream out;
        byte[] buf;
        int len;
        if (sourceLocation.isDirectory()) {
            if (!targetLocation.exists()) targetLocation.mkdir();
            children = sourceLocation.list();
            for (i = 0; i < children.length; i++) {
                copyOrMove(new File(sourceLocation, children[i]), new File(targetLocation, children[i]), move);
            }
            if (move) sourceLocation.delete();
        } else {
            in = new FileInputStream(sourceLocation);
            if (targetLocation.isDirectory()) out = new FileOutputStream(targetLocation.getAbsolutePath() + File.separator + sourceLocation.getName()); else out = new FileOutputStream(targetLocation);
            buf = new byte[1024];
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
            if (move) sourceLocation.delete();
        }
    }
",True
900153,2591064,10207808,"    public static String sendGetRequest(String endpoint, String requestParameters) {
        if (endpoint == null) return null;
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            try {
                StringBuffer data = new StringBuffer();
                String urlStr = endpoint;
                if (requestParameters != null && requestParameters.length() > 0) {
                    urlStr += ""?"" + requestParameters;
                }
                URL url = new URL(urlStr);
                URLConnection conn = url.openConnection();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = rd.readLine()) != null) {
                    sb.append(line);
                }
                rd.close();
                result = sb.toString();
            } catch (Exception e) {
                Logger.getLogger(HTTPClient.class.getClass().getName()).log(Level.FINE, ""Could not connect to URL, is the service online?"");
            }
        }
        return result;
    }
","  @SuppressWarnings(""finally"")
  private void compress(File src) throws IOException
  {
    if (this.switches.contains(Switch.test))
      return;

    checkSourceFile(src);
    if (src.getPath().endsWith("".bz2""))
    {
      this.log.println(""WARNING: skipping file because it already has .bz2 suffix:"").println(src);
      return;
    }

    final File dst = new File(src.getPath() + "".bz2"").getAbsoluteFile();
    if (!checkDestFile(dst))
      return;

    FileChannel       inChannel   = null;
    FileChannel       outChannel  = null;
    FileOutputStream  fileOut     = null;
    BZip2OutputStream bzOut       = null;
    FileLock          inLock      = null;
    FileLock          outLock     = null;

    try
    {
      inChannel = new FileInputStream(src).getChannel();
      final long inSize = inChannel.size();
      inLock = inChannel.tryLock(0, inSize, true);
      if (inLock == null)
        throw error(""source file locked by another process: "" + src);

      fileOut     = new FileOutputStream(dst);
      outChannel  = fileOut.getChannel();
      bzOut       = new BZip2OutputStream(
        new BufferedXOutputStream(fileOut, 8192),
        Math.min(
          (this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize,
          BZip2OutputStream.chooseBlockSize(inSize)
        )
      );

      outLock = outChannel.tryLock();
      if (outLock == null)
        throw error(""destination file locked by another process: "" + dst);

      final boolean showProgress = this.switches.contains(Switch.showProgress);
      long pos = 0;
      int progress = 0;

      if (showProgress || this.verbose)
      {
        this.log.print(""source: "" + src).print("": size="").println(inSize);
        this.log.println(""target: "" + dst);
      }

      while (true)
      {
        final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos);
        if (maxStep <= 0)
        {
          if (showProgress)
          {
            for (int i = progress; i < MAX_PROGRESS; i++)
              this.log.print('#');
            this.log.println("" done"");
          }
          break;
        }
        else
        {
          final long step = inChannel.transferTo(pos, maxStep, bzOut);
          if ((step == 0) && (inChannel.size() != inSize))
            throw error(""file "" + src + "" has been modified concurrently by another process"");

          pos += step;
          if (showProgress)
          {
            final double  p           = (double) pos / (double) inSize;
            final int     newProgress = (int) (MAX_PROGRESS * p);
            for (int i = progress; i < newProgress; i++)
              this.log.print('#');
            progress = newProgress;
          }
        }
      }

      inLock.release();
      inChannel.close();
      bzOut.closeInstance();
      final long outSize = outChannel.position();
      outChannel.truncate(outSize);
      outLock.release();
      fileOut.close();

      if (this.verbose)
      {
        final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize);
        this.log.print(""raw size: "").print(inSize)
          .print(""; compressed size: "").print(outSize)
          .print(""; compression ratio: "").print(ratio).println('%');
      }

      if (!this.switches.contains(Switch.keep))
      {
        if (!src.delete())
          throw error(""unable to delete sourcefile: "" + src);
      }
    }
    catch (final IOException ex)
    {
      IO.tryClose(inChannel);
      IO.tryClose(bzOut);
      IO.tryClose(fileOut);
      IO.tryRelease(inLock);
      IO.tryRelease(outLock);
      try
      {
        this.log.println();
      }
      finally
      {
        throw ex;
      }
    }
  }
",False
900154,1642489,22327409,"    public void testAddFiles() throws Exception {
        File original = ZipPlugin.getFileInPlugin(new Path(""testresources/test.zip""));
        File copy = new File(original.getParentFile(), ""1test.zip"");
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(original);
            out = new FileOutputStream(copy);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        } finally {
            Util.close(in);
            Util.close(out);
        }
        ArchiveFile archive = new ArchiveFile(ZipPlugin.createArchive(copy.getPath()));
        archive.addFiles(new String[] { ZipPlugin.getFileInPlugin(new Path(""testresources/add.txt"")).getPath() }, new NullProgressMonitor());
        IArchive[] children = archive.getChildren();
        boolean found = false;
        for (IArchive child : children) {
            if (child.getLabel(IArchive.NAME).equals(""add.txt"")) found = true;
        }
        assertTrue(found);
        copy.delete();
    }
","    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            log(OctetStreamReader.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        }
        String filename = request.getHeader(""X-File-Name"");
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(targetPath + filename));
            IOUtils.copy(is, fos);
            response.setStatus(HttpServletResponse.SC_OK);
            writer.print(""{success: true}"");
        } catch (FileNotFoundException ex) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log(OctetStreamReader.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log(OctetStreamReader.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } finally {
            try {
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
",True
900155,1624010,616260,"    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",True
900156,7797615,9547226,"    protected String readFileUsingHttp(String fileUrlName) {
        String response = """";
        try {
            URL url = new URL(fileUrlName);
            URLConnection connection = url.openConnection();
            HttpURLConnection httpConn = (HttpURLConnection) connection;
            httpConn.setRequestProperty(""Content-Type"", ""text/html"");
            httpConn.setRequestProperty(""Content-Length"", ""0"");
            httpConn.setRequestMethod(""GET"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            httpConn.setAllowUserInteraction(false);
            InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
            BufferedReader in = new BufferedReader(isr);
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                response += inputLine + ""\n"";
            }
            if (response.endsWith(""\n"")) {
                response = response.substring(0, response.length() - 1);
            }
            in.close();
        } catch (Exception x) {
            x.printStackTrace();
        }
        return response;
    }
","    public void testReplicateAfterWrite2Slave() throws Exception {
        int nDocs = 50;
        for (int i = 0; i < nDocs; i++) {
            index(masterClient, ""id"", i, ""name"", ""name = "" + i);
        }
        String masterUrl = ""http://localhost:"" + masterJetty.getLocalPort() + ""/solr/replication?command=disableReplication"";
        URL url = new URL(masterUrl);
        InputStream stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        masterClient.commit();
        NamedList masterQueryRsp = query(""*:*"", masterClient);
        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(""response"");
        assertEquals(nDocs, masterQueryResult.getNumFound());
        Thread.sleep(100);
        index(slaveClient, ""id"", 551, ""name"", ""name = "" + 551);
        slaveClient.commit(true, true);
        index(slaveClient, ""id"", 552, ""name"", ""name = "" + 552);
        slaveClient.commit(true, true);
        index(slaveClient, ""id"", 553, ""name"", ""name = "" + 553);
        slaveClient.commit(true, true);
        index(slaveClient, ""id"", 554, ""name"", ""name = "" + 554);
        slaveClient.commit(true, true);
        index(slaveClient, ""id"", 555, ""name"", ""name = "" + 555);
        slaveClient.commit(true, true);
        NamedList slaveQueryRsp = query(""id:555"", slaveClient);
        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(""response"");
        assertEquals(1, slaveQueryResult.getNumFound());
        masterUrl = ""http://localhost:"" + masterJetty.getLocalPort() + ""/solr/replication?command=enableReplication"";
        url = new URL(masterUrl);
        stream = url.openStream();
        try {
            stream.close();
        } catch (IOException e) {
        }
        Thread.sleep(3000);
        slaveQueryRsp = query(""id:555"", slaveClient);
        slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(""response"");
        assertEquals(0, slaveQueryResult.getNumFound());
    }
",False
900157,14924022,20584513,"    private boolean saveDocumentXml(String repository, String tempRepo) {
        boolean result = true;
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String expression = ""documents/document"";
            InputSource insource = new InputSource(new FileInputStream(tempRepo + File.separator + AppConstants.DMS_XML));
            NodeList nodeList = (NodeList) xpath.evaluate(expression, insource, XPathConstants.NODESET);
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                System.out.println(node.getNodeName());
                DocumentModel document = new DocumentModel();
                NodeList childs = node.getChildNodes();
                for (int j = 0; j < childs.getLength(); j++) {
                    Node child = childs.item(j);
                    if (child.getNodeType() == Node.ELEMENT_NODE) {
                        if (child.getNodeName() != null && child.getFirstChild() != null && child.getFirstChild().getNodeValue() != null) {
                            System.out.println(child.getNodeName() + ""::"" + child.getFirstChild().getNodeValue());
                        }
                        if (Document.FLD_ID.equals(child.getNodeName())) {
                            if (child.getFirstChild() != null) {
                                String szId = child.getFirstChild().getNodeValue();
                                if (szId != null && szId.length() > 0) {
                                    try {
                                        document.setId(new Long(szId));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } else if (document.FLD_NAME.equals(child.getNodeName())) {
                            document.setName(child.getFirstChild().getNodeValue());
                            document.setTitle(document.getName());
                            document.setDescr(document.getName());
                            document.setExt(getExtension(document.getName()));
                        } else if (document.FLD_LOCATION.equals(child.getNodeName())) {
                            document.setLocation(child.getFirstChild().getNodeValue());
                        } else if (document.FLD_OWNER.equals(child.getNodeName())) {
                            Long id = new Long(child.getFirstChild().getNodeValue());
                            User user = new UserModel();
                            user.setId(id);
                            user = (User) userService.find(user);
                            if (user != null && user.getId() != null) {
                                document.setOwner(user);
                            }
                        }
                    }
                }
                boolean isSave = docService.save(document);
                if (isSave) {
                    String repo = preference.getRepository();
                    Calendar calendar = Calendar.getInstance();
                    StringBuffer sbRepo = new StringBuffer(repo);
                    sbRepo.append(File.separator);
                    StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));
                    sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));
                    File fileFolder = new File(sbRepo.append(sbFolder).toString());
                    if (!fileFolder.exists()) {
                        fileFolder.mkdirs();
                    }
                    FileChannel fcSource = null, fcDest = null;
                    try {
                        StringBuffer sbFile = new StringBuffer(fileFolder.getAbsolutePath());
                        StringBuffer fname = new StringBuffer(document.getId().toString());
                        fname.append(""."").append(document.getExt());
                        sbFile.append(File.separator).append(fname);
                        fcSource = new FileInputStream(tempRepo + File.separator + document.getName()).getChannel();
                        fcDest = new FileOutputStream(sbFile.toString()).getChannel();
                        fcDest.transferFrom(fcSource, 0, fcSource.size());
                        document.setLocation(sbFolder.toString());
                        document.setSize(fcSource.size());
                        log.info(""Batch upload file "" + document.getName() + "" into ["" + document.getLocation() + ""] as "" + document.getName() + ""."" + document.getExt());
                        folder.setId(DEFAULT_FOLDER);
                        folder = (Folder) folderService.find(folder);
                        if (folder != null && folder.getId() != null) {
                            document.setFolder(folder);
                        }
                        workspace.setId(DEFAULT_WORKSPACE);
                        workspace = (Workspace) workspaceService.find(workspace);
                        if (workspace != null && workspace.getId() != null) {
                            document.setWorkspace(workspace);
                        }
                        user.setId(DEFAULT_USER);
                        user = (User) userService.find(user);
                        if (user != null && user.getId() != null) {
                            document.setCrtby(user.getId());
                        }
                        document.setCrtdate(new Date());
                        document = (DocumentModel) docService.resetDuplicateDocName(document);
                        docService.save(document);
                        DocumentIndexer.indexDocument(preference, document);
                    } catch (FileNotFoundException notFoundEx) {
                        log.error(""saveFile file not found: "" + document.getName(), notFoundEx);
                    } catch (IOException ioEx) {
                        log.error(""saveFile IOException: "" + document.getName(), ioEx);
                    } finally {
                        try {
                            if (fcSource != null) {
                                fcSource.close();
                            }
                            if (fcDest != null) {
                                fcDest.close();
                            }
                        } catch (Exception e) {
                            log.error(e.getMessage(), e);
                        }
                    }
                }
            }
        } catch (Exception e) {
            result = false;
            e.printStackTrace();
        }
        return result;
    }
","    public static final String getUniqueKey() {
        String digest = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            ;
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            String randVal = """" + new Random().nextInt();
            String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
",False
900158,1123203,4364579,"        public TextureData newTextureData(GLProfile glp, URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {
            InputStream stream = new BufferedInputStream(url.openStream());
            try {
                return newTextureData(glp, stream, internalFormat, pixelFormat, mipmap, fileSuffix);
            } finally {
                stream.close();
            }
        }
","    public static String calcCRC(String phrase) {
        StringBuffer crcCalc = new StringBuffer();
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(phrase.getBytes());
            byte[] tabDigest = md.digest();
            for (int i = 0; i < tabDigest.length; i++) {
                String octet = ""0"" + Integer.toHexString(tabDigest[i]);
                crcCalc.append(octet.substring(octet.length() - 2));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return crcCalc.toString();
    }
",False
900159,23349376,3046108,"    public TreeMap getStrainMap() {
        TreeMap strainMap = new TreeMap();
        String server = """";
        try {
            Datasource[] ds = DatasourceManager.getDatasouce(alias, version, DatasourceManager.ALL_CONTAINS_GROUP);
            for (int i = 0; i < ds.length; i++) {
                if (ds[i].getDescription().startsWith(MOUSE_DBSNP)) {
                    if (ds[i].getServer().length() == 0) {
                        Connection con = ds[i].getConnection();
                        strainMap = Action.lineMode.regularSQL.GenotypeDataSearchAction.getStrainMap(con);
                        break;
                    } else {
                        server = ds[i].getServer();
                        HashMap serverUrlMap = InitXml.getInstance().getServerMap();
                        String serverUrl = (String) serverUrlMap.get(server);
                        URL url = new URL(serverUrl + servletName);
                        URLConnection uc = url.openConnection();
                        uc.setDoOutput(true);
                        OutputStream os = uc.getOutputStream();
                        StringBuffer buf = new StringBuffer();
                        buf.append(""viewType=getstrains"");
                        buf.append(""&hHead="" + hHead);
                        buf.append(""&hCheck="" + version);
                        PrintStream ps = new PrintStream(os);
                        ps.print(buf.toString());
                        ps.close();
                        ObjectInputStream ois = new ObjectInputStream(uc.getInputStream());
                        strainMap = (TreeMap) ois.readObject();
                        ois.close();
                    }
                }
            }
        } catch (Exception e) {
            log.error(""strain map"", e);
        }
        return strainMap;
    }
","    public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""photo_id"", photoId));
        if (null != language) {
            qparams.add(new BasicNameValuePair(""language"", language));
        }
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGPhotoInfo photo = JAXB.unmarshal(content, GGPhotoInfo.class);
        return photo;
    }
",False
900160,492307,20970925,"    public In(URL url) {
        try {
            URLConnection site = url.openConnection();
            InputStream is = site.getInputStream();
            scanner = new Scanner(is, charsetName);
            scanner.useLocale(usLocale);
        } catch (IOException ioe) {
            System.err.println(""Could not open "" + url);
        }
    }
","    public static final String convertPassword(final String srcPwd) {
        StringBuilder out;
        MessageDigest md;
        byte[] byteValues;
        byte singleChar = 0;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(srcPwd.getBytes());
            byteValues = md.digest();
            if ((byteValues == null) || (byteValues.length <= 0)) {
                return null;
            }
            out = new StringBuilder(byteValues.length * 2);
            for (byte element : byteValues) {
                singleChar = (byte) (element & 0xF0);
                singleChar = (byte) (singleChar >>> 4);
                singleChar = (byte) (singleChar & 0x0F);
                out.append(PasswordConverter.ENTRIES[singleChar]);
                singleChar = (byte) (element & 0x0F);
                out.append(PasswordConverter.ENTRIES[singleChar]);
            }
            return out.toString();
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",False
900161,19180786,13039812,"    public void testCopyFolderContents() throws IOException {
        log.info(""Running: testCopyFolderContents()"");
        IOUtils.copyFolderContents(srcFolderName, destFolderName);
        Assert.assertTrue(destFile1.exists() && destFile1.isFile());
        Assert.assertTrue(destFile2.exists() && destFile2.isFile());
        Assert.assertTrue(destFile3.exists() && destFile3.isFile());
    }
","    public String getImageURL(String text) {
        String imgURL = """";
        try {
            URL url = new URL(""http://images.search.yahoo.com/search/images?p="" + URLEncoder.encode(text));
            URLConnection connection = url.openConnection();
            DataInputStream in = new DataInputStream(connection.getInputStream());
            String line;
            Pattern imgPattern = Pattern.compile(""isrc=\""([^\""]*)\"""");
            while ((line = in.readLine()) != null) {
                Matcher match = imgPattern.matcher(line);
                if (match.find()) {
                    imgURL = match.group(1);
                    break;
                }
            }
            in.close();
        } catch (Exception e) {
        }
        return imgURL;
    }
",False
900162,21492244,3365958,"    private String getData(String myurl) throws Exception {
        URL url = new URL(myurl);
        uc = (HttpURLConnection) url.openConnection();
        uc.setRequestProperty(""Cookie"", NetLoadAccount.getPhpsessioncookie());
        br = new BufferedReader(new InputStreamReader(uc.getInputStream()));
        String temp = """", k = """";
        while ((temp = br.readLine()) != null) {
            k += temp;
        }
        br.close();
        return k;
    }
","    private void bubbleSort(int[] mas) {
        boolean t = true;
        int temp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }
",False
900163,23677118,2226036,"	public static void copyFile5(File srcFile, File destFile) throws IOException {
		InputStream in = new FileInputStream(srcFile);
		OutputStream out = new FileOutputStream(destFile);
		IOUtils.copyLarge(in, out);
		in.close();
		out.close();
	}
","            public void run() {
                saveWLHome();
                for (final TabControl control : tabControls) {
                    control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);
                }
                if (isEnabledJCLCopy()) {
                    final File url = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(url, ""lib"");
                    File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");
                    if (!log4jLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream fos = null;
                        try {
                            srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));
                            fos = new FileOutputStream(log4jLibrary);
                            IOUtils.copy(srcFile, fos);
                            srcFile.close();
                            fos.flush();
                            fos.close();
                            srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));
                            File jcl = new File(lib, ""commons-logging-1.0.4.jar"");
                            fos = new FileOutputStream(jcl);
                            IOUtils.copy(srcFile, fos);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (fos != null) {
                                    fos.flush();
                                    fos.close();
                                    fos = null;
                                }
                            } catch (IOException e) {
                            }
                        }
                    }
                }
                if (isEnabledJSTLCopy()) {
                    File url = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(url, ""lib"");
                    File jstlLibrary = new File(lib, ""jstl.jar"");
                    if (!jstlLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream fos = null;
                        try {
                            srcFile = toInputStream(new Path(""jstl/jstl.jar""));
                            fos = new FileOutputStream(jstlLibrary);
                            IOUtils.copy(srcFile, fos);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (fos != null) {
                                    fos.flush();
                                    fos.close();
                                    fos = null;
                                }
                            } catch (final IOException e) {
                                Logger.getLog().debug(""I/O exception closing resources"", e);
                            }
                        }
                    }
                }
            }
",True
900164,316912,22705280,"    void copyFile(String src, String dest) throws IOException {
        int amount;
        byte[] buffer = new byte[4096];
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        while ((amount = in.read(buffer)) != -1) out.write(buffer, 0, amount);
        in.close();
        out.close();
    }
","    public static String encode(String str) {
        String md5Str = null;
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(str.getBytes(""UTF8""));
            byte[] hash = digest.digest();
            md5Str = """";
            for (int i = 0; i < hash.length; i++) {
                md5Str += Integer.toHexString((0x000000ff & hash[i]) | 0xffffff00).substring(6);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return md5Str;
    }
",False
900165,17817569,8043217,"    public String getFeatureInfoHTML(Point3d GKposition, String[] layerIds, int featureCount) {
        String html = """";
        try {
            String request = null;
            if (version == VERSION_030) {
                org.gdi3d.xnavi.services.w3ds.x030.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x030.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            } else if (version == VERSION_040) {
                org.gdi3d.xnavi.services.w3ds.x040.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x040.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            } else if (version == VERSION_041) {
                org.gdi3d.xnavi.services.w3ds.x041.GetFeatureInfo getFeatureInfo = new org.gdi3d.xnavi.services.w3ds.x041.GetFeatureInfo(this.serviceEndPoint);
                request = getFeatureInfo.createRequest(GKposition, layerIds, featureCount);
            }
            if (Navigator.isVerbose()) System.out.println(request);
            URL url = new URL(request);
            int contentLength = -1;
            URLConnection urlc;
            urlc = url.openConnection();
            urlc.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                urlc.setRequestProperty(""Authorization"", ""Basic "" + getEncoding());
            }
            urlc.connect();
            String content_type = urlc.getContentType();
            if (content_type.equalsIgnoreCase(""text/html"") || content_type.equalsIgnoreCase(""text/html;charset=UTF-8"")) {
                InputStream is = urlc.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);
                StringBuffer sb = new StringBuffer();
                InputStreamReader isr = new InputStreamReader(bis);
                char chars[] = new char[10240];
                int len = 0;
                contentLength = 0;
                while ((len = isr.read(chars, 0, chars.length)) >= 0) {
                    sb.append(chars, 0, len);
                    contentLength += len;
                }
                chars = null;
                isr.close();
                bis.close();
                is.close();
                html = sb.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return html;
    }
","    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
",False
900166,14287646,19906962,"    private String getStoreName() {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(protectionDomain.getBytes());
            final byte[] bs = digest.digest();
            final StringBuffer sb = new StringBuffer(bs.length * 2);
            for (int i = 0; i < bs.length; i++) {
                final String s = Integer.toHexString(bs[i] & 0xff);
                if (s.length() < 2) sb.append('0');
                sb.append(s);
            }
            return sb.toString();
        } catch (final NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't save credentials: digest method MD5 unavailable."");
        }
    }
","    public static String encrypt(String unencryptedString) {
        if (StringUtils.isBlank(unencryptedString)) {
            throw new IllegalArgumentException(""Cannot encrypt a null or empty string"");
        }
        MessageDigest md = null;
        String encryptionAlgorithm = Environment.getValue(Environment.PROP_ENCRYPTION_ALGORITHM);
        try {
            md = MessageDigest.getInstance(encryptionAlgorithm);
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""JDK does not support the "" + encryptionAlgorithm + "" encryption algorithm.  Weaker encryption will be attempted."");
        }
        if (md == null) {
            try {
                md = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                throw new UnsupportedOperationException(""JDK does not support the SHA-1 or SHA-512 encryption algorithms"");
            }
            Environment.setValue(Environment.PROP_ENCRYPTION_ALGORITHM, ""SHA-1"");
            try {
                Environment.saveConfiguration();
            } catch (WikiException e) {
                logger.info(""Failure while saving encryption algorithm property"", e);
            }
        }
        try {
            md.update(unencryptedString.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return encrypt64(raw);
        } catch (GeneralSecurityException e) {
            logger.error(""Encryption failure"", e);
            throw new IllegalStateException(""Failure while encrypting value"");
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Unsupporting encoding UTF-8"");
        }
    }
",True
900167,4830846,1485385,"    @Override
    public synchronized void deleteHttpSessionStatistics(String contextName, String project, Date dateFrom, Date dateTo) throws DatabaseException {
        final Connection connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
            String queryString = ""DELETE "" + this.getHttpSessionInvocationsSchemaAndTableName() + "" FROM "" + this.getHttpSessionInvocationsSchemaAndTableName() + "" INNER JOIN "" + this.getHttpSessionElementsSchemaAndTableName() + "" ON "" + this.getHttpSessionElementsSchemaAndTableName() + "".element_id =  "" + this.getHttpSessionInvocationsSchemaAndTableName() + "".element_id WHERE "";
            if (contextName != null) {
                queryString = queryString + "" context_name LIKE ? AND "";
            }
            if (project != null) {
                queryString = queryString + "" project LIKE ? AND "";
            }
            if (dateFrom != null) {
                queryString = queryString + "" start_timestamp >= ? AND "";
            }
            if (dateTo != null) {
                queryString = queryString + "" start_timestamp <= ? AND "";
            }
            queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);
            final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);
            int indexCounter = 1;
            if (contextName != null) {
                preparedStatement.setString(indexCounter, contextName);
                indexCounter = indexCounter + 1;
            }
            if (project != null) {
                preparedStatement.setString(indexCounter, project);
                indexCounter = indexCounter + 1;
            }
            if (dateFrom != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));
                indexCounter = indexCounter + 1;
            }
            if (dateTo != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));
                indexCounter = indexCounter + 1;
            }
            preparedStatement.executeUpdate();
            preparedStatement.close();
            connection.commit();
        } catch (final SQLException e) {
            try {
                connection.rollback();
            } catch (final SQLException ex) {
                JeeObserverServerContext.logger.log(Level.SEVERE, ""Transaction rollback error."", ex);
            }
            JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());
            throw new DatabaseException(""Error deleting HTTP session statistics."", e);
        } finally {
            this.releaseConnection(connection);
        }
    }
","    private void runUpdateAppListing() {
        DataStorage.clearListedAppListing();
        GenericUrl url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListing appListingBody = buildAppListing(appsMarketplaceProject);
        JsonHttpContent content = new JsonHttpContent();
        content.jsonFactory = jsonFactory;
        if (appListingBody != null) {
            content.data = appListingBody;
        }
        AppListing appListing;
        try {
            HttpRequest request = requestFactory.buildPutRequest(url, content);
            request.addParser(jsonHttpParser);
            request.readTimeout = readTimeout;
            HttpResponse response = request.execute();
            appListing = response.parseAs(AppListing.class);
            operationStatus = validateAppListing(appListing, appListingBody);
            if (operationStatus) {
                DataStorage.setListedAppListing(appListing);
            }
            response.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
",False
900168,12454179,19760848,"    @Override
    public void excluir(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""DELETE from disciplina where id_disciplina = ?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                conexao.close();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
","    public static void main(String[] args) {
        try {
            Class.forName(""org.hsqldb.jdbcDriver"");
        } catch (ClassNotFoundException e) {
            System.out.println(""HSQL Driver not found."");
            System.exit(1);
        }
        Connection con = null;
        try {
            con = DriverManager.getConnection(""jdbc:hsqldb:."", ""sa"", """");
            con.setAutoCommit(false);
        } catch (SQLException e) {
            System.out.println(""Connection error: "" + e.getMessage());
            System.exit(e.getErrorCode());
        }
        String createTable = ""CREATE TABLE NAMES (NAME VARCHAR(100))"";
        Statement stmt = null;
        try {
            stmt = con.createStatement();
            con.commit();
            stmt.executeUpdate(createTable);
            con.commit();
        } catch (SQLException e) {
            System.out.println(""Create table error: "" + e.getMessage());
            try {
                con.rollback();
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        Vector names = new Vector(4);
        names.addElement(""FRANK"");
        names.addElement(""FRED"");
        names.addElement(""JACK"");
        names.addElement(""JIM"");
        String ins = ""INSERT INTO NAMES VALUES (?)"";
        PreparedStatement pstmt = null;
        try {
            con.commit();
            pstmt = con.prepareStatement(ins);
            for (int i = 0; i < names.size(); i++) {
                pstmt.setString(1, (String) names.elementAt(i));
                pstmt.executeUpdate();
            }
            con.commit();
        } catch (SQLException e) {
            System.out.println(""Insert error: "" + e.getMessage());
            try {
                con.rollback();
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        String selAll = ""SELECT * FROM NAMES"";
        ResultSet rs = null;
        stmt = null;
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(selAll);
            System.out.println(""SELECT * FROM NAMES"");
            while (rs.next()) {
                String name = rs.getString(1);
                System.out.println(""\t"" + name);
            }
            stmt.close();
        } catch (SQLException e) {
            System.out.println(""Select All error: "" + e.getMessage());
            try {
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        String selectLike = ""SELECT * FROM NAMES WHERE NAME LIKE 'F%'"";
        rs = null;
        stmt = null;
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(selectLike);
            System.out.println(""SELECT * FROM NAMES WHERE NAME LIKE 'F%'"");
            while (rs.next()) {
                String name = rs.getString(1);
                System.out.println(""\t"" + name);
            }
            stmt.close();
        } catch (SQLException e) {
            System.out.println(""Select Like error: "" + e.getMessage());
            try {
                con.close();
                System.exit(e.getErrorCode());
            } catch (SQLException ex) {
            }
        }
        try {
            con.close();
        } catch (SQLException e) {
        }
    }
",True
900169,18565406,3762632,"    public Stopper(String stopWordsFile) {
        try {
            BufferedReader br = null;
            FileReader fr = null;
            if (stopWordsFile.startsWith(""http"")) {
                URL url = new URL(stopWordsFile);
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            } else {
                fr = new FileReader(new File(stopWordsFile));
                br = new BufferedReader(fr);
            }
            String line = null;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                stopWords.put(line, """");
            }
            fr.close();
        } catch (Exception e) {
            System.out.println(""Stopwords not Found"");
            return;
        }
    }
","    public static void main(String arg[]) {
        try {
            URL url = new URL(tempurl);
            HttpURLConnection connect = (HttpURLConnection) url.openConnection();
            connect.setDoInput(true);
            connect.setDoOutput(true);
            BufferedReader in = new BufferedReader(new InputStreamReader(connect.getInputStream(), ""gb2312""));
            String line = null;
            StringBuffer content = new StringBuffer();
            while ((line = in.readLine()) != null) {
                content.append(line);
            }
            in.close();
            url = null;
            String msg = content.toString();
            Matcher m = p.matcher(msg);
            while (m.find()) {
                System.out.println(m.group(1) + ""---"" + m.group(2) + ""---"" + m.group(3) + ""---"" + m.group(4) + ""---"" + m.group(5) + ""---"");
            }
        } catch (Exception e) {
            System.out.println(""Error:"");
            System.out.println(e.getStackTrace());
        }
    }
",True
900170,13292327,3402511,"    public static Checksum checksum(File file, Checksum checksum) throws IOException {
        if (file.isDirectory()) {
            throw new IllegalArgumentException(""Checksums can't be computed on directories"");
        }
        InputStream in = null;
        try {
            in = new CheckedInputStream(new FileInputStream(file), checksum);
            IOUtils.copy(in, new OutputStream() {

                @Override
                public void write(byte[] b, int off, int len) {
                }

                @Override
                public void write(int b) {
                }

                @Override
                public void write(byte[] b) throws IOException {
                }
            });
        } finally {
            IOUtils.closeQuietly(in);
        }
        return checksum;
    }
","    private static FileEntry writeEntry(Zip64File zip64File, FileEntry targetPath, File toWrite, boolean compress) {
        InputStream in = null;
        EntryOutputStream out = null;
        processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath.getName(), toWrite), compress);
        try {
            if (!compress) {
                out = zip64File.openEntryOutputStream(targetPath.getName(), FileEntry.iMETHOD_STORED, getFileDate(toWrite));
            } else {
                out = zip64File.openEntryOutputStream(targetPath.getName(), FileEntry.iMETHOD_DEFLATED, getFileDate(toWrite));
            }
            if (!targetPath.isDirectory()) {
                in = new FileInputStream(toWrite);
                IOUtils.copyLarge(in, out);
                in.close();
            }
            out.flush();
            out.close();
            if (targetPath.isDirectory()) {
                log.info(""[createZip] Written folder entry to zip: "" + targetPath.getName());
            } else {
                log.info(""[createZip] Written file entry to zip: "" + targetPath.getName());
            }
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        } catch (ZipException e1) {
            e1.printStackTrace();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        return targetPath;
    }
",True
900171,22424633,11319479,"    public static void copyFile(String input, String output) {
        try {
            FileChannel srcChannel = new FileInputStream(""srcFilename"").getChannel();
            FileChannel dstChannel = new FileOutputStream(""dstFilename"").getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900172,11090449,2031752,"    public static Drawable fetchCachedDrawable(String url) throws MalformedURLException, IOException {
        Log.d(LOG_TAG, ""Fetching cached : "" + url);
        String cacheName = md5(url);
        checkAndCreateDirectoryIfNeeded();
        File r = new File(CACHELOCATION + cacheName);
        if (!r.exists()) {
            InputStream is = (InputStream) fetch(url);
            FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName);
            int nextChar;
            while ((nextChar = is.read()) != -1) fos.write((char) nextChar);
            fos.flush();
        }
        FileInputStream fis = new FileInputStream(CACHELOCATION + cacheName);
        Drawable d = Drawable.createFromStream(fis, ""src"");
        return d;
    }
","    public String readFile(String filename) throws UnsupportedEncodingException, FileNotFoundException, IOException {
        File f = new File(baseDir);
        f = new File(f, filename);
        StringWriter w = new StringWriter();
        Reader fr = new InputStreamReader(new FileInputStream(f), ""UTF-8"");
        IOUtils.copy(fr, w);
        fr.close();
        w.close();
        String contents = w.toString();
        return contents;
    }
",True
900173,17557354,5040724,"    public void copyFile2(String src, String dest) throws IOException {
        FileWriter fw = null;
        FileReader fr = null;
        BufferedReader br = null;
        BufferedWriter bw = null;
        File source = null;
        try {
            fr = new FileReader(src);
            fw = new FileWriter(dest);
            br = new BufferedReader(fr);
            bw = new BufferedWriter(fw);
            source = new File(src);
            int fileLength = (int) source.length();
            char charBuff[] = new char[fileLength];
            while (br.read(charBuff, 0, fileLength) != -1) bw.write(charBuff, 0, fileLength);
        } catch (FileNotFoundException fnfe) {
            throw new FileCopyException(src + "" "" + MM.PHRASES.getPhrase(""35""));
        } catch (IOException ioe) {
            throw new FileCopyException(MM.PHRASES.getPhrase(""36""));
        } finally {
            try {
                if (br != null) br.close();
                if (bw != null) bw.close();
            } catch (IOException ioe) {
            }
        }
    }
","    public Document parse(Document document) {
        CSSCompilerBuilder compilerBuilder = new CSSCompilerBuilder();
        StyleSheetCompilerFactory compilerFactory = getStyleSheetCompilerFactory();
        compilerBuilder.setStyleSheetCompilerFactory(compilerFactory);
        CSSCompiler cssCompiler = compilerBuilder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(new InlineStyleSheetCompilerFactory(StylingFunctions.getResolver()));
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        DocumentStyler styler = new DocumentStyler(stylingEngine, XDIMESchemata.CDM_NAMESPACE);
        styler.style(document);
        DOMWalker walker = new DOMWalker(new WalkingDOMVisitorStub() {

            public void visit(Element element) {
                if (element.getStyles() == null) {
                    throw new IllegalArgumentException(""element "" + element.getName() + "" has no styles"");
                }
            }
        });
        walker.walk(document);
        DOMTransformer transformer = new DeferredInheritTransformer();
        document = transformer.transform(null, document);
        return document;
    }
",False
900174,15626460,22762280,"    private Datastream addManagedDatastreamVersion(Entry entry) throws StreamIOException, ObjectIntegrityException {
        Datastream ds = new DatastreamManagedContent();
        setDSCommonProperties(ds, entry);
        ds.DSLocationType = ""INTERNAL_ID"";
        ds.DSMIME = getDSMimeType(entry);
        IRI contentLocation = entry.getContentSrc();
        if (contentLocation != null) {
            if (m_obj.isNew()) {
                ValidationUtility.validateURL(contentLocation.toString(), ds.DSControlGrp);
            }
            if (m_format.equals(ATOM_ZIP1_1)) {
                if (!contentLocation.isAbsolute() && !contentLocation.isPathAbsolute()) {
                    File f = getContentSrcAsFile(contentLocation);
                    contentLocation = new IRI(DatastreamManagedContent.TEMP_SCHEME + f.getAbsolutePath());
                }
            }
            ds.DSLocation = contentLocation.toString();
            ds.DSLocation = (DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), ds, m_transContext)).DSLocation;
            return ds;
        }
        try {
            File temp = File.createTempFile(""binary-datastream"", null);
            OutputStream out = new FileOutputStream(temp);
            if (MimeTypeHelper.isText(ds.DSMIME) || MimeTypeHelper.isXml(ds.DSMIME)) {
                IOUtils.copy(new StringReader(entry.getContent()), out, m_encoding);
            } else {
                IOUtils.copy(entry.getContentStream(), out);
            }
            ds.DSLocation = DatastreamManagedContent.TEMP_SCHEME + temp.getAbsolutePath();
        } catch (IOException e) {
            throw new StreamIOException(e.getMessage(), e);
        }
        return ds;
    }
","    public static String postRequest(String url, String content) throws IOException {
        InputStream is = null;
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        String result = null;
        try {
            Object obj = openConnection(url, content, ""POST"", ""text/xml"");
            if (obj instanceof InputStream) {
                is = (InputStream) obj;
            } else {
                return ""Cannot open a connection with "" + url + "" : "" + obj.toString();
            }
            int c = is.read();
            while (c != -1) {
                buf.write(c);
                c = is.read();
            }
            result = new String(buf.toByteArray());
        } finally {
            if (is != null) {
                is.close();
            }
            if (buf != null) {
                buf.close();
            }
        }
        return result;
    }
",False
900175,14497172,17456433,"    public String getHtml(String path) throws Exception {
        URL url = new URL(path);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        InputStream inputStream = conn.getInputStream();
        InputStreamReader isr = new InputStreamReader(inputStream, ""UTF-8"");
        StringBuilder sb = new StringBuilder();
        BufferedReader in = new BufferedReader(isr);
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
        }
        String result = sb.toString();
        return result;
    }
","    public static boolean isSameHttpContent(final String url, final File localFile, UsernamePasswordCredentials creds) throws IOException {
        if (localFile.isFile()) {
            long localContentLength = localFile.length();
            long localLastModified = localFile.lastModified() / 1000;
            long contentLength = -1;
            long lastModified = -1;
            HttpClient httpclient = createHttpClient(creds);
            try {
                HttpHead httphead = new HttpHead(url);
                HttpResponse response = httpclient.execute(httphead);
                if (response != null) {
                    StatusLine statusLine = response.getStatusLine();
                    int status = statusLine.getStatusCode() / 100;
                    if (status == 2) {
                        Header lastModifiedHeader = response.getFirstHeader(""Last-Modified"");
                        Header contentLengthHeader = response.getFirstHeader(""Content-Length"");
                        if (contentLengthHeader != null) {
                            contentLength = Integer.parseInt(contentLengthHeader.getValue());
                        }
                        if (lastModifiedHeader != null) {
                            SimpleDateFormat formatter = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss zzz"");
                            formatter.setDateFormatSymbols(new DateFormatSymbols(Locale.US));
                            try {
                                lastModified = formatter.parse(lastModifiedHeader.getValue()).getTime() / 1000;
                            } catch (ParseException e) {
                                logger.error(e);
                            }
                        }
                    } else {
                        return true;
                    }
                }
            } finally {
                httpclient.getConnectionManager().shutdown();
            }
            if (logger.isDebugEnabled()) {
                logger.debug(""local:"" + localContentLength + "" "" + localLastModified);
                logger.debug(""remote:"" + contentLength + "" "" + lastModified);
            }
            if (contentLength != -1 && localContentLength != contentLength) return false;
            if (lastModified != -1 && lastModified != localLastModified) return false;
            if (contentLength == -1 && lastModified == -1) return false;
            return true;
        }
        return false;
    }
",False
900176,19718986,6288459,"    public static void concatenateToDestFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            if (!destFile.createNewFile()) {
                throw new IllegalArgumentException(""Could not create destination file:"" + destFile.getName());
            }
        }
        BufferedOutputStream bufferedOutputStream = null;
        BufferedInputStream bufferedInputStream = null;
        byte[] buffer = new byte[1024];
        try {
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destFile, true));
            bufferedInputStream = new BufferedInputStream(new FileInputStream(sourceFile));
            while (true) {
                int readByte = bufferedInputStream.read(buffer, 0, buffer.length);
                if (readByte == -1) {
                    break;
                }
                bufferedOutputStream.write(buffer, 0, readByte);
            }
        } finally {
            if (bufferedOutputStream != null) {
                bufferedOutputStream.close();
            }
            if (bufferedInputStream != null) {
                bufferedInputStream.close();
            }
        }
    }
","    private static void createCompoundData(String dir, String type) {
        try {
            Set s = new HashSet();
            File nouns = new File(dir + ""index."" + type);
            FileInputStream fis = new FileInputStream(nouns);
            InputStreamReader reader = new InputStreamReader(fis);
            StringBuffer sb = new StringBuffer();
            int chr = reader.read();
            while (chr >= 0) {
                if (chr == '\n' || chr == '\r') {
                    String line = sb.toString();
                    if (line.length() > 0) {
                        String[] spaceSplit = PerlHelp.split(line);
                        for (int i = 0; i < spaceSplit.length; i++) {
                            if (spaceSplit[i].indexOf('_') >= 0) {
                                s.add(spaceSplit[i].replace('_', ' '));
                            }
                        }
                    }
                    sb.setLength(0);
                } else {
                    sb.append((char) chr);
                }
                chr = reader.read();
            }
            System.out.println(type + "" size="" + s.size());
            File output = new File(dir + ""compound."" + type + ""s.gz"");
            FileOutputStream fos = new FileOutputStream(output);
            GZIPOutputStream gzos = new GZIPOutputStream(new BufferedOutputStream(fos));
            PrintWriter writer = new PrintWriter(gzos);
            writer.println(""# This file was extracted from WordNet data, the following copyright notice"");
            writer.println(""# from WordNet is attached."");
            writer.println(""#"");
            writer.println(""#  This software and database is being provided to you, the LICENSEE, by  "");
            writer.println(""#  Princeton University under the following license.  By obtaining, using  "");
            writer.println(""#  and/or copying this software and database, you agree that you have  "");
            writer.println(""#  read, understood, and will comply with these terms and conditions.:  "");
            writer.println(""#  "");
            writer.println(""#  Permission to use, copy, modify and distribute this software and  "");
            writer.println(""#  database and its documentation for any purpose and without fee or  "");
            writer.println(""#  royalty is hereby granted, provided that you agree to comply with  "");
            writer.println(""#  the following copyright notice and statements, including the disclaimer,  "");
            writer.println(""#  and that the same appear on ALL copies of the software, database and  "");
            writer.println(""#  documentation, including modifications that you make for internal  "");
            writer.println(""#  use or for distribution.  "");
            writer.println(""#  "");
            writer.println(""#  WordNet 1.7 Copyright 2001 by Princeton University.  All rights reserved. "");
            writer.println(""#  "");
            writer.println(""#  THIS SOFTWARE AND DATABASE IS PROVIDED \""AS IS\"" AND PRINCETON  "");
            writer.println(""#  UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR  "");
            writer.println(""#  IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PRINCETON  "");
            writer.println(""#  UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES OF MERCHANT-  "");
            writer.println(""#  ABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE  "");
            writer.println(""#  OF THE LICENSED SOFTWARE, DATABASE OR DOCUMENTATION WILL NOT  "");
            writer.println(""#  INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR "");
            writer.println(""#  OTHER RIGHTS. "");
            writer.println(""#  "");
            writer.println(""#  The name of Princeton University or Princeton may not be used in"");
            writer.println(""#  advertising or publicity pertaining to distribution of the software"");
            writer.println(""#  and/or database.  Title to copyright in this software, database and"");
            writer.println(""#  any associated documentation shall at all times remain with"");
            writer.println(""#  Princeton University and LICENSEE agrees to preserve same.  "");
            for (Iterator i = s.iterator(); i.hasNext(); ) {
                String mwe = (String) i.next();
                writer.println(mwe);
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900177,17826787,15225841,"    public void updateDb(int scriptNumber) throws SQLException, IOException {
        String pathName = updatesPackage.replace(""."", ""/"");
        InputStream in = getClass().getClassLoader().getResourceAsStream(pathName + ""/"" + scriptNumber + "".sql"");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        String script = out.toString(""UTF-8"");
        String[] statements = script.split("";"");
        for (String statement : statements) {
            getJdbcTemplate().execute(statement);
        }
    }
","    public void copyFile(File source, File destination, boolean lazy) {
        if (!source.exists()) {
            return;
        }
        if (lazy) {
            String oldContent = null;
            try {
                oldContent = read(source);
            } catch (Exception e) {
                return;
            }
            String newContent = null;
            try {
                newContent = read(destination);
            } catch (Exception e) {
            }
            if ((oldContent == null) || !oldContent.equals(newContent)) {
                copyFile(source, destination, false);
            }
        } else {
            if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
                destination.getParentFile().mkdirs();
            }
            try {
                FileChannel srcChannel = new FileInputStream(source).getChannel();
                FileChannel dstChannel = new FileOutputStream(destination).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            } catch (IOException ioe) {
                _log.error(ioe.getMessage());
            }
        }
    }
",True
900178,11066056,19926790,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public void generateReport(AllTestsResult atr, AllConvsResult acr, File nwbConvGraph) {
        ConvResult[] convs = acr.getConvResults();
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new FileReader(nwbConvGraph));
            writer = new BufferedWriter(new FileWriter(this.annotatedNWBGraph));
            String line = null;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.startsWith(""id*int"")) {
                    writer.write(line + "" isTrusted*int chanceCorrect*float isConverter*int \r\n"");
                } else if (line.matches(NODE_LINE)) {
                    String[] parts = line.split("" "");
                    String rawConvName = parts[1];
                    String convName = rawConvName.replaceAll(""\"""", """");
                    boolean wroteAttributes = false;
                    for (int ii = 0; ii < convs.length; ii++) {
                        ConvResult cr = convs[ii];
                        if (cr.getShortName().equals(convName)) {
                            int trusted;
                            if (cr.isTrusted()) {
                                trusted = 1;
                            } else {
                                trusted = 0;
                            }
                            writer.write(line + "" "" + trusted + "" "" + FormatUtil.formatToPercent(cr.getChanceCorrect()) + "" 1 "" + ""\r\n"");
                            wroteAttributes = true;
                            break;
                        }
                    }
                    if (!wroteAttributes) {
                        writer.write(line + "" 1 100.0 0"" + ""\r\n"");
                    }
                } else {
                    writer.write(line + ""\r\n"");
                }
            }
        } catch (IOException e) {
            this.log.log(LogService.LOG_ERROR, ""Unable to generate Graph Report."", e);
            try {
                if (reader != null) reader.close();
            } catch (IOException e2) {
                this.log.log(LogService.LOG_ERROR, ""Unable to close graph report stream"", e);
            }
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
                this.log.log(LogService.LOG_ERROR, ""Unable to close either graph report reader or "" + ""writer."", e);
                e.printStackTrace();
            }
        }
    }
",True
900179,9581835,11291099,"    public static void main(String[] args) {
        String WTKdir = null;
        String sourceFile = null;
        String instrFile = null;
        String outFile = null;
        String jadFile = null;
        Manifest mnf;
        if (args.length == 0) {
            usage();
            return;
        }
        int i = 0;
        while (i < args.length && args[i].startsWith(""-"")) {
            if ((""-WTK"".equals(args[i])) && (i < args.length - 1)) {
                i++;
                WTKdir = args[i];
            } else if ((""-source"".equals(args[i])) && (i < args.length - 1)) {
                i++;
                sourceFile = args[i];
            } else if ((""-instr"".equals(args[i])) && (i < args.length - 1)) {
                i++;
                instrFile = args[i];
            } else if ((""-o"".equals(args[i])) && (i < args.length - 1)) {
                i++;
                outFile = args[i];
            } else if ((""-jad"".equals(args[i])) && (i < args.length - 1)) {
                i++;
                jadFile = args[i];
            } else {
                System.out.println(""Error: Unrecognized option: "" + args[i]);
                System.exit(0);
            }
            i++;
        }
        if (WTKdir == null || sourceFile == null || instrFile == null) {
            System.out.println(""Error: Missing parameter!!!"");
            usage();
            return;
        }
        if (outFile == null) outFile = sourceFile;
        FileInputStream fisJar;
        try {
            fisJar = new FileInputStream(sourceFile);
        } catch (FileNotFoundException e1) {
            System.out.println(""Cannot find source jar file: "" + sourceFile);
            e1.printStackTrace();
            return;
        }
        FileOutputStream fosJar;
        File aux = null;
        try {
            aux = File.createTempFile(""predef"", ""aux"");
            fosJar = new FileOutputStream(aux);
        } catch (IOException e1) {
            System.out.println(""Cannot find temporary jar file: "" + aux);
            e1.printStackTrace();
            return;
        }
        JarFile instrJar = null;
        Enumeration en = null;
        File tempDir = null;
        try {
            instrJar = new JarFile(instrFile);
            en = instrJar.entries();
            tempDir = File.createTempFile(""jbtp"", """");
            tempDir.delete();
            System.out.println(""Create directory: "" + tempDir.mkdirs());
            tempDir.deleteOnExit();
        } catch (IOException e) {
            System.out.println(""Cannot open instrumented file: "" + instrFile);
            e.printStackTrace();
            return;
        }
        String[] wtklib = new java.io.File(WTKdir + File.separator + ""lib"").list(new OnlyJar());
        String preverifyCmd = WTKdir + File.separator + ""bin"" + File.separator + ""preverify -classpath "" + WTKdir + File.separator + ""lib"" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + ""lib"" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + ""lib"" + File.separator + WMA_JAR + File.pathSeparator + instrFile;
        for (int k = 0; k < wtklib.length; k++) {
            preverifyCmd += File.pathSeparator + WTKdir + File.separator + ""lib"" + wtklib[k];
        }
        preverifyCmd += "" "" + ""-d "" + tempDir.getAbsolutePath() + "" "";
        while (en.hasMoreElements()) {
            JarEntry je = (JarEntry) en.nextElement();
            String jeName = je.getName();
            if (jeName.endsWith("".class"")) jeName = jeName.substring(0, jeName.length() - 6);
            preverifyCmd += jeName + "" "";
        }
        try {
            Process p = Runtime.getRuntime().exec(preverifyCmd);
            if (p.waitFor() != 0) {
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                System.out.println(""Error calling the preverify command."");
                while (in.ready()) {
                    System.out.print("""" + in.readLine());
                }
                System.out.println();
                in.close();
                return;
            }
        } catch (Exception e) {
            System.out.println(""Cannot execute preverify command"");
            e.printStackTrace();
            return;
        }
        File[] listOfFiles = computeFiles(tempDir);
        System.out.println(""-------------------------------\n"" + ""Files to insert: "");
        String[] strFiles = new String[listOfFiles.length];
        int l = tempDir.toString().length() + 1;
        for (int j = 0; j < listOfFiles.length; j++) {
            strFiles[j] = listOfFiles[j].toString().substring(l);
            strFiles[j] = strFiles[j].replace(File.separatorChar, '/');
            System.out.println(strFiles[j]);
        }
        System.out.println(""-------------------------------"");
        try {
            JarInputStream jis = new JarInputStream(fisJar);
            mnf = jis.getManifest();
            JarOutputStream jos = new JarOutputStream(fosJar, mnf);
            nextJar: for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) {
                String s = je.getName();
                for (int k = 0; k < strFiles.length; k++) {
                    if (strFiles[k].equals(s)) continue nextJar;
                }
                jos.putNextEntry(je);
                byte[] b = new byte[512];
                for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) {
                    jos.write(b, 0, k);
                }
            }
            jis.close();
            for (int j = 0; j < strFiles.length; j++) {
                FileInputStream fis = new FileInputStream(listOfFiles[j]);
                JarEntry je = new JarEntry(strFiles[j]);
                jos.putNextEntry(je);
                byte[] b = new byte[512];
                while (fis.available() > 0) {
                    int k = fis.read(b, 0, 512);
                    jos.write(b, 0, k);
                }
                fis.close();
            }
            jos.close();
            fisJar.close();
            fosJar.close();
        } catch (IOException e) {
            System.out.println(""Cannot read/write jar file."");
            e.printStackTrace();
            return;
        }
        try {
            FileOutputStream fos = new FileOutputStream(outFile);
            FileInputStream fis = new FileInputStream(aux);
            byte[] b = new byte[512];
            while (fis.available() > 0) {
                int k = fis.read(b, 0, 512);
                fos.write(b, 0, k);
            }
            fis.close();
            fos.close();
        } catch (IOException e) {
            System.out.println(""Cannot write output jar file: "" + outFile);
            e.printStackTrace();
        }
        Iterator it;
        Attributes atr;
        atr = mnf.getMainAttributes();
        it = atr.keySet().iterator();
        if (jadFile != null) {
            FileOutputStream fos;
            try {
                File outJarFile = new File(outFile);
                fos = new FileOutputStream(jadFile);
                PrintStream psjad = new PrintStream(fos);
                while (it.hasNext()) {
                    Object ats = it.next();
                    psjad.println(ats + "": "" + atr.get(ats));
                }
                psjad.println(""MIDlet-Jar-URL: "" + outFile);
                psjad.println(""MIDlet-Jar-Size: "" + outJarFile.length());
                fos.close();
            } catch (IOException eio) {
                System.out.println(""Cannot create jad file."");
                eio.printStackTrace();
            }
        }
    }
","    public void visit(BosMember member) throws BosException {
        String relative = AddressingUtil.getRelativePath(member.getDataSourceUri(), baseUri);
        URL resultUrl;
        try {
            resultUrl = new URL(outputUrl, relative);
            File resultFile = new File(resultUrl.toURI());
            resultFile.getParentFile().mkdirs();
            log.info(""Creating result file \"""" + resultFile.getAbsolutePath() + ""\""..."");
            IOUtils.copy(member.getInputStream(), new FileOutputStream(resultFile));
        } catch (Exception e) {
            throw new BosException(e);
        }
    }
",True
900180,1760355,16378626,"    public static int deleteHedgeCustTrade() {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_HEDGE_CUSTTRADE "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }
","    public static void copy(String pstrFileFrom, String pstrFileTo) {
        try {
            FileChannel srcChannel = new FileInputStream(pstrFileFrom).getChannel();
            FileChannel dstChannel = new FileOutputStream(pstrFileTo).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",False
900181,2721038,18115173,"    public File copyFile(File f) throws IOException {
        File t = createNewFile(""fm"", ""cpy"");
        FileOutputStream fos = new FileOutputStream(t);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(f);
        FileChannel fic = fis.getChannel();
        foc.transferFrom(fic, 0, fic.size());
        foc.close();
        fic.close();
        return t;
    }
","    private void copy(File in, File out) {
        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());
        try {
            FileChannel ic = new FileInputStream(in).getChannel();
            FileChannel oc = new FileOutputStream(out).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
        } catch (IOException ioe) {
            fail(""Failed testing while copying modified file: "" + ioe.getMessage());
        }
    }
",True
900182,13725475,21956399,"    static String getMD5Hash(String str) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(str.getBytes());
        byte[] b = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            int v = (int) b[i];
            v = v < 0 ? 0x100 + v : v;
            String cc = Integer.toHexString(v);
            if (cc.length() == 1) sb.append('0');
            sb.append(cc);
        }
        return sb.toString();
    }
","    @Override
    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.setContentType(""application/json"");
        resp.setCharacterEncoding(""utf-8"");
        String format = req.getParameter(""format"");
        EntityManager em = EMF.get().createEntityManager();
        String uname = (req.getParameter(""uname"") == null) ? """" : req.getParameter(""uname"");
        String passwd = (req.getParameter(""passwd"") == null) ? """" : req.getParameter(""passwd"");
        String name = (req.getParameter(""name"") == null) ? """" : req.getParameter(""name"");
        String email = (req.getParameter(""email"") == null) ? """" : req.getParameter(""email"");
        if (uname == null || uname.equals("""") || uname.length() < 4) {
            if (format != null && format.equals(""xml"")) resp.getWriter().print(Error.unameTooShort(uname).toXML(em)); else resp.getWriter().print(Error.unameTooShort(uname).toJSON(em));
            resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        if (User.fromUserName(em, uname) != null) {
            if (format != null && format.equals(""xml"")) resp.getWriter().print(Error.userExists(uname).toXML(em)); else resp.getWriter().print(Error.userExists(uname).toJSON(em));
            resp.setStatus(HttpServletResponse.SC_CONFLICT);
            em.close();
            return;
        }
        if (passwd.equals("""") || passwd.length() < 6) {
            resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            if (format != null && format.equals(""xml"")) resp.getWriter().print(Error.passwdTooShort(uname).toXML(em)); else resp.getWriter().print(Error.passwdTooShort(uname).toJSON(em));
            em.close();
            return;
        }
        User u = new User();
        u.setUsername(uname);
        u.setPasswd(passwd);
        u.setName(name);
        u.setEmail(email);
        u.setPaid(false);
        StringBuffer apikey = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            String api = System.nanoTime() + """" + System.identityHashCode(this) + """" + uname;
            algorithm.update(api.getBytes());
            byte[] digest = algorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                apikey.append(Integer.toHexString(0xFF & digest[i]));
            }
        } catch (NoSuchAlgorithmException e) {
            resp.setStatus(500);
            if (format != null && format.equals(""xml"")) resp.getWriter().print(Error.unknownError().toXML(em)); else resp.getWriter().print(Error.unknownError().toJSON(em));
            log.severe(e.toString());
            em.close();
            return;
        }
        u.setApiKey(apikey.toString());
        EntityTransaction tx = em.getTransaction();
        tx.begin();
        try {
            em.persist(u);
            tx.commit();
        } catch (Throwable t) {
            log.severe(""Error adding user "" + uname + "" Reason:"" + t.getMessage());
            tx.rollback();
            resp.setStatus(500);
            if (format != null && format.equals(""xml"")) resp.getWriter().print(Error.unknownError().toXML(em)); else resp.getWriter().print(Error.unknownError().toJSON(em));
            return;
        }
        log.info(""User "" + u.getName() + "" was created successfully"");
        resp.setStatus(HttpServletResponse.SC_CREATED);
        if (format != null && format.equals(""xml"")) resp.getWriter().print(u.toXML(em)); else resp.getWriter().print(u.toJSON(em));
        em.close();
    }
",True
900183,3488916,21575638,"    public static void main(String[] args) {
        if (args.length != 2) throw new IllegalArgumentException(""Expected arguments: fileName log"");
        String fileName = args[0];
        String logFile = args[1];
        LineNumberReader reader = null;
        PrintWriter writer = null;
        try {
            Reader reader0 = new FileReader(fileName);
            reader = new LineNumberReader(reader0);
            Writer writer0 = new FileWriter(logFile);
            BufferedWriter writer1 = new BufferedWriter(writer0);
            writer = new PrintWriter(writer1);
            String line = reader.readLine();
            while (line != null) {
                line = line.trim();
                if (line.length() >= 81) {
                    writer.println(""Analyzing Sudoku #"" + reader.getLineNumber());
                    System.out.println(""Analyzing Sudoku #"" + reader.getLineNumber());
                    Grid grid = new Grid();
                    for (int i = 0; i < 81; i++) {
                        char ch = line.charAt(i);
                        if (ch >= '1' && ch <= '9') {
                            int value = (ch - '0');
                            grid.setCellValue(i % 9, i / 9, value);
                        }
                    }
                    Solver solver = new Solver(grid);
                    solver.rebuildPotentialValues();
                    try {
                        Map<Rule, Integer> rules = solver.solve(null);
                        Map<String, Integer> ruleNames = solver.toNamedList(rules);
                        double difficulty = 0;
                        String hardestRule = """";
                        for (Rule rule : rules.keySet()) {
                            if (rule.getDifficulty() > difficulty) {
                                difficulty = rule.getDifficulty();
                                hardestRule = rule.getName();
                            }
                        }
                        for (String rule : ruleNames.keySet()) {
                            int count = ruleNames.get(rule);
                            writer.println(Integer.toString(count) + "" "" + rule);
                            System.out.println(Integer.toString(count) + "" "" + rule);
                        }
                        writer.println(""Hardest technique: "" + hardestRule);
                        System.out.println(""Hardest technique: "" + hardestRule);
                        writer.println(""Difficulty: "" + difficulty);
                        System.out.println(""Difficulty: "" + difficulty);
                    } catch (UnsupportedOperationException ex) {
                        writer.println(""Failed !"");
                        System.out.println(""Failed !"");
                    }
                    writer.println();
                    System.out.println();
                    writer.flush();
                } else System.out.println(""Skipping incomplete line: "" + line);
                line = reader.readLine();
            }
            writer.close();
            reader.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (reader != null) reader.close();
                if (writer != null) writer.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        System.out.print(""Finished."");
    }
","    protected void writeGZippedBytes(byte array[], TupleOutput out) {
        if (array == null || array.length == 0) {
            out.writeBoolean(false);
            writeBytes(array, out);
            return;
        }
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(array.length);
            GZIPOutputStream gzout = new GZIPOutputStream(baos);
            ByteArrayInputStream bais = new ByteArrayInputStream(array);
            IOUtils.copyTo(bais, gzout);
            gzout.finish();
            gzout.close();
            bais.close();
            byte compressed[] = baos.toByteArray();
            if (compressed.length < array.length) {
                out.writeBoolean(true);
                writeBytes(compressed, out);
            } else {
                out.writeBoolean(false);
                writeBytes(array, out);
            }
        } catch (IOException err) {
            throw new RuntimeException(err);
        }
    }
",True
900184,22899260,1676011,"    public static String sha1Hash(String input) {
        try {
            MessageDigest sha1Digest = MessageDigest.getInstance(""SHA-1"");
            sha1Digest.update(input.getBytes());
            return byteArrayToString(sha1Digest.digest());
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return """";
    }
","    ServiceDescription getServiceDescription() throws ConfigurationException {
        final XPath pathsXPath = this.xPathFactory.newXPath();
        try {
            final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE);
            final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT);
            ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName());
            Property[] serviceProperties = getServiceProperties(serviceDescriptionNode);
            builder.author(getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.CREATOR_ELEMENT));
            builder.classname(this.canonicalServiceName);
            builder.description(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.DESCRIPTION_ELEMENT));
            final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT);
            final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode);
            String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT);
            if (identifier == null || """".equals(identifier)) {
                try {
                    final MessageDigest identDigest = MessageDigest.getInstance(""MD5"");
                    identDigest.update(this.canonicalServiceName.getBytes());
                    final String versionInfo = (serviceVersion != null) ? serviceVersion : """";
                    identDigest.update(versionInfo.getBytes());
                    final URI toolIDURI = toolDescription.getIdentifier();
                    final String toolIdentifier = toolIDURI == null ? """" : toolIDURI.toString();
                    identDigest.update(toolIdentifier.getBytes());
                    final BigInteger md5hash = new BigInteger(identDigest.digest());
                    identifier = md5hash.toString(16);
                } catch (NoSuchAlgorithmException nsae) {
                    throw new RuntimeException(nsae);
                }
            }
            builder.identifier(identifier);
            builder.version(serviceVersion);
            builder.tool(toolDescription);
            builder.instructions(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT));
            builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT));
            builder.logo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.LOGO_ELEMENT));
            builder.serviceProvider(this.serviceProvider);
            final DBMigrationPathFactory migrationPathFactory = new DBMigrationPathFactory(this.configuration);
            final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths();
            builder.paths(MigrationPathConverter.toPlanetsPaths(migrationPaths));
            builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(new URI[0]));
            builder.parameters(getUniqueParameters(migrationPaths));
            builder.properties(serviceProperties);
            return builder.build();
        } catch (XPathExpressionException xPathExpressionException) {
            throw new ConfigurationException(String.format(""Failed parsing the '%s' element in the '%s' element."", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), xPathExpressionException);
        } catch (NullPointerException nullPointerException) {
            throw new ConfigurationException(String.format(""Failed parsing the '%s' element in the '%s' element."", ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration.getNodeName()), nullPointerException);
        }
    }
",True
900185,6403005,19147296,"    @SuppressWarnings(""unchecked"")
    protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception {
        File transformationFile = null;
        String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT);
        if (StringUtils.isNotBlank(tr)) {
            transformationFile = new File(xslBase, tr);
            if (!transformationFile.isFile()) {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, ""Parameter \"""" + Definitions.REQUEST_PARAMNAME_XSLT + ""\"" "" + ""with value \"""" + tr + ""\"" refers to non existing file"");
                return;
            }
        }
        StreamResult result;
        ByteArrayOutputStream baos = null;
        if (isDevelopmentMode) {
            baos = new ByteArrayOutputStream();
            if (StringUtils.equals(action, ""get"")) {
                result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE));
            } else {
                result = new StreamResult(baos);
            }
        } else {
            if (StringUtils.equals(action, ""get"")) {
                result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE));
            } else {
                result = new StreamResult(response.getOutputStream());
            }
        }
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.putAll(request.getParameterMap());
        params.put(""{"" + Definitions.CONFIGURATION_NAMESPACE + ""}configuration"", configuration);
        params.put(""{"" + Definitions.REQUEST_NAMESPACE + ""}request"", request);
        params.put(""{"" + Definitions.RESPONSE_NAMESPACE + ""}response"", response);
        params.put(""{"" + Definitions.SESSION_NAMESPACE + ""}session"", request.getSession());
        params.put(""{"" + Definitions.INFOFUZE_NAMESPACE + ""}development-mode"", new Boolean(Config.getInstance().isDevelopmentMode()));
        Transformer transformer = new Transformer();
        transformer.setTransformationFile(transformationFile);
        transformer.setParams(params);
        transformer.setTransformMode(TransformMode.NORMAL);
        transformer.setConfiguration(configuration);
        transformer.setErrorListener(new TransformationErrorListener(response));
        transformer.setLogInfo(false);
        String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, ""xml"");
        String contentType;
        if (method.endsWith(""html"")) {
            contentType = Definitions.MIMETYPE_HTML;
        } else if (method.equals(""xml"")) {
            contentType = Definitions.MIMETYPE_XML;
        } else {
            contentType = Definitions.MIMETYPE_TEXTPLAIN;
        }
        String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, ""UTF-8"");
        response.setContentType(contentType + "";charset="" + encoding);
        DataSourceIf dataSource = new NullSource();
        transformer.transform((Source) dataSource, result);
        if (isDevelopmentMode) {
            IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream());
        }
    }
","    public boolean ponerFlotantexRonda(int idJugadorDiv, int idRonda, int dato) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET flotante = "" + dato + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",False
900186,19322945,21636561,"    @Test
    public void test_lookupType_FullSearch_CaseSensivity() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/moRO"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":19724,\""itemCategoryID\"":6,\""name\"":\""Moros\""},{\""itemTypeID\"":19725,\""itemCategoryID\"":9,\""name\"":\""Moros Blueprint\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",False
900187,20192098,2883828,"    public Object read(InputStream inputStream, Map metadata) throws IOException, ClassNotFoundException {
        if (log.isTraceEnabled()) log.trace(""Read input stream with metadata="" + metadata);
        Integer resCode = (Integer) metadata.get(HTTPMetadataConstants.RESPONSE_CODE);
        String resMessage = (String) metadata.get(HTTPMetadataConstants.RESPONSE_CODE_MESSAGE);
        if (resCode != null && validResponseCodes.contains(resCode) == false) throw new RuntimeException(""Invalid HTTP server response ["" + resCode + ""] - "" + resMessage);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
        IOUtils.copyStream(baos, inputStream);
        String soapMessage = new String(baos.toByteArray(), charsetEncoding);
        if (isTraceEnabled) {
            String prettySoapMessage = DOMWriter.printNode(DOMUtils.parse(soapMessage), true);
            log.trace(""Incoming Response SOAPMessage\n"" + prettySoapMessage);
        }
        return soapMessage;
    }
","        public static void copyFile(File from, File to) {
            try {
                FileInputStream in = new FileInputStream(from);
                FileOutputStream out = new FileOutputStream(to);
                byte[] buffer = new byte[1024 * 16];
                int read = 0;
                while ((read = in.read(buffer)) >= 0) {
                    out.write(buffer, 0, read);
                }
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
",True
900188,1951103,14183084,"    private List<File> ungzipFile(File directory, File compressedFile) throws IOException {
        List<File> files = new ArrayList<File>();
        TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile)));
        try {
            TarArchiveEntry entry = in.getNextTarEntry();
            while (entry != null) {
                if (entry.isDirectory()) {
                    log.warn(""TAR archive contains directories which are being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                String fn = new File(entry.getName()).getName();
                if (fn.startsWith(""."")) {
                    log.warn(""TAR archive contains a hidden file which is being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                File targetFile = new File(directory, fn);
                if (targetFile.exists()) {
                    log.warn(""TAR archive contains duplicate filenames, only the first is being extracted"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                files.add(targetFile);
                log.debug(""Extracting file: "" + entry.getName() + "" to: "" + targetFile.getAbsolutePath());
                OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile));
                InputStream entryIn = new FileInputStream(entry.getFile());
                IOUtils.copy(entryIn, fout);
                fout.close();
                entryIn.close();
            }
        } finally {
            in.close();
        }
        return files;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900189,16270977,6371605,"    public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException, ParsingErrorException {
        BufferedReader reader;
        if (baseUrl == null) setBaseUrlFromUrl(url);
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (IOException e) {
            throw new FileNotFoundException(e.getMessage());
        }
        fromUrl = true;
        return load(reader);
    }
","    public void insertRealm(final List<NewRealms> newRealms) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.add""));
                    Iterator<NewRealms> iter = newRealms.iterator();
                    NewRealms newRealm;
                    String realm;
                    Iterator<String> iter2;
                    while (iter.hasNext()) {
                        newRealm = iter.next();
                        psImpl.setInt(3, newRealm.domainId);
                        iter2 = newRealm.realms.iterator();
                        while (iter2.hasNext()) {
                            realm = iter2.next();
                            psImpl.setString(1, realm);
                            psImpl.setString(2, realm.toLowerCase(locale));
                            psImpl.executeUpdate();
                        }
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",False
900190,17557352,10912336,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(MM.PHRASES.getPhrase(""25"") + "" "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(MM.PHRASES.getPhrase(""26"") + "" "" + MM.PHRASES.getPhrase(""27"") + "": "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(MM.PHRASES.getPhrase(""28"") + "" "" + MM.PHRASES.getPhrase(""29"") + "": "" + dest_name);
                    System.out.print(MM.PHRASES.getPhrase(""19"") + dest_name + MM.PHRASES.getPhrase(""30"") + "": "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(MM.PHRASES.getPhrase(""31""));
                } else throw new FileCopyException(MM.PHRASES.getPhrase(""28"") + "" "" + MM.PHRASES.getPhrase(""32"") + "": "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(MM.PHRASES.getPhrase(""28"") + "" "" + MM.PHRASES.getPhrase(""33"") + "": "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(MM.PHRASES.getPhrase(""28"") + "" "" + MM.PHRASES.getPhrase(""34"") + "": "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            while (true) {
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
                ;
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public void verRecordatorio() {
        try {
            cantidadArchivos = obtenerCantidad() + 1;
            boolean existe = false;
            String filenametxt = """";
            String filenamezip = """";
            String hora = """";
            String lugar = """";
            String actividad = """";
            String linea = """";
            int dia = 0;
            int mes = 0;
            int ano = 0;
            for (int i = 1; i < cantidadArchivos; i++) {
                filenamezip = ""recordatorio"" + i + "".zip"";
                filenametxt = ""recordatorio"" + i + "".txt"";
                BufferedOutputStream dest = null;
                BufferedInputStream is = null;
                ZipEntry entry;
                ZipFile zipfile = new ZipFile(filenamezip);
                Enumeration e = zipfile.entries();
                while (e.hasMoreElements()) {
                    entry = (ZipEntry) e.nextElement();
                    is = new BufferedInputStream(zipfile.getInputStream(entry));
                    int count;
                    byte data[] = new byte[buffer];
                    FileOutputStream fos = new FileOutputStream(entry.getName());
                    dest = new BufferedOutputStream(fos, buffer);
                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                    dest.flush();
                    dest.close();
                    is.close();
                }
                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));
                dia = Integer.parseInt(input.readLine());
                mes = Integer.parseInt(input.readLine());
                ano = Integer.parseInt(input.readLine());
                if (dia == Integer.parseInt(identificarDato(datoSeleccionado))) {
                    existe = true;
                    hora = input.readLine();
                    lugar = input.readLine();
                    while ((linea = input.readLine()) != null) actividad += linea + ""\n"";
                    verRecordatorioInterfaz(hora, lugar, actividad);
                    hora = """";
                    lugar = """";
                    actividad = """";
                }
                input.close();
            }
            if (!existe) JOptionPane.showMessageDialog(null, ""No existe un recordatorio guardado\n"" + ""para el "" + identificarDato(datoSeleccionado) + "" de "" + meses[mesTemporal].toLowerCase() + "" del a�o "" + anoTemporal, ""No existe"", JOptionPane.INFORMATION_MESSAGE);
            table.clearSelection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, ""Error en: "" + e.toString(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
    }
",True
900191,19204595,7885446,"    protected InputStream callApiMethod(String apiUrl, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                Error error = readResponse(Error.class, getWrappedInputStream(request.getErrorStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding())));
                throw createBingSearchApiClientException(error);
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingSearchException(e);
        }
    }
","    public static String CreateZip(String[] filesToZip, String zipFileName) {
        byte[] buffer = new byte[18024];
        try {
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
            out.setLevel(Deflater.BEST_COMPRESSION);
            for (int i = 0; i < filesToZip.length; i++) {
                FileInputStream in = new FileInputStream(filesToZip[i]);
                String fileName = null;
                for (int X = filesToZip[i].length() - 1; X >= 0; X--) {
                    if (filesToZip[i].charAt(X) == '\\' || filesToZip[i].charAt(X) == '/') {
                        fileName = filesToZip[i].substring(X + 1);
                        break;
                    } else if (X == 0) fileName = filesToZip[i];
                }
                out.putNextEntry(new ZipEntry(fileName));
                int len;
                while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);
                out.closeEntry();
                in.close();
            }
            out.close();
        } catch (IllegalArgumentException e) {
            return ""Failed to create zip: "" + e.toString();
        } catch (FileNotFoundException e) {
            return ""Failed to create zip: "" + e.toString();
        } catch (IOException e) {
            return ""Failed to create zip: "" + e.toString();
        }
        return ""Success"";
    }
",False
900192,7209802,11050195,"    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(4444);
        } catch (IOException e) {
            System.err.println(""Could not listen on port: 4444."");
            System.exit(1);
        }
        Socket clientSocket = null;
        try {
            clientSocket = serverSocket.accept();
        } catch (IOException e) {
            System.err.println(""Accept failed."");
            System.exit(1);
        }
        DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        String inputLine, outputLine;
        inputLine = in.readLine();
        String dist_metric = in.readLine();
        File outFile = new File(""data.txt"");
        FileWriter outw = new FileWriter(outFile);
        outw.write(inputLine);
        outw.close();
        File sample_coords = new File(""sample_coords.txt"");
        sample_coords.delete();
        File sp_coords = new File(""sp_coords.txt"");
        sp_coords.delete();
        try {
            System.out.println(""Running python script..."");
            System.out.println(""Command: "" + ""python l19test.py "" + ""\"""" + dist_metric + ""\"""");
            Process pr = Runtime.getRuntime().exec(""python l19test.py "" + dist_metric);
            BufferedReader br = new BufferedReader(new InputStreamReader(pr.getErrorStream()));
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            int exitVal = pr.waitFor();
            System.out.println(""Process Exit Value: "" + exitVal);
            System.out.println(""done."");
        } catch (Exception e) {
            System.out.println(""Unable to run python script for PCoA analysis"");
        }
        File myFile = new File(""sp_coords.txt"");
        byte[] mybytearray = new byte[(new Long(myFile.length())).intValue()];
        FileInputStream fis = new FileInputStream(myFile);
        System.out.println(""."");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        for (int i = 0; i < myFile.length(); i++) {
            out.writeByte(fis.read());
        }
        myFile = new File(""sample_coords.txt"");
        mybytearray = new byte[(int) myFile.length()];
        fis = new FileInputStream(myFile);
        fis.read(mybytearray);
        System.out.println(""."");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        out.write(mybytearray);
        myFile = new File(""evals.txt"");
        mybytearray = new byte[(new Long(myFile.length())).intValue()];
        fis = new FileInputStream(myFile);
        fis.read(mybytearray);
        System.out.println(""."");
        System.out.println(myFile.length());
        out.writeInt((int) myFile.length());
        out.write(mybytearray);
        out.flush();
        out.close();
        in.close();
        clientSocket.close();
        serverSocket.close();
    }
","    private void writeFile(File file, String fileName) {
        try {
            FileInputStream fin = new FileInputStream(file);
            FileOutputStream fout = new FileOutputStream(dirTableModel.getDirectory().getAbsolutePath() + File.separator + fileName);
            int val;
            while ((val = fin.read()) != -1) fout.write(val);
            fin.close();
            fout.close();
            dirTableModel.reset();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900193,22122895,7008364,"    protected String getHashCode(String value) {
        if (log.isDebugEnabled()) log.debug(""getHashCode(...) -> begin"");
        String retVal = null;
        try {
            MessageDigest mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(value.getBytes());
            byte[] digest = mdAlgorithm.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                sb.append(this.toHexString(digest[i]));
            }
            retVal = sb.toString();
            if (log.isDebugEnabled()) log.debug(""getHashCode(...) -> hashcode = "" + retVal);
        } catch (Exception e) {
            log.error(""getHashCode(...) -> error occured generating hashcode "", e);
        }
        if (log.isDebugEnabled()) log.debug(""getHashCode(...) -> end"");
        return retVal;
    }
","    private String getBytes(String in) throws NoSuchAlgorithmException {
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(in.getBytes());
        byte[] passWordBytes = md5.digest();
        String s = ""["";
        for (int i = 0; i < passWordBytes.length; i++) s += passWordBytes[i] + "", "";
        s = s.substring(0, s.length() - 2);
        s += ""]"";
        return s;
    }
",True
900194,18374479,12454179,"    public void removeUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement removeUser = conn.prepareStatement(""delete from users  where userId = ?"");
                removeUser.setString(1, user.getUserId());
                removeUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
","    @Override
    public void excluir(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""DELETE from disciplina where id_disciplina = ?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                conexao.close();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",True
900195,14050303,1718589,"    public int subclass(int objectId, String description) throws FidoDatabaseException, ObjectNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                String sql = ""insert into Objects (Description) "" + ""values ('"" + description + ""')"";
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, objectId) == false) throw new ObjectNotFoundException(objectId);
                stmt.executeUpdate(sql);
                int id;
                sql = ""select currval('objects_objectid_seq')"";
                rs = stmt.executeQuery(sql);
                if (rs.next() == false) throw new SQLException(""No rows returned from select currval() query""); else id = rs.getInt(1);
                ObjectLinkTable objectLinkList = new ObjectLinkTable();
                objectLinkList.linkObjects(stmt, id, ""isa"", objectId);
                conn.commit();
                return id;
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    @Override
    public ImageData getImageData(URL url) {
        InputStream in = null;
        try {
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""user-agent"", ""Tahiti/Alpha5x"");
            conn.setRequestProperty(""agent-system"", ""aglets"");
            conn.setAllowUserInteraction(true);
            conn.connect();
            in = conn.getInputStream();
            String type = conn.getContentType();
            int len = conn.getContentLength();
            if (len < 0) {
                len = in.available();
            }
            byte[] b = new byte[len];
            int off = 0;
            int n = 0;
            while (n < len) {
                int count = in.read(b, off + n, len - n);
                if (count < 0) {
                    throw new java.io.EOFException();
                }
                n += count;
            }
            in.close();
            return new AgletImageData(url, b, type);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
",False
900196,2107034,17513478,"    public static void main(String[] args) throws IOException {
        File inputFile = new File(""D:/farrago.txt"");
        File outputFile = new File(""D:/outagain.txt"");
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    public void create(File target) {
        if (""dir"".equals(type)) {
            File dir = new File(target, name);
            dir.mkdirs();
            for (Resource c : children) {
                c.create(dir);
            }
        } else if (""package"".equals(type)) {
            String[] dirs = name.split(""\\."");
            File parent = target;
            for (String d : dirs) {
                parent = new File(parent, d);
            }
            parent.mkdirs();
            for (Resource c : children) {
                c.create(parent);
            }
        } else if (""file"".equals(type)) {
            InputStream is = getInputStream();
            File file = new File(target, name);
            try {
                if (is != null) {
                    FileOutputStream fos = new FileOutputStream(file);
                    IOUtils.copy(is, fos);
                    fos.flush();
                    fos.close();
                } else {
                    PrintStream ps = new PrintStream(file);
                    ps.print(content);
                    ps.flush();
                    ps.close();
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else if (""zip"".equals(type)) {
            try {
                unzip(target);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            throw new RuntimeException(""unknown resource type: "" + type);
        }
    }
",True
900197,22755555,17083702,"    private static HttpURLConnection _getConnection(HttpPrincipal httpPrincipal) throws IOException {
        if (httpPrincipal == null || httpPrincipal.getUrl() == null) {
            return null;
        }
        URL url = null;
        if ((httpPrincipal.getUserId() <= 0) || (httpPrincipal.getPassword() == null)) {
            url = new URL(httpPrincipal.getUrl() + ""/tunnel-web/liferay/do"");
        } else {
            url = new URL(httpPrincipal.getUrl() + ""/tunnel-web/secure/liferay/do"");
        }
        HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
        urlc.setDoInput(true);
        urlc.setDoOutput(true);
        urlc.setUseCaches(false);
        urlc.setRequestMethod(""POST"");
        if ((httpPrincipal.getUserId() > 0) && (httpPrincipal.getPassword() != null)) {
            String userNameAndPassword = httpPrincipal.getUserId() + "":"" + httpPrincipal.getPassword();
            urlc.setRequestProperty(""Authorization"", ""Basic "" + Base64.encode(userNameAndPassword.getBytes()));
        }
        return urlc;
    }
","    public void savaUserPerm(String userid, Collection user_perm_collect) throws DAOException, SQLException {
        ConnectionProvider cp = null;
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        PrivilegeFactory factory = PrivilegeFactory.getInstance();
        Operation op = factory.createOperation();
        try {
            cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);
            conn = cp.getConnection();
            pstmt = conn.prepareStatement(DEL_USER_PERM);
            pstmt.setString(1, userid);
            pstmt.executeUpdate();
            if ((user_perm_collect == null) || (user_perm_collect.size() <= 0)) {
                return;
            } else {
                conn.setAutoCommit(false);
                pstmt = conn.prepareStatement(ADD_USER_PERM);
                Iterator user_perm_ir = user_perm_collect.iterator();
                while (user_perm_ir.hasNext()) {
                    UserPermission userPerm = (UserPermission) user_perm_ir.next();
                    pstmt.setString(1, String.valueOf(userPerm.getUser_id()));
                    pstmt.setString(2, String.valueOf(userPerm.getResource_id()));
                    pstmt.setString(3, String.valueOf(userPerm.getResop_id()));
                    pstmt.executeUpdate();
                }
                conn.commit();
                conn.setAutoCommit(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
            conn.rollback();
            throw new DAOException();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception e) {
            }
        }
    }
",False
900198,18568751,10062074,"    public static Boolean decompress(File source, File destination) {
        FileOutputStream outputStream;
        ZipInputStream inputStream;
        try {
            outputStream = null;
            inputStream = new ZipInputStream(new FileInputStream(source));
            int read;
            byte buffer[] = new byte[BUFFER_SIZE];
            ZipEntry zipEntry;
            while ((zipEntry = inputStream.getNextEntry()) != null) {
                if (zipEntry.isDirectory()) new File(destination, zipEntry.getName()).mkdirs(); else {
                    File fileEntry = new File(destination, zipEntry.getName());
                    fileEntry.getParentFile().mkdirs();
                    outputStream = new FileOutputStream(fileEntry);
                    while ((read = inputStream.read(buffer, 0, BUFFER_SIZE)) != -1) {
                        outputStream.write(buffer, 0, read);
                    }
                    outputStream.flush();
                    outputStream.close();
                }
            }
            inputStream.close();
        } catch (Exception oException) {
            return false;
        }
        return true;
    }
","    private long generateUnixInstallShell(File unixShellFile, String instTemplate, File instClassFile) throws IOException {
        FileOutputStream byteWriter = new FileOutputStream(unixShellFile);
        InputStream is = getClass().getResourceAsStream(""/"" + instTemplate);
        InputStreamReader isr = new InputStreamReader(is);
        LineNumberReader reader = new LineNumberReader(isr);
        String content = """";
        String installClassStartStr = ""000000000000"";
        NumberFormat nf = NumberFormat.getInstance(Locale.US);
        nf.setGroupingUsed(false);
        nf.setMinimumIntegerDigits(installClassStartStr.length());
        int installClassStartPos = 0;
        long installClassOffset = 0;
        System.out.println(VAGlobals.i18n(""VAArchiver_GenerateInstallShell""));
        String line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassStart""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += ""InstallClassStart="" + installClassStartStr + ""\n"";
        installClassStartPos = content.length() - 1 - 1 - installClassStartStr.length();
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassSize""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += new String(""InstallClassSize="" + instClassFile.length() + ""\n"");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassName""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += new String(""InstallClassName="" + instClassName_ + ""\n"");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# Install class""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        if (line != null) content += line + ""\n"";
        byteWriter.write(content.substring(0, installClassStartPos + 1).getBytes());
        byteWriter.write(nf.format(content.length()).getBytes());
        byteWriter.write(content.substring(installClassStartPos + 1 + installClassStartStr.length()).getBytes());
        installClassOffset = content.length();
        content = null;
        FileInputStream classStream = new FileInputStream(instClassFile);
        byte[] buf = new byte[2048];
        int read = classStream.read(buf);
        while (read > 0) {
            byteWriter.write(buf, 0, read);
            read = classStream.read(buf);
        }
        classStream.close();
        reader.close();
        byteWriter.close();
        return installClassOffset;
    }
",True
900199,36860,12971450,"    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
","    public static void copy(FileInputStream in, File destination) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = in.getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            if (srcChannel != null) {
                srcChannel.close();
            }
            if (dstChannel != null) {
                dstChannel.close();
            }
        }
    }
",True
900200,3008655,10824317,"    public static void copyFile(File srcFile, File desFile) throws IOException {
        AssertUtility.notNull(srcFile);
        AssertUtility.notNull(desFile);
        FileInputStream fis = new FileInputStream(srcFile);
        FileOutputStream fos = new FileOutputStream(desFile);
        try {
            FileChannel srcChannel = fis.getChannel();
            FileChannel dstChannel = fos.getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } finally {
            fis.close();
            fos.close();
        }
    }
","    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[8192];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
",True
900201,2310752,11088622,"    public static void copy(final String source, final String dest) {
        final File s = new File(source);
        final File w = new File(dest);
        try {
            final FileInputStream in = new FileInputStream(s);
            final FileOutputStream out = new FileOutputStream(w);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.out.println(""Error reading/writing files!"");
        }
    }
","    public static void copyFile(File sourceFile, File destFile) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(sourceFile);
            os = new FileOutputStream(destFile);
            IOUtils.copy(is, os);
        } finally {
            try {
                if (os != null) os.close();
            } catch (Exception e) {
            }
            try {
                if (is != null) is.close();
            } catch (Exception e) {
            }
        }
    }
",True
900202,3054600,17874921,"    private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException {
        if (getArchetypeArtifactId(model) != null) {
            final Properties properties = new Properties();
            properties.put(""archetypeArtifactId"", getArchetypeArtifactId(model));
            properties.put(""archetypeGroupId"", getArchetypeGroupId(model));
            properties.put(""archetypeVersion"", getArchetypeVersion(model));
            String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID);
            if (artifact == null || artifact.trim().length() == 0) {
                artifact = project.getName();
            }
            properties.put(""artifactId"", artifact);
            String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID);
            if (group == null || group.trim().length() == 0) {
                group = project.getName();
            }
            properties.put(""groupId"", group);
            properties.put(""version"", model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_VERSION));
            final StringBuffer sb = new StringBuffer(System.getProperty(""user.home"")).append(File.separator);
            sb.append("".m2"").append(File.separator).append(""repository"");
            final String local = sb.toString();
            Logger.getLog().debug(""Local Maven2 repository :: "" + local);
            properties.put(""localRepository"", local);
            if (!offline) {
                final String sbRepos = getRepositories();
                properties.put(""remoteRepositories"", sbRepos);
            }
            final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager();
            final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID);
            final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, ""Creating project using Apache Maven archetype"");
            File archetypePomDirectory = getDefaultArchetypePomDirectory();
            try {
                String dfPom = getPomFile(group, artifact);
                ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes());
                File f = new File(archetypePomDirectory, ""pom.xml"");
                OutputStream fous = null;
                try {
                    fous = new FileOutputStream(f);
                    IOUtils.copy(bais, fous);
                } finally {
                    try {
                        if (fous != null) {
                            fous.close();
                        }
                        if (bais != null) {
                            bais.close();
                        }
                    } catch (IOException e) {
                    }
                }
                if (SiteManager.isHttpProxyEnable()) {
                    addProxySettings(properties);
                }
                workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath());
                workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties));
                String goalName = ""archetype:create"";
                if (offline) {
                    goalName = new StringBuffer(goalName).append("" -o"").toString();
                }
                goalName = updateGoal(goalName);
                workingCopy.setAttribute(ATTR_GOALS, goalName);
                final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout();
                TimeoutLaunchConfiguration.launchWithTimeout(monitor, workingCopy, project, timeout);
                monitor.setTaskName(""Moving to workspace"");
                FileUtils.copyDirectoryStructure(new File(archetypePomDirectory, project.getName()), ArchetypePOMHelper.getProjectDirectory(project));
                monitor.worked(1);
                performMavenInstall(monitor, project, offline);
                project.refreshLocal(2, monitor);
            } catch (final IOException ioe) {
                Logger.log(Logger.ERROR, ""I/O exception. One probably solution is absence "" + ""of mvn2 archetypes or not the correct version, "" + ""in your local repository. Please, check existence "" + ""of this archetype."");
                Logger.getLog().error(""I/O Exception arised creating mvn2 archetype"", ioe);
                throw ioe;
            } finally {
                FileUtils.deleteDirectory(archetypePomDirectory);
                Logger.log(Logger.INFO, ""Invoked removing of archetype POM directory"");
            }
        }
        monitor.worked(1);
    }
","    public static boolean buildCFItem2ItemStats(String outFileName, String movieAvgFileName, String custAvgFileName) {
        try {
            File infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + movieAvgFileName);
            FileChannel inC = new FileInputStream(infile).getChannel();
            int size = (int) inC.size();
            ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1);
            inC.close();
            while (map.hasRemaining()) {
                movieAverages.put(map.getShort(), map.getFloat());
            }
            map = null;
            infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + custAvgFileName);
            inC = new FileInputStream(infile).getChannel();
            size = (int) inC.size();
            map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TIntFloatHashMap custAverages = new TIntFloatHashMap(480189, 1);
            inC.close();
            while (map.hasRemaining()) {
                custAverages.put(map.getInt(), map.getFloat());
            }
            File outfile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + outFileName);
            FileChannel outC = new FileOutputStream(outfile, true).getChannel();
            short[] movies = CustomersAndRatingsPerMovie.keys();
            Arrays.sort(movies);
            int noMovies = movies.length;
            for (int i = 0; i < noMovies - 1; i++) {
                short movie1 = movies[i];
                TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1);
                int[] customers1 = testMovieCustAndRatingsMap.keys();
                Arrays.sort(customers1);
                System.out.println(""Processing movie: "" + movie1);
                for (int j = i + 1; j < noMovies; j++) {
                    short movie2 = movies[j];
                    TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2);
                    int[] customers2 = otherMovieCustAndRatingsMap.keys();
                    TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2);
                    int count = 0;
                    float diffRating = 0;
                    float pearsonCorr = 0;
                    float cosineCorr = 0;
                    float adjustedCosineCorr = 0;
                    float sumX = 0;
                    float sumY = 0;
                    float sumXY = 0;
                    float sumX2 = 0;
                    float sumY2 = 0;
                    float sumXYPearson = 0;
                    float sumX2Pearson = 0;
                    float sumY2Pearson = 0;
                    float sumXYACos = 0;
                    float sumX2ACos = 0;
                    float sumY2ACos = 0;
                    if ((intersectSet.size() == 0) || (intersectSet == null)) {
                        count = 0;
                        diffRating = 0;
                    } else {
                        count = intersectSet.size();
                        for (int l = 0; l < count; l++) {
                            int commonCust = intersectSet.getQuick(l);
                            byte ratingX = testMovieCustAndRatingsMap.get(commonCust);
                            sumX += ratingX;
                            byte ratingY = otherMovieCustAndRatingsMap.get(commonCust);
                            sumY += ratingY;
                            sumX2 += ratingX * ratingX;
                            sumY2 += ratingY * ratingY;
                            sumXY += ratingX * ratingY;
                            diffRating += ratingX - ratingY;
                            sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2));
                            sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2);
                            sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2);
                            float custAverage = custAverages.get(commonCust);
                            sumXYACos += (ratingX - custAverage) * (ratingY - custAverage);
                            sumX2ACos += Math.pow((ratingX - custAverage), 2);
                            sumY2ACos += Math.pow((ratingY - custAverage), 2);
                        }
                    }
                    double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson);
                    if (pearsonDenominator == 0.0) {
                        pearsonCorr = 0;
                    } else {
                        pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue();
                    }
                    double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos);
                    if (adjCosineDenominator == 0.0) {
                        adjustedCosineCorr = 0;
                    } else {
                        adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue();
                    }
                    double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2);
                    if (cosineDenominator == 0.0) {
                        cosineCorr = 0;
                    } else {
                        cosineCorr = new Double(sumXY / cosineDenominator).floatValue();
                    }
                    ByteBuffer buf = ByteBuffer.allocate(44);
                    buf.putShort(movie1);
                    buf.putShort(movie2);
                    buf.putInt(count);
                    buf.putFloat(diffRating);
                    buf.putFloat(sumXY);
                    buf.putFloat(sumX);
                    buf.putFloat(sumY);
                    buf.putFloat(sumX2);
                    buf.putFloat(sumY2);
                    buf.putFloat(pearsonCorr);
                    buf.putFloat(adjustedCosineCorr);
                    buf.putFloat(cosineCorr);
                    buf.flip();
                    outC.write(buf);
                    buf.clear();
                }
            }
            outC.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",True
900203,291167,14417449,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
","    public static void compressAll(File dir, File file) throws IOException {
        if (!dir.isDirectory()) throw new IllegalArgumentException(""Given file is no directory"");
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file));
        out.setLevel(0);
        String[] entries = dir.list();
        byte[] buffer = new byte[4096];
        int bytesRead;
        for (int i = 0; i < entries.length; i++) {
            File f = new File(dir, entries[i]);
            if (f.isDirectory()) continue;
            FileInputStream in = new FileInputStream(f);
            ZipEntry entry = new ZipEntry(f.getName());
            out.putNextEntry(entry);
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
        }
        out.close();
    }
",True
900204,14484136,83802,"    public void copyJarContent(File jarPath, File targetDir) throws IOException {
        log.info(""Copying natives from "" + jarPath.getName());
        JarFile jar = new JarFile(jarPath);
        Enumeration<JarEntry> entries = jar.entries();
        while (entries.hasMoreElements()) {
            JarEntry file = entries.nextElement();
            File f = new File(targetDir, file.getName());
            log.info(""Copying native - "" + file.getName());
            File parentFile = f.getParentFile();
            parentFile.mkdirs();
            if (file.isDirectory()) {
                f.mkdir();
                continue;
            }
            InputStream is = null;
            FileOutputStream fos = null;
            try {
                is = jar.getInputStream(file);
                fos = new FileOutputStream(f);
                IOUtils.copy(is, fos);
            } finally {
                if (fos != null) fos.close();
                if (is != null) is.close();
            }
        }
    }
","    private void doTask() {
        try {
            log(""\n\n\n\n\n\n\n\n\n"");
            log("" ================================================="");
            log("" = Starting PSCafePOS                            ="");
            log("" ================================================="");
            log("" =   An open source point of sale system         ="");
            log("" =   for educational organizations.              ="");
            log("" ================================================="");
            log("" = General Information                           ="");
            log("" =   http://pscafe.sourceforge.net               ="");
            log("" = Free Product Support                          ="");
            log("" =   http://www.sourceforge.net/projects/pscafe  ="");
            log("" ================================================="");
            log("" = License Overview                              ="");
            log("" ================================================="");
            log("" = PSCafePOS is a POS System for Schools         ="");
            log("" = Copyright (C) 2007 Charles Syperski           ="");
            log("" =                                               ="");
            log("" = This program is free software; you can        ="");
            log("" = redistribute it and/or modify it under the    ="");
            log("" = terms of the GNU General Public License as    ="");
            log("" = published by the Free Software Foundation;    ="");
            log("" = either version 2 of the License, or any later ="");
            log("" = version.                                      ="");
            log("" =                                               ="");
            log("" = This program is distributed in the hope that  ="");
            log("" = it will be useful, but WITHOUT ANY WARRANTY;  ="");
            log("" = without even the implied warranty of          ="");
            log("" = MERCHANTABILITY or FITNESS FOR A PARTICULAR   ="");
            log("" = PURPOSE.                                      ="");
            log("" =                                               ="");
            log("" = See the GNU General Public License for more   ="");
            log("" = details.                                      ="");
            log("" =                                               ="");
            log("" = You should have received a copy of the GNU    ="");
            log("" = General Public License along with this        ="");
            log("" = program; if not, write to the                 ="");
            log("" =                                               ="");
            log("" =      Free Software Foundation, Inc.           ="");
            log("" =      59 Temple Place, Suite 330               ="");
            log("" =      Boston, MA 02111-1307 USA                ="");
            log("" ================================================="");
            log("" = If you have any questions of comments please  ="");
            log("" = let us know at http://pscafe.sourceforge.net  ="");
            log("" ================================================="");
            pause();
            File settings;
            if (blAltSettings) {
                System.out.println(""\n  + Alternative path specified at run time:"");
                System.out.println(""    Path: "" + strAltPath);
                settings = new File(strAltPath);
            } else {
                settings = new File(""etc"" + File.separatorChar + ""settings.dbp"");
            }
            System.out.print(""\n  + Checking for existance of settings..."");
            boolean blGo = false;
            if (settings.exists() && settings.canRead()) {
                log(""[OK]"");
                blGo = true;
                if (forceConfig) {
                    System.out.print(""\n  + Running Config Wizard (at user request)..."");
                    Process pp = Runtime.getRuntime().exec(""java -cp . PSSettingWizard etc"" + File.separatorChar + ""settings.dbp"");
                    InputStream stderr = pp.getErrorStream();
                    InputStream stdin = pp.getInputStream();
                    InputStreamReader isr = new InputStreamReader(stdin);
                    BufferedReader br = new BufferedReader(isr);
                    String ln = null;
                    while ((ln = br.readLine()) != null) System.out.println(""  "" + ln);
                    pp.waitFor();
                }
            } else {
                log(""[FAILED]"");
                settings = new File(""etc"" + File.separatorChar + ""settings.dbp.firstrun"");
                System.out.print(""\n  + Checking if this is the first run... "");
                if (settings.exists() && settings.canRead()) {
                    log(""[FOUND]"");
                    File toFile = new File(""etc"" + File.separatorChar + ""settings.dbp"");
                    FileInputStream from = null;
                    FileOutputStream to = null;
                    try {
                        from = new FileInputStream(settings);
                        to = new FileOutputStream(toFile);
                        byte[] buffer = new byte[4096];
                        int bytes_read;
                        while ((bytes_read = from.read(buffer)) != -1) {
                            to.write(buffer, 0, bytes_read);
                        }
                        if (toFile.exists() && toFile.canRead()) {
                            settings = null;
                            settings = new File(""etc"" + File.separatorChar + ""settings.dbp"");
                        }
                        System.out.print(""\n  + Running Settings Wizard... "");
                        try {
                            Process p = Runtime.getRuntime().exec(""java PSSettingWizard etc"" + File.separatorChar + ""settings.dbp"");
                            InputStream stderr = p.getErrorStream();
                            InputStream stdin = p.getInputStream();
                            InputStreamReader isr = new InputStreamReader(stdin);
                            BufferedReader br = new BufferedReader(isr);
                            String ln = null;
                            while ((ln = br.readLine()) != null) System.out.println(""  "" + ln);
                            p.waitFor();
                            log(""[OK]"");
                            if (p.exitValue() == 0) blGo = true;
                        } catch (InterruptedException i) {
                            System.err.println(i.getMessage());
                        }
                    } catch (Exception ex) {
                        System.err.println(ex.getMessage());
                    } finally {
                        if (from != null) try {
                            from.close();
                        } catch (IOException e) {
                            ;
                        }
                        if (to != null) try {
                            to.close();
                        } catch (IOException e) {
                            ;
                        }
                    }
                } else {
                    settings = null;
                    settings = new File(""etc"" + File.separatorChar + ""settings.dbp"");
                    DBSettingsWriter writ = new DBSettingsWriter();
                    writ.writeFile(new DBSettings(), settings);
                    blGo = true;
                }
            }
            if (blGo) {
                String cp = ""."";
                try {
                    File classpath = new File(""lib"");
                    File[] subFiles = classpath.listFiles();
                    for (int i = 0; i < subFiles.length; i++) {
                        if (subFiles[i].isFile()) {
                            cp += File.pathSeparatorChar + ""lib"" + File.separatorChar + subFiles[i].getName() + """";
                        }
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
                try {
                    boolean blExecutePOS = false;
                    System.out.print(""\n  + Checking runtime settings...         "");
                    DBSettings info = null;
                    if (settings == null) settings = new File(""etc"" + File.separatorChar + ""settings.dbp"");
                    if (settings.exists() && settings.canRead()) {
                        DBSettingsWriter writ = new DBSettingsWriter();
                        info = (DBSettings) writ.loadSettingsDB(settings);
                        if (info != null) {
                            blExecutePOS = true;
                        }
                    }
                    if (blExecutePOS) {
                        log(""[OK]"");
                        String strSSL = """";
                        String strSSLDebug = """";
                        if (info != null) {
                            debug = info.get(DBSettings.MAIN_DEBUG).compareTo(""1"") == 0;
                            if (debug) log(""       * Debug Mode is ON""); else log(""       * Debug Mode is OFF"");
                            if (info.get(DBSettings.POS_SSLENABLED).compareTo(""1"") == 0) {
                                strSSL = ""-Djavax.net.ssl.keyStore="" + info.get(DBSettings.POS_SSLKEYSTORE) + "" -Djavax.net.ssl.keyStorePassword=pscafe -Djavax.net.ssl.trustStore="" + info.get(DBSettings.POS_SSLTRUSTSTORE) + "" -Djavax.net.ssl.trustStorePassword=pscafe"";
                                log(""       * Using SSL"");
                                debug(""            "" + strSSL);
                                if (info.get(DBSettings.POS_SSLDEBUG).compareTo(""1"") == 0) {
                                    strSSLDebug = ""-Djavax.net.debug=all"";
                                    log(""       * SSL Debugging enabled"");
                                    debug(""            "" + strSSLDebug);
                                }
                            }
                        }
                        String strPOSRun = ""java  -cp "" + cp + "" "" + strSSL + "" "" + strSSLDebug + "" POSDriver "" + settings.getPath();
                        debug(strPOSRun);
                        System.out.print(""\n  + Running PSCafePOS...                 "");
                        Process pr = Runtime.getRuntime().exec(strPOSRun);
                        System.out.print(""[OK]\n\n"");
                        InputStream stderr = pr.getErrorStream();
                        InputStream stdin = pr.getInputStream();
                        InputStreamReader isr = new InputStreamReader(stdin);
                        InputStreamReader isre = new InputStreamReader(stderr);
                        BufferedReader br = new BufferedReader(isr);
                        BufferedReader bre = new BufferedReader(isre);
                        String line = null;
                        String lineError = null;
                        log("" ================================================="");
                        log("" =        Output from PSCafePOS System           ="");
                        log("" ================================================="");
                        while ((line = br.readLine()) != null || (lineError = bre.readLine()) != null) {
                            if (line != null) System.out.println("" [PSCafePOS]"" + line);
                            if (lineError != null) System.out.println("" [ERR]"" + lineError);
                        }
                        pr.waitFor();
                        log("" ================================================="");
                        log("" =       End output from PSCafePOS System        ="");
                        log("" =              PSCafePOS has exited             ="");
                        log("" ================================================="");
                    } else {
                        log(""[Failed]"");
                    }
                } catch (Exception i) {
                    log(i.getMessage());
                    i.printStackTrace();
                }
            }
        } catch (Exception e) {
            log(e.getMessage());
        }
    }
",True
900205,924033,7825861,"    public static void main(String[] args) throws Exception {
        InputStream in = null;
        try {
            in = new URL(args[0]).openStream();
            IOUtils.copyBytes(in, System.out, 4096, false);
        } finally {
            IOUtils.closeStream(in);
        }
    }
","                @Override
                public void run() {
                    while (true) {
                        StringBuilder buffer = new StringBuilder(128);
                        buffer.append(""insert into DOMAIN (                         "").append(LS);
                        buffer.append(""    DOMAIN_ID, TOP_DOMAIN_ID, DOMAIN_HREF,   "").append(LS);
                        buffer.append(""    DOMAIN_RANK, DOMAIN_TYPE, DOMAIN_STATUS, "").append(LS);
                        buffer.append(""    DOMAIN_ICO_CREATED, DOMAIN_CDATE         "").append(LS);
                        buffer.append("") values (                   "").append(LS);
                        buffer.append(""    null ,null, ?,"").append(LS);
                        buffer.append(""    1, 2, 1,                 "").append(LS);
                        buffer.append(""    0, now()                 "").append(LS);
                        buffer.append("")                            "").append(LS);
                        String sqlInsert = buffer.toString();
                        boolean isAutoCommit = false;
                        int i = 0;
                        Connection conn = null;
                        PreparedStatement pstmt = null;
                        ResultSet rs = null;
                        try {
                            conn = ConnHelper.getConnection();
                            conn.setAutoCommit(isAutoCommit);
                            pstmt = conn.prepareStatement(sqlInsert);
                            for (i = 0; i < 10; i++) {
                                String lock = """" + ((int) (Math.random() * 100000000)) % 100;
                                pstmt.setString(1, lock);
                                pstmt.executeUpdate();
                            }
                            if (!isAutoCommit) conn.commit();
                            rs = pstmt.executeQuery(""select max(DOMAIN_ID) from DOMAIN"");
                            if (rs.next()) {
                                String str = System.currentTimeMillis() + "" "" + rs.getLong(1);
                            }
                        } catch (Exception e) {
                            try {
                                if (!isAutoCommit) conn.rollback();
                            } catch (SQLException ex) {
                                ex.printStackTrace(System.out);
                            }
                            String msg = System.currentTimeMillis() + "" "" + Thread.currentThread().getName() + "" - "" + i + "" "" + e.getMessage() + LS;
                            FileIO.writeToFile(""D:/DEAD_LOCK.txt"", msg, true, ""GBK"");
                        } finally {
                            ConnHelper.close(conn, pstmt, rs);
                        }
                    }
                }
",False
900206,11776522,5438231,"    protected File getFile(NameCategory category) throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", category);
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = DefaultNameGenerator.class.getResource(""/sc/common/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
","    public int extract() throws Exception {
        int count = 0;
        if (VERBOSE) System.out.println(""IAAE:Extractr.extract: getting ready to extract "" + getArtDir().toString());
        ITCFileFilter iff = new ITCFileFilter();
        RecursiveFileIterator rfi = new RecursiveFileIterator(getArtDir(), iff);
        FileTypeDeterminer ftd = new FileTypeDeterminer();
        File artFile = null;
        File targetFile = null;
        broadcastStart();
        while (rfi.hasMoreElements()) {
            artFile = (File) rfi.nextElement();
            targetFile = getTargetFile(artFile);
            if (VERBOSE) System.out.println(""IAAE:Extractr.extract: working ont "" + artFile.toString());
            BufferedInputStream in = null;
            BufferedOutputStream out = null;
            try {
                in = new BufferedInputStream((new FileInputStream(artFile)));
                out = new BufferedOutputStream((new FileOutputStream(targetFile)));
                byte[] buffer = new byte[10240];
                int read = 0;
                int total = 0;
                read = in.read(buffer);
                while (read != -1) {
                    if ((total <= 491) && (read > 491)) {
                        out.write(buffer, 492, (read - 492));
                    } else if ((total <= 491) && (read <= 491)) {
                    } else {
                        out.write(buffer, 0, read);
                    }
                    total = total + read;
                    read = in.read(buffer);
                }
            } catch (Exception e) {
                e.printStackTrace();
                broadcastFail();
            } finally {
                in.close();
                out.close();
            }
            broadcastSuccess();
            count++;
        }
        broadcastDone();
        return count;
    }
",True
900207,1642489,17905171,"    public void testAddFiles() throws Exception {
        File original = ZipPlugin.getFileInPlugin(new Path(""testresources/test.zip""));
        File copy = new File(original.getParentFile(), ""1test.zip"");
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(original);
            out = new FileOutputStream(copy);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        } finally {
            Util.close(in);
            Util.close(out);
        }
        ArchiveFile archive = new ArchiveFile(ZipPlugin.createArchive(copy.getPath()));
        archive.addFiles(new String[] { ZipPlugin.getFileInPlugin(new Path(""testresources/add.txt"")).getPath() }, new NullProgressMonitor());
        IArchive[] children = archive.getChildren();
        boolean found = false;
        for (IArchive child : children) {
            if (child.getLabel(IArchive.NAME).equals(""add.txt"")) found = true;
        }
        assertTrue(found);
        copy.delete();
    }
","    public static InputStream getResourceAsStream(String resourceName, Class callingClass) {
        URL url = getResource(resourceName, callingClass);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
",False
900208,16064530,5389524,"    private void bubbleSort() {
        for (int i = 0; i < testfield.length; i++) {
            for (int j = 0; j < testfield.length - i - 1; j++) if (testfield[j] > testfield[j + 1]) {
                short temp = testfield[j];
                testfield[j] = testfield[j + 1];
                testfield[j + 1] = temp;
            }
        }
    }
","        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath) {
            File myDirectory = new File(directoryPath);
            String[] list = myDirectory.list();
            int i;
            for (i = 0; ((i < list.length) && !stop); i++) {
                current = i;
                if ((list[i].compareTo(""Images"") != 0) && ((list[i].substring(list[i].lastIndexOf('.'), list[i].length()).toLowerCase().compareTo("".jpg"") == 0) || (list[i].substring(list[i].lastIndexOf('.'), list[i].length()).toLowerCase().compareTo("".bmp"") == 0) || (list[i].substring(list[i].lastIndexOf('.'), list[i].length()).toLowerCase().compareTo("".png"") == 0))) {
                    String name = list[i];
                    String pathSrc = directoryPath.concat(list[i]);
                    name = name.replace(' ', '_').replace(',', '-').replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u').replace('Á', 'A').replace('É', 'E').replace('Í', 'I').replace('Ó', 'O').replace('Ú', 'U');
                    String pathDst = directoryPath.concat(name);
                    Vector aux = new Vector();
                    aux = dataBase.imageSearch(name.substring(0, name.lastIndexOf('.')));
                    if (aux.size() != 0) pathDst = pathDst.substring(0, pathDst.lastIndexOf('.')) + '_' + aux.size() + "".png"";
                    File src = new File(pathSrc);
                    File absPath = new File("""");
                    String nameSrc = '.' + src.separator + ""Images"" + src.separator + name.substring(0, 1).toUpperCase() + src.separator + pathDst.substring(pathDst.lastIndexOf(src.separator) + 1, pathDst.length());
                    String newDirectory = '.' + src.separator + ""Images"" + src.separator + name.substring(0, 1).toUpperCase();
                    String imagePathThumb = (nameSrc.substring(0, nameSrc.lastIndexOf("".""))).concat(""_th.jpg"");
                    ImageIcon image = null;
                    if (src != null) {
                        if (TFileUtils.isJAIRequired(src)) {
                            RenderedOp src_aux = JAI.create(""fileload"", src.getAbsolutePath());
                            BufferedImage bufferedImage = src_aux.getAsBufferedImage();
                            image = new ImageIcon(bufferedImage);
                        } else {
                            image = new ImageIcon(src.getAbsolutePath());
                        }
                        if (image.getImageLoadStatus() == MediaTracker.ERRORED) {
                            System.out.print(""Error al insertar imagen: "");
                            System.out.println(pathDst);
                        } else {
                            int option = 0;
                            imageFile = new File(directoryPath + ""Images"");
                            if (!imageFile.exists()) {
                                TIGNewImageDataDialog dialog = new TIGNewImageDataDialog(editor, dataBase, image, nameSrc.substring(nameSrc.lastIndexOf(File.separator) + 1, nameSrc.length()), list[i].substring(0, list[i].lastIndexOf('.')), myTask);
                                option = dialog.getOption();
                                if (option != 0) {
                                    File newDirectoryFolder = new File(newDirectory);
                                    newDirectoryFolder.mkdirs();
                                    try {
                                        FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                                        FileChannel dstChannel = new FileOutputStream(nameSrc).getChannel();
                                        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                        srcChannel.close();
                                        dstChannel.close();
                                    } catch (IOException exc) {
                                        System.out.println(exc.getMessage());
                                        System.out.println(exc.toString());
                                    }
                                }
                            }
                            if (imageFile.exists()) {
                                dataBase.insertImageDB(list[i].substring(0, list[i].lastIndexOf('.')), nameSrc.substring(nameSrc.lastIndexOf(File.separator) + 1, nameSrc.length()));
                                File newDirectoryFolder = new File(newDirectory);
                                newDirectoryFolder.mkdirs();
                                try {
                                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                                    FileChannel dstChannel = new FileOutputStream(nameSrc).getChannel();
                                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                    srcChannel.close();
                                    dstChannel.close();
                                } catch (IOException exc) {
                                    System.out.println(exc.getMessage());
                                    System.out.println(exc.toString());
                                }
                            }
                            try {
                                int thumbWidth = PREVIEW_WIDTH;
                                int thumbHeight = PREVIEW_HEIGHT;
                                double thumbRatio = (double) thumbWidth / (double) thumbHeight;
                                int imageWidth = image.getIconWidth();
                                int imageHeight = image.getIconHeight();
                                double imageRatio = (double) imageWidth / (double) imageHeight;
                                if (thumbRatio < imageRatio) {
                                    thumbHeight = (int) (thumbWidth / imageRatio);
                                } else {
                                    thumbWidth = (int) (thumbHeight * imageRatio);
                                }
                                BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
                                Graphics2D graphics2D = thumbImage.createGraphics();
                                graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                                graphics2D.drawImage(image.getImage(), 0, 0, thumbWidth, thumbHeight, null);
                                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(imagePathThumb));
                                JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
                                JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);
                                int quality = 100;
                                quality = Math.max(0, Math.min(quality, 100));
                                param.setQuality((float) quality / 100.0f, false);
                                encoder.setJPEGEncodeParam(param);
                                encoder.encode(thumbImage);
                                out.close();
                            } catch (Exception ex) {
                                System.out.println(ex.getMessage());
                                System.out.println(ex.toString());
                            }
                        }
                    }
                }
            }
            if (imageFile.exists() && !stop) {
                try {
                    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
                    Document doc = docBuilder.parse(imageFile);
                    Element dataBaseElement = doc.getDocumentElement();
                    if (dataBaseElement.getTagName().equals(""dataBase"")) {
                        NodeList imageNodeList = dataBaseElement.getElementsByTagName(""image"");
                        for (int j = 0; j < imageNodeList.getLength(); j++) {
                            current++;
                            Node imageNode = imageNodeList.item(j);
                            NodeList lista = imageNode.getChildNodes();
                            Node nameNode = imageNode.getChildNodes().item(0);
                            String imageName = nameNode.getChildNodes().item(0).getNodeValue();
                            int imageKey = dataBase.imageKeySearchName(imageName.substring(0, imageName.lastIndexOf('.')));
                            if (imageKey != -1) {
                                for (int k = 1; k < imageNode.getChildNodes().getLength(); k++) {
                                    Node keyWordNode = imageNode.getChildNodes().item(k);
                                    String keyWord = keyWordNode.getChildNodes().item(0).getNodeValue();
                                    int conceptKey = dataBase.conceptKeySearch(keyWord);
                                    if (conceptKey == -1) {
                                        dataBase.insertConceptDB(keyWord);
                                        conceptKey = dataBase.conceptKeySearch(keyWord);
                                    }
                                    dataBase.insertAsociatedDB(conceptKey, imageKey);
                                }
                            }
                        }
                    }
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                    System.out.println(ex.toString());
                }
            }
            current = lengthOfTask;
        }
",False
900209,9627687,813588,"    private boolean isReservaOK(String urlAddress, String operationId, String idioma, String codigo_pedido, String merchantId) throws ServletException {
        StringBuffer buf = new StringBuffer();
        try {
            URL url = new URL(urlAddress + ""?Num_operacion="" + operationId + ""&Idioma="" + idioma + ""&Codigo_pedido="" + codigo_pedido + ""&MerchantID="" + merchantId);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                buf.append(str);
            }
            in.close();
        } catch (IOException e) {
            throw new ServletException(e);
        }
        return buf.indexOf(""$*$OKY$*$"") != -1;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",True
900210,14287646,1172494,"    private String getStoreName() {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(protectionDomain.getBytes());
            final byte[] bs = digest.digest();
            final StringBuffer sb = new StringBuffer(bs.length * 2);
            for (int i = 0; i < bs.length; i++) {
                final String s = Integer.toHexString(bs[i] & 0xff);
                if (s.length() < 2) sb.append('0');
                sb.append(s);
            }
            return sb.toString();
        } catch (final NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't save credentials: digest method MD5 unavailable."");
        }
    }
","    public static String encrypt(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(input.getBytes(""UTF-8""));
            return toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
",True
900211,2012592,20493053,"    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        IOUtils.copy(inputStream, outputStream);
        outputStream.close();
        inputStream.close();
    }
","    public static boolean copyFile(File from, File to) {
        try {
            FileChannel fromChannel = new FileInputStream(from).getChannel();
            FileChannel toChannel = new FileOutputStream(to).getChannel();
            toChannel.transferFrom(fromChannel, 0, fromChannel.size());
            fromChannel.close();
            toChannel.close();
        } catch (IOException e) {
            log.error(""failed to copy "" + from.getAbsolutePath() + "" to "" + to.getAbsolutePath() + "": caught exception"", e);
            return false;
        }
        return true;
    }
",True
900212,6948655,18396375,"    public static void main(String[] args) throws IOException {
        File fileIn = new File(""D:\\zz_c\\study2\\src\\study\\io\\A.java"");
        InputStream fin = new FileInputStream(fileIn);
        PipedInputStream pin = new PipedInputStream();
        PipedOutputStream pout = new PipedOutputStream();
        pout.connect(pin);
        IoRead i = new IoRead();
        i.setIn(pin);
        File fileOU1 = new File(""D:\\zz_c\\study2\\src\\study\\io\\A1.java"");
        File fileOU2 = new File(""D:\\zz_c\\study2\\src\\study\\io\\A2.java"");
        File fileOU3 = new File(""D:\\zz_c\\study2\\src\\study\\io\\A3.java"");
        i.addOut(new BufferedOutputStream(new FileOutputStream(fileOU1)));
        i.addOut(new BufferedOutputStream(new FileOutputStream(fileOU2)));
        i.addOut(new BufferedOutputStream(new FileOutputStream(fileOU3)));
        PipedInputStream pin2 = new PipedInputStream();
        PipedOutputStream pout2 = new PipedOutputStream();
        i.addOut(pout2);
        pout2.connect(pin2);
        i.start();
        int read;
        try {
            read = fin.read();
            while (read != -1) {
                pout.write(read);
                read = fin.read();
            }
            fin.close();
            pout.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        int c = pin2.read();
        while (c != -1) {
            System.out.print((char) c);
            c = pin2.read();
        }
        pin2.close();
    }
","    public static String hash(String plaintext) {
        if (plaintext == null) {
            return """";
        }
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA1"");
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        return new String(Base64.encodeBase64(md.digest()));
    }
",False
900213,6270867,17874921,"    public static String md5Encrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] md5hash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            md5hash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < md5hash.length; i++) {
                if (Integer.toHexString(0xFF & md5hash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & md5hash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & md5hash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }
","    public static boolean buildCFItem2ItemStats(String outFileName, String movieAvgFileName, String custAvgFileName) {
        try {
            File infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + movieAvgFileName);
            FileChannel inC = new FileInputStream(infile).getChannel();
            int size = (int) inC.size();
            ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1);
            inC.close();
            while (map.hasRemaining()) {
                movieAverages.put(map.getShort(), map.getFloat());
            }
            map = null;
            infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + custAvgFileName);
            inC = new FileInputStream(infile).getChannel();
            size = (int) inC.size();
            map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TIntFloatHashMap custAverages = new TIntFloatHashMap(480189, 1);
            inC.close();
            while (map.hasRemaining()) {
                custAverages.put(map.getInt(), map.getFloat());
            }
            File outfile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + outFileName);
            FileChannel outC = new FileOutputStream(outfile, true).getChannel();
            short[] movies = CustomersAndRatingsPerMovie.keys();
            Arrays.sort(movies);
            int noMovies = movies.length;
            for (int i = 0; i < noMovies - 1; i++) {
                short movie1 = movies[i];
                TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1);
                int[] customers1 = testMovieCustAndRatingsMap.keys();
                Arrays.sort(customers1);
                System.out.println(""Processing movie: "" + movie1);
                for (int j = i + 1; j < noMovies; j++) {
                    short movie2 = movies[j];
                    TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2);
                    int[] customers2 = otherMovieCustAndRatingsMap.keys();
                    TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2);
                    int count = 0;
                    float diffRating = 0;
                    float pearsonCorr = 0;
                    float cosineCorr = 0;
                    float adjustedCosineCorr = 0;
                    float sumX = 0;
                    float sumY = 0;
                    float sumXY = 0;
                    float sumX2 = 0;
                    float sumY2 = 0;
                    float sumXYPearson = 0;
                    float sumX2Pearson = 0;
                    float sumY2Pearson = 0;
                    float sumXYACos = 0;
                    float sumX2ACos = 0;
                    float sumY2ACos = 0;
                    if ((intersectSet.size() == 0) || (intersectSet == null)) {
                        count = 0;
                        diffRating = 0;
                    } else {
                        count = intersectSet.size();
                        for (int l = 0; l < count; l++) {
                            int commonCust = intersectSet.getQuick(l);
                            byte ratingX = testMovieCustAndRatingsMap.get(commonCust);
                            sumX += ratingX;
                            byte ratingY = otherMovieCustAndRatingsMap.get(commonCust);
                            sumY += ratingY;
                            sumX2 += ratingX * ratingX;
                            sumY2 += ratingY * ratingY;
                            sumXY += ratingX * ratingY;
                            diffRating += ratingX - ratingY;
                            sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2));
                            sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2);
                            sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2);
                            float custAverage = custAverages.get(commonCust);
                            sumXYACos += (ratingX - custAverage) * (ratingY - custAverage);
                            sumX2ACos += Math.pow((ratingX - custAverage), 2);
                            sumY2ACos += Math.pow((ratingY - custAverage), 2);
                        }
                    }
                    double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson);
                    if (pearsonDenominator == 0.0) {
                        pearsonCorr = 0;
                    } else {
                        pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue();
                    }
                    double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos);
                    if (adjCosineDenominator == 0.0) {
                        adjustedCosineCorr = 0;
                    } else {
                        adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue();
                    }
                    double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2);
                    if (cosineDenominator == 0.0) {
                        cosineCorr = 0;
                    } else {
                        cosineCorr = new Double(sumXY / cosineDenominator).floatValue();
                    }
                    ByteBuffer buf = ByteBuffer.allocate(44);
                    buf.putShort(movie1);
                    buf.putShort(movie2);
                    buf.putInt(count);
                    buf.putFloat(diffRating);
                    buf.putFloat(sumXY);
                    buf.putFloat(sumX);
                    buf.putFloat(sumY);
                    buf.putFloat(sumX2);
                    buf.putFloat(sumY2);
                    buf.putFloat(pearsonCorr);
                    buf.putFloat(adjustedCosineCorr);
                    buf.putFloat(cosineCorr);
                    buf.flip();
                    outC.write(buf);
                    buf.clear();
                }
            }
            outC.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",False
900214,569033,14847921,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
","    protected static void copyFile(File from, File to) throws IOException {
        if (!from.isFile() || !to.isFile()) {
            throw new IOException(""Both parameters must be files. from is "" + from.isFile() + "", to is "" + to.isFile());
        }
        FileChannel in = (new FileInputStream(from)).getChannel();
        FileChannel out = (new FileOutputStream(to)).getChannel();
        in.transferTo(0, from.length(), out);
        in.close();
        out.close();
    }
",False
900215,4525216,21057438,"    private static void backupFile(File file) {
        FileChannel in = null, out = null;
        try {
            if (!file.getName().endsWith("".bak"")) {
                in = new FileInputStream(file).getChannel();
                out = new FileOutputStream(new File(file.toString() + "".bak"")).getChannel();
                long size = in.size();
                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                out.write(buf);
            }
        } catch (Exception e) {
            e.getMessage();
        } finally {
            try {
                System.gc();
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (Exception e) {
                e.getMessage();
            }
        }
    }
","    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println(""opening socket to "" + address + "" on "" + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println(""header: "" + header);
                String[] parts = header.getFilename().getSegments();
                String filename;
                if (parts.length > 0) filename = ""dl-"" + parts[parts.length - 1]; else filename = ""dl-"" + session.getScreenname();
                System.out.println(""writing to file "" + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println(""sending header: "" + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println(""transferred "" + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println(""finished transfer!"");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
",True
900216,17530413,11346792,"    protected void serveStaticContent(HttpServletRequest request, HttpServletResponse response, String pathInfo) throws ServletException {
        InputStream is = servletConfig.getServletContext().getResourceAsStream(pathInfo);
        if (is == null) {
            throw new ServletException(""Static resource "" + pathInfo + "" is not available"");
        }
        try {
            int ind = pathInfo.lastIndexOf(""."");
            if (ind != -1 && ind < pathInfo.length()) {
                String type = STATIC_CONTENT_TYPES.get(pathInfo.substring(ind + 1));
                if (type != null) {
                    response.setContentType(type);
                }
            }
            ServletOutputStream os = response.getOutputStream();
            IOUtils.copy(is, os);
            os.flush();
        } catch (IOException ex) {
            throw new ServletException(""Static resource "" + pathInfo + "" can not be written to the output stream"");
        }
    }
","    public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {
        if (!generatedOutputDirectory.exists()) {
            generatedOutputDirectory.createFolder();
        }
        if (outputDirectory.exists()) {
            outputDirectory.createFolder();
        }
        ZipUtils.extractZip(new ClasspathResource(classResolver, ""/com/erinors/tapestry/tapdoc/service/xdoc/resources.zip""), outputDirectory);
        for (Library library : libraryModels) {
            String libraryName = library.getName();
            String libraryLocation = library.getLocation();
            generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder();
            try {
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Library.xsl""), ""libraryName"", libraryName);
                FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(""index.xml"");
                Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                out.write(result);
                out.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            for (Component component : library.getComponents()) {
                String componentName = component.getName();
                System.out.println(""Generating "" + libraryName + "":"" + componentName + ""..."");
                Map<String, String> parameters = new HashMap<String, String>();
                parameters.put(""libraryName"", libraryName);
                parameters.put(""componentName"", componentName);
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Component.xsl""), parameters);
                Writer out = null;
                try {
                    FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true));
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                    Resource specificationLocation = component.getSpecificationLocation();
                    if (specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL() != null) {
                        File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL().toURI());
                        FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile(""resource"");
                        if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) {
                            File[] files = srcResourcesDirectory.listFiles();
                            if (files != null) {
                                for (File resource : files) {
                                    if (resource.isFile() && !resource.isHidden()) {
                                        FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName());
                                        resourceFileObject.createFile();
                                        InputStream inResource = null;
                                        OutputStream outResource = null;
                                        try {
                                            inResource = new FileInputStream(resource);
                                            outResource = resourceFileObject.getContent().getOutputStream();
                                            IOUtils.copy(inResource, outResource);
                                        } finally {
                                            IOUtils.closeQuietly(inResource);
                                            IOUtils.closeQuietly(outResource);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    throw new RuntimeException(e);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
        }
        {
            Writer out = null;
            try {
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Overview.xsl""));
                FileObject index = generatedOutputDirectory.resolveFile(""index.xml"");
                out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                out.write(result);
                out.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            } finally {
                IOUtils.closeQuietly(out);
            }
        }
    }
",True
900217,19322947,13946708,"    @Test
    public void test_lookupType_FullSearch_TwoWords() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/deep+core"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":11395,\""itemCategoryID\"":16,\""name\"":\""Deep Core Mining\"",\""icon\"":\""50_11\""},{\""itemTypeID\"":12108,\""itemCategoryID\"":7,\""name\"":\""Deep Core Mining Laser I\"",\""icon\"":\""35_01\"",\""metaLevel\"":0},{\""itemTypeID\"":12109,\""itemCategoryID\"":9,\""name\"":\""Deep Core Mining Laser I Blueprint\"",\""icon\"":\""12_08\""},{\""itemTypeID\"":18068,\""itemCategoryID\"":7,\""name\"":\""Modulated Deep Core Miner II\"",\""icon\"":\""35_01\"",\""metaLevel\"":5},{\""itemTypeID\"":18069,\""itemCategoryID\"":9,\""name\"":\""Modulated Deep Core Miner II Blueprint\"",\""icon\"":\""12_08\""},{\""itemTypeID\"":24305,\""itemCategoryID\"":7,\""name\"":\""Modulated Deep Core Strip Miner II\"",\""icon\"":\""49_05\"",\""metaLevel\"":5},{\""itemTypeID\"":24306,\""itemCategoryID\"":9,\""name\"":\""Modulated Deep Core Strip Miner II Blueprint\"",\""icon\"":\""12_08\""},{\""itemTypeID\"":28748,\""itemCategoryID\"":7,\""name\"":\""ORE Deep Core Mining Laser\"",\""icon\"":\""35_01\"",\""metaLevel\"":6}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
","    @Override
    public String encryptPassword(String password) throws JetspeedSecurityException {
        if (securePasswords == false) {
            return password;
        }
        if (password == null) {
            return null;
        }
        try {
            if (""SHA-512"".equals(passwordsAlgorithm)) {
                password = password + JetspeedResources.getString(""aipo.encrypt_key"");
                MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm);
                md.reset();
                md.update(password.getBytes());
                byte[] hash = md.digest();
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < hash.length; i++) {
                    sb.append(Integer.toHexString((hash[i] >> 4) & 0x0F));
                    sb.append(Integer.toHexString(hash[i] & 0x0F));
                }
                return sb.toString();
            } else {
                MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm);
                byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING));
                ByteArrayOutputStream bas = new ByteArrayOutputStream(digest.length + digest.length / 3 + 1);
                OutputStream encodedStream = MimeUtility.encode(bas, ""base64"");
                encodedStream.write(digest);
                encodedStream.flush();
                encodedStream.close();
                return bas.toString();
            }
        } catch (Exception e) {
            logger.error(""Unable to encrypt password."" + e.getMessage(), e);
            return null;
        }
    }
",False
900218,17586130,2911006,"    protected N save(String sql, Object[] args) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = JdbcUtils.getConnection();
            conn.setAutoCommit(false);
            pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            this.setParameters(pstmt, args);
            pstmt.executeUpdate();
            conn.commit();
            conn.setAutoCommit(true);
            rs = pstmt.getGeneratedKeys();
            return (N) rs.getObject(1);
        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            throw new JdbcDaoException(e.getMessage(), e);
        } finally {
            JdbcUtils.free(rs, pstmt, conn);
        }
    }
","    protected String encrypt(String text) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(text.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            String hash = (new BASE64Encoder()).encode(raw);
            return hash;
        } catch (Exception ex) {
            throw new TiiraException(ex);
        }
    }
",False
900219,765071,5985718,"    public static void testString(String string, String expected) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(string.getBytes(), 0, string.length());
            String result = toString(md.digest());
            System.out.println(expected);
            System.out.println(result);
            if (!expected.equals(result)) System.out.println(""NOT EQUAL!"");
        } catch (Exception x) {
            x.printStackTrace();
        }
    }
","    private String fetchLocalPage(String page) throws IOException {
        final String fullUrl = HOST + page;
        LOG.debug(""Fetching local page: "" + fullUrl);
        URL url = new URL(fullUrl);
        URLConnection connection = url.openConnection();
        StringBuilder sb = new StringBuilder();
        BufferedReader input = null;
        try {
            input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line = null;
            while ((line = input.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
        } finally {
            if (input != null) try {
                input.close();
            } catch (IOException e) {
                LOG.error(""Could not close reader!"", e);
            }
        }
        return sb.toString();
    }
",False
900220,10816804,10247943,"    public static String md5(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        StringBuffer result = new StringBuffer();
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(input.getBytes(""utf-8""));
        byte[] digest = md.digest();
        for (byte b : digest) {
            result.append(String.format(""%02X "", b & 0xff));
        }
        return result.toString();
    }
","    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException {
        try {
            if (vtf == null) {
                LOG.debug(""Serializing from database"");
                existDocument.stream(out);
            } else {
                LOG.debug(""Serializing from buffer"");
                InputStream is = vtf.getByteStream();
                IOUtils.copy(is, out);
                out.flush();
                IOUtils.closeQuietly(is);
                vtf.delete();
                vtf = null;
            }
        } catch (PermissionDeniedException e) {
            LOG.debug(e.getMessage());
            throw new NotAuthorizedException(this);
        } finally {
            IOUtils.closeQuietly(out);
        }
    }
",False
900221,11305839,550697,"    public boolean setCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {
        boolean inserto = false;
        try {
            stm = conexion.prepareStatement(""insert into clientes values( '"" + IDcliente + ""' , '"" + nombre.toUpperCase() + ""' , '"" + paterno.toUpperCase() + ""' , '"" + materno.toUpperCase() + ""' , '"" + ocupacion.toUpperCase() + ""' , '"" + rfc + ""' )"");
            stm.executeUpdate();
            conexion.commit();
            inserto = true;
        } catch (SQLException e) {
            System.out.println(""error al insertar registro en la tabla clientes general  "" + e.getMessage());
            try {
                conexion.rollback();
            } catch (SQLException ee) {
                System.out.println(ee.getMessage());
            }
            return inserto = false;
        }
        return inserto;
    }
","    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",False
900222,12312915,13893663,"    public static void entering(String[] args) throws IOException, CodeCheckException {
        ClassWriter writer = new ClassWriter();
        writer.readClass(new BufferedInputStream(new FileInputStream(args[0])));
        int constantIndex = writer.getStringConstantIndex(""Entering "");
        int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, ""java/lang/System"", ""out"", ""Ljava/io/PrintStream;"");
        int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, ""java/io/PrintStream"", ""println"", ""(Ljava/lang/String;)V"");
        int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, ""java/io/PrintStream"", ""print"", ""(Ljava/lang/String;)V"");
        for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) {
            MethodInfo method = (MethodInfo) i.next();
            if (method.getName().equals(""readConstant"")) continue;
            CodeAttribute attribute = method.getCodeAttribute();
            ArrayList instructions = new ArrayList(10);
            byte[] operands;
            operands = new byte[2];
            NetByte.intToPair(fieldRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(""getstatic""), 0, operands, false));
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(""dup""), 0, null, false));
            instructions.add(Instruction.appropriateLdc(constantIndex, false));
            operands = new byte[2];
            NetByte.intToPair(printRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(""invokevirtual""), 0, operands, false));
            instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false));
            operands = new byte[2];
            NetByte.intToPair(printlnRefIndex, operands, 0);
            instructions.add(new Instruction(OpCode.getOpCodeByMnemonic(""invokevirtual""), 0, operands, false));
            attribute.insertInstructions(0, 0, instructions);
            attribute.codeCheck();
        }
        BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]));
        writer.writeClass(outStream);
        outStream.close();
    }
","    public static int executeNoQuery(String strStatement) throws SQLException {
        MyDBConnection myc = new MyDBConnection();
        myc.init();
        Statement statement = myc.getMyConnection().createStatement();
        try {
            int rows = statement.executeUpdate(strStatement);
            myc.myConnection.commit();
            return rows;
        } catch (SQLException e) {
            myc.myConnection.rollback();
            throw new SQLException(""rollback e close effettuato dopo "" + e.getMessage());
        } finally {
            myc.close();
        }
    }
",False
900223,23537684,665978,"    public static void copyResourceToFile(Class owningClass, String resourceName, File destinationDir) {
        final byte[] resourceBytes = readResource(owningClass, resourceName);
        final ByteArrayInputStream inputStream = new ByteArrayInputStream(resourceBytes);
        final File destinationFile = new File(destinationDir, resourceName);
        final FileOutputStream fileOutputStream;
        try {
            fileOutputStream = new FileOutputStream(destinationFile);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        try {
            IOUtils.copy(inputStream, fileOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900224,10161744,831649,"        private void checkSites() {
            Log.d(LOG_TAG, ""Updating sites: "" + sitesToCheck.keySet().toString());
            for (Map.Entry<Site, Item> entry : sitesToCheck.entrySet()) {
                final Site site = entry.getKey();
                final Item oldItem = entry.getValue();
                try {
                    final HttpGet req = new HttpGet(site.getUrl().toURI());
                    req.addHeader(""Cache-Control"", ""no-cache"");
                    req.addHeader(""Pragma"", ""no-cache"");
                    if (oldItem != null) {
                        final Date lastModified = oldItem.getTimestamp();
                        if (lastModified != null) {
                            req.addHeader(""If-Modified-Since"", Utils.formatRFC822Date(lastModified));
                        }
                    }
                    final HttpResponse response = httpClient.execute(req);
                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                        final FeedHandler handler = site.getHandler().newInstance();
                        final InputStream in = response.getEntity().getContent();
                        Xml.parse(in, site.getEncoding(), handler);
                        in.close();
                        notify(site, handler.getCurrentItem());
                    } else if (response.getStatusLine().getStatusCode() != 304) {
                        Log.e(LOG_TAG, ""HTTP request for "" + site.name() + "" failed: "" + response.getStatusLine().toString());
                    }
                } catch (Throwable e) {
                    Log.e(LOG_TAG, e.getMessage(), e);
                }
            }
        }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",False
900225,18741084,8596528,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    @Override
    public DaeScene loadScene(URL url) throws IOException, IncorrectFormatException, ParsingErrorException {
        NullArgumentException.check(url);
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        DaeScene scene = loadScene(url.openStream());
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (scene);
    }
",False
900226,12197342,3246556,"        public void mousePressed(MouseEvent e) {
            bannerLbl.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            HttpContext context = new BasicHttpContext();
            context.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
            HttpGet method = new HttpGet(bannerURL);
            try {
                HttpResponse response = ProxyManager.httpClient.execute(method, context);
                HttpEntity entity = response.getEntity();
                HttpHost host = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
                HttpUriRequest request = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
                String targetURL = host.toURI() + request.getURI();
                DesktopUtil.browseAndWarn(targetURL, bannerLbl);
                EntityUtils.consume(entity);
            } catch (Exception ex) {
                NotifyUtil.error(""Banner Error"", ""Could not open the default web browser."", ex, false);
            } finally {
                method.abort();
            }
            bannerLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
","    public static void copyFile(File source, String target) throws FileNotFoundException, IOException {
        File fout = new File(target);
        fout.mkdirs();
        fout.delete();
        fout = new File(target);
        FileChannel in = new FileInputStream(source).getChannel();
        FileChannel out = new FileOutputStream(target).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",False
900227,10055931,21461878,"    private static Vector<String> getIgnoreList() {
        try {
            URL url = DeclarationTranslation.class.getClassLoader().getResource(""ignorelist"");
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));
            Vector<String> ret = new Vector<String>();
            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                ret.add(line);
            }
            return ret;
        } catch (Exception e) {
            return null;
        }
    }
","    private boolean verifyAppId(String appid) {
        try {
            String urlstr = ""http://"" + appid + "".appspot.com"";
            URL url = new URL(urlstr);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                buf.append(line);
            }
            reader.close();
            return buf.toString().contains(""hyk-proxy"");
        } catch (Exception e) {
        }
        return false;
    }
",True
900228,9733447,420619,"    public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception {
        ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile));
        ZipEntry zipentry = zipinputstream.getNextEntry();
        int BUFFER_SIZE = 4096;
        while (zipentry != null) {
            String entryName = zipentry.getName();
            log.info(""<<<<<< ZipUtility.unzipFile - Extracting: "" + zipentry.getName());
            File newFile = null;
            if (destFile.isDirectory()) newFile = new File(destFile, entryName); else newFile = destFile;
            if (zipentry.isDirectory() || entryName.endsWith(File.separator + ""."")) {
                newFile.mkdirs();
            } else {
                ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);
                byte[] bufferArray = buffer.array();
                FileUtilities.createDirectory(newFile.getParentFile());
                FileChannel destinationChannel = new FileOutputStream(newFile).getChannel();
                while (true) {
                    buffer.clear();
                    int lim = zipinputstream.read(bufferArray);
                    if (lim == -1) break;
                    buffer.flip();
                    buffer.limit(lim);
                    destinationChannel.write(buffer);
                }
                destinationChannel.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        if (removeSrcFile) {
            if (zipFile.exists()) zipFile.delete();
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900229,8139665,22223563,"    public ActionResponse executeAction(ActionRequest request) throws Exception {
        BufferedReader in = null;
        try {
            CurrencyEntityManager em = new CurrencyEntityManager();
            String id = (String) request.getProperty(""ID"");
            CurrencyMonitor cm = getCurrencyMonitor(em, Long.valueOf(id));
            String code = cm.getCode();
            if (code == null || code.length() == 0) code = DEFAULT_SYMBOL;
            String tmp = URL.replace(""@"", code);
            ActionResponse resp = new ActionResponse();
            URL url = new URL(tmp);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder value = new StringBuilder();
                while (true) {
                    String line = in.readLine();
                    if (line == null) break;
                    value.append(line);
                }
                cm.setLastUpdateValue(new BigDecimal(value.toString()));
                cm.setLastUpdateTs(new Date());
                em.updateCurrencyMonitor(cm);
                resp.addResult(""CURRENCYMONITOR"", cm);
            } else {
                resp.setErrorCode(ActionResponse.GENERAL_ERROR);
                resp.setErrorMessage(""HTTP Error ["" + status + ""]"");
            }
            return resp;
        } catch (Exception e) {
            String st = MiscUtils.stackTrace2String(e);
            logger.error(st);
            throw e;
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
","    private String read(URL url) throws IOException {
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer text = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                text.append(line);
            }
            return text.toString();
        } finally {
            in.close();
        }
    }
",True
900230,7366470,3694549,"    public RFC1345List(URL url) {
        if (url == null) return;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(url.openStream())));
            final String linePattern = "" XX???????      HHHH    X"";
            String line;
            mnemos = new HashMap();
            nextline: while ((line = br.readLine()) != null) {
                if (line.length() < 9) continue nextline;
                if (line.charAt(7) == ' ' || line.charAt(8) != ' ') {
                    line = line.substring(0, 8) + ""        "" + line.substring(8);
                }
                if (line.length() < linePattern.length()) continue nextline;
                for (int i = 0; i < linePattern.length(); i++) {
                    char c = line.charAt(i);
                    switch(linePattern.charAt(i)) {
                        case ' ':
                            if (c != ' ') continue nextline;
                            break;
                        case 'X':
                            if (c == ' ') continue nextline;
                            break;
                        case '?':
                            break;
                        case 'H':
                            if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) ; else continue nextline;
                            break;
                        default:
                            throw new RuntimeException(""Pattern broken!"");
                    }
                }
                char c = (char) Integer.parseInt(line.substring(16, 20), 16);
                String mnemo = line.substring(1, 16).trim();
                if (mnemo.length() < 2) throw new RuntimeException();
                mnemos.put(mnemo, new Character(c));
            }
            br.close();
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    private File getTestFile() {
        final URL url = TestCrueLOG.class.getResource(FICHIER_TEST_XML);
        final File ctfaFile = new File(createTempDir(), ""resultat.rtfa.xml"");
        try {
            CtuluLibFile.copyStream(url.openStream(), new FileOutputStream(ctfaFile), true, true);
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
        return ctfaFile;
    }
",False
900231,21870536,6190163,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void xtest7() throws Exception {
        System.out.println(""Lowagie"");
        FileInputStream inputStream = new FileInputStream(""C:/Temp/arquivo.pdf"");
        PDFBoxManager manager = new PDFBoxManager();
        InputStream[] images = manager.toImage(inputStream, ""jpeg"");
        int count = 0;
        for (InputStream image : images) {
            FileOutputStream outputStream = new FileOutputStream(""C:/Temp/arquivo_"" + count + "".jpg"");
            IOUtils.copy(image, outputStream);
            count++;
            outputStream.close();
        }
        inputStream.close();
    }
",True
900232,10499553,10228411,"    private static InputStream connect(final String url) throws IOException {
        InputStream in = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            conn.setConnectTimeout(YahooGeocoding.connectTimeOut);
            conn.setReadTimeout(YahooGeocoding.readTimeOut);
            conn.setRequestProperty(""User-Agent"", YahooGeocoding.USER_AGENT);
            in = conn.getInputStream();
            return in;
        } catch (final IOException e) {
            Util.d(""problems connecting to geonames url "" + url + ""Exception:"" + e);
        }
        return in;
    }
","    public File createReadmeFile(File dir, MavenProject mavenProject) throws IOException {
        InputStream is = getClass().getResourceAsStream(""README.template"");
        StringWriter sw = new StringWriter();
        IOUtils.copy(is, sw);
        String content = sw.getBuffer().toString();
        content = StringUtils.replace(content, ""{project_name}"", mavenProject.getArtifactId());
        File readme = new File(dir, ""README.TXT"");
        FileUtils.writeStringToFile(readme, content);
        return readme;
    }
",False
900233,9062063,7020500,"    public String setEncryptedPassword(String rawPassword) {
        String out = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(rawPassword.getBytes());
            byte raw[] = md.digest();
            out = new String();
            for (int x = 0; x < raw.length; x++) {
                String hex2 = Integer.toHexString((int) raw[x] & 0xFF);
                if (1 == hex2.length()) {
                    hex2 = ""0"" + hex2;
                }
                out += hex2;
                int a = 1;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return out;
    }
","    public static URL[] getURLsForAllJars(URL url, File tmpDir) {
        FileInputStream fin = null;
        InputStream in = null;
        ZipInputStream zin = null;
        try {
            ArrayList array = new ArrayList();
            in = url.openStream();
            String fileName = url.getFile();
            int index = fileName.lastIndexOf('/');
            if (index != -1) {
                fileName = fileName.substring(index + 1);
            }
            final File f = createTempFile(fileName, in, tmpDir);
            fin = (FileInputStream) org.apache.axis2.java.security.AccessController.doPrivileged(new PrivilegedExceptionAction() {

                public Object run() throws FileNotFoundException {
                    return new FileInputStream(f);
                }
            });
            array.add(f.toURL());
            zin = new ZipInputStream(fin);
            ZipEntry entry;
            String entryName;
            while ((entry = zin.getNextEntry()) != null) {
                entryName = entry.getName();
                if ((entryName != null) && entryName.toLowerCase().startsWith(""lib/"") && entryName.toLowerCase().endsWith("".jar"")) {
                    String suffix = entryName.substring(4);
                    File f2 = createTempFile(suffix, zin, tmpDir);
                    array.add(f2.toURL());
                }
            }
            return (URL[]) array.toArray(new URL[array.size()]);
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (fin != null) {
                try {
                    fin.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (zin != null) {
                try {
                    zin.close();
                } catch (IOException e) {
                }
            }
        }
    }
",False
900234,22043834,7954779,"    public void _testConvertIntoOneFile() {
        File csvFile = new File(""C:/DE311/solution_workspace/WorkbookTaglib/WorkbookTagDemoWebapp/src/main/resources/csv/google.csv"");
        try {
            Charset guessedCharset = com.glaforge.i18n.io.CharsetToolkit.guessEncoding(csvFile, 4096);
            CSVReader reader = new CSVReader(new BufferedReader(new InputStreamReader(new FileInputStream(csvFile), guessedCharset)));
            Writer writer = new FileWriter(""/temp/test.html"");
            int nbLines = CsvConverterUtils.countLines(new BufferedReader(new FileReader(csvFile)));
            HtmlConverter conv = new HtmlConverter();
            conv.convert(reader, writer, nbLines);
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }
","    public void filter(File source, File destination, MNamespace mNamespace) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(source));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destination));
        int line = 0;
        int column = 0;
        Stack parseStateStack = new Stack();
        parseStateStack.push(new ParseState(mNamespace));
        for (Iterator i = codePieces.iterator(); i.hasNext(); ) {
            NamedCodePiece cp = (NamedCodePiece) i.next();
            while (line < cp.getStartLine()) {
                line++;
                column = 0;
                writer.write(reader.readLine());
                writer.newLine();
            }
            while (column < cp.getStartPosition()) {
                writer.write(reader.read());
                column++;
            }
            cp.write(writer, parseStateStack, column);
            while (line < cp.getEndLine()) {
                line++;
                column = 0;
                reader.readLine();
            }
            while (column < cp.getEndPosition()) {
                column++;
                reader.read();
            }
        }
        String data;
        while ((data = reader.readLine()) != null) {
            writer.write(data);
            writer.newLine();
        }
        reader.close();
        writer.close();
    }
",True
900235,13365065,21575638,"    public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException {
        URL url = urls[0];
        if (!url.getProtocol().equalsIgnoreCase(""http"")) {
            throw new DownloadException("" Only HTTP is supported in this version "");
        }
        if (!destinationFile.exists()) {
            try {
                destinationFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                throw new DownloadException(""Unable to download from URL : "" + url.toString());
            }
        }
        HeadMethod head = new HeadMethod(url.toString());
        HttpClient httpClient = new HttpClient();
        try {
            httpClient.executeMethod(head);
            Header[] headers = head.getResponseHeaders();
            for (Header header : headers) {
                System.out.println(header);
            }
            Header header = head.getResponseHeader(""Content-Length"");
            Object contentLength = header.getValue();
            Long fileLength = Long.parseLong(contentLength.toString());
            System.out.println(length + "" : "" + fileLength);
            GetMethod get = new GetMethod(url.toString());
            httpClient.executeMethod(get);
            InputStream ins = get.getResponseBodyAsStream();
            FileOutputStream fos = new FileOutputStream(destinationFile);
            IOUtils.copy(ins, fos);
            System.out.println("" DOWNLOADED FILE"");
        } catch (HttpException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
","    protected void writeGZippedBytes(byte array[], TupleOutput out) {
        if (array == null || array.length == 0) {
            out.writeBoolean(false);
            writeBytes(array, out);
            return;
        }
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(array.length);
            GZIPOutputStream gzout = new GZIPOutputStream(baos);
            ByteArrayInputStream bais = new ByteArrayInputStream(array);
            IOUtils.copyTo(bais, gzout);
            gzout.finish();
            gzout.close();
            bais.close();
            byte compressed[] = baos.toByteArray();
            if (compressed.length < array.length) {
                out.writeBoolean(true);
                writeBytes(compressed, out);
            } else {
                out.writeBoolean(false);
                writeBytes(array, out);
            }
        } catch (IOException err) {
            throw new RuntimeException(err);
        }
    }
",True
900236,21442625,941896,"    private void copyFile(String from, String to) throws Exception {
        URL monitorCallShellScriptUrl = Thread.currentThread().getContextClassLoader().getResource(from);
        File inScriptFile = null;
        try {
            inScriptFile = new File(monitorCallShellScriptUrl.toURI());
        } catch (URISyntaxException e) {
            throw e;
        }
        File outScriptFile = new File(to);
        FileChannel inChannel = new FileInputStream(inScriptFile).getChannel();
        FileChannel outChannel = new FileOutputStream(outScriptFile).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
        try {
            LinuxCommandExecutor cmdExecutor = new LinuxCommandExecutor();
            cmdExecutor.setWorkingDirectory(workingDirectory);
            cmdExecutor.runCommand(""chmod 777 "" + to);
        } catch (Exception e) {
            throw e;
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900237,16915670,19935037,"    public static byte[] resolveRef(String url) throws MalformedURLException, IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        URL addressurl = new URL(url);
        InputStream in = addressurl.openStream();
        BufferedReader bin = new BufferedReader(new InputStreamReader(in));
        int bufferSize = 4096;
        byte[] buffer = new byte[bufferSize];
        int bytesRead;
        while ((bytesRead = in.read(buffer, 0, bufferSize)) != -1) {
            out.write(buffer, 0, bytesRead);
            out.flush();
        }
        return out.toByteArray();
    }
","    public byte[] getByteCode() throws IOException {
        InputStream in = null;
        ByteArrayOutputStream buf = new ByteArrayOutputStream(2048);
        try {
            in = url.openStream();
            int b = in.read();
            while (b != -1) {
                buf.write(b);
                b = in.read();
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        return buf.toByteArray();
    }
",False
900238,18924485,21320070,"    public void processExplicitSchemaAndWSDL(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
        HashMap services = configContext.getAxisConfiguration().getServices();
        String filePart = req.getRequestURL().toString();
        String schema = filePart.substring(filePart.lastIndexOf(""/"") + 1, filePart.length());
        if ((services != null) && !services.isEmpty()) {
            Iterator i = services.values().iterator();
            while (i.hasNext()) {
                AxisService service = (AxisService) i.next();
                InputStream stream = service.getClassLoader().getResourceAsStream(""META-INF/"" + schema);
                if (stream != null) {
                    OutputStream out = res.getOutputStream();
                    res.setContentType(""text/xml"");
                    IOUtils.copy(stream, out, true);
                    return;
                }
            }
        }
    }
","    public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) {
            throw new IOException(""FileCopy: no such source file: "" + from_file.getPath());
        }
        if (!from_file.isFile()) {
            throw new IOException(""FileCopy: can't copy directory: "" + from_file.getPath());
        }
        if (!from_file.canRead()) {
            throw new IOException(""FileCopy: source file is unreadable: "" + from_file.getPath());
        }
        if (to_file.isDirectory()) {
            to_file = new File(to_file, from_file.getName());
        }
        if (to_file.exists()) {
            if (!to_file.canWrite()) {
                throw new IOException(""FileCopy: destination file is unwriteable: "" + to_file.getPath());
            }
            int choice = JOptionPane.showConfirmDialog(null, ""Overwrite existing file "" + to_file.getPath(), ""File Exists"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (choice != JOptionPane.YES_OPTION) {
                throw new IOException(""FileCopy: existing file was not overwritten."");
            }
        } else {
            String parent = to_file.getParent();
            if (parent == null) {
                parent = Globals.getDefaultPath();
            }
            File dir = new File(parent);
            if (!dir.exists()) {
                throw new IOException(""FileCopy: destination directory doesn't exist: "" + parent);
            }
            if (dir.isFile()) {
                throw new IOException(""FileCopy: destination is not a directory: "" + parent);
            }
            if (!dir.canWrite()) {
                throw new IOException(""FileCopy: destination directory is unwriteable: "" + parent);
            }
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900239,4988270,12660385,"    public static void resize(File originalFile, File resizedFile, int width, String format) throws IOException {
        if (format != null && ""gif"".equals(format.toLowerCase())) {
            resize(originalFile, resizedFile, width, 1);
            return;
        }
        FileInputStream fis = new FileInputStream(originalFile);
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        int readLength = -1;
        int bufferSize = 1024;
        byte bytes[] = new byte[bufferSize];
        while ((readLength = fis.read(bytes, 0, bufferSize)) != -1) {
            byteStream.write(bytes, 0, readLength);
        }
        byte[] in = byteStream.toByteArray();
        fis.close();
        byteStream.close();
        Image inputImage = Toolkit.getDefaultToolkit().createImage(in);
        waitForImage(inputImage);
        int imageWidth = inputImage.getWidth(null);
        if (imageWidth < 1) throw new IllegalArgumentException(""image width "" + imageWidth + "" is out of range"");
        int imageHeight = inputImage.getHeight(null);
        if (imageHeight < 1) throw new IllegalArgumentException(""image height "" + imageHeight + "" is out of range"");
        int height = -1;
        double scaleW = (double) imageWidth / (double) width;
        double scaleY = (double) imageHeight / (double) height;
        if (scaleW >= 0 && scaleY >= 0) {
            if (scaleW > scaleY) {
                height = -1;
            } else {
                width = -1;
            }
        }
        Image outputImage = inputImage.getScaledInstance(width, height, java.awt.Image.SCALE_DEFAULT);
        checkImage(outputImage);
        encode(new FileOutputStream(resizedFile), outputImage, format);
    }
","            @Override
            public boolean accept(File file) {
                if (file.getName().equals("".svn"")) {
                    return false;
                }
                final long modify = file.lastModified();
                final long time = DateUtils.toDate(""2012-03-21 17:43"", ""yyyy-MM-dd HH:mm"").getTime();
                if (modify >= time) {
                    if (file.isFile()) {
                        File f = new File(StringsUtils.replace(file.getAbsolutePath(), filePath2, filePath1));
                        f.getParentFile().mkdirs();
                        try {
                            IOUtils.copyFile(file, f);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        System.out.println(f.getName());
                    }
                }
                return true;
            }
",True
900240,555865,21803552,"    public void testServletTesterClient() throws Exception {
        String base_url = tester.createSocketConnector(true);
        URL url = new URL(base_url + ""/context/hello/info"");
        String result = IO.toString(url.openStream());
        assertEquals(""<h1>Hello Servlet</h1>"", result);
    }
","    public void doRender() throws IOException {
        File file = new File(fileName);
        if (!file.exists()) {
            logger.error(""Static resource not found: "" + fileName);
            isNotFound = true;
            return;
        }
        if (fileName.endsWith(""xml"") || fileName.endsWith(""asp"")) servletResponse.setContentType(""text/xml""); else if (fileName.endsWith(""css"")) servletResponse.setContentType(""text/css""); else if (fileName.endsWith(""js"")) servletResponse.setContentType(""text/javascript"");
        InputStream in = null;
        try {
            in = new FileInputStream(file);
            IOUtils.copy(in, servletResponse.getOutputStream());
            logger.debug(""Static resource rendered: "".concat(fileName));
        } catch (FileNotFoundException e) {
            logger.error(""Static resource not found: "" + fileName);
            isNotFound = true;
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",False
900241,9516458,6146146,"    public String getHash(String type, String text, String salt) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(type);
        byte[] hash = new byte[md.getDigestLength()];
        if (!salt.isEmpty()) {
            md.update(salt.getBytes(""iso-8859-1""), 0, salt.length());
        }
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        hash = md.digest();
        return convertToHex(hash);
    }
","    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",True
900242,792644,6430125,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    protected Object openDialogBox(Control cellEditorWindow) {
        FileDialog dialog = new FileDialog(parent.getShell(), SWT.OPEN);
        dialog.setFilterExtensions(new String[] { ""*.jpg;*.JPG;*.JPEG;*.gif;*.GIF;*.png;*.PNG"", ""*.jpg;*.JPG;*.JPEG"", ""*.gif;*.GIF"", ""*.png;*.PNG"" });
        dialog.setFilterNames(new String[] { ""All"", ""Joint Photographic Experts Group (JPEG)"", ""Graphics Interchange Format (GIF)"", ""Portable Network Graphics (PNG)"" });
        String imagePath = dialog.open();
        if (imagePath == null) return null;
        IProject project = ProjectManager.getInstance().getCurrentProject();
        String projectFolderPath = project.getLocation().toOSString();
        File imageFile = new File(imagePath);
        String fileName = imageFile.getName();
        ImageData imageData = null;
        try {
            imageData = new ImageData(imagePath);
        } catch (SWTException e) {
            UserErrorException error = new UserErrorException(PropertyHandler.getInstance().getProperty(""_invalid_image_title""), PropertyHandler.getInstance().getProperty(""_invalid_image_text""));
            UserErrorService.INSTANCE.showError(error);
            return null;
        }
        if (imageData == null) {
            UserErrorException error = new UserErrorException(PropertyHandler.getInstance().getProperty(""_invalid_image_title""), PropertyHandler.getInstance().getProperty(""_invalid_image_text""));
            UserErrorService.INSTANCE.showError(error);
            return null;
        }
        File copiedImageFile = new File(projectFolderPath + File.separator + imageFolderPath + File.separator + fileName);
        if (copiedImageFile.exists()) {
            Path path = new Path(copiedImageFile.getPath());
            copiedImageFile = new File(projectFolderPath + File.separator + imageFolderPath + File.separator + UUID.randomUUID().toString() + ""."" + path.getFileExtension());
        }
        try {
            copiedImageFile.createNewFile();
        } catch (IOException e1) {
            ExceptionHandlingService.INSTANCE.handleException(e1);
            copiedImageFile = null;
        }
        if (copiedImageFile == null) {
            copiedImageFile = new File(projectFolderPath + File.separator + imageFolderPath + File.separator + UUID.randomUUID().toString());
            try {
                copiedImageFile.createNewFile();
            } catch (IOException e) {
                ExceptionHandlingService.INSTANCE.handleException(e);
                return """";
            }
        }
        FileReader in = null;
        FileWriter out = null;
        try {
            in = new FileReader(imageFile);
            out = new FileWriter(copiedImageFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            ExceptionHandlingService.INSTANCE.handleException(e);
            return """";
        } catch (IOException e) {
            ExceptionHandlingService.INSTANCE.handleException(e);
            return """";
        }
        return imageFolderPath + File.separator + copiedImageFile.getName();
    }
",True
900243,555928,11875445,"    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
","    private static void loadFromZip() {
        InputStream in = Resources.class.getResourceAsStream(""data.zip"");
        if (in == null) {
            return;
        }
        ZipInputStream zipIn = new ZipInputStream(in);
        try {
            while (true) {
                ZipEntry entry = zipIn.getNextEntry();
                if (entry == null) {
                    break;
                }
                String entryName = entry.getName();
                if (!entryName.startsWith(""/"")) {
                    entryName = ""/"" + entryName;
                }
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copy(zipIn, out);
                zipIn.closeEntry();
                FILES.put(entryName, out.toByteArray());
            }
            zipIn.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900244,16519742,9405784,"    public File getFile(String file) {
        DirProperties dp;
        List files = new ArrayList();
        for (int i = 0; i < locs.size(); i++) {
            dp = (DirProperties) locs.get(i);
            if (dp.isReadable()) {
                File g = new File(dp.getLocation() + slash() + file);
                if (g.exists()) files.add(g);
            }
        }
        if (files.size() == 0) {
            throw new UnsupportedOperationException(""at least one DirProperty should get 'read=true'"");
        } else if (files.size() == 1) {
            return (File) files.get(0);
        } else {
            File fromFile = (File) files.get(files.size() - 2);
            File toFile = (File) files.get(files.size() - 1);
            byte reading[] = new byte[2024];
            try {
                FileInputStream stream = new FileInputStream(fromFile);
                FileOutputStream outStr = new FileOutputStream(toFile);
                while (stream.read(reading) != -1) {
                    outStr.write(reading);
                }
            } catch (FileNotFoundException ex) {
                getLogger().severe(""FileNotFound: while copying from "" + fromFile + "" to "" + toFile);
            } catch (IOException ex) {
                getLogger().severe(""IOException: while copying from "" + fromFile + "" to "" + toFile);
            }
            return toFile;
        }
    }
","    public void startImport(ActionEvent evt) {
        final PsiExchange psiExchange = PsiExchangeFactory.createPsiExchange(IntactContext.getCurrentInstance().getSpringContext());
        for (final URL url : urlsToImport) {
            try {
                if (log.isInfoEnabled()) log.info(""Importing: "" + url);
                psiExchange.importIntoIntact(url.openStream());
            } catch (IOException e) {
                handleException(e);
                return;
            }
        }
        addInfoMessage(""File successfully imported"", Arrays.asList(urlsToImport).toString());
    }
",False
900245,20377776,3430781,"    public static void assertEquals(String xmlpath, Object actualObject) throws Exception {
        InputStreamReader isr;
        try {
            isr = new FileReader(xmlpath);
        } catch (FileNotFoundException e) {
            URL url = AssertHelper.class.getClassLoader().getResource(xmlpath);
            if (null != url) {
                try {
                    isr = new InputStreamReader(url.openStream());
                } catch (Exception e1) {
                    throw new AssertionFailedError(""Unable to find output xml : "" + xmlpath);
                }
            } else {
                throw new AssertionFailedError(""Could not read output xml : "" + xmlpath);
            }
        }
        DOMParser parser = new DOMParser();
        parser.parse(new InputSource(isr));
        Document document = parser.getDocument();
        try {
            assertEqual(document.getDocumentElement(), actualObject);
        } catch (AssertionFailedError e) {
            String message = null;
            if (null != e.getCause()) {
                message = e.getCause().getMessage();
            } else {
                message = e.getMessage();
            }
            StringBuffer sbf = new StringBuffer(message + "" \n "" + xmlpath);
            Iterator iter = nodestack.iterator();
            while (iter.hasNext()) {
                sbf.append("" -> "" + ((Object[]) iter.next())[0]);
                iter.remove();
            }
            AssertionFailedError a = new AssertionFailedError(sbf.toString());
            a.setStackTrace(e.getStackTrace());
            throw a;
        } catch (Exception e) {
            String message = null;
            if (null != e.getCause()) {
                message = e.getCause().getMessage();
            } else {
                message = e.getMessage();
            }
            StringBuffer sbf = new StringBuffer(message + "" \n "" + xmlpath);
            Iterator iter = nodestack.iterator();
            while (iter.hasNext()) {
                sbf.append("" -> "" + ((Object[]) iter.next())[0]);
                iter.remove();
            }
            Exception ex = new Exception(sbf.toString());
            ex.setStackTrace(e.getStackTrace());
            throw ex;
        }
    }
","    public static String getTextFromPart(Part part) {
        try {
            if (part != null && part.getBody() != null) {
                InputStream in = part.getBody().getInputStream();
                String mimeType = part.getMimeType();
                if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, ""text/*"")) {
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    IOUtils.copy(in, out);
                    in.close();
                    in = null;
                    String charset = getHeaderParameter(part.getContentType(), ""charset"");
                    if (charset != null) {
                        charset = CharsetUtil.toJavaCharset(charset);
                    }
                    if (charset == null) {
                        charset = ""ASCII"";
                    }
                    String result = out.toString(charset);
                    out.close();
                    return result;
                }
            }
        } catch (OutOfMemoryError oom) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + oom.toString());
        } catch (Exception e) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + e.toString());
        }
        return null;
    }
",False
900246,16001374,13915960,"    static void copyFile(File file, File destDir) {
        File destFile = new File(destDir, file.getName());
        if (destFile.exists() && (!destFile.canWrite())) {
            throw new SyncException(""Cannot overwrite "" + destFile + "" because "" + ""it is read-only"");
        }
        try {
            FileInputStream in = new FileInputStream(file);
            try {
                FileOutputStream out = new FileOutputStream(destFile);
                try {
                    byte[] buffer = new byte[BUFFER_SIZE];
                    int read;
                    while ((read = in.read(buffer)) != -1) {
                        out.write(buffer, 0, read);
                    }
                } finally {
                    out.close();
                }
            } finally {
                in.close();
            }
        } catch (IOException e) {
            throw new SyncException(""I/O error copying "" + file + "" to "" + destDir + "" (message: "" + e.getMessage() + "")"", e);
        }
        if (!destFile.setLastModified(file.lastModified())) {
            throw new SyncException(""Could not set last modified timestamp "" + ""of "" + destFile);
        }
    }
","    protected void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        FileInputStream fileInputStream = null;
        FileOutputStream fileOutputStream = null;
        try {
            fileInputStream = new FileInputStream(source);
            srcChannel = fileInputStream.getChannel();
            fileOutputStream = new FileOutputStream(destination);
            dstChannel = fileOutputStream.getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                fileInputStream.close();
            } catch (Exception exception) {
            }
            try {
                fileOutputStream.close();
            } catch (Exception exception) {
            }
        }
    }
",True
900247,10785896,21370186,"    private void createProperty(String objectID, String value, String propertyID, Long userID) throws JspTagException {
        ClassProperty classProperty = new ClassProperty(new Long(propertyID));
        String newValue = value;
        if (classProperty.getName().equals(""Password"")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""MD5"");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println(""jspShop: Could not get instance of MD5 algorithm. Please fix this!"" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException(""Error crypting password!: "" + e.getMessage());
            }
        }
        Properties properties = new Properties(new Long(objectID), userID);
        try {
            Property property = properties.create(new Long(propertyID), newValue);
            pageContext.setAttribute(getId(), property);
        } catch (CreateException e) {
            throw new JspTagException(""Could not create PropertyValue, CreateException: "" + e.getMessage());
        }
    }
","    public static void replaceAll(File file, String substitute, String substituteReplacement) throws IOException {
        log.debug(""Replace "" + substitute + "" by "" + substituteReplacement);
        Pattern pattern = Pattern.compile(substitute);
        FileInputStream fis = new FileInputStream(file);
        FileChannel fc = fis.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        Matcher matcher = pattern.matcher(cb);
        String outString = matcher.replaceAll(substituteReplacement);
        log.debug(outString);
        FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());
        PrintStream ps = new PrintStream(fos);
        ps.print(outString);
        ps.close();
        fos.close();
    }
",False
900248,8075978,13395834,"    public String getDataAsString(String url) throws RuntimeException {
        try {
            String responseBody = """";
            URLConnection urlc;
            if (!url.toUpperCase().startsWith(""HTTP://"") && !url.toUpperCase().startsWith(""HTTPS://"")) {
                urlc = tryOpenConnection(url);
            } else {
                urlc = new URL(url).openConnection();
            }
            urlc.setUseCaches(false);
            urlc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            urlc.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.9) Gecko/20100414 Iceweasel/3.5.9 (like Firefox/3.5.9)"");
            urlc.setRequestProperty(""Accept-Encoding"", ""gzip"");
            InputStreamReader re = new InputStreamReader(urlc.getInputStream());
            BufferedReader rd = new BufferedReader(re);
            String line = """";
            while ((line = rd.readLine()) != null) {
                responseBody += line;
                responseBody += ""\n"";
                line = null;
            }
            rd.close();
            re.close();
            return responseBody;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    TreeMap<Integer, Integer> initProperties(URL propurl) {
        String zoneFileName = null;
        String costFileName = null;
        String homesFileName = null;
        String jobsFileName = null;
        Properties props = new Properties();
        try {
            props.loadFromXML(propurl.openStream());
            zoneFileName = props.getProperty(""zoneFileName"");
            costFileName = props.getProperty(""costFileName"");
            homesFileName = props.getProperty(""homesFileName"");
            jobsFileName = props.getProperty(""jobsFileName"");
            maxiter = Integer.parseInt(props.getProperty(""maxiter""));
            mu = Double.parseDouble(props.getProperty(""mu""));
            theta = Double.parseDouble(props.getProperty(""theta""));
            threshold1 = Double.parseDouble(props.getProperty(""threshold1""));
            threshold2 = Double.parseDouble(props.getProperty(""threshold2""));
            verbose = Boolean.parseBoolean(props.getProperty(""verbose""));
        } catch (Exception xc) {
            xc.printStackTrace();
            System.exit(-1);
        }
        HashSet<Integer> zoneids = SomeIO.readZoneIDs(zoneFileName);
        numZ = zoneids.size();
        if (verbose) {
            System.out.println(""Data:"");
            System.out.println("" . #zones:"" + numZ);
        }
        int idx = 0;
        TreeMap<Integer, Integer> zonemap = new TreeMap<Integer, Integer>();
        for (Integer id : zoneids) zonemap.put(id, idx++);
        cij = SomeIO.readMatrix(costFileName, numZ, numZ);
        for (int i = 0; i < numZ; i++) {
            double mincij = Double.POSITIVE_INFINITY;
            for (int j = 0; j < numZ; j++) {
                double v = cij.get(i, j);
                if ((v < mincij) && (v > 0.0)) mincij = v;
            }
            if (cij.get(i, i) == 0.0) cij.set(i, i, mincij);
        }
        setupECij();
        double meanCost = 0.0;
        double stdCost = 0.0;
        for (int i = 0; i < numZ; i++) {
            for (int j = 0; j < numZ; j++) {
                double v = cij.get(i, j);
                meanCost += v;
                stdCost += v * v;
            }
        }
        meanCost = meanCost / (numZ * numZ);
        stdCost = stdCost / (numZ * numZ) - meanCost * meanCost;
        if (verbose) System.out.println("" . Travel costs  mean="" + meanCost + "" std.dev.= "" + Math.sqrt(stdCost));
        P = SomeIO.readZoneAttribute(numZ, homesFileName, zonemap);
        J = SomeIO.readZoneAttribute(numZ, jobsFileName, zonemap);
        double maxpj = 0.0;
        double sp = 0.0;
        double sj = 0.0;
        for (int i = 0; i < numZ; i++) {
            sp += P[i];
            sj += J[i];
            if (P[i] > maxpj) maxpj = P[i];
            if (J[i] > maxpj) maxpj = J[i];
        }
        if (Math.abs(sp - sj) > 1.0) {
            System.err.println(""Error: #jobs("" + sj + "")!= #homes("" + sp + "")"");
            System.exit(-1);
        }
        N = sp;
        if (verbose) System.out.println("" . Trip tables: #jobs=#homes= "" + N);
        return zonemap;
    }
",False
900249,11290317,2469707,"    private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception {
        AbstractSRLParser labeler = null;
        AbstractDecoder[] decoder = null;
        if (flag == SRLParser.FLAG_TRAIN_LEXICON) {
            System.out.println(""\n* Save lexica"");
            labeler = new SRLParser(flag, s_featureXml);
        } else if (flag == SRLParser.FLAG_TRAIN_INSTANCE) {
            System.out.println(""\n* Print training instances"");
            System.out.println(""- loading lexica"");
            labeler = new SRLParser(flag, t_xml, s_lexiconFiles);
        } else if (flag == SRLParser.FLAG_TRAIN_BOOST) {
            System.out.println(""\n* Train boost"");
            decoder = new AbstractDecoder[m_model.length];
            for (int i = 0; i < decoder.length; i++) decoder[i] = new OneVsAllDecoder((OneVsAllModel) m_model[i]);
            labeler = new SRLParser(flag, t_xml, t_map, decoder);
        }
        AbstractReader<DepNode, DepTree> reader = new SRLReader(s_trainFile, true);
        DepTree tree;
        int n;
        labeler.setLanguage(s_language);
        reader.setLanguage(s_language);
        for (n = 0; (tree = reader.nextTree()) != null; n++) {
            labeler.parse(tree);
            if (n % 1000 == 0) System.out.printf(""\r- parsing: %dK"", n / 1000);
        }
        System.out.println(""\r- labeling: "" + n);
        if (flag == SRLParser.FLAG_TRAIN_LEXICON) {
            System.out.println(""- labeling"");
            labeler.saveTags(s_lexiconFiles);
            t_xml = labeler.getSRLFtrXml();
        } else if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) {
            a_yx = labeler.a_trans;
            zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE));
            IOUtils.copy(new FileInputStream(s_featureXml), zout);
            zout.closeArchiveEntry();
            for (String lexicaFile : s_lexiconFiles) {
                zout.putArchiveEntry(new JarArchiveEntry(lexicaFile));
                IOUtils.copy(new FileInputStream(lexicaFile), zout);
                zout.closeArchiveEntry();
            }
            if (flag == SRLParser.FLAG_TRAIN_INSTANCE) t_map = labeler.getSRLFtrMap();
        }
    }
","    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.addHeader(""Cache-Control"", ""max-age="" + Constants.HTTP_CACHE_SECONDS);
        String uuid = req.getRequestURI().substring(req.getRequestURI().indexOf(Constants.SERVLET_FULL_PREFIX) + Constants.SERVLET_FULL_PREFIX.length() + 1);
        boolean notScale = ClientUtils.toBoolean(req.getParameter(Constants.URL_PARAM_NOT_SCALE));
        ServletOutputStream os = resp.getOutputStream();
        if (uuid != null && !"""".equals(uuid)) {
            try {
                String mimetype = fedoraAccess.getMimeTypeForStream(uuid, FedoraUtils.IMG_FULL_STREAM);
                if (mimetype == null) {
                    mimetype = ""image/jpeg"";
                }
                ImageMimeType loadFromMimeType = ImageMimeType.loadFromMimeType(mimetype);
                if (loadFromMimeType == ImageMimeType.JPEG || loadFromMimeType == ImageMimeType.PNG) {
                    StringBuffer sb = new StringBuffer();
                    sb.append(config.getFedoraHost()).append(""/objects/"").append(uuid).append(""/datastreams/IMG_FULL/content"");
                    InputStream is = RESTHelper.get(sb.toString(), config.getFedoraLogin(), config.getFedoraPassword(), false);
                    if (is == null) {
                        return;
                    }
                    try {
                        IOUtils.copyStreams(is, os);
                    } catch (IOException e) {
                        resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                        LOGGER.error(""Unable to open full image."", e);
                    } finally {
                        os.flush();
                        if (is != null) {
                            try {
                                is.close();
                            } catch (IOException e) {
                                resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                                LOGGER.error(""Unable to close stream."", e);
                            } finally {
                                is = null;
                            }
                        }
                    }
                } else {
                    Image rawImg = KrameriusImageSupport.readImage(uuid, FedoraUtils.IMG_FULL_STREAM, this.fedoraAccess, 0, loadFromMimeType);
                    BufferedImage scaled = null;
                    if (!notScale) {
                        scaled = KrameriusImageSupport.getSmallerImage(rawImg, 1250, 1000);
                    } else {
                        scaled = KrameriusImageSupport.getSmallerImage(rawImg, 2500, 2000);
                    }
                    KrameriusImageSupport.writeImageToStream(scaled, ""JPG"", os);
                    resp.setContentType(ImageMimeType.JPEG.getValue());
                    resp.setStatus(HttpURLConnection.HTTP_OK);
                }
            } catch (IOException e) {
                resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                LOGGER.error(""Unable to open full image."", e);
            } catch (XPathExpressionException e) {
                resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                LOGGER.error(""Unable to create XPath expression."", e);
            } finally {
                os.flush();
            }
        }
    }
",True
900250,15183953,15113437,"        private byte[] cacheInputStream(URL url) throws IOException {
            InputStream ins = url.openStream();
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            byte[] buf = new byte[256];
            while (true) {
                int n = ins.read(buf);
                if (n == -1) break;
                bout.write(buf, 0, n);
            }
            return bout.toByteArray();
        }
","    protected void loadUrl(URL url) throws BuildException {
        Properties props = new Properties();
        log(""Loading "" + url, Project.MSG_VERBOSE);
        try {
            InputStream is = url.openStream();
            try {
                loadProperties(props, is, url.getFile().endsWith("".xml""));
            } finally {
                if (is != null) {
                    is.close();
                }
            }
            addProperties(props);
        } catch (IOException ex) {
            throw new BuildException(ex, getLocation());
        }
    }
",False
900251,15904654,16951197,"    protected static DynamicJasperDesign generateJasperDesign(DynamicReport dr) throws CoreException {
        DynamicJasperDesign jd = null;
        try {
            if (dr.getTemplateFileName() != null) {
                log.info(""loading template file: "" + dr.getTemplateFileName());
                log.info(""Attemping to find the file directly in the file system..."");
                File file = new File(dr.getTemplateFileName());
                if (file.exists()) {
                    JasperDesign jdesign = JRXmlLoader.load(file);
                    jd = DJJRDesignHelper.downCast(jdesign, dr);
                } else {
                    log.info(""Not found: Attemping to find the file in the classpath..."");
                    URL url = DynamicJasperHelper.class.getClassLoader().getResource(dr.getTemplateFileName());
                    JasperDesign jdesign = JRXmlLoader.load(url.openStream());
                    jd = DJJRDesignHelper.downCast(jdesign, dr);
                }
                JasperDesignHelper.populateReportOptionsFromDesign(jd, dr);
            } else {
                jd = DJJRDesignHelper.getNewDesign(dr);
            }
            registerParameters(jd, dr);
        } catch (JRException e) {
            throw new CoreException(e.getMessage(), e);
        } catch (IOException e) {
            throw new CoreException(e.getMessage(), e);
        }
        return jd;
    }
","    public void testReleaseOnEntityWriteTo() throws Exception {
        HttpParams params = defaultParams.copy();
        ConnManagerParams.setMaxTotalConnections(params, 1);
        ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(1));
        ThreadSafeClientConnManager mgr = createTSCCM(params, null);
        assertEquals(0, mgr.getConnectionsInPool());
        DefaultHttpClient client = new DefaultHttpClient(mgr, params);
        HttpGet httpget = new HttpGet(""/random/20000"");
        HttpHost target = getServerHttp();
        HttpResponse response = client.execute(target, httpget);
        ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null);
        try {
            connreq.getConnection(250, TimeUnit.MILLISECONDS);
            fail(""ConnectionPoolTimeoutException should have been thrown"");
        } catch (ConnectionPoolTimeoutException expected) {
        }
        HttpEntity e = response.getEntity();
        assertNotNull(e);
        ByteArrayOutputStream outsteam = new ByteArrayOutputStream();
        e.writeTo(outsteam);
        assertEquals(1, mgr.getConnectionsInPool());
        connreq = mgr.requestConnection(new HttpRoute(target), null);
        ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS);
        mgr.releaseConnection(conn, -1, null);
        mgr.shutdown();
    }
",False
900252,9830269,2199598,"                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
","    public static void copyFile(File file, String pathExport) throws IOException {
        File out = new File(pathExport);
        FileChannel sourceChannel = new FileInputStream(file).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",True
900253,479674,20836131,"    public static synchronized String getSequenceNumber(String SequenceName) {
        String result = ""0"";
        Connection conn = null;
        Statement ps = null;
        ResultSet rs = null;
        try {
            conn = TPCW_Database.getConnection();
            conn.setAutoCommit(false);
            String sql = ""select num from sequence where name='"" + SequenceName + ""'"";
            ps = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = ps.executeQuery(sql);
            long num = 0;
            while (rs.next()) {
                num = rs.getLong(1);
                result = new Long(num).toString();
            }
            num++;
            sql = ""update sequence set num="" + num + "" where name='"" + SequenceName + ""'"";
            int res = ps.executeUpdate(sql);
            if (res == 1) {
                conn.commit();
            } else conn.rollback();
        } catch (Exception e) {
            System.out.println(""Error Happens when trying to obtain the senquence number"");
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) conn.close();
                if (rs != null) rs.close();
                if (ps != null) ps.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return result;
    }
","    public void modify(String strName, String strNewPass) {
        String str = ""update jb_user set V_PASSWORD =? where V_USERNAME =?"";
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = DbForumFactory.getConnection();
            con.setAutoCommit(false);
            pstmt = con.prepareStatement(str);
            pstmt.setString(1, SecurityUtil.md5ByHex(strNewPass));
            pstmt.setString(2, strName);
            pstmt.executeUpdate();
            con.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                con.rollback();
            } catch (SQLException e1) {
            }
        } finally {
            try {
                DbForumFactory.closeDB(null, pstmt, null, con);
            } catch (Exception e) {
            }
        }
    }
",True
900254,7842021,19295210,"    public FileInputStream execute() {
        FacesContext faces = FacesContext.getCurrentInstance();
        HttpServletResponse response = (HttpServletResponse) faces.getExternalContext().getResponse();
        String pdfPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath(""/pdf"");
        try {
            FileOutputStream outputStream = new FileOutputStream(pdfPath + ""/driveTogether.pdf"");
            PdfWriter writer = PdfWriter.getInstance(doc, outputStream);
            doc.open();
            String pfad = FacesContext.getCurrentInstance().getExternalContext().getRealPath(""/pdf/template.pdf"");
            logger.info(""Loading PDF-Template: "" + pfad);
            PdfReader reader = new PdfReader(pfad);
            PdfImportedPage page = writer.getImportedPage(reader, 1);
            PdfContentByte cb = writer.getDirectContent();
            cb.addTemplate(page, 0, 0);
            doHeader();
            doParagraph(trip, forUser);
            doc.close();
            fis = new FileInputStream(pdfPath + ""/driveTogether.pdf"");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return fis;
    }
","    public static String generateHash(String value) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(value.getBytes());
        } catch (NoSuchAlgorithmException e) {
            log.error(""Could not find the requested hash method: "" + e.getMessage());
        }
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        return hexString.toString();
    }
",False
900255,8255076,19423749,"    public static void main(String args[]) {
        if (args.length < 1) {
            printUsage();
        }
        URL url;
        BufferedReader in = null;
        try {
            url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line = null;
                while ((line = in.readLine()) != null) {
                    System.out.println(line);
                }
            } else {
                System.out.println(""Response code "" + responseCode + "" means there was an error reading url "" + args[0]);
            }
        } catch (IOException e) {
            System.err.println(""IOException attempting to read url "" + args[0]);
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ignore) {
                }
            }
        }
    }
","    public void removerQuestaoMultiplaEscolha(QuestaoMultiplaEscolha multiplaEscolha) throws ClassNotFoundException, SQLException {
        this.criaConexao(false);
        String sql = ""DELETE FROM \""Disciplina\""    "" + ""      WHERE ID_Disciplina =  ? )"";
        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt.executeUpdate();
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",False
900256,9061980,3419825,"    public static void copyFile(String source, String destination, TimeSlotTracker timeSlotTracker) {
        LOG.info(""copying ["" + source + ""] to ["" + destination + ""]"");
        BufferedInputStream sourceStream = null;
        BufferedOutputStream destStream = null;
        try {
            File destinationFile = new File(destination);
            if (destinationFile.exists()) {
                destinationFile.delete();
            }
            sourceStream = new BufferedInputStream(new FileInputStream(source));
            destStream = new BufferedOutputStream(new FileOutputStream(destinationFile));
            int readByte;
            while ((readByte = sourceStream.read()) > 0) {
                destStream.write(readByte);
            }
            Object[] arg = { destinationFile.getName() };
            String msg = timeSlotTracker.getString(""datasource.xml.copyFile.copied"", arg);
            LOG.fine(msg);
        } catch (Exception e) {
            Object[] expArgs = { e.getMessage() };
            String expMsg = timeSlotTracker.getString(""datasource.xml.copyFile.exception"", expArgs);
            timeSlotTracker.errorLog(expMsg);
            timeSlotTracker.errorLog(e);
        } finally {
            try {
                if (destStream != null) {
                    destStream.close();
                }
                if (sourceStream != null) {
                    sourceStream.close();
                }
            } catch (Exception e) {
                Object[] expArgs = { e.getMessage() };
                String expMsg = timeSlotTracker.getString(""datasource.xml.copyFile.exception"", expArgs);
                timeSlotTracker.errorLog(expMsg);
                timeSlotTracker.errorLog(e);
            }
        }
    }
","    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",True
900257,4684601,11872567,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
","    protected HttpResponseImpl makeRequest(final HttpMethod m, final String requestId) {
        try {
            HttpResponseImpl ri = new HttpResponseImpl();
            ri.setRequestMethod(m);
            ri.setResponseCode(_client.executeMethod(m));
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            IOUtils.copy(m.getResponseBodyAsStream(), bos);
            ri.setResponseBody(bos.toByteArray());
            notifyOfRequestSuccess(requestId, m, ri);
            return ri;
        } catch (HttpException ex) {
            notifyOfRequestFailure(requestId, m, ex);
        } catch (IOException ex) {
            notifyOfRequestFailure(requestId, m, ex);
        }
        return null;
    }
",True
900258,10949790,10176882,"    private void loadDBpediaOntology() {
        try {
            URL url = new URL(""http://downloads.dbpedia.org/3.6/dbpedia_3.6.owl.bz2"");
            InputStream is = new BufferedInputStream(url.openStream());
            CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(""bzip2"", is);
            dbPediaOntology = OWLManager.createOWLOntologyManager().loadOntologyFromOntologyDocument(in);
            reasoner = PelletReasonerFactory.getInstance().createNonBufferingReasoner(dbPediaOntology);
            reasoner.precomputeInferences(InferenceType.CLASS_HIERARCHY);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (CompressorException e) {
            e.printStackTrace();
        } catch (OWLOntologyCreationException e) {
            e.printStackTrace();
        }
    }
","    @SuppressWarnings(""unchecked"")
    protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception {
        File transformationFile = new File(xslBase, ""file-info.xsl"");
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.putAll(request.getParameterMap());
        params.put(""{"" + Definitions.CONFIGURATION_NAMESPACE + ""}configuration"", configuration);
        params.put(""{"" + Definitions.REQUEST_NAMESPACE + ""}request"", request);
        params.put(""{"" + Definitions.RESPONSE_NAMESPACE + ""}response"", response);
        params.put(""{"" + Definitions.SESSION_NAMESPACE + ""}session"", request.getSession());
        params.put(""{"" + Definitions.INFOFUZE_NAMESPACE + ""}development-mode"", new Boolean(Config.getInstance().isDevelopmentMode()));
        Transformer transformer = new Transformer();
        transformer.setTransformationFile(transformationFile);
        transformer.setParams(params);
        transformer.setTransformMode(TransformMode.NORMAL);
        transformer.setConfiguration(configuration);
        transformer.setErrorListener(new TransformationErrorListener(response));
        transformer.setLogInfo(false);
        DataSourceIf dataSource = new NullSource();
        Document fileInfoDoc = XmlUtils.getEmptyDOM();
        DOMResult result = new DOMResult(fileInfoDoc);
        transformer.transform((Source) dataSource, result);
        Element documentElement = fileInfoDoc.getDocumentElement();
        if (documentElement.getLocalName().equals(""null"")) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }
        InputStream is = null;
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String sourceType = XPathUtils.getStringValue(xpath, ""source-type"", documentElement, null);
            String location = XPathUtils.getStringValue(xpath, ""location"", documentElement, null);
            String fileName = XPathUtils.getStringValue(xpath, ""file-name"", documentElement, null);
            String mimeType = XPathUtils.getStringValue(xpath, ""mime-type"", documentElement, null);
            String encoding = XPathUtils.getStringValue(xpath, ""encoding"", documentElement, null);
            if (StringUtils.equals(sourceType, ""cifsSource"")) {
                String domain = XPathUtils.getStringValue(xpath, ""domain"", documentElement, null);
                String userName = XPathUtils.getStringValue(xpath, ""username"", documentElement, null);
                String password = XPathUtils.getStringValue(xpath, ""password"", documentElement, null);
                URI uri = new URI(location);
                if (StringUtils.isNotBlank(userName)) {
                    String userInfo = """";
                    if (StringUtils.isNotBlank(domain)) {
                        userInfo = userInfo + domain + "";"";
                    }
                    userInfo = userInfo + userName;
                    if (StringUtils.isNotBlank(password)) {
                        userInfo = userInfo + "":"" + password;
                    }
                    uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());
                }
                SmbFile smbFile = new SmbFile(uri.toURL());
                is = new SmbFileInputStream(smbFile);
            } else if (StringUtils.equals(sourceType, ""localFileSystemSource"")) {
                File file = new File(location);
                is = new FileInputStream(file);
            } else {
                logger.error(""Source type \"""" + ((sourceType != null) ? sourceType : """") + ""\"" not supported"");
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }
            if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) {
                response.setContentType(Definitions.MIMETYPE_BINARY);
            } else if (StringUtils.isBlank(encoding)) {
                response.setContentType(mimeType);
            } else {
                response.setContentType(mimeType + "";charset="" + encoding);
            }
            if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) {
                response.setHeader(""Content-Disposition"", ""attachment; filename="" + fileName);
            }
            IOUtils.copy(new BufferedInputStream(is), response.getOutputStream());
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
",False
900259,6403005,497400,"    @SuppressWarnings(""unchecked"")
    protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception {
        File transformationFile = null;
        String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT);
        if (StringUtils.isNotBlank(tr)) {
            transformationFile = new File(xslBase, tr);
            if (!transformationFile.isFile()) {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, ""Parameter \"""" + Definitions.REQUEST_PARAMNAME_XSLT + ""\"" "" + ""with value \"""" + tr + ""\"" refers to non existing file"");
                return;
            }
        }
        StreamResult result;
        ByteArrayOutputStream baos = null;
        if (isDevelopmentMode) {
            baos = new ByteArrayOutputStream();
            if (StringUtils.equals(action, ""get"")) {
                result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE));
            } else {
                result = new StreamResult(baos);
            }
        } else {
            if (StringUtils.equals(action, ""get"")) {
                result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE));
            } else {
                result = new StreamResult(response.getOutputStream());
            }
        }
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.putAll(request.getParameterMap());
        params.put(""{"" + Definitions.CONFIGURATION_NAMESPACE + ""}configuration"", configuration);
        params.put(""{"" + Definitions.REQUEST_NAMESPACE + ""}request"", request);
        params.put(""{"" + Definitions.RESPONSE_NAMESPACE + ""}response"", response);
        params.put(""{"" + Definitions.SESSION_NAMESPACE + ""}session"", request.getSession());
        params.put(""{"" + Definitions.INFOFUZE_NAMESPACE + ""}development-mode"", new Boolean(Config.getInstance().isDevelopmentMode()));
        Transformer transformer = new Transformer();
        transformer.setTransformationFile(transformationFile);
        transformer.setParams(params);
        transformer.setTransformMode(TransformMode.NORMAL);
        transformer.setConfiguration(configuration);
        transformer.setErrorListener(new TransformationErrorListener(response));
        transformer.setLogInfo(false);
        String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, ""xml"");
        String contentType;
        if (method.endsWith(""html"")) {
            contentType = Definitions.MIMETYPE_HTML;
        } else if (method.equals(""xml"")) {
            contentType = Definitions.MIMETYPE_XML;
        } else {
            contentType = Definitions.MIMETYPE_TEXTPLAIN;
        }
        String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, ""UTF-8"");
        response.setContentType(contentType + "";charset="" + encoding);
        DataSourceIf dataSource = new NullSource();
        transformer.transform((Source) dataSource, result);
        if (isDevelopmentMode) {
            IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream());
        }
    }
","    public TVRageShowInfo(String xmlShowName) {
        String[] tmp, tmp2;
        String line = """";
        this.usrShowName = xmlShowName;
        try {
            URL url = new URL(""http://www.tvrage.com/quickinfo.php?show="" + xmlShowName.replaceAll("" "", ""%20""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = in.readLine()) != null) {
                tmp = line.split(""@"");
                if (tmp[0].equals(""Show Name"")) showName = tmp[1];
                if (tmp[0].equals(""Show URL"")) showURL = tmp[1];
                if (tmp[0].equals(""Latest Episode"")) {
                    StringTokenizer st = new StringTokenizer(tmp[1], ""^"");
                    for (int i = 0; st.hasMoreTokens(); i++) {
                        if (i == 0) {
                            tmp2 = st.nextToken().split(""x"");
                            latestSeasonNum = tmp2[0];
                            latestEpisodeNum = tmp2[1];
                            if (latestSeasonNum.charAt(0) == '0') latestSeasonNum = latestSeasonNum.substring(1);
                        } else if (i == 1) latestTitle = st.nextToken().replaceAll(""&"", ""and""); else latestAirDate = st.nextToken();
                    }
                }
                if (tmp[0].equals(""Next Episode"")) {
                    StringTokenizer st = new StringTokenizer(tmp[1], ""^"");
                    for (int i = 0; st.hasMoreTokens(); i++) {
                        if (i == 0) {
                            tmp2 = st.nextToken().split(""x"");
                            nextSeasonNum = tmp2[0];
                            nextEpisodeNum = tmp2[1];
                            if (nextSeasonNum.charAt(0) == '0') nextSeasonNum = nextSeasonNum.substring(1);
                        } else if (i == 1) nextTitle = st.nextToken().replaceAll(""&"", ""and""); else nextAirDate = st.nextToken();
                    }
                }
                if (tmp[0].equals(""Status"")) status = tmp[1];
                if (tmp[0].equals(""Airtime"")) airTime = tmp[1];
            }
            if (airTime.length() != 0) {
                tmp = airTime.split("","");
                airTimeHour = tmp[1];
            }
            in.close();
            url = new URL(showURL);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = in.readLine()) != null) {
                if (line.indexOf(""<b>Latest Episode: </b>"") > -1) {
                    tmp = line.split(""'>"");
                    if (tmp[2].indexOf(':') > -1) {
                        tmp = tmp[2].split("":"");
                        latestSeriesNum = tmp[0];
                    }
                } else if (line.indexOf(""<b>Next Episode: </b>"") > -1) {
                    tmp = line.split(""'>"");
                    if (tmp[2].indexOf(':') > -1) {
                        tmp = tmp[2].split("":"");
                        nextSeriesNum = tmp[0];
                    }
                }
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",False
900260,15295408,5305335,"    private final long test(final boolean applyFilter, final int executionCount) throws NoSuchAlgorithmException, NoSuchPaddingException, FileNotFoundException, IOException, RuleLoadingException {
        final boolean stripHtmlEnabled = true;
        final boolean injectSecretTokensEnabled = true;
        final boolean encryptQueryStringsEnabled = true;
        final boolean protectParamsAndFormsEnabled = true;
        final boolean applyExtraProtectionForDisabledFormFields = true;
        final boolean applyExtraProtectionForReadonlyFormFields = false;
        final boolean applyExtraProtectionForRequestParamValueCount = false;
        final ContentInjectionHelper helper = new ContentInjectionHelper();
        final RuleFileLoader ruleFileLoaderModificationExcludes = new ClasspathZipRuleFileLoader();
        ruleFileLoaderModificationExcludes.setPath(RuleParameter.MODIFICATION_EXCLUDES_DEFAULT.getValue());
        final ContentModificationExcludeDefinitionContainer containerModExcludes = new ContentModificationExcludeDefinitionContainer(ruleFileLoaderModificationExcludes);
        containerModExcludes.parseDefinitions();
        helper.setContentModificationExcludeDefinitions(containerModExcludes);
        final AttackHandler attackHandler = new AttackHandler(null, 123, 600000, 100000, 300000, 300000, null, ""MOCK"", false, false, 0, false, false, Pattern.compile(""sjghggfakgfjagfgajgfjasgfs""), Pattern.compile(""sjghggfakgfjagfgajgfjasgfs""), true, new AttackMailHandler());
        final SessionCreationTracker sessionCreationTracker = new SessionCreationTracker(attackHandler, 0, 600000, 300000, 0, """", """", """", """");
        final RequestWrapper request = new RequestWrapper(new RequestMock(), helper, sessionCreationTracker, ""123.456.789.000"", false, true, true);
        final RuleFileLoader ruleFileLoaderResponseModifications = new ClasspathZipRuleFileLoader();
        ruleFileLoaderResponseModifications.setPath(RuleParameter.RESPONSE_MODIFICATIONS_DEFAULT.getValue());
        final ResponseModificationDefinitionContainer container = new ResponseModificationDefinitionContainer(ruleFileLoaderResponseModifications);
        container.parseDefinitions();
        final ResponseModificationDefinition[] responseModificationDefinitions = downCast(container.getAllEnabledRequestDefinitions());
        final List<Pattern> tmpPatternsToExcludeCompleteTag = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeCompleteScript = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeLinksWithinScripts = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToExcludeLinksWithinTags = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToCaptureLinksWithinScripts = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<Pattern> tmpPatternsToCaptureLinksWithinTags = new ArrayList<Pattern>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeCompleteTag = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeCompleteScript = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeLinksWithinScripts = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToExcludeLinksWithinTags = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToCaptureLinksWithinScripts = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<WordDictionary> tmpPrefiltersToCaptureLinksWithinTags = new ArrayList<WordDictionary>(responseModificationDefinitions.length);
        final List<Integer[]> tmpGroupNumbersToCaptureLinksWithinScripts = new ArrayList<Integer[]>(responseModificationDefinitions.length);
        final List<Integer[]> tmpGroupNumbersToCaptureLinksWithinTags = new ArrayList<Integer[]>(responseModificationDefinitions.length);
        for (int i = 0; i < responseModificationDefinitions.length; i++) {
            final ResponseModificationDefinition responseModificationDefinition = responseModificationDefinitions[i];
            if (responseModificationDefinition.isMatchesScripts()) {
                tmpPatternsToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPattern());
                tmpPrefiltersToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinScripts.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
            if (responseModificationDefinition.isMatchesTags()) {
                tmpPatternsToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPattern());
                tmpPrefiltersToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinTags.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
        }
        final Matcher[] matchersToExcludeCompleteTag = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteTag);
        final Matcher[] matchersToExcludeCompleteScript = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteScript);
        final Matcher[] matchersToExcludeLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinScripts);
        final Matcher[] matchersToExcludeLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinTags);
        final Matcher[] matchersToCaptureLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinScripts);
        final Matcher[] matchersToCaptureLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinTags);
        final WordDictionary[] prefiltersToExcludeCompleteTag = (WordDictionary[]) tmpPrefiltersToExcludeCompleteTag.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeCompleteScript = (WordDictionary[]) tmpPrefiltersToExcludeCompleteScript.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinTags = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinTags.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinTags = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinTags.toArray(new WordDictionary[0]);
        final int[][] groupNumbersToCaptureLinksWithinScripts = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinScripts);
        final int[][] groupNumbersToCaptureLinksWithinTags = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinTags);
        final Cipher cipher = CryptoUtils.getCipher();
        final CryptoKeyAndSalt key = CryptoUtils.generateRandomCryptoKeyAndSalt(false);
        Cipher.getInstance(""AES"");
        MessageDigest.getInstance(""SHA-1"");
        final ResponseWrapper response = new ResponseWrapper(new ResponseMock(), request, attackHandler, helper, false, ""___ENCRYPTED___"", cipher, key, ""___SEC-KEY___"", ""___SEC-VALUE___"", ""___PROT-KEY___"", false, false, false, false, ""123.456.789.000"", new HashSet(), prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, false, true, true, true, true, true, true, true, true, true, false, false, true, """", """", (short) 3, true, false, false);
        final List durations = new ArrayList();
        for (int i = 0; i < executionCount; i++) {
            final long start = System.currentTimeMillis();
            Reader reader = null;
            Writer writer = null;
            try {
                reader = new BufferedReader(new FileReader(this.htmlFile));
                writer = new FileWriter(this.outputFile);
                if (applyFilter) {
                    writer = new ResponseFilterWriter(writer, true, ""http://127.0.0.1/test/sample"", ""/test"", ""/test"", ""___SEC-KEY___"", ""___SEC-VALUE___"", ""___PROT-KEY___"", cipher, key, helper, ""___ENCRYPTED___"", request, response, stripHtmlEnabled, injectSecretTokensEnabled, protectParamsAndFormsEnabled, encryptQueryStringsEnabled, applyExtraProtectionForDisabledFormFields, applyExtraProtectionForReadonlyFormFields, applyExtraProtectionForRequestParamValueCount, prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, true, false, true, true, true, true, true, true, true, true, false, false, true, """", """", (short) 3, true, false);
                    writer = new BufferedWriter(writer);
                }
                char[] chars = new char[16 * 1024];
                int read;
                while ((read = reader.read(chars)) != -1) {
                    if (read > 0) {
                        writer.write(chars, 0, read);
                    }
                }
                durations.add(new Long(System.currentTimeMillis() - start));
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException ignored) {
                    }
                }
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (IOException ignored) {
                    }
                }
            }
        }
        long sum = 0;
        for (final Iterator iter = durations.iterator(); iter.hasNext(); ) {
            Long value = (Long) iter.next();
            sum += value.longValue();
        }
        return sum / durations.size();
    }
","    public void testRenderRules() {
        try {
            MappingManager manager = new MappingManager();
            OWLOntologyManager omanager = OWLManager.createOWLOntologyManager();
            OWLOntology srcOntology;
            OWLOntology targetOntology;
            manager.loadMapping(rulesDoc.toURL());
            srcOntology = omanager.loadOntologyFromPhysicalURI(srcURI);
            targetOntology = omanager.loadOntologyFromPhysicalURI(targetURI);
            manager.setSourceOntology(srcOntology);
            manager.setTargetOntology(targetOntology);
            Graph srcGraph = manager.getSourceGraph();
            Graph targetGraph = manager.getTargetGraph();
            System.out.println(""Starting to render..."");
            FlexGraphViewFactory factory = new FlexGraphViewFactory();
            factory.setColorScheme(ColorSchemes.BLUES);
            factory.visit(srcGraph);
            GraphView view = factory.getGraphView();
            GraphViewRenderer renderer = new FlexGraphViewRenderer();
            renderer.setGraphView(view);
            System.out.println(""View updated with graph..."");
            InputStream xmlStream = renderer.renderGraphView();
            StringWriter writer = new StringWriter();
            IOUtils.copy(xmlStream, writer);
            System.out.println(""Finished writing"");
            writer.close();
            System.out.println(""Finished render... XML is:"");
            System.out.println(writer.toString());
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (OWLOntologyCreationException e) {
            e.printStackTrace();
        }
    }
",True
900261,4336715,11113074,"    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    public void backupXML() {
        try {
            TimeStamp timeStamp = new TimeStamp();
            String fnameIn = this.fnameXML();
            String pathBackup = this.pathXML + ""\\Backup\\"";
            String fnameOut = fnameIn.substring(fnameIn.indexOf(this.fname), fnameIn.length());
            fnameOut = fnameOut.substring(0, fnameOut.indexOf(""xml""));
            fnameOut = pathBackup + fnameOut + timeStamp.now(""yyyyMMdd-kkmmss"") + "".xml"";
            System.out.println(""fnameIn: "" + fnameIn);
            System.out.println(""fnameOut: "" + fnameOut);
            FileChannel in = new FileInputStream(fnameIn).getChannel();
            FileChannel out = new FileOutputStream(fnameOut).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (Exception e) {
            central.inform(""ORM.backupXML: "" + e.toString());
        }
    }
",True
900262,17930257,392357,"                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setFileView(new ImageFileView());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(Resorces.this, ""Seleccione una imagen"");
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + file.separator + ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        String rutaRelativa = ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        imagen.setImagenURL(rutaRelativa);
                        System.out.println(rutaGlobal + "" "" + rutaRelativa);
                        buttonImagen.setIcon(new ImageIcon(getClass().getResource(""/data/icons/view_sidetreeOK.png"")));
                        labelImagenPreview.setIcon(gui.procesadorDatos.escalaImageIcon(imagen.getImagenURL()));
                    } else {
                    }
                }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",True
900263,1718589,9924413,"    @Override
    public ImageData getImageData(URL url) {
        InputStream in = null;
        try {
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""user-agent"", ""Tahiti/Alpha5x"");
            conn.setRequestProperty(""agent-system"", ""aglets"");
            conn.setAllowUserInteraction(true);
            conn.connect();
            in = conn.getInputStream();
            String type = conn.getContentType();
            int len = conn.getContentLength();
            if (len < 0) {
                len = in.available();
            }
            byte[] b = new byte[len];
            int off = 0;
            int n = 0;
            while (n < len) {
                int count = in.read(b, off + n, len - n);
                if (count < 0) {
                    throw new java.io.EOFException();
                }
                n += count;
            }
            in.close();
            return new AgletImageData(url, b, type);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
","    private void startOpening(final URL url) {
        final WebAccessor wa = this;
        openerThread = new Thread() {

            public void run() {
                iStream = null;
                try {
                    tryProxy = false;
                    URLConnection connection = url.openConnection();
                    if (connection instanceof HttpURLConnection) {
                        HttpURLConnection htc = (HttpURLConnection) connection;
                        contentLength = htc.getContentLength();
                    }
                    InputStream i = connection.getInputStream();
                    iStream = new LoggedInputStream(i, wa);
                } catch (ConnectException x) {
                    tryProxy = true;
                    exception = x;
                } catch (Exception x) {
                    exception = x;
                } finally {
                    if (dialog != null) {
                        Thread.yield();
                        dialog.setVisible(false);
                    }
                }
            }
        };
        openerThread.start();
    }
",False
900264,10193598,4948580,"    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");
            messageDiegest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Exception while encoding password"");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Exception while encoding password"");
            throw new Error(e);
        }
    }
","        public InputStream getResourceAsStream(String path) {
            try {
                URL url = getResource(path);
                if (url != null) {
                    return url.openStream();
                } else {
                    return null;
                }
            } catch (IOException ioe) {
                return null;
            }
        }
",False
900265,11305839,8841555,"    public boolean setCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {
        boolean inserto = false;
        try {
            stm = conexion.prepareStatement(""insert into clientes values( '"" + IDcliente + ""' , '"" + nombre.toUpperCase() + ""' , '"" + paterno.toUpperCase() + ""' , '"" + materno.toUpperCase() + ""' , '"" + ocupacion.toUpperCase() + ""' , '"" + rfc + ""' )"");
            stm.executeUpdate();
            conexion.commit();
            inserto = true;
        } catch (SQLException e) {
            System.out.println(""error al insertar registro en la tabla clientes general  "" + e.getMessage());
            try {
                conexion.rollback();
            } catch (SQLException ee) {
                System.out.println(ee.getMessage());
            }
            return inserto = false;
        }
        return inserto;
    }
","    public String getMd5CodeOf16(String str) {
        StringBuffer buf = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte b[] = md.digest();
            int i;
            buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } finally {
            return buf.toString().substring(8, 24);
        }
    }
",False
900266,12127276,17444336,"    public void testGetResource_FileOutsideOfClasspath() throws Exception {
        File temp = File.createTempFile(""dozerfiletest"", "".txt"");
        temp.deleteOnExit();
        String resourceName = ""file:"" + temp.getAbsolutePath();
        URL url = loader.getResource(resourceName);
        assertNotNull(""URL should not be null"", url);
        InputStream is = url.openStream();
        assertNotNull(""input stream should not be null"", is);
    }
","    public static synchronized String encrypt(String text) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return new BASE64Encoder().encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",False
900267,1327097,7103225,"    public String generateMappackMD5(File mapPackFile) throws IOException, NoSuchAlgorithmException {
        ZipFile zip = new ZipFile(mapPackFile);
        try {
            Enumeration<? extends ZipEntry> entries = zip.entries();
            MessageDigest md5Total = MessageDigest.getInstance(""MD5"");
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (entry.isDirectory()) continue;
                String name = entry.getName();
                if (name.toUpperCase().startsWith(""META-INF"")) continue;
                md5.reset();
                InputStream in = zip.getInputStream(entry);
                byte[] data = Utilities.getInputBytes(in);
                in.close();
                byte[] digest = md5.digest(data);
                log.trace(""Hashsum "" + Hex.encodeHexString(digest) + "" includes \"""" + name + ""\"""");
                md5Total.update(digest);
                md5Total.update(name.getBytes());
            }
            String md5sum = Hex.encodeHexString(md5Total.digest());
            log.trace(""md5sum of "" + mapPackFile.getName() + "": "" + md5sum);
            return md5sum;
        } finally {
            zip.close();
        }
    }
","    public void testGetWithKeepAlive() throws Exception {
        HttpGet request = new HttpGet(baseUri + ""/test"");
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
        response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
",False
900268,15889430,9872510,"    public Parameters getParameters(HttpExchange http) throws IOException {
        ParametersImpl params = new ParametersImpl();
        String query = null;
        if (http.getRequestMethod().equalsIgnoreCase(""GET"")) {
            query = http.getRequestURI().getRawQuery();
        } else if (http.getRequestMethod().equalsIgnoreCase(""POST"")) {
            InputStream in = new MaxInputStream(http.getRequestBody());
            if (in != null) {
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                IOUtils.copyTo(in, bytes);
                query = new String(bytes.toByteArray());
                in.close();
            }
        } else {
            throw new IOException(""Method not supported "" + http.getRequestMethod());
        }
        if (query != null) {
            for (String s : query.split(""[&]"")) {
                s = s.replace('+', ' ');
                int eq = s.indexOf('=');
                if (eq > 0) {
                    params.add(URLDecoder.decode(s.substring(0, eq), ""UTF-8""), URLDecoder.decode(s.substring(eq + 1), ""UTF-8""));
                }
            }
        }
        return params;
    }
","    private static String makeTempTraceFile(String base) throws IOException {
        File temp = File.createTempFile(base, "".trace"");
        temp.deleteOnExit();
        FileChannel dstChannel = new FileOutputStream(temp).getChannel();
        FileChannel srcChannel = new FileInputStream(base + "".key"").getChannel();
        long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        srcChannel = new FileInputStream(base + "".data"").getChannel();
        dstChannel.transferFrom(srcChannel, size, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return temp.getPath();
    }
",True
900269,11032545,16803474,"    @Test
    public void testCopyOverSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, TEST_DATA.length + Long.SIZE);
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
","    public static void copyFile(File source, File dest) throws Exception {
        FileInputStream fis = new FileInputStream(source);
        try {
            FileOutputStream fos = new FileOutputStream(dest);
            try {
                int read = fis.read();
                while (read != -1) {
                    fos.write(read);
                    read = fis.read();
                }
            } finally {
                fos.close();
            }
        } finally {
            fis.close();
        }
    }
",True
900270,5826730,17729553,"    private void copyFromZip(File zipFile) throws GLMRessourceManagerException {
        if (zipFile == null) throw new GLMRessourceZIPException(1);
        if (!zipFile.exists()) throw new GLMRessourceZIPException(2);
        int len = 0;
        byte[] buffer = ContentManager.getDefaultBuffer();
        try {
            ZipInputStream zip_in = new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile)));
            ZipEntry zipEntry;
            File rootDir = null;
            while ((zipEntry = zip_in.getNextEntry()) != null) {
                File destFile = new File(tempDirectory, zipEntry.getName());
                if (rootDir == null) rootDir = destFile.getParentFile();
                if (!zipEntry.isDirectory() && destFile.getParentFile().equals(rootDir)) {
                    if (!zipEntry.getName().equals(ContentManager.IMS_MANIFEST_FILENAME)) {
                        FileOutputStream file_out = new FileOutputStream(new File(tempDirectory, zipEntry.getName()));
                        while ((len = zip_in.read(buffer)) > 0) file_out.write(buffer, 0, len);
                        file_out.flush();
                        file_out.close();
                    }
                }
            }
            zip_in.close();
        } catch (Exception e) {
            throw new GLMRessourceZIPException(3);
        }
    }
","    public boolean clonarFichero(String rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        System.out.println(""*********** DENTRO DE 'clonarFichero' ***********"");
        boolean estado = false;
        try {
            FileInputStream entrada = new FileInputStream(rutaFicheroOrigen);
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = entrada.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            entrada.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",True
900271,3410039,9327524,"    public void fillTableValues() {
        java.util.ArrayList cpool = newgen.presentation.NewGenMain.getAppletInstance().getCataloguingPool();
        String xmlreq = AdministrationXMLGenerator.getInstance().getPoolChronologicalSubDivision(""4"", cpool);
        System.out.println(xmlreq);
        try {
            java.net.URL url = new java.net.URL(ResourceBundle.getBundle(""Administration"").getString(""ServerURL"") + ResourceBundle.getBundle(""Administration"").getString(""ServletSubPath"") + ""SubDivisionServlet"");
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            java.io.OutputStream dos = urlconn.getOutputStream();
            dos.write(xmlreq.getBytes());
            java.io.InputStream ios = urlconn.getInputStream();
            SAXBuilder saxb = new SAXBuilder();
            Document retdoc = saxb.build(ios);
            Element rootelement = retdoc.getRootElement();
            java.util.List onelist = rootelement.getChildren();
            for (int i = 0; i < onelist.size(); i++) {
                Element rec = (Element) onelist.get(i);
                Object[] r = new Object[7];
                String[] chronolib = new String[2];
                chronolib[0] = rec.getChild(""ChronologicalSubDivisionId"").getText();
                chronolib[1] = rec.getChild(""LibraryId"").getText();
                this.chronoid_libid.add(chronolib);
                r[0] = rec.getChild(""ChronologicalSubDivision"").getText();
                this.dtmSearch.addRow(r);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
","    @Test
    public void test01_ok_failed_500() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",False
900272,44823,13299924,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    private void foundNewVersion() {
        updater = new UpdaterView();
        updater.setLabelText(""Initiating Updater..."");
        updater.setProgress(0);
        updater.setLocationRelativeTo(null);
        updater.setVisible(true);
        URL pathUrl = ClassLoader.getSystemResource(""img/icon.png"");
        String path = pathUrl.toString();
        path = path.substring(4, path.length() - 14);
        try {
            file = new File(new URI(path));
            updaterFile = new File(new URI(path.substring(0, path.length() - 4) + ""Updater.jar""));
            if (updaterFile.exists()) {
                updaterFile.delete();
            }
            updater.setProgress(25);
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    try {
                        FileChannel in = (new FileInputStream(file)).getChannel();
                        FileChannel out = (new FileOutputStream(updaterFile)).getChannel();
                        in.transferTo(0, file.length(), out);
                        updater.setProgress(50);
                        in.close();
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    startUpdater();
                }
            });
        } catch (URISyntaxException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, ""Update error! Could not create Updater. Check folder permission."", ""Error"", JOptionPane.ERROR_MESSAGE);
        }
    }
",True
900273,13039812,5246170,"    public String getImageURL(String text) {
        String imgURL = """";
        try {
            URL url = new URL(""http://images.search.yahoo.com/search/images?p="" + URLEncoder.encode(text));
            URLConnection connection = url.openConnection();
            DataInputStream in = new DataInputStream(connection.getInputStream());
            String line;
            Pattern imgPattern = Pattern.compile(""isrc=\""([^\""]*)\"""");
            while ((line = in.readLine()) != null) {
                Matcher match = imgPattern.matcher(line);
                if (match.find()) {
                    imgURL = match.group(1);
                    break;
                }
            }
            in.close();
        } catch (Exception e) {
        }
        return imgURL;
    }
","    public static void fileCopy(String src, String dst) {
        try {
            FileInputStream fis = new FileInputStream(src);
            FileOutputStream fos = new FileOutputStream(dst);
            int read = -1;
            byte[] buf = new byte[8192];
            while ((read = fis.read(buf)) != -1) {
                fos.write(buf, 0, read);
            }
            fos.flush();
            fos.close();
            fis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900274,19366418,679959,"    public static Photo createPhoto(String title, String userLogin, String pathToPhoto, String basePathImage) throws NoSuchAlgorithmException, IOException {
        String id = CryptSHA1.genPhotoID(userLogin, title);
        String extension = pathToPhoto.substring(pathToPhoto.lastIndexOf("".""));
        String destination = basePathImage + id + extension;
        FileInputStream fis = new FileInputStream(pathToPhoto);
        FileOutputStream fos = new FileOutputStream(destination);
        FileChannel fci = fis.getChannel();
        FileChannel fco = fos.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        while (true) {
            int read = fci.read(buffer);
            if (read == -1) break;
            buffer.flip();
            fco.write(buffer);
            buffer.clear();
        }
        fci.close();
        fco.close();
        fos.close();
        fis.close();
        ImageIcon image;
        ImageIcon thumb;
        String destinationThumb = basePathImage + ""thumb/"" + id + extension;
        image = new ImageIcon(destination);
        int maxSize = 150;
        int origWidth = image.getIconWidth();
        int origHeight = image.getIconHeight();
        if (origWidth > origHeight) {
            thumb = new ImageIcon(image.getImage().getScaledInstance(maxSize, -1, Image.SCALE_SMOOTH));
        } else {
            thumb = new ImageIcon(image.getImage().getScaledInstance(-1, maxSize, Image.SCALE_SMOOTH));
        }
        BufferedImage bi = new BufferedImage(thumb.getIconWidth(), thumb.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.getGraphics();
        g.drawImage(thumb.getImage(), 0, 0, null);
        try {
            ImageIO.write(bi, ""JPG"", new File(destinationThumb));
        } catch (IOException ioe) {
            System.out.println(""Error occured saving thumbnail"");
        }
        Photo photo = new Photo(id);
        photo.setTitle(title);
        photo.basePathImage = basePathImage;
        return photo;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900275,810884,22841783,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public GridDirectoryList(URL url) throws McIDASException {
        try {
            urlc = (AddeURLConnection) url.openConnection();
            inputStream = new DataInputStream(new BufferedInputStream(urlc.getInputStream()));
        } catch (IOException e) {
            throw new McIDASException(""Error opening URL for grids:"" + e);
        }
        readDirectory();
    }
",False
900276,3459078,3673887,"    public static void copyFile(File source, File target) {
        try {
            target.getParentFile().mkdirs();
            byte[] buffer = new byte[4096];
            int len = 0;
            FileInputStream in = new FileInputStream(source);
            FileOutputStream out = new FileOutputStream(target);
            while ((len = in.read(buffer)) != -1) out.write(buffer, 0, len);
            in.close();
            out.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
","    public static final void copyFile(File source, File destination) throws IOException {
        FileChannel sourceChannel = new FileInputStream(source).getChannel();
        FileChannel targetChannel = new FileOutputStream(destination).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
        sourceChannel.close();
        targetChannel.close();
    }
",True
900277,18048830,22717352,"    public void add(AddInterceptorChain chain, Entry entry, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + this.dbInsertName);
        if (con == null) {
            throw new LDAPException(""Operations Error"", LDAPException.OPERATIONS_ERROR, ""No Database Connection"");
        }
        try {
            con.setAutoCommit(false);
            HashMap<String, String> db2ldap = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_DB2LDAP + this.dbInsertName);
            String uid = ((RDN) (new DN(entry.getEntry().getDN())).getRDNs().get(0)).getValue();
            PreparedStatement ps = con.prepareStatement(this.insertSQL);
            for (int i = 0; i < this.fields.size(); i++) {
                String field = this.fields.get(i);
                if (field.equals(this.rdnField)) {
                    ps.setString(i + 1, uid);
                } else {
                    ps.setString(i + 1, entry.getEntry().getAttribute(db2ldap.get(field)).getStringValue());
                }
            }
            ps.executeUpdate();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException(""Could not delete entry or rollback transaction"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException(""Could not delete entry"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
","    public void add(AddInterceptorChain chain, Entry entry, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + ""LDAPBaseServer"");
        if (con == null) {
            throw new LDAPException(""Operations Error"", LDAPException.OPERATIONS_ERROR, ""No Database Connection"");
        }
        try {
            con.setAutoCommit(false);
            HashMap<String, String> db2ldap = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_DB2LDAP + ""LDAPBaseServer"");
            PreparedStatement ps = con.prepareStatement(""INSERT INTO USERS (id,firstname,lastname,username) VALUES (?,?,?,?)"");
            ps.setInt(1, 5);
            ps.setString(2, entry.getEntry().getAttribute(db2ldap.get(""firstname"")).getStringValue());
            ps.setString(3, entry.getEntry().getAttribute(db2ldap.get(""lastname"")).getStringValue());
            ps.setString(4, entry.getEntry().getAttribute(db2ldap.get(""username"")).getStringValue());
            ps.executeUpdate();
            ps.close();
            ps = con.prepareStatement(""SELECT id FROM LOCATIONS WHERE name=?"");
            PreparedStatement inst = con.prepareStatement(""INSERT INTO LOCATIONMAP (person,location) VALUES (?,?)"");
            LDAPAttribute l = entry.getEntry().getAttribute(db2ldap.get(""name""));
            if (l == null) {
                con.rollback();
                throw new LDAPException(""Location is required"", LDAPException.OBJECT_CLASS_VIOLATION, ""Location is required"");
            }
            String[] vals = l.getStringValueArray();
            for (int i = 0; i < vals.length; i++) {
                ps.setString(1, vals[i]);
                ResultSet rs = ps.executeQuery();
                if (!rs.next()) {
                    con.rollback();
                    throw new LDAPException(""Location "" + vals[i] + "" does not exist"", LDAPException.OBJECT_CLASS_VIOLATION, ""Location "" + vals[i] + "" does not exist"");
                }
                inst.setInt(1, 5);
                inst.setInt(2, rs.getInt(""id""));
                inst.executeUpdate();
            }
            ps.close();
            inst.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException(""Could not add entry or rollback transaction"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException(""Could not add entry"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
",True
900278,4822222,12760982,"    public static void copy(String srcFileName, String destFileName) throws IOException {
        if (srcFileName == null) {
            throw new IllegalArgumentException(""srcFileName is null"");
        }
        if (destFileName == null) {
            throw new IllegalArgumentException(""destFileName is null"");
        }
        FileChannel src = null;
        FileChannel dest = null;
        try {
            src = new FileInputStream(srcFileName).getChannel();
            dest = new FileOutputStream(destFileName).getChannel();
            long n = src.size();
            MappedByteBuffer buf = src.map(FileChannel.MapMode.READ_ONLY, 0, n);
            dest.write(buf);
        } finally {
            if (dest != null) {
                try {
                    dest.close();
                } catch (IOException e1) {
                }
            }
            if (src != null) {
                try {
                    src.close();
                } catch (IOException e1) {
                }
            }
        }
    }
","    public static String MD5Encode(String password) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(password.getBytes());
            final byte[] digest = messageDigest.digest();
            final StringBuilder buf = new StringBuilder(digest.length * 2);
            final char[] HEX_DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            for (int j = 0; j < digest.length; j++) {
                buf.append(HEX_DIGITS[(digest[j] >> 4) & 0x0f]);
                buf.append(HEX_DIGITS[digest[j] & 0x0f]);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            return password;
        }
    }
",False
900279,7132186,6771711,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    @SuppressWarnings(""deprecation"")
    public static final ReturnCode runCommand(IOBundle io, String[] args) {
        if ((args.length < 3) || (args.length > 4)) return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, ""Invalid number of arguments: "" + args.length);
        if ((args.length == 3) && (!args[1].equals(""show""))) return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, ""Invalid number of arguments: "" + args.length);
        if ((args.length == 4) && (!(args[2].equals(""training"") || args[2].equals(""log"") || args[2].equals(""configuration"")))) return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, ""Access denied to directory: "" + args[2]);
        if (args[1].equals(""open"")) {
            final String fileName = args[2] + ""/"" + args[3];
            final File file = new File(fileName);
            FileInputStream fis = null;
            BufferedInputStream bis = null;
            DataInputStream dis = null;
            try {
                fis = new FileInputStream(file);
                bis = new BufferedInputStream(fis);
                dis = new DataInputStream(bis);
                io.println(fileName);
                io.println(file.length() + "" bytes"");
                while (dis.available() != 0) {
                    io.println(dis.readLine());
                }
                fis.close();
                bis.close();
                dis.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_NOT_FOUND, ""File "" + fileName + "" doesn't exist"");
            } catch (IOException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Error reading File "" + fileName);
            }
        } else if (args[1].equals(""save"")) {
            final String fileName = args[2] + ""/"" + args[3];
            String line;
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
                line = io.readLine();
                int count = Integer.parseInt(line.trim());
                while (count > 0) {
                    out.write(io.read());
                    count = count - 1;
                }
                out.flush();
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Error writing File "" + fileName);
            }
        } else if (args[1].equals(""delete"")) {
            final String fileName = args[2] + ""/"" + args[3];
            final File file = new File(fileName);
            if (!file.exists()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""No such file or directory: "" + fileName);
            if (!file.canWrite()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""File is write-protected: "" + fileName);
            if (file.isDirectory()) {
                String[] files = file.list();
                if (files.length > 0) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Directory is not empty: "" + fileName);
            }
            if (!file.delete()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Deletion failed: "" + fileName);
        } else if (args[1].equals(""show"")) {
            File directory = new File(args[2]);
            String[] files;
            if ((!directory.isDirectory()) || (!directory.exists())) {
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""No such directory: "" + directory);
            }
            int count = 0;
            files = directory.list();
            io.println(""Files in directory \"""" + directory + ""\"":"");
            for (int i = 0; i < files.length; i++) {
                directory = new File(files[i]);
                if (!directory.isDirectory()) {
                    count++;
                    io.println("" "" + files[i]);
                }
            }
            io.println(""Total "" + count + "" files"");
        } else return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, ""Unrecognized command"");
        return ReturnCode.makeReturnCode(ReturnCode.RET_OK);
    }
",True
900280,1189509,489386,"    public void testRoundTrip_1(String resource) throws Exception {
        long start1 = System.currentTimeMillis();
        File originalFile = File.createTempFile(""RoundTripTest"", ""testRoundTrip_1"");
        FileOutputStream fos = new FileOutputStream(originalFile);
        IOUtils.copy(getClass().getResourceAsStream(resource), fos);
        fos.close();
        long start2 = System.currentTimeMillis();
        IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel());
        long start3 = System.currentTimeMillis();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel wbc = Channels.newChannel(baos);
        long start4 = System.currentTimeMillis();
        Walk.through(isoFile);
        long start5 = System.currentTimeMillis();
        isoFile.getBox(wbc);
        wbc.close();
        long start6 = System.currentTimeMillis();
        System.err.println(""Preparing tmp copy took: "" + (start2 - start1) + ""ms"");
        System.err.println(""Parsing took           : "" + (start3 - start2) + ""ms"");
        System.err.println(""Writing took           : "" + (start6 - start3) + ""ms"");
        System.err.println(""Walking took           : "" + (start5 - start4) + ""ms"");
        byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource));
        byte[] b = baos.toByteArray();
        Assert.assertArrayEquals(a, b);
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",True
900281,44823,19579830,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public static void copy(File toCopy, File dest) throws IOException {
        FileInputStream src = new FileInputStream(toCopy);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            while (src.available() > 0) {
                out.write(src.read());
            }
        } finally {
            src.close();
            out.close();
        }
    }
",True
900282,23370708,12524506,"    private final long test(final boolean applyFilter, final int executionCount) throws NoSuchAlgorithmException, NoSuchPaddingException, FileNotFoundException, IOException, RuleLoadingException {
        final boolean stripHtmlEnabled = true;
        final boolean injectSecretTokensEnabled = true;
        final boolean encryptQueryStringsEnabled = true;
        final boolean protectParamsAndFormsEnabled = true;
        final boolean applyExtraProtectionForDisabledFormFields = true;
        final boolean applyExtraProtectionForReadonlyFormFields = false;
        final boolean applyExtraProtectionForRequestParamValueCount = false;
        final ContentInjectionHelper helper = new ContentInjectionHelper();
        final RuleFileLoader ruleFileLoaderModificationExcludes = new ClasspathZipRuleFileLoader();
        ruleFileLoaderModificationExcludes.setPath(WebCastellumFilter.MODIFICATION_EXCLUDES_DEFAULT);
        final ContentModificationExcludeDefinitionContainer containerModExcludes = new ContentModificationExcludeDefinitionContainer(ruleFileLoaderModificationExcludes);
        containerModExcludes.parseDefinitions();
        helper.setContentModificationExcludeDefinitions(containerModExcludes);
        final AttackHandler attackHandler = new AttackHandler(null, 123, 600000, 100000, 300000, 300000, null, ""MOCK"", false, false, 0, false, false, Pattern.compile(""sjghggfakgfjagfgajgfjasgfs""), Pattern.compile(""sjghggfakgfjagfgajgfjasgfs""), true);
        final SessionCreationTracker sessionCreationTracker = new SessionCreationTracker(attackHandler, 0, 600000, 300000, 0, """", """", """", """");
        final RequestWrapper request = new RequestWrapper(new RequestMock(), helper, sessionCreationTracker, ""123.456.789.000"", false, true, true);
        final RuleFileLoader ruleFileLoaderResponseModifications = new ClasspathZipRuleFileLoader();
        ruleFileLoaderResponseModifications.setPath(WebCastellumFilter.RESPONSE_MODIFICATIONS_DEFAULT);
        final ResponseModificationDefinitionContainer container = new ResponseModificationDefinitionContainer(ruleFileLoaderResponseModifications);
        container.parseDefinitions();
        final ResponseModificationDefinition[] responseModificationDefinitions = downCast(container.getAllEnabledRequestDefinitions());
        final List tmpPatternsToExcludeCompleteTag = new ArrayList(responseModificationDefinitions.length);
        final List tmpPatternsToExcludeCompleteScript = new ArrayList(responseModificationDefinitions.length);
        final List tmpPatternsToExcludeLinksWithinScripts = new ArrayList(responseModificationDefinitions.length);
        final List tmpPatternsToExcludeLinksWithinTags = new ArrayList(responseModificationDefinitions.length);
        final List tmpPatternsToCaptureLinksWithinScripts = new ArrayList(responseModificationDefinitions.length);
        final List tmpPatternsToCaptureLinksWithinTags = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToExcludeCompleteTag = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToExcludeCompleteScript = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToExcludeLinksWithinScripts = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToExcludeLinksWithinTags = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToCaptureLinksWithinScripts = new ArrayList(responseModificationDefinitions.length);
        final List tmpPrefiltersToCaptureLinksWithinTags = new ArrayList(responseModificationDefinitions.length);
        final List tmpGroupNumbersToCaptureLinksWithinScripts = new ArrayList(responseModificationDefinitions.length);
        final List tmpGroupNumbersToCaptureLinksWithinTags = new ArrayList(responseModificationDefinitions.length);
        for (int i = 0; i < responseModificationDefinitions.length; i++) {
            final ResponseModificationDefinition responseModificationDefinition = responseModificationDefinitions[i];
            if (responseModificationDefinition.isMatchesScripts()) {
                tmpPatternsToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPattern());
                tmpPrefiltersToExcludeCompleteScript.add(responseModificationDefinition.getScriptExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinScripts.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinScripts.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinScripts.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
            if (responseModificationDefinition.isMatchesTags()) {
                tmpPatternsToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPattern());
                tmpPrefiltersToExcludeCompleteTag.add(responseModificationDefinition.getTagExclusionPrefilter());
                tmpPatternsToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPattern());
                tmpPrefiltersToExcludeLinksWithinTags.add(responseModificationDefinition.getUrlExclusionPrefilter());
                tmpPatternsToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPattern());
                tmpPrefiltersToCaptureLinksWithinTags.add(responseModificationDefinition.getUrlCapturingPrefilter());
                tmpGroupNumbersToCaptureLinksWithinTags.add(ServerUtils.convertSimpleToObjectArray(responseModificationDefinition.getCapturingGroupNumbers()));
            }
        }
        final Matcher[] matchersToExcludeCompleteTag = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteTag);
        final Matcher[] matchersToExcludeCompleteScript = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeCompleteScript);
        final Matcher[] matchersToExcludeLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinScripts);
        final Matcher[] matchersToExcludeLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToExcludeLinksWithinTags);
        final Matcher[] matchersToCaptureLinksWithinScripts = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinScripts);
        final Matcher[] matchersToCaptureLinksWithinTags = ServerUtils.convertListOfPatternToArrayOfMatcher(tmpPatternsToCaptureLinksWithinTags);
        final WordDictionary[] prefiltersToExcludeCompleteTag = (WordDictionary[]) tmpPrefiltersToExcludeCompleteTag.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeCompleteScript = (WordDictionary[]) tmpPrefiltersToExcludeCompleteScript.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToExcludeLinksWithinTags = (WordDictionary[]) tmpPrefiltersToExcludeLinksWithinTags.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinScripts = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinScripts.toArray(new WordDictionary[0]);
        final WordDictionary[] prefiltersToCaptureLinksWithinTags = (WordDictionary[]) tmpPrefiltersToCaptureLinksWithinTags.toArray(new WordDictionary[0]);
        final int[][] groupNumbersToCaptureLinksWithinScripts = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinScripts);
        final int[][] groupNumbersToCaptureLinksWithinTags = ServerUtils.convertArrayIntegerListTo2DimIntArray(tmpGroupNumbersToCaptureLinksWithinTags);
        final Cipher cipher = CryptoUtils.getCipher();
        final CryptoKeyAndSalt key = CryptoUtils.generateRandomCryptoKeyAndSalt(false);
        Cipher.getInstance(""AES"");
        MessageDigest.getInstance(""SHA-1"");
        final ResponseWrapper response = new ResponseWrapper(new ResponseMock(), request, attackHandler, helper, false, ""___ENCRYPTED___"", cipher, key, ""___SEC-KEY___"", ""___SEC-VALUE___"", ""___PROT-KEY___"", false, false, false, false, ""123.456.789.000"", new HashSet(), prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, false, true, true, true, true, true, true, true, true, true, false, false, true, """", """", (short) 3, true, false, false);
        final List durations = new ArrayList();
        for (int i = 0; i < executionCount; i++) {
            final long start = System.currentTimeMillis();
            Reader reader = null;
            Writer writer = null;
            try {
                reader = new BufferedReader(new FileReader(this.htmlFile));
                writer = new FileWriter(this.outputFile);
                if (applyFilter) {
                    writer = new ResponseFilterWriter(writer, true, ""http://127.0.0.1/test/sample"", ""/test"", ""/test"", ""___SEC-KEY___"", ""___SEC-VALUE___"", ""___PROT-KEY___"", cipher, key, helper, ""___ENCRYPTED___"", request, response, stripHtmlEnabled, injectSecretTokensEnabled, protectParamsAndFormsEnabled, encryptQueryStringsEnabled, applyExtraProtectionForDisabledFormFields, applyExtraProtectionForReadonlyFormFields, applyExtraProtectionForRequestParamValueCount, prefiltersToExcludeCompleteScript, matchersToExcludeCompleteScript, prefiltersToExcludeCompleteTag, matchersToExcludeCompleteTag, prefiltersToExcludeLinksWithinScripts, matchersToExcludeLinksWithinScripts, prefiltersToExcludeLinksWithinTags, matchersToExcludeLinksWithinTags, prefiltersToCaptureLinksWithinScripts, matchersToCaptureLinksWithinScripts, prefiltersToCaptureLinksWithinTags, matchersToCaptureLinksWithinTags, groupNumbersToCaptureLinksWithinScripts, groupNumbersToCaptureLinksWithinTags, true, true, false, true, true, true, true, true, true, true, true, false, false, true, """", """", (short) 3, true, false);
                    writer = new BufferedWriter(writer);
                }
                char[] chars = new char[16 * 1024];
                int read;
                while ((read = reader.read(chars)) != -1) {
                    if (read > 0) {
                        writer.write(chars, 0, read);
                    }
                }
                durations.add(new Long(System.currentTimeMillis() - start));
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException ignored) {
                    }
                }
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (IOException ignored) {
                    }
                }
            }
        }
        long sum = 0;
        for (final Iterator iter = durations.iterator(); iter.hasNext(); ) {
            Long value = (Long) iter.next();
            sum += value.longValue();
        }
        return sum / durations.size();
    }
","    public static void copyFile(File in, File outDir) throws IOException {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            File out = new File(outDir, in.getName());
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
            } finally {
                if (destinationChannel != null) {
                    destinationChannel.close();
                }
            }
        }
    }
",True
900283,18731109,23047157,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","        @Override
        public void run() {
            long timeout = 10 * 1000L;
            long start = (new Date()).getTime();
            try {
                InputStream is = socket.getInputStream();
                boolean available = false;
                while (!available && !socket.isClosed()) {
                    try {
                        if (is.available() != 0) {
                            available = true;
                        } else {
                            Thread.sleep(100);
                        }
                    } catch (Exception e) {
                        LOG.error(""Error checking socket"", e);
                    }
                    long curr = (new Date()).getTime();
                    if ((curr - start) >= timeout) {
                        break;
                    }
                }
                if (socket.isClosed()) {
                } else {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    baos.flush();
                    baos.close();
                    data = baos.toByteArray();
                }
                String msg = FtpResponse.ReadComplete.asString() + ClientCommand.SP + ""Read Complete"" + ClientCommand.CRLF;
                List<String> list = new ArrayList<String>();
                list.add(msg);
                ClientResponse response = new ClientResponse(list);
                ftpClient.notifyListeners(response);
            } catch (Exception e) {
                LOG.error(""Error reading server response"", e);
            }
        }
",True
900284,10539421,11312022,"    public static String sha1(String clearText, String seed) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update((seed + clearText).getBytes());
            return convertToHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }
","    public static void downloadFromUrl(URL url, String localFilename, String userAgent) throws IOException {
        InputStream is = null;
        FileOutputStream fos = null;
        System.setProperty(""java.net.useSystemProxies"", ""true"");
        try {
            URLConnection urlConn = url.openConnection();
            if (userAgent != null) {
                urlConn.setRequestProperty(""User-Agent"", userAgent);
            }
            is = urlConn.getInputStream();
            fos = new FileOutputStream(localFilename);
            byte[] buffer = new byte[4096];
            int len;
            while ((len = is.read(buffer)) > 0) {
                fos.write(buffer, 0, len);
            }
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } finally {
                if (fos != null) {
                    fos.close();
                }
            }
        }
    }
",False
900285,13312539,17136338,"    private void executeScript(SQLiteDatabase sqlDatabase, InputStream input) {
        StringWriter writer = new StringWriter();
        try {
            IOUtils.copy(input, writer);
        } catch (IOException e) {
            throw new ComixException(""Could not read the database script"", e);
        }
        String multipleSql = writer.toString();
        String[] split = multipleSql.split(""-- SCRIPT_SPLIT --"");
        for (String sql : split) {
            if (!sql.trim().equals("""")) {
                sqlDatabase.execSQL(sql);
            }
        }
    }
","    protected void checkWeavingJar() throws IOException {
        OutputStream out = null;
        try {
            final File weaving = new File(getWeavingPath());
            if (!weaving.exists()) {
                new File(getWeavingFolder()).mkdir();
                weaving.createNewFile();
                final Path src = new Path(""weaving/openfrwk-weaving.jar"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(getWeavingPath(), true);
                IOUtils.copy(in, out);
                Logger.log(Logger.INFO, ""Put weaving jar at location "" + weaving);
            } else {
                Logger.getLog().info(""File openfrwk-weaving.jar already exists at "" + weaving);
            }
        } catch (final SecurityException e) {
            Logger.log(Logger.ERROR, ""[SECURITY EXCEPTION] Not enough privilegies to create "" + ""folder and copy NexOpen weaving jar at location "" + getWeavingFolder());
            Logger.logException(e);
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
",True
900286,2113293,3657883,"    protected void setUp() throws Exception {
        testOutputDirectory = new File(getClass().getResource(""/"").getPath());
        zipFile = new File(this.testOutputDirectory, ""/plugin.zip"");
        zipOutputDirectory = new File(this.testOutputDirectory, ""zip"");
        zipOutputDirectory.mkdir();
        logger.fine(""zip dir created"");
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
        zos.putNextEntry(new ZipEntry(""css/""));
        zos.putNextEntry(new ZipEntry(""css/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""js/""));
        zos.putNextEntry(new ZipEntry(""js/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/mylib.jar""));
        File jarFile = new File(this.testOutputDirectory.getPath() + ""/mylib.jar"");
        JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile));
        jos.putNextEntry(new ZipEntry(""vqwiki/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/system.properties""));
        System.getProperties().store(jos, null);
        jos.closeEntry();
        jos.close();
        IOUtils.copy(new FileInputStream(jarFile), zos);
        zos.closeEntry();
        zos.close();
        jarFile.delete();
    }
","    @Override
    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException {
        String context = request.getContextPath();
        String resource = request.getRequestURI().replace(context, """");
        resource = resource.replaceAll(""^/\\w*/"", """");
        if ((StringUtils.isEmpty(resource)) || (resource.endsWith(""/""))) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        URL url = ClassLoaderUtils.getResource(resource);
        if (url == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        if ((this.deny != null) && (this.deny.length > 0)) {
            for (String s : this.deny) {
                s = s.trim();
                if (s.indexOf('*') != -1) {
                    s = s.replaceAll(""\\*"", "".*"");
                }
                if (Pattern.matches(s, resource)) {
                    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    return;
                }
            }
        }
        InputStream input = url.openStream();
        OutputStream output = response.getOutputStream();
        URLConnection connection = url.openConnection();
        String contentEncoding = connection.getContentEncoding();
        int contentLength = connection.getContentLength();
        String contentType = connection.getContentType();
        if (contentEncoding != null) {
            response.setCharacterEncoding(contentEncoding);
        }
        response.setContentLength(contentLength);
        response.setContentType(contentType);
        IOUtils.copy(input, output, true);
    }
",True
900287,17630908,5433055,"    public static int[] sortDescending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public static Coordinate getCoordenadas(String RCoURL) {
        Coordinate coord = new Coordinate();
        String pURL;
        String iniPC1 = ""<pc1>"";
        String iniPC2 = ""<pc2>"";
        String finPC1 = ""</pc1>"";
        String finPC2 = ""</pc2>"";
        String iniX = ""<xcen>"";
        String iniY = ""<ycen>"";
        String finX = ""</xcen>"";
        String finY = ""</ycen>"";
        String iniCuerr = ""<cuerr>"";
        String finCuerr = ""</cuerr>"";
        String iniDesErr = ""<des>"";
        String finDesErr = ""</des>"";
        boolean error = false;
        int ini, fin;
        if (RCoURL.contains(""/"") || RCoURL.contains(""\\"") || RCoURL.contains(""."")) pURL = RCoURL; else {
            if (RCoURL.length() > 14) pURL = baseURL[1].replace(""<RC>"", RCoURL.substring(0, 14)); else pURL = baseURL[1].replace(""<RC>"", RCoURL);
        }
        try {
            URL url = new URL(pURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                if (str.contains(iniCuerr)) {
                    ini = str.indexOf(iniCuerr) + iniCuerr.length();
                    fin = str.indexOf(finCuerr);
                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;
                }
                if (error) {
                    if (str.contains(iniDesErr)) {
                        ini = str.indexOf(iniDesErr) + iniDesErr.length();
                        fin = str.indexOf(finDesErr);
                        throw (new Exception(str.substring(ini, fin)));
                    }
                } else {
                    if (str.contains(iniPC1)) {
                        ini = str.indexOf(iniPC1) + iniPC1.length();
                        fin = str.indexOf(finPC1);
                        coord.setDescription(str.substring(ini, fin));
                    }
                    if (str.contains(iniPC2)) {
                        ini = str.indexOf(iniPC2) + iniPC2.length();
                        fin = str.indexOf(finPC2);
                        coord.setDescription(coord.getDescription().concat(str.substring(ini, fin)));
                    }
                    if (str.contains(iniX)) {
                        ini = str.indexOf(iniX) + iniX.length();
                        fin = str.indexOf(finX);
                        coord.setLongitude(Double.parseDouble(str.substring(ini, fin)));
                    }
                    if (str.contains(iniY)) {
                        ini = str.indexOf(iniY) + iniY.length();
                        fin = str.indexOf(finY);
                        coord.setLatitude(Double.parseDouble(str.substring(ini, fin)));
                    }
                }
            }
            in.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return coord;
    }
",False
900288,5274229,7844497,"    public String post(Map<String, String> headersMap, String monitoringRequest) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPost httpPost = new HttpPost(""http://"" + hostname + "":"" + port + resource);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPost.addHeader(iterator.next());
        }
        if (monitoringRequest == null) {
            logger.info(""Monitoring Request has not been specified - "");
            monitoringRequest = Terms.MONITORING_NOT_CONFIGURED;
            logger.info(""Monitoring Request has not been specified - "" + monitoringRequest);
        } else {
            logger.info(""Monitoring Request is - "" + monitoringRequest);
        }
        logger.info(httpPost.getRequestLine());
        logger.info(httpPost.getAllHeaders());
        Header[] headersArray = httpPost.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPost);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"");
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision"" + statusLine);
        return null;
    }
","    public static String simplePostRequest(String path, Map<String, Object> model) {
        try {
            URL url = new URL(path);
            URLConnection con = url.openConnection();
            con.setDoOutput(true);
            OutputStream out = con.getOutputStream();
            OutputStream bout = new BufferedOutputStream(out);
            OutputStreamWriter writer = new OutputStreamWriter(bout);
            boolean first = true;
            for (String name : model.keySet()) {
                String value = (String) model.get(name);
                if (!first) {
                    writer.write(""&"");
                    first = false;
                }
                writer.write(name + ""="" + value);
            }
            writer.flush();
            writer.close();
            InputStream stream = new BufferedInputStream(con.getInputStream());
            Reader reader = new BufferedReader(new InputStreamReader(stream));
            StringBuilder buffer = new StringBuilder();
            for (int c = reader.read(); c != -1; c = reader.read()) {
                buffer.append((char) c);
            }
            return buffer.toString();
        } catch (MalformedURLException e) {
            throw new CVardbException(e);
        } catch (IOException e) {
            throw new CVardbException(e);
        }
    }
",False
900289,4648562,16981231,"    public String Hash(String plain) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(plain.getBytes(), 0, plain.length());
            return new BigInteger(1, md5.digest()).toString(16);
        } catch (Exception ex) {
            Log.serverlogger.warn(""No such Hash algorithm"", ex);
            return """";
        }
    }
","    public static boolean verify(final String password, final String encryptedPassword) {
        MessageDigest digest = null;
        int size = 0;
        String base64 = null;
        if (encryptedPassword.regionMatches(true, 0, ""{CRYPT}"", 0, 7)) {
            throw new InternalError(""Not implemented"");
        } else if (encryptedPassword.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            size = 20;
            base64 = encryptedPassword.substring(5);
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            size = 20;
            base64 = encryptedPassword.substring(6);
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{MD5}"", 0, 5)) {
            size = 16;
            base64 = encryptedPassword.substring(5);
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{SMD5}"", 0, 6)) {
            size = 16;
            base64 = encryptedPassword.substring(6);
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else {
            return false;
        }
        final byte[] data = Base64.decode(base64.toCharArray());
        final byte[] orig = new byte[size];
        System.arraycopy(data, 0, orig, 0, size);
        digest.reset();
        digest.update(password.getBytes());
        if (data.length > size) {
            digest.update(data, size, data.length - size);
        }
        return MessageDigest.isEqual(digest.digest(), orig);
    }
",True
900290,21386162,5438231,"    public void writeToFile(File file, File source) throws IOException {
        BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(file));
        BufferedInputStream bin = new BufferedInputStream(new FileInputStream(source));
        bin.skip(header.getHeaderEndingOffset());
        for (long i = 0; i < this.streamLength; i++) {
            bout.write(bin.read());
        }
        bin.close();
        bout.close();
    }
","    public int extract() throws Exception {
        int count = 0;
        if (VERBOSE) System.out.println(""IAAE:Extractr.extract: getting ready to extract "" + getArtDir().toString());
        ITCFileFilter iff = new ITCFileFilter();
        RecursiveFileIterator rfi = new RecursiveFileIterator(getArtDir(), iff);
        FileTypeDeterminer ftd = new FileTypeDeterminer();
        File artFile = null;
        File targetFile = null;
        broadcastStart();
        while (rfi.hasMoreElements()) {
            artFile = (File) rfi.nextElement();
            targetFile = getTargetFile(artFile);
            if (VERBOSE) System.out.println(""IAAE:Extractr.extract: working ont "" + artFile.toString());
            BufferedInputStream in = null;
            BufferedOutputStream out = null;
            try {
                in = new BufferedInputStream((new FileInputStream(artFile)));
                out = new BufferedOutputStream((new FileOutputStream(targetFile)));
                byte[] buffer = new byte[10240];
                int read = 0;
                int total = 0;
                read = in.read(buffer);
                while (read != -1) {
                    if ((total <= 491) && (read > 491)) {
                        out.write(buffer, 492, (read - 492));
                    } else if ((total <= 491) && (read <= 491)) {
                    } else {
                        out.write(buffer, 0, read);
                    }
                    total = total + read;
                    read = in.read(buffer);
                }
            } catch (Exception e) {
                e.printStackTrace();
                broadcastFail();
            } finally {
                in.close();
                out.close();
            }
            broadcastSuccess();
            count++;
        }
        broadcastDone();
        return count;
    }
",True
900291,245163,14024978,"    @Override
    public DataTable generateDataTable(Query query, HttpServletRequest request) throws DataSourceException {
        String url = request.getParameter(URL_PARAM_NAME);
        if (StringUtils.isEmpty(url)) {
            log.error(""url parameter not provided."");
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""url parameter not provided"");
        }
        Reader reader;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        } catch (MalformedURLException e) {
            log.error(""url is malformed: "" + url);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""url is malformed: "" + url);
        } catch (IOException e) {
            log.error(""Couldn't read from url: "" + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""Couldn't read from url: "" + url);
        }
        DataTable dataTable = null;
        ULocale requestLocale = DataSourceHelper.getLocaleFromRequest(request);
        try {
            dataTable = CsvDataSourceHelper.read(reader, null, true, requestLocale);
        } catch (IOException e) {
            log.error(""Couldn't read from url: "" + url, e);
            throw new DataSourceException(ReasonType.INVALID_REQUEST, ""Couldn't read from url: "" + url);
        }
        return dataTable;
    }
","    public static final String generate(String value) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            value = hexString.toString();
        } catch (Exception nsae) {
            nsae.printStackTrace();
        }
        return value;
    }
",False
900292,5439181,19166563,"    private String hash(String text) throws NoSuchAlgorithmException {
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(text.getBytes());
        BigInteger hash = new BigInteger(1, md5.digest());
        return hash.toString(16);
    }
","    private String doSearch(String query) {
        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append(""http://boss.yahooapis.com/ysearch/web/v1/"").append(query).append(""?appid=wGsFV_DV34EwXnC.2Bt_Ql8Kcir_HmrxMzWUF2fv64CA8ha7e4zgudqXFA8K_J4-&format=xml&filter=-porn"");
        try {
            URL url = new URL(queryBuilder.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            StringBuffer buffer = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            reader.close();
            return safeParseXml(buffer.toString());
        } catch (MalformedURLException e) {
            log.error(""The used url is not right : "" + queryBuilder.toString(), e);
            return ""The used url is not right."";
        } catch (IOException e) {
            log.error(""Problem obtaining search results, connection maybe?"", e);
            return ""Problem obtaining search results, connection maybe?"";
        }
    }
",False
900293,15796324,4776598,"    public static List importSymbols(List symbols) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbols);
        IDQuoteFilter filter = new YahooIDQuoteFilter();
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line;
            do {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        IDQuote quote = filter.toIDQuote(line);
                        quote.verify();
                        quotes.add(quote);
                    } catch (QuoteFormatException e) {
                    }
                }
            } while (line != null);
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
","        private void init(URL url) {
            frame = new JInternalFrame(name);
            frame.addInternalFrameListener(this);
            listModel.add(listModel.size(), this);
            area = new JTextArea();
            area.setMargin(new Insets(5, 5, 5, 5));
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String in;
                while ((in = reader.readLine()) != null) {
                    area.append(in);
                    area.append(""\n"");
                }
                reader.close();
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
            th = area.getTransferHandler();
            area.setFont(new Font(""monospaced"", Font.PLAIN, 12));
            area.setCaretPosition(0);
            area.setDragEnabled(true);
            area.setDropMode(DropMode.INSERT);
            frame.getContentPane().add(new JScrollPane(area));
            dp.add(frame);
            frame.show();
            if (DEMO) {
                frame.setSize(300, 200);
            } else {
                frame.setSize(400, 300);
            }
            frame.setResizable(true);
            frame.setClosable(true);
            frame.setIconifiable(true);
            frame.setMaximizable(true);
            frame.setLocation(left, top);
            incr();
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    select();
                }
            });
            nullItem.addActionListener(this);
            setNullTH();
        }
",True
900294,7034031,3160590,"    private void copyFile(File sourceFile, File destFile) throws IOException {
        if (log.isDebugEnabled()) {
            log.debug(""CopyFile : Source["" + sourceFile.getAbsolutePath() + ""] Dest["" + destFile.getAbsolutePath() + ""]"");
        }
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    @Override
    public final byte[] getDigest() {
        try {
            final MessageDigest hashing = MessageDigest.getInstance(""SHA-256"");
            final Charset utf16 = Charset.forName(""UTF-16"");
            for (final CollationKey wordKey : this.words) {
                hashing.update(wordKey.toByteArray());
            }
            hashing.update(this.locale.toString().getBytes(utf16));
            hashing.update(ByteUtils.toBytesLE(this.collator.getStrength()));
            hashing.update(ByteUtils.toBytesLE(this.collator.getDecomposition()));
            return hashing.digest();
        } catch (final NoSuchAlgorithmException e) {
            FileBasedDictionary.LOG.severe(e.toString());
            return new byte[0];
        }
    }
",False
900295,15480455,17662157,"    public static void TestDBStore() throws PDException, Exception {
        StoreDDBB StDB = new StoreDDBB(""jdbc:derby://localhost:1527/Prodoc"", ""Prodoc"", ""Prodoc"", ""org.apache.derby.jdbc.ClientDriver;STBLOB"");
        System.out.println(""Driver["" + StDB.getDriver() + ""] Tabla  ["" + StDB.getTable() + ""]"");
        StDB.Connect();
        FileInputStream in = new FileInputStream(""/tmp/readme.htm"");
        StDB.Insert(""12345678-1"", ""1.0"", in);
        int TAMBUFF = 1024 * 64;
        byte Buffer[] = new byte[TAMBUFF];
        InputStream Bytes;
        Bytes = StDB.Retrieve(""12345678-1"", ""1.0"");
        FileOutputStream fo = new FileOutputStream(""/tmp/12345679.htm"");
        int readed = Bytes.read(Buffer);
        while (readed != -1) {
            fo.write(Buffer, 0, readed);
            readed = Bytes.read(Buffer);
        }
        Bytes.close();
        fo.close();
        StDB.Delete(""12345678-1"", ""1.0"");
        StDB.Disconnect();
    }
","    public static void main(String[] argz) {
        int X, Y, Z;
        X = 256;
        Y = 256;
        Z = 256;
        try {
            String work_folder = ""C:\\Documents and Settings\\Entheogen\\My Documents\\school\\jung\\vol_data\\CT_HEAD3"";
            FileOutputStream out_stream = new FileOutputStream(new File(work_folder + ""\\converted.dat""));
            FileChannel out = out_stream.getChannel();
            String f_name = ""head256.raw"";
            File file = new File(work_folder + ""\\"" + f_name);
            FileChannel in = new FileInputStream(file).getChannel();
            ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length());
            in.read(buffa);
            in.close();
            int N = 256;
            FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N);
            float min = Float.MAX_VALUE;
            for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) {
                byte c = buffa.get(i);
                min = Math.min(min, (float) (c));
                output_data.put((float) (c));
            }
            for (int i = 0; i < Y - X; ++i) {
                for (int j = 0; j < Y; ++j) {
                    for (int k = 0; k < Z; ++k) {
                        output_data.put(min);
                    }
                }
            }
            output_data.rewind();
            System.out.println(""size of output_data = "" + Integer.toString(output_data.capacity()));
            out.write(BufferUtil.copyFloatBufferAsByteBuffer(output_data));
            ByteBuffer buffa2 = BufferUtil.newByteBuffer(2);
            buffa2.put((byte) '.');
            out.close();
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
",True
900296,7553634,10432257,"    public static String calcolaMd5(String messaggio) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        md.reset();
        md.update(messaggio.getBytes());
        byte[] impronta = md.digest();
        return new String(impronta);
    }
","    private void createImageArchive() throws Exception {
        imageArchive = new File(resoutFolder, ""images.CrAr"");
        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive)));
        out.writeInt(toNativeEndian(imageFiles.size()));
        for (int i = 0; i < imageFiles.size(); i++) {
            File f = imageFiles.get(i);
            out.writeLong(toNativeEndian(f.length()));
            out.writeLong(toNativeEndian(new File(resFolder, f.getName().substring(0, f.getName().length() - 5)).length()));
        }
        for (int i = 0; i < imageFiles.size(); i++) {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i)));
            int read;
            while ((read = in.read()) != -1) {
                out.write(read);
            }
            in.close();
        }
        out.close();
    }
",False
900297,19841852,369572,"    public static final boolean checkForUpdate(final String currentVersion, final String updateURL, boolean noLock) throws Exception {
        try {
            final String parentFDTConfDirName = System.getProperty(""user.home"") + File.separator + "".fdt"";
            final String fdtUpdateConfFileName = ""update.properties"";
            final File confFile = createOrGetRWFile(parentFDTConfDirName, fdtUpdateConfFileName);
            if (confFile != null) {
                long lastCheck = 0;
                Properties updateProperties = new Properties();
                FileInputStream fis = null;
                FileOutputStream fos = null;
                try {
                    fis = new FileInputStream(confFile);
                    updateProperties.load(fis);
                    final String lastCheckProp = (String) updateProperties.get(""LastCheck"");
                    lastCheck = 0;
                    if (lastCheckProp != null) {
                        try {
                            lastCheck = Long.parseLong(lastCheckProp);
                        } catch (Throwable t) {
                            if (logger.isLoggable(Level.FINE)) {
                                logger.log(Level.FINE, ""Got exception parsing LastCheck param"", t);
                            }
                            lastCheck = 0;
                        }
                    }
                } catch (Throwable t) {
                    logger.log(Level.WARNING, ""Cannot load update properties file: "" + confFile, t);
                } finally {
                    closeIgnoringExceptions(fos);
                    closeIgnoringExceptions(fis);
                }
                final long now = System.currentTimeMillis();
                boolean bHaveUpdates = false;
                checkAndSetInstanceID(updateProperties);
                if (lastCheck + FDT.UPDATE_PERIOD < now) {
                    lastCheck = now;
                    try {
                        logger.log(""\n\nChecking for remote updates ... This may be disabled using -noupdates flag."");
                        bHaveUpdates = updateFDT(currentVersion, updateURL, false, noLock);
                        if (bHaveUpdates) {
                            logger.log(""FDT may be updated using: java -jar fdt.jar -update"");
                        } else {
                            if (logger.isLoggable(Level.FINE)) {
                                logger.log(Level.FINE, ""No updates available"");
                            }
                        }
                    } catch (Throwable t) {
                        if (logger.isLoggable(Level.FINE)) {
                            logger.log(Level.WARNING, ""Got exception"", t);
                        }
                    }
                    updateProperties.put(""LastCheck"", """" + now);
                    try {
                        fos = new FileOutputStream(confFile);
                        updateProperties.store(fos, null);
                    } catch (Throwable t1) {
                        logger.log(Level.WARNING, ""Cannot store update properties file"", t1);
                    } finally {
                        closeIgnoringExceptions(fos);
                    }
                    return bHaveUpdates;
                }
            } else {
                if (logger.isLoggable(Level.FINE)) {
                    logger.log(Level.FINE, "" [ checkForUpdate ] Cannot read or write the update conf file: "" + parentFDTConfDirName + File.separator + fdtUpdateConfFileName);
                }
                return false;
            }
        } catch (Throwable t) {
            logger.log(Level.WARNING, ""Got exception checking for updates"", t);
        }
        return false;
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",True
900298,8620255,372172,"    private void sendMessages() {
        Configuration conf = Configuration.getInstance();
        for (int i = 0; i < errors.size(); i++) {
            String msg = null;
            synchronized (this) {
                msg = errors.get(i);
                if (DEBUG) System.out.println(msg);
                errors.remove(i);
            }
            if (!conf.getCustomerFeedback()) continue;
            if (conf.getApproveCustomerFeedback()) {
                ConfirmCustomerFeedback dialog = new ConfirmCustomerFeedback(JOptionPane.getFrameForComponent(SqlTablet.getInstance()), msg);
                if (dialog.getResult() == ConfirmCustomerFeedback.Result.NO) continue;
            }
            try {
                URL url = new URL(""http://www.sqltablet.com/beta/bug.php"");
                URLConnection urlc = url.openConnection();
                urlc.setDoOutput(true);
                urlc.setDoOutput(true);
                urlc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                DataOutputStream out = new DataOutputStream(urlc.getOutputStream());
                String lines[] = msg.split(""\n"");
                for (int l = 0; l < lines.length; l++) {
                    String line = (l > 0 ? ""&line"" : ""line"") + l + ""="";
                    line += URLEncoder.encode(lines[l], ""UTF-8"");
                    out.write(line.getBytes());
                }
                out.flush();
                out.close();
                BufferedReader in = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
                String line;
                while ((line = in.readLine()) != null) {
                    if (DEBUG) System.out.println(""RemoteLogger : "" + line + ""\n"");
                }
                in.close();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
",False
900299,17534703,15854397,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public static Checksum checksum(File file, Checksum checksum) throws IOException {
        if (file.isDirectory()) {
            throw new IllegalArgumentException(""Checksums can't be computed on directories"");
        }
        InputStream in = null;
        try {
            in = new CheckedInputStream(new FileInputStream(file), checksum);
            IOUtils.copy(in, NULL_OUTPUT_STREAM);
        } finally {
            IOUtils.close(in);
        }
        return checksum;
    }
",True
900300,22051326,14231450,"    public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException {
        final String f_key = key.trim();
        StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR);
        int tc = st.countTokens();
        int tc_name = tc - 9;
        try {
            final String product = st.nextToken();
            final String type = st.nextToken();
            final String loadStr = st.nextToken();
            final int load = Integer.parseInt(loadStr);
            final String lowMajorVersionStr = st.nextToken();
            final int lowMajorVersion = Integer.parseInt(lowMajorVersionStr);
            final String lowMinorVersionStr = st.nextToken();
            final double lowMinorVersion = Double.parseDouble(""0."" + lowMinorVersionStr);
            final String highMajorVersionStr = st.nextToken();
            final int highMajorVersion = Integer.parseInt(highMajorVersionStr);
            final String highMinorVersionStr = st.nextToken();
            final double highMinorVersion = Double.parseDouble(""0."" + highMinorVersionStr);
            String regName = """";
            for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken());
            final String randomHexStr = st.nextToken();
            final String md5Str = st.nextToken();
            String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1);
            byte[] md5;
            MessageDigest md = null;
            md = MessageDigest.getInstance(""MD5"");
            md.update(subKey.getBytes());
            md.update(FIELD_SEPERATOR.getBytes());
            md.update(zuonicsPassword.getBytes());
            md5 = md.digest();
            String testKey = subKey + FIELD_SEPERATOR;
            for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase();
            if (!testKey.equals(f_key)) throw new InvalidLicenseKeyException(""doesn't hash"");
            final String f_regName = regName;
            return new LicenseKey() {

                public String getProduct() {
                    return product;
                }

                public String getType() {
                    return type;
                }

                public int getLoad() {
                    return load;
                }

                public String getRegName() {
                    return f_regName;
                }

                public double getlowVersion() {
                    return lowMajorVersion + lowMinorVersion;
                }

                public double getHighVersion() {
                    return highMajorVersion + highMinorVersion;
                }

                public String getRandomHexStr() {
                    return randomHexStr;
                }

                public String getMD5HexStr() {
                    return md5Str;
                }

                public String toString() {
                    return f_key;
                }

                public boolean equals(Object obj) {
                    if (obj.toString().equals(toString())) return true;
                    return false;
                }
            };
        } catch (Exception e) {
            throw new InvalidLicenseKeyException(e.getMessage());
        }
    }
","    public byte[] download(URL url, OutputStream out) throws IOException {
        boolean returnByByteArray = (out == null);
        ByteArrayOutputStream helper = null;
        if (returnByByteArray) {
            helper = new ByteArrayOutputStream();
        }
        String s = url.toExternalForm();
        URLConnection conn = url.openConnection();
        String name = Launcher.getFileName(s);
        InputStream in = conn.getInputStream();
        total = url.openConnection().getContentLength();
        setStatusText(String.format(""Downloading %s (%.2fMB)..."", name, ((float) total / 1024 / 1024)));
        long justNow = System.currentTimeMillis();
        int numRead = -1;
        byte[] buffer = new byte[2048];
        while ((numRead = in.read(buffer)) != -1) {
            size += numRead;
            if (returnByByteArray) {
                helper.write(buffer, 0, numRead);
            } else {
                out.write(buffer, 0, numRead);
            }
            long now = System.currentTimeMillis();
            if ((now - justNow) > 250) {
                setProgress((int) (((float) size / (float) total) * 100));
                justNow = now;
            }
        }
        hideProgress();
        if (returnByByteArray) {
            return helper.toByteArray();
        } else {
            return null;
        }
    }
",False
900301,916271,6305269,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    protected void copyFile(File sourceFile, File destFile) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!verifyOrCreateParentPath(destFile.getParentFile())) {
                throw new IOException(""Parent directory path "" + destFile.getAbsolutePath() + "" did not exist and could not be created"");
            }
            if (destFile.exists() || destFile.createNewFile()) {
                in = new FileInputStream(sourceFile).getChannel();
                out = new FileOutputStream(destFile).getChannel();
                in.transferTo(0, in.size(), out);
            } else {
                throw new IOException(""Couldn't create file for "" + destFile.getAbsolutePath());
            }
        } catch (IOException ioe) {
            if (destFile.exists() && destFile.length() < sourceFile.length()) {
                destFile.delete();
            }
            ioe.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Throwable t) {
            }
            try {
                out.close();
            } catch (Throwable t) {
            }
            destFile.setLastModified(sourceFile.lastModified());
        }
    }
",True
900302,19380360,14037891,"    private void copyPhoto(final IPhoto photo, final Map.Entry<String, Integer> size) {
        final File fileIn = new File(storageService.getPhotoPath(photo, storageService.getOriginalDir()));
        final File fileOut = new File(storageService.getPhotoPath(photo, size.getKey()));
        InputStream fileInputStream;
        OutputStream fileOutputStream;
        try {
            fileInputStream = new FileInputStream(fileIn);
            fileOutputStream = new FileOutputStream(fileOut);
            IOUtils.copy(fileInputStream, fileOutputStream);
            fileInputStream.close();
            fileOutputStream.close();
        } catch (final IOException e) {
            log.error(""file io exception"", e);
            return;
        }
    }
","    private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException {
        FileInputStream fileInputStream = new FileInputStream(input);
        InputStream inputStream;
        if (progressMessage != null) {
            inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream);
        } else {
            inputStream = fileInputStream;
        }
        FilterInputStream is = new BufferedInputStream(inputStream);
        FilterOutputStream os = new BufferedOutputStream(new FileOutputStream(output));
        FilterInputStream fis;
        FilterOutputStream fos;
        if (compress) {
            fis = is;
            fos = new GZIPOutputStream(new CipherOutputStream(os, cipher));
        } else {
            fis = new GZIPInputStream(new CipherInputStream(is, cipher));
            fos = os;
        }
        byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer];
        int readLength = fis.read(buffer);
        while (readLength != -1) {
            fos.write(buffer, 0, readLength);
            readLength = fis.read(buffer);
        }
        if (compress) {
            GZIPOutputStream gos = (GZIPOutputStream) fos;
            gos.finish();
        }
        fos.close();
        fis.close();
    }
",True
900303,20432606,17930256,"    private void bokActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.meetingnamepanel.getEnteredValues().get(0).toString().trim().equals("""")) {
            this.showWarningMessage(""Enter Meeting Name"");
        } else {
            String[] patlib = newgen.presentation.NewGenMain.getAppletInstance().getPatronLibraryIds();
            String xmlreq = newgen.presentation.administration.AdministrationXMLGenerator.getInstance().saveMeetingName(""2"", meetingnamepanel.getEnteredValues(), patlib);
            try {
                java.net.URL url = new java.net.URL(ResourceBundle.getBundle(""Administration"").getString(""ServerURL"") + ResourceBundle.getBundle(""Administration"").getString(""ServletSubPath"") + ""MeetingNameServlet"");
                java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
                urlconn.setDoOutput(true);
                java.io.OutputStream dos = urlconn.getOutputStream();
                dos.write(xmlreq.getBytes());
                java.io.InputStream ios = urlconn.getInputStream();
                SAXBuilder saxb = new SAXBuilder();
                Document retdoc = saxb.build(ios);
                Element rootelement = retdoc.getRootElement();
                if (rootelement.getChild(""Error"") == null) {
                    this.showInformationMessage(ResourceBundle.getBundle(""Administration"").getString(""DataSavedInDatabase""));
                } else {
                    this.showErrorMessage(ResourceBundle.getBundle(""Administration"").getString(""ErrorPleaseContactTheVendor""));
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
","    private JButton getButtonImagen() {
        if (buttonImagen == null) {
            buttonImagen = new JButton();
            buttonImagen.setText(""Cargar Imagen"");
            buttonImagen.setIcon(new ImageIcon(getClass().getResource(""/data/icons/view_sidetree.png"")));
            buttonImagen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setFileView(new ImageFileView());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(Resorces.this, ""Seleccione una imagen"");
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + file.separator + ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        String rutaRelativa = ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        imagen.setImagenURL(rutaRelativa);
                        System.out.println(rutaGlobal + "" "" + rutaRelativa);
                        buttonImagen.setIcon(new ImageIcon(getClass().getResource(""/data/icons/view_sidetreeOK.png"")));
                        labelImagenPreview.setIcon(gui.procesadorDatos.escalaImageIcon(imagen.getImagenURL()));
                    } else {
                    }
                }
            });
        }
        return buttonImagen;
    }
",False
900304,896701,12048548,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public static void exportDB(String input, String output) {
        try {
            Class.forName(""org.sqlite.JDBC"");
            String fileName = input + File.separator + G.databaseName;
            File dataBase = new File(fileName);
            if (!dataBase.exists()) {
                JOptionPane.showMessageDialog(null, ""No se encuentra el fichero DB"", ""Error"", JOptionPane.ERROR_MESSAGE);
            } else {
                G.conn = DriverManager.getConnection(""jdbc:sqlite:"" + fileName);
                HashMap<Integer, String> languageIDs = new HashMap<Integer, String>();
                HashMap<Integer, String> typeIDs = new HashMap<Integer, String>();
                long tiempoInicio = System.currentTimeMillis();
                Element dataBaseXML = new Element(""database"");
                Element languages = new Element(""languages"");
                Statement stat = G.conn.createStatement();
                ResultSet rs = stat.executeQuery(""select * from language order by id"");
                while (rs.next()) {
                    int id = rs.getInt(""id"");
                    String name = rs.getString(""name"");
                    languageIDs.put(id, name);
                    Element language = new Element(""language"");
                    language.setText(name);
                    languages.addContent(language);
                }
                dataBaseXML.addContent(languages);
                rs = stat.executeQuery(""select * from type order by id"");
                while (rs.next()) {
                    int id = rs.getInt(""id"");
                    String name = rs.getString(""name"");
                    typeIDs.put(id, name);
                }
                rs = stat.executeQuery(""select distinct name from main order by name"");
                while (rs.next()) {
                    String name = rs.getString(""name"");
                    Element image = new Element(""image"");
                    image.setAttribute(""id"", name);
                    Statement stat2 = G.conn.createStatement();
                    ResultSet rs2 = stat2.executeQuery(""select distinct idL from main where name = \"""" + name + ""\"" order by idL"");
                    while (rs2.next()) {
                        int idL = rs2.getInt(""idL"");
                        Element language = new Element(""language"");
                        language.setAttribute(""id"", languageIDs.get(idL));
                        Statement stat3 = G.conn.createStatement();
                        ResultSet rs3 = stat3.executeQuery(""select * from main where name = \"""" + name + ""\"" and idL = "" + idL + "" order by idT"");
                        while (rs3.next()) {
                            int idT = rs3.getInt(""idT"");
                            String word = rs3.getString(""word"");
                            Element wordE = new Element(""word"");
                            wordE.setAttribute(""type"", typeIDs.get(idT));
                            wordE.setText(word);
                            language.addContent(wordE);
                            String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name;
                            String pathDst = output + File.separator + name;
                            try {
                                FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                                FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                dstChannel.close();
                            } catch (IOException exc) {
                                System.out.println(exc.getMessage());
                                System.out.println(exc.toString());
                            }
                        }
                        rs3.close();
                        stat3.close();
                        image.addContent(language);
                    }
                    rs2.close();
                    stat2.close();
                    dataBaseXML.addContent(image);
                }
                rs.close();
                stat.close();
                XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName);
                out.output(dataBaseXML, f);
                f.flush();
                f.close();
                long totalTiempo = System.currentTimeMillis() - tiempoInicio;
                System.out.println(""El tiempo total es :"" + totalTiempo / 1000 + "" segundos"");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900305,17402775,9713536,"    public String getResourceAsString(String name) throws IOException {
        String content = null;
        InputStream stream = aClass.getResourceAsStream(name);
        if (stream != null) {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            IOUtils.copyAndClose(stream, buffer);
            content = buffer.toString();
        } else {
            Assert.fail(""Resource not available: "" + name);
        }
        return content;
    }
","        @SuppressWarnings(""unchecked"")
        private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception {
            final String url = request.getRequestURL().toString();
            if (url.endsWith(""/favicon.ico"")) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            if (url.contains(""/delay"")) {
                final String delay = StringUtils.substringBetween(url, ""/delay"", ""/"");
                final int ms = Integer.parseInt(delay);
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Sleeping for "" + ms + "" before to deliver "" + url);
                }
                Thread.sleep(ms);
            }
            final URL requestedUrl = new URL(url);
            final WebRequest webRequest = new WebRequest(requestedUrl);
            webRequest.setHttpMethod(HttpMethod.valueOf(request.getMethod()));
            for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) {
                final String headerName = en.nextElement();
                final String headerValue = request.getHeader(headerName);
                webRequest.setAdditionalHeader(headerName, headerValue);
            }
            final List<NameValuePair> requestParameters = new ArrayList<NameValuePair>();
            for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) {
                final String name = paramNames.nextElement();
                final String[] values = request.getParameterValues(name);
                for (final String value : values) {
                    requestParameters.add(new NameValuePair(name, value));
                }
            }
            if (""PUT"".equals(request.getMethod()) && request.getContentLength() > 0) {
                final byte[] buffer = new byte[request.getContentLength()];
                request.getInputStream().readLine(buffer, 0, buffer.length);
                webRequest.setRequestBody(new String(buffer));
            } else {
                webRequest.setRequestParameters(requestParameters);
            }
            final WebResponse resp = MockConnection_.getResponse(webRequest);
            response.setStatus(resp.getStatusCode());
            for (final NameValuePair responseHeader : resp.getResponseHeaders()) {
                response.addHeader(responseHeader.getName(), responseHeader.getValue());
            }
            if (WriteContentAsBytes_) {
                IOUtils.copy(resp.getContentAsStream(), response.getOutputStream());
            } else {
                final String newContent = getModifiedContent(resp.getContentAsString());
                final String contentCharset = resp.getContentCharset();
                response.setCharacterEncoding(contentCharset);
                response.getWriter().print(newContent);
            }
            response.flushBuffer();
        }
",True
900306,23113421,2046158,"    public String getString(String arg) throws Exception {
        URL url = new URL(arg);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        con.connect();
        InputStreamReader src = new InputStreamReader(con.getInputStream(), ""ISO-8859-1"");
        StringBuffer stb = new StringBuffer();
        char[] buf = new char[1024];
        int l;
        while ((l = src.read(buf, 0, 1024)) >= 0) {
            stb.append(buf, 0, l);
        }
        String res = stb.toString();
        if (res.startsWith(""<pannenleiter-exception"")) {
            builder.start(new TreeNode((TreeWidget) null, false), false);
            InputSource xmlInput = new InputSource(new StringReader(res));
            parser.setDocumentHandler(builder);
            parser.parse(xmlInput);
        }
        return res;
    }
","    String chooseHGVersion(String version) {
        String line = """";
        try {
            URL connectURL = new URL(""http://genome.ucsc.edu/cgi-bin/hgGateway?db="" + version);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""hgsid"") != -1) {
                    line = line.substring(line.indexOf(""hgsid""));
                    line = line.substring(line.indexOf(""VALUE=\"""") + 7);
                    line = line.substring(0, line.indexOf(""\""""));
                    return line;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return line;
    }
",False
900307,2544868,3024984,"    public String encode(String plain) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plain.getBytes());
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
","    @Test
    public void testCopy_readerToOutputStream() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out);
        assertEquals(""Sizes differ"", inData.length, baout.size());
        assertTrue(""Content differs"", Arrays.equals(inData, baout.toByteArray()));
    }
",False
900308,17286897,13521323,"        public void check() {
            statusBar.setStatusText(Labels.getLabel(""state.retrievingVersion""));
            Runnable checkVersionCode = new Runnable() {

                public void run() {
                    BufferedReader reader = null;
                    String message = null;
                    int messageStyle = SWT.ICON_WARNING;
                    try {
                        URL url = new URL(Version.LATEST_VERSION_URL);
                        URLConnection conn = url.openConnection();
                        reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String latestVersion = reader.readLine();
                        latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);
                        if (!Version.getVersion().equals(latestVersion)) {
                            message = Labels.getLabel(""text.version.old"");
                            message = message.replaceFirst(""%LATEST"", latestVersion);
                            message = message.replaceFirst(""%VERSION"", Version.getVersion());
                            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                        } else {
                            message = Labels.getLabel(""text.version.latest"");
                            messageStyle = SWT.ICON_INFORMATION;
                        }
                    } catch (Exception e) {
                        message = Labels.getLabel(""exception.UserErrorException.version.latestFailed"");
                        Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);
                    } finally {
                        try {
                            if (reader != null) reader.close();
                        } catch (IOException e) {
                        }
                        final String messageToShow = message;
                        final int messageStyleToShow = messageStyle;
                        Display.getDefault().asyncExec(new Runnable() {

                            public void run() {
                                statusBar.setStatusText(null);
                                MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);
                                messageBox.setText(Version.getFullName());
                                messageBox.setMessage(messageToShow);
                                if (messageBox.open() == SWT.YES) {
                                    BrowserLauncher.openURL(Version.DOWNLOAD_URL);
                                }
                            }
                        });
                    }
                }
            };
            new Thread(checkVersionCode).start();
        }
","    public static void copyFile(final String inFile, final String outFile) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(inFile).getChannel();
            out = new FileOutputStream(outFile).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (final Exception e) {
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (final Exception e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (final Exception e) {
                }
            }
        }
    }
",False
900309,21781575,16385631,"    private String loadSchemas() {
        StringWriter writer = new StringWriter();
        try {
            IOUtils.copy(CoreOdfValidator.class.getResourceAsStream(""schema_list.properties""), writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return writer.toString();
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",False
900310,4461832,11339042,"    @Test
    public void testXMLDBURLStreamHandler() {
        System.out.println(""testXMLDBURLStreamHandler"");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            URL url = new URL(XMLDB_URL_1);
            InputStream is = url.openStream();
            copyDocument(is, baos);
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            LOG.error(ex);
            fail(ex.getMessage());
        }
    }
","    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        PrintWriter out = null;
        ServletOutputStream outstream = null;
        try {
            String action = req.getParameter(""nmrshiftdbaction"");
            String relativepath = ServletUtils.expandRelative(this.getServletConfig(), ""/WEB-INF"");
            TurbineConfig tc = new TurbineConfig(relativepath + "".."", relativepath + getServletConfig().getInitParameter(""properties""));
            tc.init();
            int spectrumId = -1;
            DBSpectrum spectrum = null;
            Export export = null;
            String format = req.getParameter(""format"");
            if (action.equals(""test"")) {
                try {
                    res.setContentType(""text/plain"");
                    out = res.getWriter();
                    List l = DBSpectrumPeer.executeQuery(""select SPECTRUM_ID from SPECTRUM limit 1"");
                    if (l.size() > 0) spectrumId = ((Record) l.get(0)).getValue(1).asInt();
                    out.write(""success"");
                } catch (Exception ex) {
                    out.write(""failure"");
                }
            } else if (action.equals(""rss"")) {
                int numbertoexport = 10;
                out = res.getWriter();
                if (req.getParameter(""numbertoexport"") != null) {
                    try {
                        numbertoexport = Integer.parseInt(req.getParameter(""numbertoexport""));
                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(""Number to small/large"");
                    } catch (NumberFormatException ex) {
                        out.println(""The parameter <code>numbertoexport</code>must be an integer from 1 to 20"");
                    }
                }
                res.setContentType(""text/xml"");
                RssWriter rssWriter = new RssWriter();
                rssWriter.setWriter(res.getWriter());
                AtomContainerSet soac = new AtomContainerSet();
                String query = ""select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\""true\"" order by MOLECULE.DATE desc;"";
                List l = NmrshiftdbUserPeer.executeQuery(query);
                for (int i = 0; i < numbertoexport; i++) {
                    if (i == l.size()) break;
                    DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));
                    IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1);
                    soac.addAtomContainer(cdkmol);
                    rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req));
                    rssWriter.getDatemap().put(cdkmol, mol.getDate());
                    rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback());
                    rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName());
                    rssWriter.setCreator(GeneralUtils.getAdminEmail(getServletConfig()));
                    Vector v = mol.getDBCanonicalNames();
                    for (int k = 0; k < v.size(); k++) {
                        DBCanonicalName canonName = (DBCanonicalName) v.get(k);
                        if (canonName.getDBCanonicalNameType().getCanonicalNameType() == ""INChI"") {
                            rssWriter.getInchimap().put(cdkmol, canonName.getName());
                            break;
                        }
                    }
                    rssWriter.setTitle(""NMRShiftDB"");
                    rssWriter.setLink(""http://www.nmrshiftdb.org"");
                    rssWriter.setDescription(""NMRShiftDB is an open-source, open-access, open-submission, open-content web database for chemical structures and their nuclear magnetic resonance data"");
                    rssWriter.setPublisher(""NMRShiftDB.org"");
                    rssWriter.setImagelink(""http://www.nmrshiftdb.org/images/nmrshift-logo.gif"");
                    rssWriter.setAbout(""http://www.nmrshiftdb.org/NmrshiftdbServlet?nmrshiftdbaction=rss"");
                    Collection coll = new ArrayList();
                    Vector spectra = mol.selectSpectra(null);
                    for (int k = 0; k < spectra.size(); k++) {
                        Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect();
                        Element el2 = el.getChildElements().get(0);
                        el.removeChild(el2);
                        coll.add(el2);
                    }
                    rssWriter.getMultiMap().put(cdkmol, coll);
                }
                rssWriter.write(soac);
            } else if (action.equals(""getattachment"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter(""sampleid"")));
                outstream.write(sample.getAttachment());
            } else if (action.equals(""createreport"")) {
                res.setContentType(""application/pdf"");
                outstream = res.getOutputStream();
                boolean yearly = req.getParameter(""style"").equals(""yearly"");
                int yearstart = Integer.parseInt(req.getParameter(""yearstart""));
                int yearend = Integer.parseInt(req.getParameter(""yearend""));
                int monthstart = 0;
                int monthend = 0;
                if (!yearly) {
                    monthstart = Integer.parseInt(req.getParameter(""monthstart""));
                    monthend = Integer.parseInt(req.getParameter(""monthend""));
                }
                int type = Integer.parseInt(req.getParameter(""type""));
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(relativepath + ""/reports/"" + (yearly ? ""yearly"" : ""monthly"") + ""_report_"" + type + "".jasper"");
                Map parameters = new HashMap();
                if (yearly) parameters.put(""HEADER"", ""Report for years "" + yearstart + "" - "" + yearend); else parameters.put(""HEADER"", ""Report for "" + monthstart + ""/"" + yearstart + "" - "" + monthend + ""/"" + yearend);
                DBConnection dbconn = TurbineDB.getConnection();
                Connection conn = dbconn.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = null;
                if (type == 1) {
                    rs = stmt.executeQuery(""select YEAR(DATE) as YEAR, "" + (yearly ? """" : "" MONTH(DATE) as MONTH, "") + ""AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>="" + yearstart + "" and YEAR(DATE)<="" + yearend + "" and LOGIN_NAME<>'testuser' group by YEAR, "" + (yearly ? """" : ""MONTH, "") + ""AFFILIATION_1, AFFILIATION_2, MACHINE.NAME"");
                } else if (type == 2) {
                    rs = stmt.executeQuery(""select YEAR(DATE) as YEAR, "" + (yearly ? """" : "" MONTH(DATE) as MONTH, "") + ""MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, "" + (yearly ? """" : ""MONTH, "") + ""MACHINE.NAME"");
                }
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs));
                JasperExportManager.exportReportToPdfStream(jasperPrint, outstream);
                dbconn.close();
            } else if (action.equals(""exportcmlbyinchi"")) {
                res.setContentType(""text/xml"");
                out = res.getWriter();
                String inchi = req.getParameter(""inchi"");
                String spectrumtype = req.getParameter(""spectrumtype"");
                Criteria crit = new Criteria();
                crit.add(DBCanonicalNamePeer.NAME, inchi);
                crit.addJoin(DBCanonicalNamePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);
                crit.addJoin(DBSpectrumPeer.SPECTRUM_TYPE_ID, DBSpectrumTypePeer.SPECTRUM_TYPE_ID);
                crit.add(DBSpectrumTypePeer.NAME, spectrumtype);
                try {
                    GeneralUtils.logToSql(crit.toString(), null);
                } catch (Exception ex) {
                }
                Vector spectra = DBSpectrumPeer.doSelect(crit);
                if (spectra.size() == 0) {
                    out.write(""No such molecule or spectrum"");
                } else {
                    Element cmlElement = new Element(""cml"");
                    cmlElement.addAttribute(new Attribute(""convention"", ""nmrshiftdb-convention""));
                    cmlElement.setNamespaceURI(""http://www.xml-cml.org/schema"");
                    Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1);
                    nu.xom.Node cmldoc = parent.getChild(0);
                    ((Element) cmldoc).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    parent.removeChildren();
                    cmlElement.appendChild(cmldoc);
                    for (int k = 0; k < spectra.size(); k++) {
                        Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect();
                        Node spectrumel = parentspec.getChild(0);
                        parentspec.removeChildren();
                        cmlElement.appendChild(spectrumel);
                        ((Element) spectrumel).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    }
                    out.write(cmlElement.toXML());
                }
            } else if (action.equals(""namelist"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ZipOutputStream zipout = new ZipOutputStream(baos);
                Criteria crit = new Criteria();
                crit.addJoin(DBMoleculePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);
                crit.add(DBSpectrumPeer.REVIEW_FLAG, ""true"");
                Vector v = DBMoleculePeer.doSelect(crit);
                for (int i = 0; i < v.size(); i++) {
                    if (i % 500 == 0) {
                        if (i != 0) {
                            zipout.write(new String(""<p>The list is continued <a href=\""nmrshiftdb.names."" + i + "".html\"">here</a></p></body></html>"").getBytes());
                            zipout.closeEntry();
                        }
                        zipout.putNextEntry(new ZipEntry(""nmrshiftdb.names."" + i + "".html""));
                        zipout.write(new String(""<html><body><h1>This is a list of strcutures in <a href=\""http://www.nmrshiftdb.org\"">NMRShiftDB</a>, starting at "" + i + "", Its main purpose is to be found by search engines</h1>"").getBytes());
                    }
                    DBMolecule mol = (DBMolecule) v.get(i);
                    zipout.write(new String(""<p><a href=\"""" + mol.getEasylink(req) + ""\"">"").getBytes());
                    Vector cannames = mol.getDBCanonicalNames();
                    for (int k = 0; k < cannames.size(); k++) {
                        zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + "" "").getBytes());
                    }
                    Vector chemnames = mol.getDBChemicalNames();
                    for (int k = 0; k < chemnames.size(); k++) {
                        zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + "" "").getBytes());
                    }
                    zipout.write(new String(""</a>. Information we have got: NMR spectra"").getBytes());
                    Vector spectra = mol.selectSpectra();
                    for (int k = 0; k < spectra.size(); k++) {
                        zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + "", "").getBytes());
                    }
                    if (mol.hasAny3d()) zipout.write(new String(""3D coordinates, "").getBytes());
                    zipout.write(new String(""File formats: CML, mol, png, jpeg"").getBytes());
                    zipout.write(new String(""</p>"").getBytes());
                }
                zipout.write(new String(""</body></html>"").getBytes());
                zipout.closeEntry();
                zipout.close();
                InputStream is = new ByteArrayInputStream(baos.toByteArray());
                byte[] buf = new byte[32 * 1024];
                int nRead = 0;
                while ((nRead = is.read(buf)) != -1) {
                    outstream.write(buf, 0, nRead);
                }
            } else if (action.equals(""predictor"")) {
                if (req.getParameter(""symbol"") == null) {
                    res.setContentType(""text/plain"");
                    out = res.getWriter();
                    out.write(""please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C"");
                }
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ZipOutputStream zipout = new ZipOutputStream(baos);
                String filename = ""org/openscience/nmrshiftdb/PredictionTool.class"";
                zipout.putNextEntry(new ZipEntry(filename));
                JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), ""/WEB-INF/lib/nmrshiftdb-lib.jar"")));
                JarEntry entry = jip.getNextJarEntry();
                while (entry.getName().indexOf(""PredictionTool.class"") == -1) {
                    entry = jip.getNextJarEntry();
                }
                for (int i = 0; i < entry.getSize(); i++) {
                    zipout.write(jip.read());
                }
                zipout.closeEntry();
                zipout.putNextEntry(new ZipEntry(""nmrshiftdb.csv""));
                int i = 0;
                org.apache.turbine.util.db.pool.DBConnection conn = TurbineDB.getConnection();
                HashMap mapsmap = new HashMap();
                while (true) {
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(""select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='"" + req.getParameter(""symbol"") + ""' limit "" + (i * 1000) + "", 1000"");
                    int m = 0;
                    while (rs.next()) {
                        String code = rs.getString(1);
                        Double value = new Double(rs.getString(2));
                        String symbol = rs.getString(3);
                        if (mapsmap.get(symbol) == null) {
                            mapsmap.put(symbol, new HashMap());
                        }
                        for (int spheres = 6; spheres > 0; spheres--) {
                            StringBuffer hoseCodeBuffer = new StringBuffer();
                            StringTokenizer st = new StringTokenizer(code, ""()/"");
                            for (int k = 0; k < spheres; k++) {
                                if (st.hasMoreTokens()) {
                                    String partcode = st.nextToken();
                                    hoseCodeBuffer.append(partcode);
                                }
                                if (k == 0) {
                                    hoseCodeBuffer.append(""("");
                                } else if (k == 3) {
                                    hoseCodeBuffer.append("")"");
                                } else {
                                    hoseCodeBuffer.append(""/"");
                                }
                            }
                            String hoseCode = hoseCodeBuffer.toString();
                            if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) {
                                ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList());
                            }
                            ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value);
                        }
                        m++;
                    }
                    i++;
                    stmt.close();
                    if (m == 0) break;
                }
                Set keySet = mapsmap.keySet();
                Iterator it = keySet.iterator();
                while (it.hasNext()) {
                    String symbol = (String) it.next();
                    HashMap hosemap = ((HashMap) mapsmap.get(symbol));
                    Set keySet2 = hosemap.keySet();
                    Iterator it2 = keySet2.iterator();
                    while (it2.hasNext()) {
                        String hoseCode = (String) it2.next();
                        ArrayList list = ((ArrayList) hosemap.get(hoseCode));
                        double[] values = new double[list.size()];
                        for (int k = 0; k < list.size(); k++) {
                            values[k] = ((Double) list.get(k)).doubleValue();
                        }
                        zipout.write(new String(symbol + ""|"" + hoseCode + ""|"" + Statistics.minimum(values) + ""|"" + Statistics.average(values) + ""|"" + Statistics.maximum(values) + ""\r\n"").getBytes());
                    }
                }
                zipout.closeEntry();
                zipout.close();
                InputStream is = new ByteArrayInputStream(baos.toByteArray());
                byte[] buf = new byte[32 * 1024];
                int nRead = 0;
                i = 0;
                while ((nRead = is.read(buf)) != -1) {
                    outstream.write(buf, 0, nRead);
                }
            } else if (action.equals(""exportspec"") || action.equals(""exportmol"")) {
                if (spectrumId > -1) spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(spectrumId)); else spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter(""spectrumid"")));
                export = new Export(spectrum);
            } else if (action.equals(""exportmdl"")) {
                res.setContentType(""text/plain"");
                outstream = res.getOutputStream();
                DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter(""moleculeid"")));
                outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter(""coordsetid"")), false).getBytes());
            } else if (action.equals(""exportlastinputs"")) {
                format = action;
            } else if (action.equals(""printpredict"")) {
                res.setContentType(""text/html"");
                out = res.getWriter();
                HttpSession session = req.getSession();
                VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true);
                StringWriter w = new StringWriter();
                Velocity.mergeTemplate(""predictprint.vm"", ""ISO-8859-1"", context, w);
                out.println(w.toString());
            } else {
                res.setContentType(""text/html"");
                out = res.getWriter();
                out.println(""No valid action"");
            }
            if (format == null) format = """";
            if (format.equals(""pdf"") || format.equals(""rtf"")) {
                res.setContentType(""application/"" + format);
                out = res.getWriter();
            }
            if (format.equals(""docbook"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""svg"")) {
                res.setContentType(""image/x-svg"");
                out = res.getWriter();
            }
            if (format.equals(""tiff"")) {
                res.setContentType(""image/tiff"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""jpeg"")) {
                res.setContentType(""image/jpeg"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""png"")) {
                res.setContentType(""image/png"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""mdl"") || format.equals(""txt"") || format.equals(""cml"") || format.equals(""cmlboth"") || format.indexOf(""exsection"") == 0) {
                res.setContentType(""text/plain"");
                out = res.getWriter();
            }
            if (format.equals(""simplehtml"") || format.equals(""exportlastinputs"")) {
                res.setContentType(""text/html"");
                out = res.getWriter();
            }
            if (action.equals(""exportlastinputs"")) {
                int numbertoexport = 4;
                if (req.getParameter(""numbertoexport"") != null) {
                    try {
                        numbertoexport = Integer.parseInt(req.getParameter(""numbertoexport""));
                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(""Number to small/large"");
                    } catch (NumberFormatException ex) {
                        out.println(""The parameter <code>numbertoexport</code>must be an integer from 1 to 20"");
                    }
                }
                NmrshiftdbUser user = null;
                try {
                    user = NmrshiftdbUserPeer.getByName(req.getParameter(""username""));
                } catch (NmrshiftdbException ex) {
                    out.println(""Seems <code>username</code> is not OK: "" + ex.getMessage());
                }
                if (user != null) {
                    List l = NmrshiftdbUserPeer.executeQuery(""SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\"""" + user.getUserName() + ""\"";"");
                    Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate();
                    if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) {
                        out.println(""Your last download was at "" + lastDownloadDate + "". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!"");
                    } else {
                        NmrshiftdbUserPeer.executeStatement(""UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\"""" + user.getUserName() + ""\"";"");
                        Vector<String> parameters = new Vector<String>();
                        String query = ""select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\""true\"" and SPECTRUM.USER_ID="" + user.getUserId() + "" order by MOLECULE.DATE desc;"";
                        l = NmrshiftdbUserPeer.executeQuery(query);
                        String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString();
                        url = url.substring(0, url.length() - 17);
                        for (int i = 0; i < numbertoexport; i++) {
                            if (i == l.size()) break;
                            DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));
                            parameters.add(new String(""<a href=\"""" + url + ""/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber="" + mol.getMoleculeId() + ""\""><img src=\"""" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + ""?nmrshiftdbaction=exportmol&spectrumid="" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + ""&format=jpeg&size=150x150&backcolor=12632256\""></a>""));
                        }
                        VelocityContext context = new VelocityContext();
                        context.put(""results"", parameters);
                        StringWriter w = new StringWriter();
                        Velocity.mergeTemplate(""lateststructures.vm"", ""ISO-8859-1"", context, w);
                        out.println(w.toString());
                    }
                }
            }
            if (action.equals(""exportspec"")) {
                if (format.equals(""txt"")) {
                    String lastsearchtype = req.getParameter(""lastsearchtype"");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        List l = ParseUtils.parseSpectrumFromSpecFile(req.getParameter(""lastsearchvalues""));
                        spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM));
                    }
                    Vector v = spectrum.getOptions();
                    DBMolecule mol = spectrum.getDBMolecule();
                    out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + ""; "" + mol.getMolecularWeight() + "" Dalton\n\r"");
                    out.print(""\n\rAtom\t"");
                    if (spectrum.getDBSpectrumType().getElementSymbol() == (""H"")) out.print(""Mult.\t"");
                    out.print(""Meas."");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        out.print(""\tInput\tDiff"");
                    }
                    out.print(""\n\r"");
                    out.print(""No.\t"");
                    if (spectrum.getDBSpectrumType().getElementSymbol() == (""H"")) out.print(""\t"");
                    out.print(""Shift"");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        out.print(""\tShift\tM-I"");
                    }
                    out.print(""\n\r"");
                    for (int i = 0; i < v.size(); i++) {
                        out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + ""\t"" + ((ValuesForVelocityBean) v.get(i)).getRange());
                        if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                            out.print(""\t"" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + ""\t"" + ((ValuesForVelocityBean) v.get(i)).getDelta());
                        }
                        out.print(""\n\r"");
                    }
                }
                if (format.equals(""simplehtml"")) {
                    String i1 = export.getImage(false, ""jpeg"", ServletUtils.expandRelative(this.getServletConfig(), ""/nmrshiftdbhtml"") + ""/tmp/"" + System.currentTimeMillis(), true);
                    export.pictures[0] = new File(i1).getName();
                    String i2 = export.getImage(true, ""jpeg"", ServletUtils.expandRelative(this.getServletConfig(), ""/nmrshiftdbhtml"") + ""/tmp/"" + System.currentTimeMillis(), true);
                    export.pictures[1] = new File(i2).getName();
                    String docbook = export.getHtml();
                    out.print(docbook);
                }
                if (format.equals(""pdf"") || format.equals(""rtf"")) {
                    String svgSpec = export.getSpecSvg(400, 200);
                    String svgspecfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + ""s.svg"";
                    new FileOutputStream(svgspecfile).write(svgSpec.getBytes());
                    export.pictures[1] = svgspecfile;
                    String molSvg = export.getMolSvg(true);
                    String svgmolfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + ""m.svg"";
                    new FileOutputStream(svgmolfile).write(molSvg.getBytes());
                    export.pictures[0] = svgmolfile;
                    String docbook = export.getDocbook(""pdf"", ""SVG"");
                    TransformerFactory tFactory = TransformerFactory.newInstance();
                    Transformer transformer = tFactory.newTransformer(new StreamSource(""file:"" + GeneralUtils.getNmrshiftdbProperty(""docbookxslpath"", getServletConfig()) + ""/fo/docbook.xsl""));
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    transformer.transform(new StreamSource(new StringReader(docbook)), new StreamResult(baos));
                    FopFactory fopFactory = FopFactory.newInstance();
                    FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
                    OutputStream out2 = new ByteArrayOutputStream();
                    Fop fop = fopFactory.newFop(format.equals(""rtf"") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2);
                    TransformerFactory factory = TransformerFactory.newInstance();
                    transformer = factory.newTransformer();
                    Source src = new StreamSource(new StringReader(baos.toString()));
                    Result res2 = new SAXResult(fop.getDefaultHandler());
                    transformer.transform(src, res2);
                    out.print(out2.toString());
                }
                if (format.equals(""docbook"")) {
                    String i1 = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".svg"";
                    new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes());
                    export.pictures[0] = new File(i1).getName();
                    String i2 = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".svg"";
                    new FileOutputStream(i2).write(export.getMolSvg(true).getBytes());
                    export.pictures[1] = new File(i2).getName();
                    String docbook = export.getDocbook(""pdf"", ""SVG"");
                    String docbookfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".xml"";
                    new FileOutputStream(docbookfile).write(docbook.getBytes());
                    ByteArrayOutputStream baos = export.makeZip(new String[] { docbookfile, i1, i2 });
                    outstream.write(baos.toByteArray());
                }
                if (format.equals(""svg"")) {
                    out.print(export.getSpecSvg(400, 200));
                }
                if (format.equals(""tiff"") || format.equals(""jpeg"") || format.equals(""png"")) {
                    InputStream is = new FileInputStream(export.getImage(false, format, relativepath + ""/tmp/"" + System.currentTimeMillis(), true));
                    byte[] buf = new byte[32 * 1024];
                    int nRead = 0;
                    while ((nRead = is.read(buf)) != -1) {
                        outstream.write(buf, 0, nRead);
                    }
                }
                if (format.equals(""cml"")) {
                    out.print(spectrum.getCmlSpect().toXML());
                }
                if (format.equals(""cmlboth"")) {
                    Element cmlElement = new Element(""cml"");
                    cmlElement.addAttribute(new Attribute(""convention"", ""nmrshiftdb-convention""));
                    cmlElement.setNamespaceURI(""http://www.xml-cml.org/schema"");
                    Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals(""1H""));
                    nu.xom.Node cmldoc = parent.getChild(0);
                    ((Element) cmldoc).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    parent.removeChildren();
                    cmlElement.appendChild(cmldoc);
                    Element parentspec = spectrum.getCmlSpect();
                    Node spectrumel = parentspec.getChild(0);
                    parentspec.removeChildren();
                    cmlElement.appendChild(spectrumel);
                    ((Element) spectrumel).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    out.write(cmlElement.toXML());
                }
                if (format.indexOf(""exsection"") == 0) {
                    StringTokenizer st = new StringTokenizer(format, ""-"");
                    st.nextToken();
                    String template = st.nextToken();
                    Criteria crit = new Criteria();
                    crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId());
                    Vector v = spectrum.getDBMolecule().getDBSpectrums(crit);
                    VelocityContext context = new VelocityContext();
                    context.put(""spectra"", v);
                    context.put(""molecule"", spectrum.getDBMolecule());
                    StringWriter w = new StringWriter();
                    Velocity.mergeTemplate(""exporttemplates/"" + template, ""ISO-8859-1"", context, w);
                    out.write(w.toString());
                }
            }
            if (action.equals(""exportmol"")) {
                int width = -1;
                int height = -1;
                if (req.getParameter(""size"") != null) {
                    StringTokenizer st = new StringTokenizer(req.getParameter(""size""), ""x"");
                    width = Integer.parseInt(st.nextToken());
                    height = Integer.parseInt(st.nextToken());
                }
                boolean shownumbers = true;
                if (req.getParameter(""shownumbers"") != null && req.getParameter(""shownumbers"").equals(""false"")) {
                    shownumbers = false;
                }
                if (req.getParameter(""backcolor"") != null) {
                    export.backColor = new Color(Integer.parseInt(req.getParameter(""backcolor"")));
                }
                if (req.getParameter(""markatom"") != null) {
                    export.selected = Integer.parseInt(req.getParameter(""markatom"")) - 1;
                }
                if (format.equals(""svg"")) {
                    out.print(export.getMolSvg(true));
                }
                if (format.equals(""tiff"") || format.equals(""jpeg"") || format.equals(""png"")) {
                    InputStream is = new FileInputStream(export.getImage(true, format, relativepath + ""/tmp/"" + System.currentTimeMillis(), width, height, shownumbers, null));
                    byte[] buf = new byte[32 * 1024];
                    int nRead = 0;
                    while ((nRead = is.read(buf)) != -1) {
                        outstream.write(buf, 0, nRead);
                    }
                }
                if (format.equals(""mdl"")) {
                    out.println(spectrum.getDBMolecule().getStructureFile(1, false));
                }
                if (format.equals(""cml"")) {
                    out.println(spectrum.getDBMolecule().getCMLString(1));
                }
            }
            if (out != null) out.flush(); else outstream.flush();
        } catch (Exception ex) {
            ex.printStackTrace();
            out.print(GeneralUtils.logError(ex, ""NmrshiftdbServlet"", null, true));
            out.flush();
        }
    }
",False
900311,10846725,23250845,"        private DataFileType[] getDataFiles(Collection<ContentToSend> contentsToSend) {
            DataFileType[] files = new DataFileType[contentsToSend.size()];
            int fileIndex = 0;
            for (ContentToSend contentToSend : contentsToSend) {
                DataFileType dataFile = DataFileType.Factory.newInstance();
                dataFile.setFilename(contentToSend.getFileName());
                dataFile.setId(""D"" + fileIndex);
                dataFile.setMimeType(contentToSend.getMimeType());
                dataFile.setContentType(DataFileType.ContentType.EMBEDDED_BASE_64);
                final StringWriter stringWriter = new StringWriter();
                final OutputStream encodeStream = Base64.newEncoder(stringWriter, 0, null);
                final InputStream is = contentToSend.getInputStream();
                try {
                    long sizeCopied = IOUtils.copyLarge(is, encodeStream);
                    dataFile.setSize(BigDecimal.valueOf(sizeCopied));
                } catch (IOException e) {
                    throw new RuntimeException(""Failed to get input to the file to be sent"", e);
                } finally {
                    IOUtils.closeQuietly(encodeStream);
                    IOUtils.closeQuietly(is);
                }
                dataFile.setStringValue(stringWriter.toString());
                files[fileIndex++] = dataFile;
            }
            return files;
        }
","    private void unzipResource(final String resourceName, final File targetDirectory) throws IOException {
        assertTrue(resourceName.startsWith(""/""));
        final URL resource = this.getClass().getResource(resourceName);
        assertNotNull(""Expected '"" + resourceName + ""' not found."", resource);
        assertTrue(targetDirectory.isAbsolute());
        FileUtils.deleteDirectory(targetDirectory);
        assertTrue(targetDirectory.mkdirs());
        ZipInputStream in = null;
        boolean suppressExceptionOnClose = true;
        try {
            in = new ZipInputStream(resource.openStream());
            ZipEntry e;
            while ((e = in.getNextEntry()) != null) {
                if (e.isDirectory()) {
                    continue;
                }
                final File dest = new File(targetDirectory, e.getName());
                assertTrue(dest.isAbsolute());
                OutputStream out = null;
                try {
                    out = FileUtils.openOutputStream(dest);
                    IOUtils.copy(in, out);
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (out != null) {
                            out.close();
                        }
                        suppressExceptionOnClose = true;
                    } catch (final IOException ex) {
                        if (!suppressExceptionOnClose) {
                            throw ex;
                        }
                    }
                }
                in.closeEntry();
            }
            suppressExceptionOnClose = false;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (final IOException e) {
                if (!suppressExceptionOnClose) {
                    throw e;
                }
            }
        }
    }
",True
900312,13815966,20587078,"    private void getRdfResponse(StringBuilder sb, String url) {
        try {
            String inputLine = null;
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            while ((inputLine = reader.readLine()) != null) {
                sb.append(inputLine);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static void main(String[] a) {
        ArrayList<String> allFilesToBeCopied = new ArrayList<String>();
        new File(outputDir).mkdirs();
        try {
            FileReader fis = new FileReader(completeFileWithDirToCathFileList);
            BufferedReader bis = new BufferedReader(fis);
            String line = """";
            String currentCombo = """";
            while ((line = bis.readLine()) != null) {
                String[] allEntries = line.split(""\\s+"");
                String fileName = allEntries[0];
                String thisCombo = allEntries[1] + allEntries[2] + allEntries[3] + allEntries[4];
                if (currentCombo.equals(thisCombo)) {
                } else {
                    System.out.println(""merke: "" + fileName);
                    allFilesToBeCopied.add(fileName);
                    currentCombo = thisCombo;
                }
            }
            System.out.println(allFilesToBeCopied.size());
            for (String file : allFilesToBeCopied) {
                try {
                    FileChannel srcChannel = new FileInputStream(CathDir + file).getChannel();
                    FileChannel dstChannel = new FileOutputStream(outputDir + file).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",False
900313,17597668,2532322,"    private boolean copyFiles(File sourceDir, File destinationDir) {
        boolean result = false;
        try {
            if (sourceDir != null && destinationDir != null && sourceDir.exists() && destinationDir.exists() && sourceDir.isDirectory() && destinationDir.isDirectory()) {
                File sourceFiles[] = sourceDir.listFiles();
                if (sourceFiles != null && sourceFiles.length > 0) {
                    File destFiles[] = destinationDir.listFiles();
                    if (destFiles != null && destFiles.length > 0) {
                        for (int i = 0; i < destFiles.length; i++) {
                            if (destFiles[i] != null) {
                                destFiles[i].delete();
                            }
                        }
                    }
                    for (int i = 0; i < sourceFiles.length; i++) {
                        if (sourceFiles[i] != null && sourceFiles[i].exists() && sourceFiles[i].isFile()) {
                            String fileName = destFiles[i].getName();
                            File destFile = new File(destinationDir.getAbsolutePath() + ""/"" + fileName);
                            if (!destFile.exists()) destFile.createNewFile();
                            FileInputStream in = new FileInputStream(sourceFiles[i]);
                            FileOutputStream out = new FileOutputStream(destFile);
                            FileChannel fcIn = in.getChannel();
                            FileChannel fcOut = out.getChannel();
                            fcIn.transferTo(0, fcIn.size(), fcOut);
                        }
                    }
                }
            }
            result = true;
        } catch (Exception e) {
            System.out.println(""Exception in copyFiles Method : "" + e);
        }
        return result;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900314,13927065,8544627,"    void copyFile(File src, File dst) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        byte[] buf = new byte[10000];
        int n;
        FileOutputStream fos = new FileOutputStream(dst);
        while ((n = fis.read(buf)) > 0) fos.write(buf, 0, n);
        fis.close();
        fos.close();
        copied++;
    }
","        @Override
        protected void copyContent(String filename) throws IOException {
            InputStream in = null;
            try {
                in = LOADER.getResourceAsStream(RES_PKG + filename);
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copy(in, out);
                setResponseData(out.toByteArray());
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        }
",True
900315,14540145,7038631,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        Reader source = null;
        Writer destination = null;
        char[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""FileCopy: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""file is unwriteable: "" + dest_name);
                } else {
                    throw new FileCopyException(""FileCopy: destination "" + ""is not a file: "" + dest_name);
                }
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new BufferedReader(new FileReader(source_file));
            destination = new BufferedWriter(new FileWriter(destination_file));
            buffer = new char[1024];
            while (true) {
                bytes_read = source.read(buffer, 0, 1024);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) {
                try {
                    source.close();
                } catch (IOException e) {
                    ;
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                    ;
                }
            }
        }
    }
","    private FileLog(LOG_LEVEL displayLogLevel, LOG_LEVEL logLevel, String logPath) {
        this.logLevel = logLevel;
        this.displayLogLevel = displayLogLevel;
        if (null != logPath) {
            logFile = new File(logPath, ""current.log"");
            log(LOG_LEVEL.DEBUG, ""FileLog"", ""Initialising logfile "" + logFile.getAbsolutePath() + "" ."");
            try {
                if (logFile.exists()) {
                    if (!logFile.renameTo(new File(logPath, System.currentTimeMillis() + "".log""))) {
                        File newFile = new File(logPath, System.currentTimeMillis() + "".log"");
                        if (newFile.exists()) {
                            log(LOG_LEVEL.WARN, ""FileLog"", ""The file ("" + newFile.getAbsolutePath() + newFile.getName() + "") already exists, will overwrite it."");
                            newFile.delete();
                        }
                        newFile.createNewFile();
                        FileInputStream inStream = new FileInputStream(logFile);
                        FileOutputStream outStream = new FileOutputStream(newFile);
                        byte buffer[] = null;
                        int offSet = 0;
                        while (inStream.read(buffer, offSet, 2048) != -1) {
                            outStream.write(buffer);
                            offSet += 2048;
                        }
                        inStream.close();
                        outStream.close();
                        logFile.delete();
                        logFile = new File(logPath, ""current.log"");
                    }
                }
                logFile.createNewFile();
            } catch (IOException e) {
                logFile = null;
            }
        } else {
            logFile = null;
        }
    }
",True
900316,13131643,1416342,"    public void init(File file) {
        InputStream is = null;
        ByteArrayOutputStream os = null;
        try {
            is = new FileInputStream(file);
            os = new ByteArrayOutputStream();
            IOUtils.copy(is, os);
        } catch (Throwable e) {
            throw new VisualizerEngineException(""Unexcpected exception while reading MDF file"", e);
        }
        if (simulationEngine != null) simulationEngine.stopSimulation();
        simulationEngine = new TrafficAsynchSimulationEngine();
        simulationEngine.init(MDFReader.read(os.toByteArray()));
        simulationEngineThread = null;
    }
","    public void run() {
        for (int i = 0; i < iClNumberOfCycles; i++) {
            try {
                long lStartTime = System.currentTimeMillis();
                InputStream in = urlClDestinationURL.openStream();
                byte buf[] = new byte[1024];
                int num;
                while ((num = in.read(buf)) > 0) ;
                in.close();
                long lStopTime = System.currentTimeMillis();
                Node.getLogger().write((lStopTime - lStartTime) + "" ms"");
                avgCalls.update(lStopTime - lStartTime);
                System.out.print(""*"");
                System.out.flush();
                calls.update();
            } catch (Exception e) {
                cntErrors.update();
                System.out.print(""X"");
                System.out.flush();
            }
        }
    }
",False
900317,8506682,23411500,"    public static File getFileFromURL(URL url) {
        File tempFile;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"", ""."");
            tempFile = File.createTempFile(""xxindex"", "".tmp"", new File(tempDir));
            tempFile.deleteOnExit();
            InputStream is = url.openStream();
            in = new BufferedInputStream(is);
            FileOutputStream fos = new FileOutputStream(tempFile);
            out = new BufferedOutputStream(fos);
            byte[] b = new byte[1];
            while (in.read(b) >= 0) {
                out.write(b);
            }
            logger.debug(url + "" written to local file "" + tempFile.getAbsolutePath());
        } catch (IOException e) {
            throw new IllegalStateException(""Could not create local file for URL: "" + url, e);
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException e) {
            }
        }
        return tempFile;
    }
","    public void playSIDFromHVSC(String name) {
        player.reset();
        player.setStatus(""Loading song: "" + name);
        URL url;
        try {
            if (name.startsWith(""/"")) {
                name = name.substring(1);
            }
            url = getResource(hvscBase + name);
            if (player.readSID(url.openConnection().getInputStream())) {
                player.playSID();
            }
        } catch (IOException ioe) {
            System.out.println(""Could not load: "");
            ioe.printStackTrace();
            player.setStatus(""Could not load SID: "" + ioe.getMessage());
        }
    }
",False
900318,10047344,4317626,"    public static void main(String[] args) {
        LogFrame.getInstance();
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.trim().startsWith(DEBUG_PARAMETER_NAME + ""="")) {
                properties.put(DEBUG_PARAMETER_NAME, arg.trim().substring(DEBUG_PARAMETER_NAME.length() + 1).trim());
                if (properties.getProperty(DEBUG_PARAMETER_NAME).toLowerCase().equals(DEBUG_TRUE)) {
                    DEBUG = true;
                }
            } else if (arg.trim().startsWith(AUTOCONNECT_PARAMETER_NAME + ""="")) {
                properties.put(AUTOCONNECT_PARAMETER_NAME, arg.trim().substring(AUTOCONNECT_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(SITE_CONFIG_URL_PARAMETER_NAME + ""="")) {
                properties.put(SITE_CONFIG_URL_PARAMETER_NAME, arg.trim().substring(SITE_CONFIG_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_URL_PARAMETER_NAME + ""="")) {
                properties.put(DOCSERVICE_URL_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_URL_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOC_ID_PARAMETER_NAME + ""="")) {
                properties.put(DOC_ID_PARAMETER_NAME, arg.trim().substring(DOC_ID_PARAMETER_NAME.length() + 1).trim());
            } else if (arg.trim().startsWith(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME + ""="")) {
                properties.put(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME, arg.trim().substring(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME.length() + 1).trim());
                RichUIUtils.setDocServiceProxyFactoryClassname(properties.getProperty(DOCSERVICE_PROXY_FACTORY_PARAMETER_NAME));
            } else {
                System.out.println(""WARNING! Unknown or undefined parameter: '"" + arg.trim() + ""'"");
            }
        }
        System.out.println(""Annotation Diff GUI startup parameters:"");
        System.out.println(""------------------------------"");
        for (Object propName : properties.keySet()) {
            System.out.println(propName.toString() + ""="" + properties.getProperty((String) propName));
        }
        System.out.println(""------------------------------"");
        if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) == null || properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() == 0) {
            String err = ""Mandatory parameter '"" + SITE_CONFIG_URL_PARAMETER_NAME + ""' is missing.\n\nApplication will exit."";
            System.out.println(err);
            JOptionPane.showMessageDialog(new JFrame(), err, ""Error!"", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        try {
            String context = System.getProperty(CONTEXT);
            if (context == null || """".equals(context)) {
                context = DEFAULT_CONTEXT;
            }
            String s = System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                File f = File.createTempFile(""foo"", """");
                String gateHome = f.getParent().toString() + context;
                f.delete();
                System.setProperty(GateConstants.GATE_HOME_PROPERTY_NAME, gateHome);
                f = new File(System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + ""/plugins"");
                File f = new File(System.getProperty(GateConstants.PLUGINS_HOME_PROPERTY_NAME));
                if (!f.exists()) {
                    f.mkdirs();
                }
            }
            s = System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME);
            if (s == null || s.length() == 0) {
                System.setProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME, System.getProperty(GateConstants.GATE_HOME_PROPERTY_NAME) + ""/gate.xml"");
            }
            if (properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME) != null && properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME).length() > 0) {
                File f = new File(System.getProperty(GateConstants.GATE_SITE_CONFIG_PROPERTY_NAME));
                if (f.exists()) {
                    f.delete();
                }
                f.getParentFile().mkdirs();
                f.createNewFile();
                URL url = new URL(properties.getProperty(SITE_CONFIG_URL_PARAMETER_NAME));
                InputStream is = url.openStream();
                FileOutputStream fos = new FileOutputStream(f);
                int i = is.read();
                while (i != -1) {
                    fos.write(i);
                    i = is.read();
                }
                fos.close();
                is.close();
            }
            try {
                Gate.init();
                gate.Main.applyUserPreferences();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
        MainFrame.getInstance().setVisible(true);
        MainFrame.getInstance().pack();
        if (properties.getProperty(AUTOCONNECT_PARAMETER_NAME, """").toLowerCase().equals(AUTOCONNECT_TRUE)) {
            if (properties.getProperty(DOC_ID_PARAMETER_NAME) == null || properties.getProperty(DOC_ID_PARAMETER_NAME).length() == 0) {
                String err = ""Can't autoconnect. A parameter '"" + DOC_ID_PARAMETER_NAME + ""' is missing."";
                System.out.println(err);
                JOptionPane.showMessageDialog(new JFrame(), err, ""Error!"", JOptionPane.ERROR_MESSAGE);
                ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
            } else {
                ActionConnectToAnnDiffGUI.getInstance().actionPerformed(null);
            }
        } else {
            ActionShowAnnDiffConnectDialog.getInstance().actionPerformed(null);
        }
    }
","    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the SHA-1 MessageDigest. "" + ""Jive will be unable to function normally."");
            }
        }
        try {
            digest.update(data.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            System.err.println(e);
        }
        return encodeHex(digest.digest());
    }
",False
900319,20006636,945981,"    public void trimAndWriteNewSff(OutputStream out) throws IOException {
        TrimParser trimmer = new TrimParser();
        SffParser.parseSFF(untrimmedSffFile, trimmer);
        tempOut.close();
        headerBuilder.withNoIndex().numberOfReads(numberOfTrimmedReads);
        SffWriter.writeCommonHeader(headerBuilder.build(), out);
        InputStream in = null;
        try {
            in = new FileInputStream(tempReadDataFile);
            IOUtils.copyLarge(in, out);
        } finally {
            IOUtil.closeAndIgnoreErrors(in);
        }
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",True
900320,7237618,22051326,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException {
        final String f_key = key.trim();
        StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR);
        int tc = st.countTokens();
        int tc_name = tc - 9;
        try {
            final String product = st.nextToken();
            final String type = st.nextToken();
            final String loadStr = st.nextToken();
            final int load = Integer.parseInt(loadStr);
            final String lowMajorVersionStr = st.nextToken();
            final int lowMajorVersion = Integer.parseInt(lowMajorVersionStr);
            final String lowMinorVersionStr = st.nextToken();
            final double lowMinorVersion = Double.parseDouble(""0."" + lowMinorVersionStr);
            final String highMajorVersionStr = st.nextToken();
            final int highMajorVersion = Integer.parseInt(highMajorVersionStr);
            final String highMinorVersionStr = st.nextToken();
            final double highMinorVersion = Double.parseDouble(""0."" + highMinorVersionStr);
            String regName = """";
            for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken());
            final String randomHexStr = st.nextToken();
            final String md5Str = st.nextToken();
            String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1);
            byte[] md5;
            MessageDigest md = null;
            md = MessageDigest.getInstance(""MD5"");
            md.update(subKey.getBytes());
            md.update(FIELD_SEPERATOR.getBytes());
            md.update(zuonicsPassword.getBytes());
            md5 = md.digest();
            String testKey = subKey + FIELD_SEPERATOR;
            for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase();
            if (!testKey.equals(f_key)) throw new InvalidLicenseKeyException(""doesn't hash"");
            final String f_regName = regName;
            return new LicenseKey() {

                public String getProduct() {
                    return product;
                }

                public String getType() {
                    return type;
                }

                public int getLoad() {
                    return load;
                }

                public String getRegName() {
                    return f_regName;
                }

                public double getlowVersion() {
                    return lowMajorVersion + lowMinorVersion;
                }

                public double getHighVersion() {
                    return highMajorVersion + highMinorVersion;
                }

                public String getRandomHexStr() {
                    return randomHexStr;
                }

                public String getMD5HexStr() {
                    return md5Str;
                }

                public String toString() {
                    return f_key;
                }

                public boolean equals(Object obj) {
                    if (obj.toString().equals(toString())) return true;
                    return false;
                }
            };
        } catch (Exception e) {
            throw new InvalidLicenseKeyException(e.getMessage());
        }
    }
",False
900321,1092728,4245652,"    public String encodePassword(String rawPass, Object salt) {
        MessageDigest sha;
        try {
            sha = MessageDigest.getInstance(""SHA"");
        } catch (java.security.NoSuchAlgorithmException e) {
            throw new LdapDataAccessException(""No SHA implementation available!"");
        }
        sha.update(rawPass.getBytes());
        if (salt != null) {
            Assert.isInstanceOf(byte[].class, salt, ""Salt value must be a byte array"");
            sha.update((byte[]) salt);
        }
        byte[] hash = combineHashAndSalt(sha.digest(), (byte[]) salt);
        return (salt == null ? SHA_PREFIX : SSHA_PREFIX) + new String(Base64.encodeBase64(hash));
    }
","    public InputStream getExportFile() {
        URL url = ExportAction.class.getClassLoader().getResource(""sysConfig.xml"");
        if (url != null) try {
            return url.openStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",False
900322,9439748,16227459,"    public static void transfer(FileInputStream fileInStream, FileOutputStream fileOutStream) throws IOException {
        FileChannel fileInChannel = fileInStream.getChannel();
        FileChannel fileOutChannel = fileOutStream.getChannel();
        long fileInSize = fileInChannel.size();
        try {
            long transferred = fileInChannel.transferTo(0, fileInSize, fileOutChannel);
            if (transferred != fileInSize) {
                throw new IOException(""transfer() did not complete"");
            }
        } finally {
            ensureClose(fileInChannel, fileOutChannel);
        }
    }
","    public CmsSetupTestResult execute(CmsSetupBean setupBean) {
        CmsSetupTestResult testResult = new CmsSetupTestResult(this);
        String basePath = setupBean.getWebAppRfsPath();
        if (!basePath.endsWith(File.separator)) {
            basePath += File.separator;
        }
        File file1;
        Random rnd = new Random();
        do {
            file1 = new File(basePath + ""test"" + rnd.nextInt(1000));
        } while (file1.exists());
        boolean success = false;
        try {
            file1.createNewFile();
            FileWriter fw = new FileWriter(file1);
            fw.write(""aA1"");
            fw.close();
            success = true;
            FileReader fr = new FileReader(file1);
            success = success && (fr.read() == 'a');
            success = success && (fr.read() == 'A');
            success = success && (fr.read() == '1');
            success = success && (fr.read() == -1);
            fr.close();
            success = file1.delete();
            success = !file1.exists();
        } catch (Exception e) {
            success = false;
        }
        if (!success) {
            testResult.setRed();
            testResult.setInfo(""OpenCms cannot be installed without read and write privileges for path "" + basePath + ""! Please check you are running your servlet container with the right user and privileges."");
            testResult.setHelp(""Not enough permissions to create/read/write a file"");
            testResult.setResult(RESULT_FAILED);
        } else {
            testResult.setGreen();
            testResult.setResult(RESULT_PASSED);
        }
        return testResult;
    }
",True
900323,98428,16380120,"    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }
","    @Override
    public String compute_hash(String plaintext) {
        MessageDigest d;
        try {
            d = MessageDigest.getInstance(get_algorithm_name());
            d.update(plaintext.getBytes());
            byte[] hash = d.digest();
            StringBuffer sb = new StringBuffer();
            for (byte b : hash) sb.append(String.format(""%02x"", b));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
",False
900324,13873860,12863885,"    static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM);
        digest.update(pad.getBytes());
        digest.update(passwd);
        return digest.digest();
    }
","    private static String md5(String input) {
        String res = """";
        try {
            MessageDigest cript = MessageDigest.getInstance(""MD5"");
            cript.reset();
            cript.update(input.getBytes());
            byte[] md5 = cript.digest();
            String tmp = """";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += ""0"" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Log4k.error(pdfPrinter.class.getName(), ex.getMessage());
        }
        return res;
    }
",True
900325,6146145,14193058,"    public void testSystemPropertyConnector() throws Exception {
        final String rootFolderPath = ""test/ConnectorTest/fs/"".toLowerCase();
        final Connector connector = new SystemPropertyConnector();
        final ContentResolver contentResolver = new UnionContentResolver();
        final FSContentResolver fsContentResolver = new FSContentResolver();
        fsContentResolver.setRootFolderPath(rootFolderPath);
        contentResolver.addContentResolver(fsContentResolver);
        contentResolver.addContentResolver(new ClasspathContentResolver());
        connector.setContentResolver(contentResolver);
        String resultString;
        byte[] resultContent;
        Object resultObject;
        resultString = connector.getString(""helloWorldPath"");
        assertNull(resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNull(resultContent);
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        System.setProperty(""helloWorldPath"", ""org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNotNull(resultContent);
        assertEquals(""Hello World 2"", new String(resultContent, ""UTF-8""));
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        System.setProperty(""helloWorldPath"", ""file:org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""file:org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNull(resultObject);
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        System.setProperty(""helloWorldPath"", ""classpath:org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""classpath:org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNotNull(resultContent);
        assertEquals(""Hello World 2"", new String(resultContent, ""UTF-8""));
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        final InputStream helloWorldIS = new ByteArrayInputStream(""Hello World 2 - Test"".getBytes(""UTF-8""));
        FileUtils.forceMkdir(new File(rootFolderPath + ""/org/settings4j/connector""));
        final String helloWorldPath = rootFolderPath + ""/org/settings4j/connector/HelloWorld2.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorld2Path: "" + helloWorldPath);
        System.setProperty(""helloWorldPath"", ""file:org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""file:org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNotNull(resultContent);
        assertEquals(""Hello World 2 - Test"", new String(resultContent, ""UTF-8""));
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        System.setProperty(""helloWorldPath"", ""org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        resultContent = connector.getContent(""helloWorldPath"");
        assertNotNull(resultContent);
        assertEquals(""Hello World 2 - Test"", new String(resultContent, ""UTF-8""));
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
        System.setProperty(""helloWorldPath"", ""classpath:org/settings4j/connector/HelloWorld2.txt"");
        resultString = connector.getString(""helloWorldPath"");
        assertNotNull(resultString);
        assertEquals(""classpath:org/settings4j/connector/HelloWorld2.txt"", resultString);
        resultContent = connector.getContent(""helloWorldPath"");
        assertNotNull(resultContent);
        assertEquals(""Hello World 2"", new String(resultContent, ""UTF-8""));
        resultObject = connector.getObject(""helloWorldPath"");
        assertNull(resultObject);
    }
","    public static String submitURLRequest(String url) throws HttpException, IOException, URISyntaxException {
        HttpClient httpclient = new DefaultHttpClient();
        InputStream stream = null;
        user_agents = new LinkedList<String>();
        user_agents.add(""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        String response_text = """";
        URI uri = new URI(url);
        HttpGet post = new HttpGet(uri);
        int MAX = user_agents.size() - 1;
        int index = (int) Math.round(((double) Math.random() * (MAX)));
        String agent = user_agents.get(index);
        httpclient.getParams().setParameter(CoreProtocolPNames.USER_AGENT, agent);
        httpclient.getParams().setParameter(""User-Agent"", agent);
        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.ACCEPT_NONE);
        HttpResponse response = httpclient.execute(post);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            stream = entity.getContent();
            response_text = convertStreamToString(stream);
        }
        httpclient.getConnectionManager().shutdown();
        if (stream != null) {
            stream.close();
        }
        return response_text;
    }
",False
900326,5828731,10852631,"    public static void resize(File originalFile, File resizedFile, int width, String format) throws IOException {
        if (format != null && ""gif"".equals(format.toLowerCase())) {
            resize(originalFile, resizedFile, width, 1);
            return;
        }
        FileInputStream fis = new FileInputStream(originalFile);
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        int readLength = -1;
        int bufferSize = 1024;
        byte bytes[] = new byte[bufferSize];
        while ((readLength = fis.read(bytes, 0, bufferSize)) != -1) {
            byteStream.write(bytes, 0, readLength);
        }
        byte[] in = byteStream.toByteArray();
        fis.close();
        byteStream.close();
        Image inputImage = Toolkit.getDefaultToolkit().createImage(in);
        waitForImage(inputImage);
        int imageWidth = inputImage.getWidth(null);
        if (imageWidth < 1) throw new IllegalArgumentException(""image width "" + imageWidth + "" is out of range"");
        int imageHeight = inputImage.getHeight(null);
        if (imageHeight < 1) throw new IllegalArgumentException(""image height "" + imageHeight + "" is out of range"");
        int height = -1;
        double scaleW = (double) imageWidth / (double) width;
        double scaleY = (double) imageHeight / (double) height;
        if (scaleW >= 0 && scaleY >= 0) {
            if (scaleW > scaleY) {
                height = -1;
            } else {
                width = -1;
            }
        }
        Image outputImage = inputImage.getScaledInstance(width, height, java.awt.Image.SCALE_DEFAULT);
        checkImage(outputImage);
        encode(new FileOutputStream(resizedFile), outputImage, format);
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        final StringBuilder sbValueBeforeMD5 = new StringBuilder();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.fatal("""", e);
            return;
        }
        try {
            final long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(sId);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            final byte[] array = md5.digest();
            final StringBuilder sb = new StringBuilder();
            for (int j = 0; j < array.length; ++j) {
                final int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.fatal("""", e);
        }
    }
",False
900327,4208869,16944401,"    public static void putNextJarEntry(JarOutputStream modelStream, String name, File file) throws IOException {
        JarEntry entry = new JarEntry(name);
        entry.setSize(file.length());
        modelStream.putNextEntry(entry);
        InputStream fileStream = new BufferedInputStream(new FileInputStream(file));
        IOUtils.copy(fileStream, modelStream);
        fileStream.close();
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        try {
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            sourceChannel.close();
            destinationChannel.close();
        }
    }
",True
900328,15737835,7419810,"    public void add(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            String sqlStr = ""insert into t_ip_site (id,name,description,ascii_name,site_path,remark_number,increment_index,use_status,appserver_id) VALUES(?,?,?,?,?,?,?,?,?)"";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            preparedStatement = connection.prepareStatement(sqlStr);
            preparedStatement.setInt(1, site.getSiteID());
            preparedStatement.setString(2, site.getName());
            preparedStatement.setString(3, site.getDescription());
            preparedStatement.setString(4, site.getAsciiName());
            preparedStatement.setString(5, site.getPath());
            preparedStatement.setInt(6, site.getRemarkNumber());
            preparedStatement.setString(7, site.getIncrementIndex().trim());
            preparedStatement.setString(8, String.valueOf(site.getUseStatus()));
            preparedStatement.setString(9, String.valueOf(site.getAppserverID()));
            preparedStatement.executeUpdate();
            String[] path = new String[1];
            path[0] = site.getPath();
            selfDefineAdd(path, site, connection, preparedStatement);
            connection.commit();
            int resID = site.getSiteID() + Const.SITE_TYPE_RES;
            String resName = site.getName();
            int resTypeID = Const.RES_TYPE_ID;
            int operateTypeID = Const.OPERATE_TYPE_ID;
            String remark = """";
            AuthorityManager am = new AuthorityManager();
            am.createExtResource(Integer.toString(resID), resName, resTypeID, operateTypeID, remark);
            site.wirteFile();
        } catch (SQLException ex) {
            connection.rollback();
            log.error(""����վ��ʧ��!"", ex);
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
","    static void test() throws SQLException {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        Savepoint sp = null;
        try {
            conn = JdbcUtils.getConnection();
            conn.setAutoCommit(false);
            st = conn.createStatement();
            String sql = ""update user set money=money-10 where id=1"";
            st.executeUpdate(sql);
            sp = conn.setSavepoint();
            sql = ""update user set money=money-10 where id=3"";
            st.executeUpdate(sql);
            sql = ""select money from user where id=2"";
            rs = st.executeQuery(sql);
            float money = 0.0f;
            if (rs.next()) {
                money = rs.getFloat(""money"");
            }
            if (money > 300) throw new RuntimeException(""�Ѿ��������ֵ��"");
            sql = ""update user set money=money+10 where id=2"";
            st.executeUpdate(sql);
            conn.commit();
        } catch (RuntimeException e) {
            if (conn != null && sp != null) {
                conn.rollback(sp);
                conn.commit();
            }
            throw e;
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            JdbcUtils.free(rs, st, conn);
        }
    }
",True
900329,23370620,4491957,"    private File prepareFileForUpload(File source, String s3key) throws IOException {
        File tmp = File.createTempFile(""dirsync"", "".tmp"");
        tmp.deleteOnExit();
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(source);
            out = new DeflaterOutputStream(new CryptOutputStream(new FileOutputStream(tmp), cipher, getDataEncryptionKey()));
            IOUtils.copy(in, out);
            in.close();
            out.close();
            return tmp;
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    public void copyToCurrentDir(File _copyFile, String _fileName) throws IOException {
        File outputFile = new File(getCurrentPath() + File.separator + _fileName);
        FileReader in;
        FileWriter out;
        if (!outputFile.exists()) {
            outputFile.createNewFile();
        }
        in = new FileReader(_copyFile);
        out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        reList();
    }
",True
900330,18573528,14869434,"    public int process(ProcessorContext context) throws InterruptedException, ProcessorException {
        logger.info(""JAISaveTask:process"");
        final RenderedOp im = (RenderedOp) context.get(""RenderedOp"");
        final String path = ""s3://s3.amazonaws.com/rssfetch/"" + (new Guid());
        final PNGEncodeParam.RGB encPar = new PNGEncodeParam.RGB();
        encPar.setTransparentRGB(new int[] { 0, 0, 0 });
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""thmb"", "".png"");
            OutputStream out = new FileOutputStream(tmpFile);
            final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add(""png"").add(encPar);
            JAI.create(""encode"", pb, null);
            out.flush();
            out.close();
            FileInputStream in = new FileInputStream(tmpFile);
            final XFile xfile = new XFile(path);
            final XFileOutputStream xout = new XFileOutputStream(xfile);
            final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor());
            if (xfa != null) {
                xfa.setMimeType(""image/png"");
                xfa.setContentLength(tmpFile.length());
            }
            IOUtils.copy(in, xout);
            xout.flush();
            xout.close();
            in.close();
            context.put(""outputPath"", path);
        } catch (IOException e) {
            logger.error(e);
            throw new ProcessorException(e);
        } catch (Throwable e) {
            logger.error(e);
            throw new ProcessorException(e);
        } finally {
            if (tmpFile != null && tmpFile.exists()) {
                tmpFile.delete();
            }
        }
        return TaskState.STATE_MO_START + TaskState.STATE_ENCODE;
    }
","    @Override
    public void run() {
        try {
            FileChannel in = new FileInputStream(inputfile).getChannel();
            long pos = 0;
            for (int i = 1; i <= noofparts; i++) {
                FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + ""."" + ""v"" + i).getChannel();
                status.setText(""Rozdělovač: Rozděluji část "" + i + "".."");
                in.transferTo(pos, splitsize, out);
                pos += splitsize;
                remainingsize -= splitsize;
                if (remainingsize < splitsize) in.transferTo(pos, remainingsize, out);
                pb.setValue(100 * i / noofparts);
                out.close();
            }
            in.close();
            if (deleteOnFinish) new File(inputfile + """").delete();
            status.setText(""Rozdělovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Rozděleno!"", ""Rozdělovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
        }
    }
",True
900331,11604443,1023289,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer(128);
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer(32);
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & TWO_BYTES;
                if (b < PAD_BELOW) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""Error:"" + e);
        }
    }
","    public static String MD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            return """";
        }
    }
",True
900332,14350198,14284458,"    public static String encripty(String toEncripty) {
        if (toEncripty != null) {
            try {
                synchronized (toEncripty) {
                    java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
                    md.update(toEncripty.getBytes());
                    byte[] hash = md.digest();
                    StringBuffer hexString = new StringBuffer();
                    for (int i = 0; i < hash.length; i++) {
                        if ((0xff & hash[i]) < 0x10) hexString.append(""0"" + Integer.toHexString((0xFF & hash[i]))); else hexString.append(Integer.toHexString(0xFF & hash[i]));
                    }
                    toEncripty = hexString.toString();
                }
            } catch (Exception e) {
                e.getMessage();
            }
        }
        return toEncripty;
    }
","    private String md5(String txt) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(txt.getBytes(), 0, txt.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (Exception e) {
            return ""BAD MD5"";
        }
    }
",True
900333,13131643,8665322,"    public void init(File file) {
        InputStream is = null;
        ByteArrayOutputStream os = null;
        try {
            is = new FileInputStream(file);
            os = new ByteArrayOutputStream();
            IOUtils.copy(is, os);
        } catch (Throwable e) {
            throw new VisualizerEngineException(""Unexcpected exception while reading MDF file"", e);
        }
        if (simulationEngine != null) simulationEngine.stopSimulation();
        simulationEngine = new TrafficAsynchSimulationEngine();
        simulationEngine.init(MDFReader.read(os.toByteArray()));
        simulationEngineThread = null;
    }
","    public Vector<String> getVoiceServersNames() {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(voiceaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[0]);
                }
                if (line.startsWith(""!VOICE SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",False
900334,5021563,1039796,"    private String AddAction(ResultSet node, String modo) throws SQLException {
        Connection cn = null;
        Connection cndef = null;
        String schema = boRepository.getDefaultSchemaName(boApplication.getDefaultApplication()).toLowerCase();
        try {
            cn = this.getRepositoryConnection(p_ctx.getApplication(), p_ctx.getBoSession().getRepository().getName(), 1);
            cndef = this.getRepositoryConnection(p_ctx.getApplication(), p_ctx.getBoSession().getRepository().getName(), 2);
            String dml = null;
            String objecttype = node.getString(""OBJECTTYPE"");
            if (objecttype.equalsIgnoreCase(""T"")) {
                boolean exists = existsTable(p_ctx, schema, node.getString(""OBJECTNAME"").toLowerCase());
                String[] sysflds = { ""SYS_USER"", ""SYS_ICN"", ""SYS_DTCREATE"", ""SYS_DTSAVE"", ""SYS_ORIGIN"" };
                String[] sysfdef = { ""VARCHAR(25)"", ""NUMERIC(7)"", ""TIMESTAMP DEFAULT now()"", ""TIMESTAMP"", ""VARCHAR(30)"" };
                String[] sysftyp = { ""C"", ""N"", ""D"", ""D"", ""C"" };
                String[] sysfsiz = { ""25"", ""7"", """", """", ""30"" };
                String[] sysfndef = { """", """", """", """", """" };
                String[] sysfdes = { """", """", """", """", """" };
                if (!exists && !modo.equals(""3"")) {
                    dml = ""CREATE TABLE "" + node.getString(""OBJECTNAME"") + "" ("";
                    for (int i = 0; i < sysflds.length; i++) {
                        dml += (sysflds[i] + "" "" + sysfdef[i] + ((i < (sysflds.length - 1)) ? "","" : "")""));
                    }
                    String vt = node.getString(""OBJECTNAME"");
                    if (node.getString(""SCHEMA"").equals(""DEF"")) {
                        vt = ""NGD_"" + vt;
                    } else if (node.getString(""SCHEMA"").equals(""SYS"")) {
                        vt = ""SYS_"" + vt;
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
                if (modo.equals(""3"") && exists) {
                    executeDDL(""DROP TABLE "" + node.getString(""OBJECTNAME""), node.getString(""SCHEMA""));
                    CallableStatement call = cndef.prepareCall(""DELETE FROM NGTDIC WHERE TABLENAME=?"");
                    call.setString(1, node.getString(""OBJECTNAME""));
                    call.executeUpdate();
                    call.close();
                }
                checkDicFields(node.getString(""OBJECTNAME""), node.getString(""SCHEMA""), sysflds, sysftyp, sysfsiz, sysfndef, sysfdes);
            }
            if (objecttype.equalsIgnoreCase(""F"")) {
                boolean fldchg = false;
                boolean fldexi = false;
                PreparedStatement pstm = cn.prepareStatement(""select column_name,udt_name,character_maximum_length,numeric_precision,numeric_scale from information_schema.columns"" + ""  where table_name=? and column_name=? and table_schema=?"");
                pstm.setString(1, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(3, schema);
                ResultSet rslt = pstm.executeQuery();
                if (rslt.next()) {
                    int fieldsiz = rslt.getInt(3);
                    int fielddec = rslt.getInt(5);
                    if ("",C,N,"".indexOf("","" + getNgtFieldTypeFromDDL(rslt.getString(2)) + "","") != -1) {
                        if (getNgtFieldTypeFromDDL(rslt.getString(2)).equals(""N"")) {
                            fieldsiz = rslt.getInt(4);
                        }
                        if (fielddec != 0) {
                            if (!(fieldsiz + "","" + fielddec).equals(node.getString(""FIELDSIZE""))) {
                                fldchg = true;
                            }
                        } else {
                            if (!((fieldsiz == 0) && ((node.getString(""FIELDSIZE"") == null) || (node.getString(""FIELDSIZE"").length() == 0)))) {
                                if (!("""" + fieldsiz).equals(node.getString(""FIELDSIZE""))) {
                                    fldchg = true;
                                }
                            }
                        }
                    }
                    fldexi = true;
                } else {
                    fldexi = false;
                }
                rslt.close();
                pstm.close();
                boolean drop = false;
                if ((""20"".indexOf(modo) != -1) && !fldexi) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" add \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                } else if ((""20"".indexOf(modo) != -1) && fldexi && fldchg) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" ALTER COLUMN \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                } else if (modo.equals(""3"") && fldexi) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" drop  COLUMN \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                    String sql = ""SELECT tc.constraint_name,tc.constraint_type"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name = ?"" + "" AND kcu.column_name = ?"" + "" and tc.table_schema=?"";
                    PreparedStatement pstmrelc = cn.prepareStatement(sql);
                    pstmrelc.setString(1, node.getString(""TABLENAME"").toLowerCase());
                    pstmrelc.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                    pstmrelc.setString(3, schema);
                    ResultSet rsltrelc = pstmrelc.executeQuery();
                    while (rsltrelc.next()) {
                        String constname = rsltrelc.getString(1);
                        String consttype = rsltrelc.getString(2);
                        PreparedStatement pstmdic = cndef.prepareStatement(""DELETE FROM NGTDIC WHERE TABLENAME=? AND OBJECTTYPE=? AND OBJECTNAME=?"");
                        pstmdic.setString(1, node.getString(""TABLENAME""));
                        pstmdic.setString(2, consttype.equals(""R"") ? ""FK"" : ""PK"");
                        pstmdic.setString(3, constname);
                        int nrecs = pstmdic.executeUpdate();
                        pstm.close();
                        executeDDL(""ALTER TABLE "" + node.getString(""TABLENAME"") + "" DROP CONSTRAINT "" + constname, node.getString(""SCHEMA""));
                    }
                    rsltrelc.close();
                    pstmrelc.close();
                }
                if ((dml != null) && (dml.length() > 0) && !modo.equals(""3"")) {
                    String mfield = node.getString(""MACROFIELD"");
                    if ((mfield != null) && !(!mfield.equals(""TEXTOLIVRE"") && !mfield.equals(""NUMEROLIVRE"") && !mfield.equals(""TEXT"") && !mfield.equals(""BLOB"") && !mfield.equals(""MDATA""))) {
                        String ngtft = """";
                        if (mfield.equals(""TEXTOLIVRE"")) {
                            ngtft = ""C"";
                        } else if (mfield.equals(""NUMEROLIVRE"")) {
                            ngtft = ""N"";
                        } else if (mfield.equals(""RAW"")) {
                            ngtft = ""RAW"";
                        } else if (mfield.equals(""TIMESTAMP"")) {
                            ngtft = ""TIMESTAMP"";
                        } else if (mfield.equals(""MDATA"")) {
                            ngtft = ""D"";
                        } else if (mfield.equals(""TEXT"")) {
                            ngtft = ""CL"";
                        } else if (mfield.equals(""BLOB"")) {
                            ngtft = ""BL"";
                        }
                        dml += getDDLFieldFromNGT(ngtft, node.getString(""FIELDSIZE""));
                    } else if ((mfield != null) && (mfield.length() > 0)) {
                        dml += getMacrofieldDef(cndef, node.getString(""MACROFIELD""));
                    } else {
                        dml += getDDLFieldFromNGT(node.getString(""FIELDTYPE""), node.getString(""FIELDSIZE""));
                    }
                }
                String[] flds = new String[1];
                flds[0] = node.getString(""OBJECTNAME"");
                if (dml != null) {
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.equalsIgnoreCase(""V"")) {
                String viewText = null;
                PreparedStatement pstmrelc = cn.prepareStatement(""SELECT view_definition FROM information_schema.views WHERE table_name=? "" + ""and table_schema=?"");
                pstmrelc.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstmrelc.setString(2, schema.toLowerCase());
                ResultSet rsltrelc = pstmrelc.executeQuery();
                boolean exists = false;
                if (rsltrelc.next()) {
                    exists = true;
                    viewText = rsltrelc.getString(1);
                    viewText = viewText.substring(0, viewText.length() - 1);
                }
                rsltrelc.close();
                pstmrelc.close();
                if (!modo.equals(""3"")) {
                    String vExpression = node.getString(""EXPRESSION"");
                    if (!vExpression.toLowerCase().equals(viewText)) {
                        dml = ""CREATE OR REPLACE VIEW \"""" + node.getString(""OBJECTNAME"") + ""\"" AS \n"" + vExpression;
                        executeDDL(dml, node.getString(""SCHEMA""));
                    }
                } else {
                    if (exists) {
                        dml = ""DROP VIEW "" + node.getString(""OBJECTNAME"");
                        executeDDL(dml, node.getString(""SCHEMA""));
                        CallableStatement call = cndef.prepareCall(""DELETE FROM NGTDIC WHERE TABLENAME=?"");
                        call.setString(1, node.getString(""OBJECTNAME""));
                        call.executeUpdate();
                        call.close();
                    }
                }
            }
            if (objecttype.startsWith(""PCK"")) {
                String templatestr = node.getString(""EXPRESSION"");
                String bstr = ""/*begin_package*/"";
                String estr = ""/*end_package*/"";
                if (""02"".indexOf(modo) != -1) {
                    if (templatestr.indexOf(bstr) != -1) {
                        int defpos;
                        dml = templatestr.substring(templatestr.indexOf(bstr), defpos = templatestr.indexOf(estr));
                        dml = ""create or replace package "" + node.getString(""OBJECTNAME"") + "" is \n"" + dml + ""end "" + node.getString(""OBJECTNAME"") + "";\n"";
                        executeDDL(dml, node.getString(""SCHEMA""));
                        bstr = ""/*begin_package_body*/"";
                        estr = ""/*end_package_body*/"";
                        if (templatestr.indexOf(bstr, defpos) != -1) {
                            dml = templatestr.substring(templatestr.indexOf(bstr, defpos), templatestr.indexOf(estr, defpos));
                            dml = ""create or replace package body "" + node.getString(""OBJECTNAME"") + "" is \n"" + dml + ""end "" + node.getString(""OBJECTNAME"") + "";\n"";
                            executeDDL(dml, node.getString(""SCHEMA""));
                        }
                    } else {
                    }
                }
            }
            if (objecttype.startsWith(""PK"") || objecttype.startsWith(""UN"")) {
                String sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name = ?"" + "" AND tc.constraint_name = ?"" + "" and tc.table_schema=? order by ordinal_position"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(3, schema.toLowerCase());
                boolean isunique = objecttype.startsWith(""UN"");
                ResultSet rslt = pstm.executeQuery();
                boolean exists = false;
                StringBuffer expression = new StringBuffer();
                while (rslt.next()) {
                    if (exists) {
                        expression.append(',');
                    }
                    exists = true;
                    expression.append(rslt.getString(1));
                }
                boolean diff = !expression.toString().toUpperCase().equals(node.getString(""EXPRESSION""));
                rslt.close();
                pstm.close();
                if ((modo.equals(""3"") || diff) && exists) {
                    sql = ""SELECT tc.constraint_name,tc.table_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE ccu.constraint_name = ?"" + "" and tc.table_schema=?"";
                    PreparedStatement pstmrefs = cn.prepareStatement(sql);
                    pstmrefs.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                    pstmrefs.setString(2, schema.toLowerCase());
                    ResultSet rsltrefs = pstmrefs.executeQuery();
                    while (rsltrefs.next()) {
                        PreparedStatement pstmdelref = cndef.prepareStatement(""DELETE NGTDIC WHERE OBJECTNAME=? AND SCHEMA=? AND TABLENAME=? AND OBJECTTYPE='FK'"");
                        pstmdelref.setString(1, rsltrefs.getString(1));
                        pstmdelref.setString(2, node.getString(""SCHEMA""));
                        pstmdelref.setString(3, rsltrefs.getString(2));
                        pstmdelref.executeUpdate();
                        pstmdelref.close();
                        executeDDL(""alter table "" + rsltrefs.getString(2) + ""  drop constraint "" + rsltrefs.getString(1), node.getString(""SCHEMA""));
                    }
                    rsltrefs.close();
                    pstmrefs.close();
                    String insql = ""'"" + node.getString(""EXPRESSION"").toLowerCase().replaceAll("","", ""\\',\\'"") + ""'"";
                    sql = ""SELECT tc.constraint_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name=? and "" + ""kcu.column_name in ("" + insql + "")"" + "" and tc.table_schema=?"";
                    pstmrefs = cn.prepareStatement(sql);
                    pstmrefs.setString(1, node.getString(""TABLENAME"").toLowerCase());
                    pstmrefs.setString(2, schema.toLowerCase());
                    rsltrefs = pstmrefs.executeQuery();
                    while (rsltrefs.next()) {
                        PreparedStatement pstmdelref = cndef.prepareStatement(""DELETE NGTDIC WHERE OBJECTNAME=? AND SCHEMA=? AND TABLENAME=? AND OBJECTTYPE='FK'"");
                        pstmdelref.setString(1, rsltrefs.getString(1));
                        pstmdelref.setString(2, node.getString(""SCHEMA""));
                        pstmdelref.setString(3, node.getString(""TABLENAME""));
                        pstmdelref.executeUpdate();
                        pstmdelref.close();
                        executeDDL(""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + rsltrefs.getString(1), node.getString(""SCHEMA""));
                    }
                    rsltrefs.close();
                    pstmrefs.close();
                    if (exists && diff) {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + node.getString(""OBJECTNAME"");
                        try {
                            executeDDL(dml, node.getString(""SCHEMA""));
                        } catch (Exception e) {
                            logger.warn(LoggerMessageLocalizer.getMessage(""ERROR_EXCUTING_DDL"") + "" ("" + dml + "") "" + e.getMessage());
                        }
                    }
                }
                if (!modo.equals(""3"") && (!exists || diff)) {
                    if (isunique) {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" add constraint "" + node.getString(""OBJECTNAME"") + "" unique ("" + node.getString(""EXPRESSION"") + "")"";
                    } else {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" add primary key ("" + node.getString(""EXPRESSION"") + "")"";
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.startsWith(""FK"")) {
                String sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.constraint_name=?"" + "" and tc.table_name=?"" + "" and tc.table_schema=? order by ordinal_position"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(2, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(3, schema.toLowerCase());
                ResultSet rslt = pstm.executeQuery();
                boolean exists = false;
                String cExpress = """";
                String express = node.getString(""EXPRESSION"");
                if (rslt.next()) {
                    exists = true;
                    if (cExpress.length() > 0) cExpress += "","";
                    cExpress += rslt.getString(1);
                }
                rslt.close();
                pstm.close();
                if (exists && !express.equals(cExpress)) {
                    dml = ""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + node.getString(""OBJECTNAME"");
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
                if (!modo.equals(""3"") && (!exists || !express.equals(cExpress))) {
                    dml = ""alter table "" + node.getString(""TABLENAME"") + "" add constraint "" + node.getString(""OBJECTNAME"") + "" foreign key ("" + node.getString(""EXPRESSION"") + "") references "" + node.getString(""TABLEREFERENCE"") + ""("" + node.getString(""FIELDREFERENCE"") + "")"";
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.startsWith(""IDX"")) {
                boolean unflag = false;
                String sql = ""SELECT n.nspname"" + "" FROM pg_catalog.pg_class c"" + "" JOIN pg_catalog.pg_index i ON i.indexrelid = c.oid"" + "" JOIN pg_catalog.pg_class c2 ON i.indrelid = c2.oid"" + "" LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner"" + "" LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace"" + "" where c.relname=? and c.relkind='i' and n.nspname=?"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(2, schema.toLowerCase());
                ResultSet rslt = pstm.executeQuery();
                boolean drop = false;
                boolean exists = false;
                boolean dbunflag = false;
                String oldexpression = """";
                String newexpression = """";
                if (rslt.next()) {
                    exists = true;
                    if ((unflag && !(dbunflag = rslt.getString(1).equals(""UNIQUE"")))) {
                        drop = true;
                    }
                    rslt.close();
                    pstm.close();
                    sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.constraint_name=?"" + "" and tc.table_name=?"" + "" and tc.table_schema=? and tc.constraint_type='UNIQUE'"";
                    pstm = cn.prepareStatement(sql);
                    pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                    pstm.setString(2, node.getString(""TABLENAME"").toLowerCase());
                    pstm.setString(3, schema.toLowerCase());
                    rslt = pstm.executeQuery();
                    while (rslt.next()) {
                        oldexpression += (((oldexpression.length() > 0) ? "","" : """") + rslt.getString(1));
                    }
                    rslt.close();
                    pstm.close();
                } else {
                    rslt.close();
                    pstm.close();
                }
                String aux = node.getString(""EXPRESSION"");
                String[] nexo;
                if (aux != null) {
                    nexo = node.getString(""EXPRESSION"").split("","");
                } else {
                    nexo = new String[0];
                }
                for (byte i = 0; i < nexo.length; i++) {
                    newexpression += (((newexpression.length() > 0) ? "","" : """") + ((nexo[i]).toUpperCase().trim()));
                }
                if (!drop) {
                    drop = (!newexpression.equals(oldexpression)) && !oldexpression.equals("""");
                }
                if (exists && (drop || modo.equals(""3""))) {
                    if (!dbunflag) {
                        dml = ""DROP INDEX "" + node.getString(""OBJECTNAME"");
                    } else {
                        dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" DROP CONSTRAINT "" + node.getString(""OBJECTNAME"");
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                    exists = false;
                }
                if (!exists && !modo.equals(""3"")) {
                    if (!node.getString(""OBJECTNAME"").equals("""") && !newexpression.equals("""")) {
                        if (!unflag) {
                            dml = ""CREATE INDEX "" + node.getString(""OBJECTNAME"") + "" ON "" + node.getString(""TABLENAME"") + ""("" + newexpression + "")"";
                        } else {
                            dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" ADD CONSTRAINT "" + node.getString(""OBJECTNAME"") + "" UNIQUE ("" + newexpression + "")"";
                        }
                        executeDDL(dml, node.getString(""SCHEMA""));
                    }
                }
            }
            updateDictionaryTable(node, modo);
            return dml;
        } catch (SQLException e) {
            cn.rollback();
            cndef.rollback();
            throw (e);
        } finally {
        }
    }
","    public static void insert(Connection c, MLPApprox net, int azioneId, String descrizione, int[] indiciID, int output, Date from, Date to) throws SQLException {
        try {
            PreparedStatement ps = c.prepareStatement(insertNet, PreparedStatement.RETURN_GENERATED_KEYS);
            ArrayList<Integer> indexes = new ArrayList<Integer>(indiciID.length);
            for (int i = 0; i < indiciID.length; i++) indexes.add(indiciID[i]);
            ps.setObject(1, net);
            ps.setInt(2, azioneId);
            ps.setObject(3, indexes);
            ps.setInt(4, output);
            ps.setDate(5, from);
            ps.setDate(6, to);
            ps.setString(7, descrizione);
            ps.executeUpdate();
            ResultSet key = ps.getGeneratedKeys();
            if (key.next()) {
                int id = key.getInt(1);
                for (int i = 0; i < indiciID.length; i++) {
                    PreparedStatement psIndex = c.prepareStatement(insertNetIndex);
                    psIndex.setInt(1, indiciID[i]);
                    psIndex.setInt(2, id);
                    psIndex.executeUpdate();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                c.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
                throw e1;
            }
            throw e;
        }
    }
",True
900335,10690728,20601754,"    private void addMaintainerScripts(TarOutputStream tar, PackageInfo info) throws IOException, ScriptDataTooLargeException {
        for (final MaintainerScript script : info.getMaintainerScripts().values()) {
            if (script.getSize() > Integer.MAX_VALUE) {
                throw new ScriptDataTooLargeException(""The script data is too large for the tar file. script=["" + script.getType().getFilename() + ""]."");
            }
            final TarEntry entry = standardEntry(script.getType().getFilename(), UnixStandardPermissions.EXECUTABLE_FILE_MODE, (int) script.getSize());
            tar.putNextEntry(entry);
            IOUtils.copy(script.getStream(), tar);
            tar.closeEntry();
        }
    }
","    public static File copyFile(File file, String dirName) {
        File destDir = new File(dirName);
        if (!destDir.exists() || !destDir.isDirectory()) {
            destDir.mkdirs();
        }
        File src = file;
        File dest = new File(dirName, src.getName());
        try {
            if (!dest.exists()) {
                dest.createNewFile();
            }
            FileChannel source = new FileInputStream(src).getChannel();
            FileChannel destination = new FileOutputStream(dest).getChannel();
            destination.transferFrom(source, 0, source.size());
            source.close();
            destination.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return dest;
    }
",True
900336,17456565,9195362,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static long copy(File src, File dest) throws UtilException {
        FileChannel srcFc = null;
        FileChannel destFc = null;
        try {
            srcFc = new FileInputStream(src).getChannel();
            destFc = new FileOutputStream(dest).getChannel();
            long srcLength = srcFc.size();
            srcFc.transferTo(0, srcLength, destFc);
            return srcLength;
        } catch (IOException e) {
            throw new UtilException(e);
        } finally {
            try {
                if (srcFc != null) srcFc.close();
                srcFc = null;
            } catch (IOException e) {
            }
            try {
                if (destFc != null) destFc.close();
                destFc = null;
            } catch (IOException e) {
            }
        }
    }
",True
900337,21456138,17228897,"    @TestTargetNew(level = TestLevel.COMPLETE, notes = """", method = ""getServerCertificates"", args = {  })
    public final void test_getServerCertificates() throws Exception {
        try {
            URL url = new URL(""https://localhost:55555"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                connection.getServerCertificates();
                fail(""IllegalStateException wasn't thrown"");
            } catch (IllegalStateException ise) {
            }
        } catch (Exception e) {
            fail(""Unexpected exception "" + e + "" for exception case"");
        }
        HttpsURLConnection con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.508"");
        try {
            Certificate[] cert = con.getServerCertificates();
            fail(""SSLPeerUnverifiedException wasn't thrown"");
        } catch (SSLPeerUnverifiedException e) {
        }
        con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.509"");
        try {
            Certificate[] cert = con.getServerCertificates();
            assertNotNull(cert);
            assertEquals(1, cert.length);
        } catch (Exception e) {
            fail(""Unexpected exception "" + e);
        }
    }
","    public static boolean doPost(String urlString, Map<String, String> nameValuePairs) throws IOException {
        URL url = new URL(urlString);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        PrintWriter out = new PrintWriter(conn.getOutputStream());
        boolean first = true;
        for (Map.Entry<String, String> pair : nameValuePairs.entrySet()) {
            if (first) first = false; else out.print('&');
            String name = pair.getKey();
            String value = pair.getValue();
            out.print(name);
            out.print('=');
            out.print(URLEncoder.encode(value, ""UTF-8""));
        }
        out.close();
        Scanner in;
        StringBuilder response = new StringBuilder();
        try {
            in = new Scanner(conn.getInputStream());
        } catch (IOException ex) {
            if (!(conn instanceof HttpURLConnection)) throw ex;
            InputStream err = ((HttpURLConnection) conn).getErrorStream();
            in = new Scanner(err);
        }
        while (in.hasNextLine()) {
            response.append(in.nextLine());
            response.append(""\n"");
        }
        in.close();
        return true;
    }
",False
900338,22307323,20696811,"    public static String cryptSha(String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(target.getBytes(""UTF-16""));
        BigInteger res = new BigInteger(1, md.digest(key.getBytes()));
        return res.toString(16);
    }
","    private static boolean insereTutorial(final Connection con, final Tutorial tut, final Autor aut, final Descricao desc) {
        try {
            con.setAutoCommit(false);
            Statement smt = con.createStatement();
            if (aut.getCodAutor() == 0) {
                GeraID.gerarCodAutor(con, aut);
                smt.executeUpdate(""INSERT INTO autor VALUES("" + aut.getCodAutor() + "",'"" + aut.getNome() + ""','"" + aut.getEmail() + ""')"");
            }
            GeraID.gerarCodDescricao(con, desc);
            GeraID.gerarCodTutorial(con, tut);
            String titulo = tut.getTitulo().replaceAll(""['\""]"", """");
            String coment = tut.getComentario().replaceAll(""[']"", ""\"""");
            String texto = desc.getTexto().replaceAll(""[']"", ""\"""");
            smt.executeUpdate(""INSERT INTO descricao VALUES("" + desc.getCodDesc() + "",'"" + texto + ""')"");
            smt.executeUpdate(""INSERT INTO tutorial VALUES("" + tut.getCodigo() + "",'"" + titulo + ""','"" + coment + ""',"" + desc.getCodDesc() + "")"");
            smt.executeUpdate(""INSERT INTO tut_aut VALUES("" + tut.getCodigo() + "","" + aut.getCodAutor() + "")"");
            con.commit();
            return (true);
        } catch (SQLException e) {
            try {
                JOptionPane.showMessageDialog(null, ""Rolling back transaction"", ""TUTORIAL: Database error"", JOptionPane.ERROR_MESSAGE);
                System.out.print(e.getMessage());
                con.rollback();
            } catch (SQLException e1) {
                System.err.print(e1.getSQLState());
            }
            return (false);
        } finally {
            try {
                con.setAutoCommit(true);
            } catch (SQLException e2) {
                System.err.print(e2.getSQLState());
            }
        }
    }
",False
900339,12838274,16351775,"    public BufferedImage extract() throws DjatokaException {
        boolean useRegion = false;
        int left = 0;
        int top = 0;
        int width = 50;
        int height = 50;
        boolean useleftDouble = false;
        Double leftDouble = 0.0;
        boolean usetopDouble = false;
        Double topDouble = 0.0;
        boolean usewidthDouble = false;
        Double widthDouble = 0.0;
        boolean useheightDouble = false;
        Double heightDouble = 0.0;
        if (params.getRegion() != null) {
            StringTokenizer st = new StringTokenizer(params.getRegion(), ""{},"");
            String token;
            if ((token = st.nextToken()).contains(""."")) {
                topDouble = Double.parseDouble(token);
                usetopDouble = true;
            } else top = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(""."")) {
                leftDouble = Double.parseDouble(token);
                useleftDouble = true;
            } else left = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(""."")) {
                heightDouble = Double.parseDouble(token);
                useheightDouble = true;
            } else height = Integer.parseInt(token);
            if ((token = st.nextToken()).contains(""."")) {
                widthDouble = Double.parseDouble(token);
                usewidthDouble = true;
            } else width = Integer.parseInt(token);
            useRegion = true;
        }
        try {
            if (is != null) {
                File f = File.createTempFile(""tmp"", "".jp2"");
                f.deleteOnExit();
                FileOutputStream fos = new FileOutputStream(f);
                sourceFile = f.getAbsolutePath();
                IOUtils.copyStream(is, fos);
                is.close();
                fos.close();
            }
        } catch (IOException e) {
            throw new DjatokaException(e);
        }
        try {
            Jp2_source inputSource = new Jp2_source();
            Kdu_compressed_source input = null;
            Jp2_family_src jp2_family_in = new Jp2_family_src();
            Jp2_locator loc = new Jp2_locator();
            jp2_family_in.Open(sourceFile, true);
            inputSource.Open(jp2_family_in, loc);
            inputSource.Read_header();
            input = inputSource;
            Kdu_codestream codestream = new Kdu_codestream();
            codestream.Create(input);
            Kdu_channel_mapping channels = new Kdu_channel_mapping();
            if (inputSource.Exists()) channels.Configure(inputSource, false); else channels.Configure(codestream);
            int ref_component = channels.Get_source_component(0);
            Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream);
            Kdu_dims image_dims = new Kdu_dims();
            codestream.Get_dims(ref_component, image_dims);
            Kdu_coords imageSize = image_dims.Access_size();
            Kdu_coords imagePosition = image_dims.Access_pos();
            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());
            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());
            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());
            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());
            if (useRegion) {
                imageSize.Set_x(width);
                imageSize.Set_y(height);
                imagePosition.Set_x(left);
                imagePosition.Set_y(top);
            }
            int reduce = 1 << params.getLevelReductionFactor();
            imageSize.Set_x(imageSize.Get_x() * ref_expansion.Get_x());
            imageSize.Set_y(imageSize.Get_y() * ref_expansion.Get_y());
            imagePosition.Set_x(imagePosition.Get_x() * ref_expansion.Get_x() / reduce - ((ref_expansion.Get_x() / reduce - 1) / 2));
            imagePosition.Set_y(imagePosition.Get_y() * ref_expansion.Get_y() / reduce - ((ref_expansion.Get_y() / reduce - 1) / 2));
            Kdu_dims view_dims = new Kdu_dims();
            view_dims.Assign(image_dims);
            view_dims.Access_size().Set_x(imageSize.Get_x());
            view_dims.Access_size().Set_y(imageSize.Get_y());
            int region_buf_size = imageSize.Get_x() * imageSize.Get_y();
            int[] region_buf = new int[region_buf_size];
            Kdu_region_decompressor decompressor = new Kdu_region_decompressor();
            decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS);
            Kdu_dims new_region = new Kdu_dims();
            Kdu_dims incomplete_region = new Kdu_dims();
            Kdu_coords viewSize = view_dims.Access_size();
            incomplete_region.Assign(image_dims);
            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];
            int[] kduBuffer = null;
            while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) {
                Kdu_coords newOffset = new_region.Access_pos();
                Kdu_coords newSize = new_region.Access_size();
                newOffset.Subtract(view_dims.Access_pos());
                kduBuffer = region_buf;
                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();
                int kduBufferIdx = 0;
                int xDiff = viewSize.Get_x() - newSize.Get_x();
                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {
                    for (int i = 0; i < newSize.Get_x(); i++) {
                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];
                    }
                }
            }
            BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);
            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());
            if (params.getRotationDegree() > 0) {
                image = ImageProcessingUtils.rotate(image, params.getRotationDegree());
            }
            decompressor.Native_destroy();
            channels.Native_destroy();
            if (codestream.Exists()) codestream.Destroy();
            inputSource.Native_destroy();
            input.Native_destroy();
            jp2_family_in.Native_destroy();
            return image;
        } catch (KduException e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        } catch (Exception e) {
            e.printStackTrace();
            throw new DjatokaException(e);
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900340,19556732,15607084,"    public boolean verifySignature() {
        try {
            byte[] data = readFile(name + "".tmp1.bin"");
            if (data == null) return false;
            if (data[data.length - 0x104] != 'N' || data[data.length - 0x103] != 'G' || data[data.length - 0x102] != 'I' || data[data.length - 0x101] != 'S') return false;
            byte[] signature = new byte[0x100];
            byte[] module = new byte[data.length - 0x104];
            System.arraycopy(data, data.length - 0x100, signature, 0, 0x100);
            System.arraycopy(data, 0, module, 0, data.length - 0x104);
            BigIntegerEx power = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, new byte[] { 0x01, 0x00, 0x01, 0x00 });
            BigIntegerEx mod = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, new byte[] { (byte) 0x6B, (byte) 0xCE, (byte) 0xF5, (byte) 0x2D, (byte) 0x2A, (byte) 0x7D, (byte) 0x7A, (byte) 0x67, (byte) 0x21, (byte) 0x21, (byte) 0x84, (byte) 0xC9, (byte) 0xBC, (byte) 0x25, (byte) 0xC7, (byte) 0xBC, (byte) 0xDF, (byte) 0x3D, (byte) 0x8F, (byte) 0xD9, (byte) 0x47, (byte) 0xBC, (byte) 0x45, (byte) 0x48, (byte) 0x8B, (byte) 0x22, (byte) 0x85, (byte) 0x3B, (byte) 0xC5, (byte) 0xC1, (byte) 0xF4, (byte) 0xF5, (byte) 0x3C, (byte) 0x0C, (byte) 0x49, (byte) 0xBB, (byte) 0x56, (byte) 0xE0, (byte) 0x3D, (byte) 0xBC, (byte) 0xA2, (byte) 0xD2, (byte) 0x35, (byte) 0xC1, (byte) 0xF0, (byte) 0x74, (byte) 0x2E, (byte) 0x15, (byte) 0x5A, (byte) 0x06, (byte) 0x8A, (byte) 0x68, (byte) 0x01, (byte) 0x9E, (byte) 0x60, (byte) 0x17, (byte) 0x70, (byte) 0x8B, (byte) 0xBD, (byte) 0xF8, (byte) 0xD5, (byte) 0xF9, (byte) 0x3A, (byte) 0xD3, (byte) 0x25, (byte) 0xB2, (byte) 0x66, (byte) 0x92, (byte) 0xBA, (byte) 0x43, (byte) 0x8A, (byte) 0x81, (byte) 0x52, (byte) 0x0F, (byte) 0x64, (byte) 0x98, (byte) 0xFF, (byte) 0x60, (byte) 0x37, (byte) 0xAF, (byte) 0xB4, (byte) 0x11, (byte) 0x8C, (byte) 0xF9, (byte) 0x2E, (byte) 0xC5, (byte) 0xEE, (byte) 0xCA, (byte) 0xB4, (byte) 0x41, (byte) 0x60, (byte) 0x3C, (byte) 0x7D, (byte) 0x02, (byte) 0xAF, (byte) 0xA1, (byte) 0x2B, (byte) 0x9B, (byte) 0x22, (byte) 0x4B, (byte) 0x3B, (byte) 0xFC, (byte) 0xD2, (byte) 0x5D, (byte) 0x73, (byte) 0xE9, (byte) 0x29, (byte) 0x34, (byte) 0x91, (byte) 0x85, (byte) 0x93, (byte) 0x4C, (byte) 0xBE, (byte) 0xBE, (byte) 0x73, (byte) 0xA9, (byte) 0xD2, (byte) 0x3B, (byte) 0x27, (byte) 0x7A, (byte) 0x47, (byte) 0x76, (byte) 0xEC, (byte) 0xB0, (byte) 0x28, (byte) 0xC9, (byte) 0xC1, (byte) 0xDA, (byte) 0xEE, (byte) 0xAA, (byte) 0xB3, (byte) 0x96, (byte) 0x9C, (byte) 0x1E, (byte) 0xF5, (byte) 0x6B, (byte) 0xF6, (byte) 0x64, (byte) 0xD8, (byte) 0x94, (byte) 0x2E, (byte) 0xF1, (byte) 0xF7, (byte) 0x14, (byte) 0x5F, (byte) 0xA0, (byte) 0xF1, (byte) 0xA3, (byte) 0xB9, (byte) 0xB1, (byte) 0xAA, (byte) 0x58, (byte) 0x97, (byte) 0xDC, (byte) 0x09, (byte) 0x17, (byte) 0x0C, (byte) 0x04, (byte) 0xD3, (byte) 0x8E, (byte) 0x02, (byte) 0x2C, (byte) 0x83, (byte) 0x8A, (byte) 0xD6, (byte) 0xAF, (byte) 0x7C, (byte) 0xFE, (byte) 0x83, (byte) 0x33, (byte) 0xC6, (byte) 0xA8, (byte) 0xC3, (byte) 0x84, (byte) 0xEF, (byte) 0x29, (byte) 0x06, (byte) 0xA9, (byte) 0xB7, (byte) 0x2D, (byte) 0x06, (byte) 0x0B, (byte) 0x0D, (byte) 0x6F, (byte) 0x70, (byte) 0x9E, (byte) 0x34, (byte) 0xA6, (byte) 0xC7, (byte) 0x31, (byte) 0xBE, (byte) 0x56, (byte) 0xDE, (byte) 0xDD, (byte) 0x02, (byte) 0x92, (byte) 0xF8, (byte) 0xA0, (byte) 0x58, (byte) 0x0B, (byte) 0xFC, (byte) 0xFA, (byte) 0xBA, (byte) 0x49, (byte) 0xB4, (byte) 0x48, (byte) 0xDB, (byte) 0xEC, (byte) 0x25, (byte) 0xF3, (byte) 0x18, (byte) 0x8F, (byte) 0x2D, (byte) 0xB3, (byte) 0xC0, (byte) 0xB8, (byte) 0xDD, (byte) 0xBC, (byte) 0xD6, (byte) 0xAA, (byte) 0xA6, (byte) 0xDB, (byte) 0x6F, (byte) 0x7D, (byte) 0x7D, (byte) 0x25, (byte) 0xA6, (byte) 0xCD, (byte) 0x39, (byte) 0x6D, (byte) 0xDA, (byte) 0x76, (byte) 0x0C, (byte) 0x79, (byte) 0xBF, (byte) 0x48, (byte) 0x25, (byte) 0xFC, (byte) 0x2D, (byte) 0xC5, (byte) 0xFA, (byte) 0x53, (byte) 0x9B, (byte) 0x4D, (byte) 0x60, (byte) 0xF4, (byte) 0xEF, (byte) 0xC7, (byte) 0xEA, (byte) 0xAC, (byte) 0xA1, (byte) 0x7B, (byte) 0x03, (byte) 0xF4, (byte) 0xAF, (byte) 0xC7 });
            byte[] result = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, signature).modPow(power, mod).toByteArray();
            byte[] digest;
            byte[] properResult = new byte[0x100];
            for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB;
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(module);
            md.update(""MAIEV.MOD"".getBytes());
            digest = md.digest();
            System.arraycopy(digest, 0, properResult, 0, digest.length);
            for (int i = 0; i < result.length; i++) if (result[i] != properResult[i]) return false;
            return true;
        } catch (Exception e) {
            System.out.println(""Failed to verify signature: "" + e.toString());
        }
        return false;
    }
","    protected void copyFile(String inputFilePath, String outputFilePath) throws GenerationException {
        String from = getTemplateDir() + inputFilePath;
        try {
            logger.debug(""Copying from "" + from + "" to "" + outputFilePath);
            InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(from);
            if (inputStream == null) {
                throw new GenerationException(""Source file not found: "" + from);
            }
            FileOutputStream outputStream = new FileOutputStream(new File(outputFilePath));
            IOUtils.copy(inputStream, outputStream);
            inputStream.close();
            outputStream.close();
        } catch (Exception e) {
            throw new GenerationException(""Error while copying file: "" + from, e);
        }
    }
",False
900341,11922877,9543284,"    private void chooseGame(DefaultHttpClient httpclient) throws IOException, ClientProtocolException {
        HttpGet httpget = new HttpGet(Constants.STRATEGICDOMINATION_URL + ""/gameboard.cgi?gameid="" + 1687);
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        System.out.println(""cg form get: "" + response.getStatusLine());
        if (entity != null) {
            InputStream inStream = entity.getContent();
            IOUtils.copy(inStream, System.out);
        }
        System.out.println(""cg set of cookies:"");
        List<Cookie> cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println(""None"");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println(""- "" + cookies.get(i).toString());
            }
        }
    }
","    public static final void copyFile(String srcFilename, String dstFilename) throws IOException {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel ifc = null;
        FileChannel ofc = null;
        Util.copyBuffer.clear();
        try {
            fis = new FileInputStream(srcFilename);
            ifc = fis.getChannel();
            fos = new FileOutputStream(dstFilename);
            ofc = fos.getChannel();
            int sz = (int) ifc.size();
            int n = 0;
            while (n < sz) {
                if (ifc.read(Util.copyBuffer) < 0) {
                    break;
                }
                Util.copyBuffer.flip();
                n += ofc.write(Util.copyBuffer);
                Util.copyBuffer.compact();
            }
        } finally {
            try {
                if (ifc != null) {
                    ifc.close();
                } else if (fis != null) {
                    fis.close();
                }
            } catch (IOException exc) {
            }
            try {
                if (ofc != null) {
                    ofc.close();
                } else if (fos != null) {
                    fos.close();
                }
            } catch (IOException exc) {
            }
        }
    }
",True
900342,8071138,19565153,"    public void sendContent(OutputStream out, Range range, Map map, String string) throws IOException, NotAuthorizedException, BadRequestException {
        System.out.println(""sendContent "" + file);
        RFileInputStream in = new RFileInputStream(file);
        try {
            IOUtils.copyLarge(in, out);
        } finally {
            in.close();
        }
    }
","    private void copy(File fin, File fout) throws IOException {
        FileOutputStream out = new FileOutputStream(fout);
        FileInputStream in = new FileInputStream(fin);
        byte[] buf = new byte[2048];
        int read = in.read(buf);
        while (read > 0) {
            out.write(buf, 0, read);
            read = in.read(buf);
        }
        in.close();
        out.close();
    }
",True
900343,6147227,18985881,"    public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) {
        FcpFECUtils fecutils = null;
        Vector segmentHeaders = null;
        Vector segmentFileMaps = new Vector();
        Vector checkFileMaps = new Vector();
        Vector segmentKeyMaps = new Vector();
        Vector checkKeyMaps = new Vector();
        int fileLength = (int) file.length();
        String output = new String();
        int maxThreads = frame1.frostSettings.getIntValue(""splitfileUploadThreads"");
        Thread[] chunkThreads = null;
        String[][] chunkResults = null;
        Thread[] checkThreads = null;
        String[][] checkResults = null;
        int threadCount = 0;
        String board = getBoard(file);
        {
            fecutils = new FcpFECUtils(frame1.frostSettings.getValue(""nodeAddress""), frame1.frostSettings.getIntValue(""nodePort""));
            synchronized (fecutils.getClass()) {
                try {
                    segmentHeaders = fecutils.FECSegmentFile(""OnionFEC_a_1_2"", fileLength);
                } catch (Exception e) {
                }
            }
            int chunkCnt = 0;
            int checkCnt = 0;
            synchronized (fecutils.getClass()) {
                try {
                    Socket fcpSock;
                    BufferedInputStream fcpIn;
                    PrintStream fcpOut;
                    for (int i = 0; i < segmentHeaders.size(); i++) {
                        int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount;
                        int blockNo = 0;
                        fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue(""nodeAddress"")), frame1.frostSettings.getIntValue(""nodePort""));
                        fcpSock.setSoTimeout(1800000);
                        fcpOut = new PrintStream(fcpSock.getOutputStream());
                        fcpIn = new BufferedInputStream(fcpSock.getInputStream());
                        FileInputStream fileIn = new FileInputStream(file);
                        File[] chunkFiles = new File[blockCount];
                        {
                            System.out.println(""Processing segment "" + i);
                            fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset);
                            long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize;
                            System.out.println(""segLength = "" + Long.toHexString(segLength));
                            String headerString = ""SegmentHeader\n"" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + ""EndMessage\n"";
                            String dataHeaderString = ""\0\0\0\2FECEncodeSegment\nMetadataLength="" + Long.toHexString(headerString.length()) + ""\nDataLength="" + Long.toHexString(headerString.length() + segLength) + ""\nData\n"" + headerString;
                            System.out.print(dataHeaderString);
                            fcpOut.print(dataHeaderString);
                            long count = 0;
                            while (count < segLength) {
                                byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize];
                                System.out.println(Long.toHexString(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset + count));
                                int inbytes = fileIn.read(buffer);
                                if (inbytes < 0) {
                                    System.out.println(""End of input file - no data"");
                                    for (int j = 0; j < buffer.length; j++) buffer[j] = 0;
                                    inbytes = buffer.length;
                                }
                                if (inbytes < buffer.length) {
                                    System.out.println(""End of input file - not enough data"");
                                    for (int j = inbytes; j < buffer.length; j++) buffer[j] = 0;
                                    inbytes = buffer.length;
                                }
                                if (inbytes > segLength - count) inbytes = (int) (segLength - count);
                                fcpOut.write(buffer);
                                File uploadMe = new File(frame1.keypool + String.valueOf(System.currentTimeMillis()) + ""-"" + chunkCnt + "".tmp"");
                                chunkFiles[blockNo] = uploadMe;
                                uploadMe.deleteOnExit();
                                FileOutputStream fileOut = new FileOutputStream(uploadMe);
                                fileOut.write(buffer, 0, (int) inbytes);
                                fileOut.close();
                                count += inbytes;
                                chunkCnt++;
                                ;
                                blockNo++;
                                if (blockNo >= blockCount) break;
                            }
                            segmentFileMaps.add(chunkFiles);
                            fcpOut.flush();
                            fileIn.close();
                        }
                        int checkNo = 0;
                        int checkBlockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockCount;
                        File[] checkFiles = new File[checkBlockCount];
                        File uploadMe = null;
                        FileOutputStream outFile = null;
                        {
                            String currentLine;
                            long checkBlockSize = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockSize;
                            int checkPtr = 0;
                            int length = 0;
                            do {
                                boolean started = false;
                                currentLine = fecutils.getLine(fcpIn).trim();
                                if (currentLine.equals(""DataChunk"")) {
                                    started = true;
                                }
                                if (currentLine.startsWith(""Length="")) {
                                    length = Integer.parseInt((currentLine.split(""=""))[1], 16);
                                }
                                if (currentLine.equals(""Data"")) {
                                    int currentRead;
                                    byte[] buffer = new byte[(int) length];
                                    if (uploadMe == null) {
                                        uploadMe = new File(frame1.keypool + String.valueOf(System.currentTimeMillis()) + ""-chk-"" + checkCnt + "".tmp"");
                                        uploadMe.deleteOnExit();
                                        outFile = new FileOutputStream(uploadMe);
                                    }
                                    currentRead = fcpIn.read(buffer);
                                    while (currentRead < length) {
                                        currentRead += fcpIn.read(buffer, currentRead, length - currentRead);
                                    }
                                    outFile.write(buffer);
                                    checkPtr += currentRead;
                                    if (checkPtr == checkBlockSize) {
                                        outFile.close();
                                        checkFiles[checkNo] = uploadMe;
                                        uploadMe = null;
                                        checkNo++;
                                        checkCnt++;
                                        checkPtr = 0;
                                    }
                                }
                            } while (currentLine.length() > 0);
                            checkFileMaps.add(checkFiles);
                        }
                        fcpOut.close();
                        fcpIn.close();
                        fcpSock.close();
                    }
                } catch (Exception e) {
                    System.out.println(""putFECSplitFile NOT GOOD "" + e.toString());
                }
            }
            int chunkNo = 0;
            int uploadedBytes = 0;
            for (int i = 0; i < segmentFileMaps.size(); i++) {
                File[] currentFileMap = (File[]) segmentFileMaps.get(i);
                chunkThreads = new Thread[currentFileMap.length];
                chunkResults = new String[currentFileMap.length][2];
                threadCount = 0;
                for (int j = 0; j < currentFileMap.length; j++) {
                    if (DEBUG) System.out.println(""Chunk: "" + chunkNo);
                    while (getActiveThreads(chunkThreads) >= maxThreads) mixed.wait(5000);
                    chunkThreads[threadCount] = new putKeyThread(""CHK@"", currentFileMap[j], htl, chunkResults, threadCount, mode);
                    chunkThreads[threadCount].start();
                    threadCount++;
                    uploadedBytes += currentFileMap[j].length();
                    updateUploadTable(file, uploadedBytes, mode);
                    mixed.wait(1000);
                    chunkNo++;
                }
                while (getActiveThreads(chunkThreads) > 0) {
                    if (DEBUG) System.out.println(""Active Splitfile inserts remaining: "" + getActiveThreads(chunkThreads));
                    mixed.wait(3000);
                }
                segmentKeyMaps.add(chunkResults);
            }
            int checkNo = 0;
            for (int i = 0; i < checkFileMaps.size(); i++) {
                File[] currentFileMap = (File[]) checkFileMaps.get(i);
                checkThreads = new Thread[currentFileMap.length];
                checkResults = new String[currentFileMap.length][2];
                threadCount = 0;
                for (int j = 0; j < currentFileMap.length; j++) {
                    if (DEBUG) System.out.println(""Check: "" + checkNo);
                    while (getActiveThreads(checkThreads) >= maxThreads) mixed.wait(5000);
                    checkThreads[threadCount] = new putKeyThread(""CHK@"", currentFileMap[j], htl, checkResults, threadCount, mode);
                    checkThreads[threadCount].start();
                    threadCount++;
                    uploadedBytes += currentFileMap[j].length();
                    updateUploadTable(file, uploadedBytes, mode);
                    mixed.wait(1000);
                    checkNo++;
                }
                while (getActiveThreads(checkThreads) > 0) {
                    if (DEBUG) System.out.println(""Active Checkblock inserts remaining: "" + getActiveThreads(checkThreads));
                    mixed.wait(3000);
                }
                checkKeyMaps.add(checkResults);
            }
            checkThreads = null;
        }
        String redirect = null;
        {
            synchronized (fecutils.getClass()) {
                try {
                    redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, ""Frost"");
                } catch (Exception e) {
                    System.out.println(""putFECSplitFile NOT GOOD "" + e.toString());
                }
            }
            String[] sortedRedirect = redirect.split(""\n"");
            for (int z = 0; z < sortedRedirect.length; z++) System.out.println(sortedRedirect[z]);
            int sortStart = -1;
            int sortEnd = -1;
            for (int line = 0; line < sortedRedirect.length; line++) {
                if (sortedRedirect[line].equals(""Document"")) {
                    sortStart = line + 1;
                    break;
                }
            }
            for (int line = sortStart; line < sortedRedirect.length; line++) {
                if (sortedRedirect[line].equals(""End"")) {
                    sortEnd = line;
                    break;
                }
            }
            System.out.println(""sortStart "" + sortStart + "" sortEnd "" + sortEnd);
            if (sortStart < sortEnd) Arrays.sort(sortedRedirect, sortStart, sortEnd);
            redirect = new String();
            for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + ""\n"";
            System.out.println(redirect);
        }
        int tries = 0;
        String[] result = { ""Error"", ""Error"" };
        while (!result[0].equals(""Success"") && !result[0].equals(""KeyCollision"") && tries < 8) {
            tries++;
            try {
                FcpConnection connection = new FcpConnection(frame1.frostSettings.getValue(""nodeAddress""), frame1.frostSettings.getValue(""nodePort""));
                output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode);
            } catch (FcpToolsException e) {
                if (DEBUG) System.out.println(""FcpToolsException "" + e);
                frame1.displayWarning(e.toString());
            } catch (UnknownHostException e) {
                if (DEBUG) System.out.println(""UnknownHostException"");
                frame1.displayWarning(e.toString());
            } catch (IOException e) {
                if (DEBUG) System.out.println(""IOException"");
                frame1.displayWarning(e.toString());
            }
            result = result(output);
            mixed.wait(3000);
            if (DEBUG) System.out.println(""*****"" + result[0] + "" "" + result[1] + "" "");
        }
        if ((result[0].equals(""Success"") || result[0].equals(""KeyCollision"")) && mode) {
            try {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTimeZone(TimeZone.getTimeZone(""GMT""));
                String dirdate = cal.get(Calendar.YEAR) + ""."";
                dirdate += cal.get(Calendar.MONTH) + 1 + ""."";
                dirdate += cal.get(Calendar.DATE);
                String fileSeparator = System.getProperty(""file.separator"");
                String destination = frame1.keypool + board + fileSeparator + dirdate + fileSeparator;
                FcpConnection connection = new FcpConnection(frame1.frostSettings.getValue(""nodeAddress""), frame1.frostSettings.getValue(""nodePort""));
                String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1];
                String prefix = new String(""freenet:"");
                if (contentKey.startsWith(prefix)) contentKey = contentKey.substring(prefix.length());
                FileAccess.writeFile(""Already uploaded today"", destination + contentKey + "".lck"");
            } catch (Exception e) {
            }
        }
        return result;
    }
","    public static final String crypt(String password, String salt) throws NoSuchAlgorithmException {
        String magic = ""$1$"";
        byte finalState[];
        MessageDigest ctx, ctx1;
        long l;
        if (salt.startsWith(magic)) {
            salt = salt.substring(magic.length());
        }
        if (salt.indexOf('$') != -1) {
            salt = salt.substring(0, salt.indexOf('$'));
        }
        if (salt.length() > 8) {
            salt = salt.substring(0, 8);
        }
        ctx = MessageDigest.getInstance(""MD5"");
        ctx.update(password.getBytes());
        ctx.update(magic.getBytes());
        ctx.update(salt.getBytes());
        ctx1 = MessageDigest.getInstance(""MD5"");
        ctx1.update(password.getBytes());
        ctx1.update(salt.getBytes());
        ctx1.update(password.getBytes());
        finalState = ctx1.digest();
        for (int pl = password.length(); pl > 0; pl -= 16) {
            for (int i = 0; i < (pl > 16 ? 16 : pl); i++) ctx.update(finalState[i]);
        }
        clearbits(finalState);
        for (int i = password.length(); i != 0; i >>>= 1) {
            if ((i & 1) != 0) {
                ctx.update(finalState[0]);
            } else {
                ctx.update(password.getBytes()[0]);
            }
        }
        finalState = ctx.digest();
        for (int i = 0; i < 1000; i++) {
            ctx1 = MessageDigest.getInstance(""MD5"");
            if ((i & 1) != 0) {
                ctx1.update(password.getBytes());
            } else {
                for (int c = 0; c < 16; c++) ctx1.update(finalState[c]);
            }
            if ((i % 3) != 0) {
                ctx1.update(salt.getBytes());
            }
            if ((i % 7) != 0) {
                ctx1.update(password.getBytes());
            }
            if ((i & 1) != 0) {
                for (int c = 0; c < 16; c++) ctx1.update(finalState[c]);
            } else {
                ctx1.update(password.getBytes());
            }
            finalState = ctx1.digest();
        }
        StringBuffer result = new StringBuffer();
        result.append(magic);
        result.append(salt);
        result.append(""$"");
        l = (bytes2u(finalState[0]) << 16) | (bytes2u(finalState[6]) << 8) | bytes2u(finalState[12]);
        result.append(to64(l, 4));
        l = (bytes2u(finalState[1]) << 16) | (bytes2u(finalState[7]) << 8) | bytes2u(finalState[13]);
        result.append(to64(l, 4));
        l = (bytes2u(finalState[2]) << 16) | (bytes2u(finalState[8]) << 8) | bytes2u(finalState[14]);
        result.append(to64(l, 4));
        l = (bytes2u(finalState[3]) << 16) | (bytes2u(finalState[9]) << 8) | bytes2u(finalState[15]);
        result.append(to64(l, 4));
        l = (bytes2u(finalState[4]) << 16) | (bytes2u(finalState[10]) << 8) | bytes2u(finalState[5]);
        result.append(to64(l, 4));
        l = bytes2u(finalState[11]);
        result.append(to64(l, 2));
        clearbits(finalState);
        return result.toString();
    }
",False
900344,1023289,15288212,"    public static String MD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            return """";
        }
    }
","    protected void configureGraphicalViewer() {
        super.configureGraphicalViewer();
        GraphicalViewer viewer = getGraphicalViewer();
        viewer.setEditPartFactory(createEditPartFactory());
        ScalableRootEditPart rootEditPart = new ScalableRootEditPart();
        viewer.setRootEditPart(rootEditPart);
        ZoomManager manager = rootEditPart.getZoomManager();
        double[] zoomLevels = new double[] { 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 10.0, 20.0 };
        manager.setZoomLevels(zoomLevels);
        ArrayList zoomContributions = new ArrayList();
        zoomContributions.add(ZoomManager.FIT_ALL);
        zoomContributions.add(ZoomManager.FIT_HEIGHT);
        zoomContributions.add(ZoomManager.FIT_WIDTH);
        manager.setZoomLevelContributions(zoomContributions);
        getActionRegistry().registerAction(new ZoomInAction(manager));
        getActionRegistry().registerAction(new ZoomOutAction(manager));
        getGraphicalViewer().setKeyHandler(new GraphicalViewerKeyHandler(getGraphicalViewer()));
        String menuId = this.getClass().getName() + "".EditorContext"";
        MenuManager menuMgr = new MenuManager(menuId, menuId);
        openPropertyAction = new OpenPropertyViewAction(viewer);
        openOutlineAction = new OpenOutlineViewAction(viewer);
        saveAsImageAction = new SaveAsImageAction(viewer);
        createDiagramAction(viewer);
        getSite().registerContextMenu(menuId, menuMgr, viewer);
        PrintAction printAction = new PrintAction(this);
        printAction.setImageDescriptor(UMLPlugin.getImageDescriptor(""icons/print.gif""));
        getActionRegistry().registerAction(printAction);
        final DeleteAction deleteAction = new DeleteAction((IWorkbenchPart) this);
        deleteAction.setSelectionProvider(getGraphicalViewer());
        getActionRegistry().registerAction(deleteAction);
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                deleteAction.update();
            }
        });
        menuMgr.add(new Separator(""edit""));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.DELETE.getId()));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.UNDO.getId()));
        menuMgr.add(getActionRegistry().getAction(ActionFactory.REDO.getId()));
        menuMgr.add(new Separator(""zoom""));
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_IN));
        menuMgr.add(getActionRegistry().getAction(GEFActionConstants.ZOOM_OUT));
        fillDiagramPopupMenu(menuMgr);
        menuMgr.add(new Separator(""print""));
        menuMgr.add(saveAsImageAction);
        menuMgr.add(printAction);
        menuMgr.add(new Separator(""views""));
        menuMgr.add(openPropertyAction);
        menuMgr.add(openOutlineAction);
        menuMgr.add(new Separator(""generate""));
        menuMgr.add(new Separator(""additions""));
        viewer.setContextMenu(menuMgr);
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer).setParent(getCommonKeyHandler()));
    }
",False
900345,17486397,4531654,"    public static String getUserToken(String userName) {
        if (userName != null && userName.trim().length() > 0) try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update((userName + seed).getBytes(""ISO-8859-1""));
            return BaseController.bytesToHex(md.digest());
        } catch (NullPointerException npe) {
        } catch (NoSuchAlgorithmException e) {
        } catch (UnsupportedEncodingException e) {
        }
        return null;
    }
","    public static byte[] md5raw(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return md.digest();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",True
900346,4594844,7911395,"    @Override
    public void execute() throws BuildException {
        final String GC_USERNAME = ""google-code-username"";
        final String GC_PASSWORD = ""google-code-password"";
        if (StringUtils.isBlank(this.projectName)) throw new BuildException(""undefined project"");
        if (this.file == null) throw new BuildException(""undefined file"");
        if (!this.file.exists()) throw new BuildException(""file not found :"" + file);
        if (!this.file.isFile()) throw new BuildException(""not a file :"" + file);
        if (this.config == null) throw new BuildException(""undefined config"");
        if (!this.config.exists()) throw new BuildException(""file not found :"" + config);
        if (!this.config.isFile()) throw new BuildException(""not a file :"" + config);
        PostMethod post = null;
        try {
            Properties cfg = new Properties();
            FileInputStream fin = new FileInputStream(this.config);
            cfg.loadFromXML(fin);
            fin.close();
            if (!cfg.containsKey(GC_USERNAME)) throw new BuildException(""undefined "" + GC_USERNAME + "" in "" + this.config);
            if (!cfg.containsKey(GC_PASSWORD)) throw new BuildException(""undefined "" + GC_PASSWORD + "" in "" + this.config);
            HttpClient client = new HttpClient();
            post = new PostMethod(""https://"" + projectName + "".googlecode.com/files"");
            post.addRequestHeader(""User-Agent"", getClass().getName());
            post.addRequestHeader(""Authorization"", ""Basic "" + Base64.encode(cfg.getProperty(GC_USERNAME) + "":"" + cfg.getProperty(GC_PASSWORD)));
            List<Part> parts = new ArrayList<Part>();
            String s = this.summary;
            if (StringUtils.isBlank(s)) {
                s = this.file.getName() + "" ("" + TimeUtils.toYYYYMMDD() + "")"";
            }
            parts.add(new StringPart(""summary"", s));
            for (String lbl : this.labels.split(""[, \t\n]+"")) {
                if (StringUtils.isBlank(lbl)) continue;
                parts.add(new StringPart(""label"", lbl.trim()));
            }
            parts.add(new FilePart(""filename"", this.file));
            MultipartRequestEntity requestEntity = new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams());
            post.setRequestEntity(requestEntity);
            int status = client.executeMethod(post);
            if (status != 201) {
                throw new BuildException(""http status !=201 : "" + post.getResponseBodyAsString());
            } else {
                IOUtils.copyTo(post.getResponseBodyAsStream(), new NullOutputStream());
            }
        } catch (BuildException e) {
            throw e;
        } catch (Exception e) {
            throw new BuildException(e);
        } finally {
            if (post != null) post.releaseConnection();
        }
    }
","    public void executaAlteracoes() {
        Album album = Album.getAlbum();
        Photo[] fotos = album.getFotos();
        Photo f;
        int ultimoFotoID = -1;
        int albumID = album.getAlbumID();
        sucesso = true;
        PainelWebFotos.setCursorWait(true);
        albumID = recordAlbumData(album, albumID);
        sucesso = recordFotoData(fotos, ultimoFotoID, albumID);
        String caminhoAlbum = Util.getFolder(""albunsRoot"").getPath() + File.separator + albumID;
        File diretorioAlbum = new File(caminhoAlbum);
        if (!diretorioAlbum.isDirectory()) {
            if (!diretorioAlbum.mkdir()) {
                Util.log(""[AcaoAlterarAlbum.executaAlteracoes.7]/ERRO: diretorio "" + caminhoAlbum + "" n�o pode ser criado. abortando"");
                return;
            }
        }
        for (int i = 0; i < fotos.length; i++) {
            f = fotos[i];
            if (f.getCaminhoArquivo().length() > 0) {
                try {
                    FileChannel canalOrigem = new FileInputStream(f.getCaminhoArquivo()).getChannel();
                    FileChannel canalDestino = new FileOutputStream(caminhoAlbum + File.separator + f.getFotoID() + "".jpg"").getChannel();
                    canalDestino.transferFrom(canalOrigem, 0, canalOrigem.size());
                    canalOrigem = null;
                    canalDestino = null;
                } catch (Exception e) {
                    Util.log(""[AcaoAlterarAlbum.executaAlteracoes.8]/ERRO: "" + e);
                    sucesso = false;
                }
            }
        }
        prepareThumbsAndFTP(fotos, albumID, caminhoAlbum);
        prepareExtraFiles(album, caminhoAlbum);
        fireChangesToGUI(fotos);
        dispatchAlbum();
        PainelWebFotos.setCursorWait(false);
    }
",True
900347,17638222,15376025,"    public static void copyFile(final File sourceFile, final File destFile) throws IOException {
        if (!destFile.exists()) destFile.createNewFile();
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) source.close();
            if (destination != null) destination.close();
        }
    }
","    @Override
    protected svm_model loadModel(InputStream inputStream) throws IOException {
        File tmpFile = File.createTempFile(""tmp"", "".mdl"");
        FileOutputStream output = new FileOutputStream(tmpFile);
        try {
            IOUtils.copy(inputStream, output);
            return libsvm.svm.svm_load_model(tmpFile.getPath());
        } finally {
            output.close();
            tmpFile.delete();
        }
    }
",True
900348,9639432,10207808,"    private static String deviceIdFromCombined_Device_ID(Context context) {
        StringBuilder builder = new StringBuilder();
        builder.append(deviceIdFromIMEI(context));
        builder.append(deviceIdFromPseudo_Unique_Id());
        builder.append(deviceIdFromAndroidId(context));
        builder.append(deviceIdFromWLAN_MAC_Address(context));
        builder.append(deviceIdFromBT_MAC_Address(context));
        String m_szLongID = builder.toString();
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        m.update(m_szLongID.getBytes(), 0, m_szLongID.length());
        byte p_md5Data[] = m.digest();
        String m_szUniqueID = new String();
        for (int i = 0; i < p_md5Data.length; i++) {
            int b = (0xFF & p_md5Data[i]);
            if (b <= 0xF) m_szUniqueID += ""0"";
            m_szUniqueID += Integer.toHexString(b);
        }
        return m_szUniqueID;
    }
","  @SuppressWarnings(""finally"")
  private void compress(File src) throws IOException
  {
    if (this.switches.contains(Switch.test))
      return;

    checkSourceFile(src);
    if (src.getPath().endsWith("".bz2""))
    {
      this.log.println(""WARNING: skipping file because it already has .bz2 suffix:"").println(src);
      return;
    }

    final File dst = new File(src.getPath() + "".bz2"").getAbsoluteFile();
    if (!checkDestFile(dst))
      return;

    FileChannel       inChannel   = null;
    FileChannel       outChannel  = null;
    FileOutputStream  fileOut     = null;
    BZip2OutputStream bzOut       = null;
    FileLock          inLock      = null;
    FileLock          outLock     = null;

    try
    {
      inChannel = new FileInputStream(src).getChannel();
      final long inSize = inChannel.size();
      inLock = inChannel.tryLock(0, inSize, true);
      if (inLock == null)
        throw error(""source file locked by another process: "" + src);

      fileOut     = new FileOutputStream(dst);
      outChannel  = fileOut.getChannel();
      bzOut       = new BZip2OutputStream(
        new BufferedXOutputStream(fileOut, 8192),
        Math.min(
          (this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize,
          BZip2OutputStream.chooseBlockSize(inSize)
        )
      );

      outLock = outChannel.tryLock();
      if (outLock == null)
        throw error(""destination file locked by another process: "" + dst);

      final boolean showProgress = this.switches.contains(Switch.showProgress);
      long pos = 0;
      int progress = 0;

      if (showProgress || this.verbose)
      {
        this.log.print(""source: "" + src).print("": size="").println(inSize);
        this.log.println(""target: "" + dst);
      }

      while (true)
      {
        final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos);
        if (maxStep <= 0)
        {
          if (showProgress)
          {
            for (int i = progress; i < MAX_PROGRESS; i++)
              this.log.print('#');
            this.log.println("" done"");
          }
          break;
        }
        else
        {
          final long step = inChannel.transferTo(pos, maxStep, bzOut);
          if ((step == 0) && (inChannel.size() != inSize))
            throw error(""file "" + src + "" has been modified concurrently by another process"");

          pos += step;
          if (showProgress)
          {
            final double  p           = (double) pos / (double) inSize;
            final int     newProgress = (int) (MAX_PROGRESS * p);
            for (int i = progress; i < newProgress; i++)
              this.log.print('#');
            progress = newProgress;
          }
        }
      }

      inLock.release();
      inChannel.close();
      bzOut.closeInstance();
      final long outSize = outChannel.position();
      outChannel.truncate(outSize);
      outLock.release();
      fileOut.close();

      if (this.verbose)
      {
        final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize);
        this.log.print(""raw size: "").print(inSize)
          .print(""; compressed size: "").print(outSize)
          .print(""; compression ratio: "").print(ratio).println('%');
      }

      if (!this.switches.contains(Switch.keep))
      {
        if (!src.delete())
          throw error(""unable to delete sourcefile: "" + src);
      }
    }
    catch (final IOException ex)
    {
      IO.tryClose(inChannel);
      IO.tryClose(bzOut);
      IO.tryClose(fileOut);
      IO.tryRelease(inLock);
      IO.tryRelease(outLock);
      try
      {
        this.log.println();
      }
      finally
      {
        throw ex;
      }
    }
  }
",False
900349,2284080,15831694,"    private static void copy(String srcFilename, String dstFilename, boolean override) throws IOException, XPathFactoryConfigurationException, SAXException, ParserConfigurationException, XPathExpressionException {
        File fileToCopy = new File(rootDir + ""test-output/"" + srcFilename);
        if (fileToCopy.exists()) {
            File newFile = new File(rootDir + ""test-output/"" + dstFilename);
            if (!newFile.exists() || override) {
                try {
                    FileChannel srcChannel = new FileInputStream(rootDir + ""test-output/"" + srcFilename).getChannel();
                    FileChannel dstChannel = new FileOutputStream(rootDir + ""test-output/"" + dstFilename).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                }
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900350,16788944,11683526,"    private void refreshCacheFile(RepositoryFile file, File cacheFile) throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(cacheFile);
        InputStream is = file.getInputStream();
        int count = IOUtils.copy(is, fos);
        logger.debug(""===========================================================> wrote bytes to cache "" + count);
        fos.flush();
        IOUtils.closeQuietly(fos);
        IOUtils.closeQuietly(file.getInputStream());
    }
","    private static boolean moveFiles(String sourceDir, String targetDir) {
        boolean isFinished = false;
        boolean fileMoved = false;
        File stagingDir = new File(sourceDir);
        if (!stagingDir.exists()) {
            System.out.println(getTimeStamp() + ""ERROR - source directory does not exist."");
            return true;
        }
        if (stagingDir.listFiles() == null) {
            System.out.println(getTimeStamp() + ""ERROR - Empty file list. Possible permission error on source directory "" + sourceDir);
            return true;
        }
        File[] fileList = stagingDir.listFiles();
        for (int x = 0; x < fileList.length; x++) {
            File f = fileList[x];
            if (f.getName().startsWith(""."")) {
                continue;
            }
            String targetFileName = targetDir + File.separator + f.getName();
            String operation = ""move"";
            boolean success = f.renameTo(new File(targetFileName));
            if (success) {
                fileMoved = true;
            } else {
                operation = ""mv"";
                try {
                    Process process = Runtime.getRuntime().exec(new String[] { ""mv"", f.getCanonicalPath(), targetFileName });
                    process.waitFor();
                    process.destroy();
                    if (!new File(targetFileName).exists()) {
                        success = false;
                    } else {
                        success = true;
                        fileMoved = true;
                    }
                } catch (Exception e) {
                    success = false;
                }
                if (!success) {
                    operation = ""copy"";
                    FileChannel in = null;
                    FileChannel out = null;
                    try {
                        in = new FileInputStream(f).getChannel();
                        File outFile = new File(targetFileName);
                        out = new FileOutputStream(outFile).getChannel();
                        in.transferTo(0, in.size(), out);
                        in.close();
                        in = null;
                        out.close();
                        out = null;
                        f.delete();
                        success = true;
                    } catch (Exception e) {
                        success = false;
                    } finally {
                        if (in != null) {
                            try {
                                in.close();
                            } catch (Exception e) {
                            }
                        }
                        if (out != null) {
                            try {
                                out.close();
                            } catch (Exception e) {
                            }
                        }
                    }
                }
            }
            if (success) {
                System.out.println(getTimeStamp() + operation + "" "" + f.getAbsolutePath() + "" to "" + targetDir);
                fileMoved = true;
            } else {
                System.out.println(getTimeStamp() + ""ERROR - "" + operation + "" "" + f.getName() + "" to "" + targetFileName + "" failed."");
                isFinished = true;
            }
        }
        if (fileMoved && !isFinished) {
            try {
                currentLastActivity = System.currentTimeMillis();
                updateLastActivity(currentLastActivity);
            } catch (NumberFormatException e) {
                System.out.println(getTimeStamp() + ""ERROR: NumberFormatException when trying to update lastActivity."");
                isFinished = true;
            } catch (IOException e) {
                System.out.println(getTimeStamp() + ""ERROR: IOException when trying to update lastActivity. "" + e.toString());
                isFinished = true;
            }
        }
        return isFinished;
    }
",True
900351,11519124,21722036,"    protected static void copyFile(File in, File out) throws IOException {
        java.io.FileWriter filewriter = null;
        java.io.FileReader filereader = null;
        try {
            filewriter = new java.io.FileWriter(out);
            filereader = new java.io.FileReader(in);
            char[] buf = new char[4096];
            int nread = filereader.read(buf, 0, 4096);
            while (nread >= 0) {
                filewriter.write(buf, 0, nread);
                nread = filereader.read(buf, 0, 4096);
            }
            buf = null;
        } finally {
            try {
                filereader.close();
            } catch (Throwable t) {
            }
            try {
                filewriter.close();
            } catch (Throwable t) {
            }
        }
    }
","    public void loadXML(URL flux, int status, File file) {
        try {
            SAXBuilder sbx = new SAXBuilder();
            try {
                if (file.exists()) {
                    file.delete();
                }
                if (!file.exists()) {
                    URLConnection conn = flux.openConnection();
                    conn.setConnectTimeout(5000);
                    conn.setReadTimeout(10000);
                    InputStream is = conn.getInputStream();
                    OutputStream out = new FileOutputStream(file);
                    byte buf[] = new byte[1024];
                    int len;
                    while ((len = is.read(buf)) > 0) out.write(buf, 0, len);
                    out.close();
                    is.close();
                }
            } catch (Exception e) {
                Log.e(Constants.PROJECT_TAG, ""Exeption retrieving XML"", e);
            }
            try {
                document = sbx.build(new FileInputStream(file));
            } catch (Exception e) {
                Log.e(Constants.PROJECT_TAG, ""xml error "", e);
            }
        } catch (Exception e) {
            Log.e(Constants.PROJECT_TAG, ""TsukiQueryError"", e);
        }
        if (document != null) {
            root = document.getRootElement();
            PopulateDatabase(root, status);
        }
    }
",True
900352,11090449,11673911,"    public static Drawable fetchCachedDrawable(String url) throws MalformedURLException, IOException {
        Log.d(LOG_TAG, ""Fetching cached : "" + url);
        String cacheName = md5(url);
        checkAndCreateDirectoryIfNeeded();
        File r = new File(CACHELOCATION + cacheName);
        if (!r.exists()) {
            InputStream is = (InputStream) fetch(url);
            FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName);
            int nextChar;
            while ((nextChar = is.read()) != -1) fos.write((char) nextChar);
            fos.flush();
        }
        FileInputStream fis = new FileInputStream(CACHELOCATION + cacheName);
        Drawable d = Drawable.createFromStream(fis, ""src"");
        return d;
    }
","    private void _save(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {
        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);
        for (int i = 0; i < list.size(); i++) {
            long langId = ((Language) list.get(i)).getId();
            try {
                String filePath = getGlobalVariablesPath() + ""cms_language_"" + langId + "".properties"";
                String tmpFilePath = getTemporyDirPath() + ""cms_language_"" + langId + ""_properties.tmp"";
                File from = new java.io.File(tmpFilePath);
                from.createNewFile();
                File to = new java.io.File(filePath);
                to.createNewFile();
                FileChannel srcChannel = new FileInputStream(from).getChannel();
                FileChannel dstChannel = new FileOutputStream(to).getChannel();
                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                srcChannel.close();
                dstChannel.close();
            } catch (NonWritableChannelException we) {
            } catch (IOException e) {
                Logger.error(this, ""Property File save Failed "" + e, e);
            }
        }
        SessionMessages.add(req, ""message"", ""message.languagemanager.save"");
    }
",True
900353,16841577,4684601,"    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",False
900354,21519782,13713980,"    protected static void copyDeleting(File source, File dest) throws ErrorCodeException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = null;
        try {
            in = new FileInputStream(source);
            try {
                FileOutputStream out = new FileOutputStream(dest);
                try {
                    int count;
                    while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
                } finally {
                    out.close();
                }
            } finally {
                in.close();
            }
        } catch (IOException e) {
            throw new ErrorCodeException(e);
        }
    }
","    private String sendMessage(HttpURLConnection connection, String reqMessage) throws IOException, XMLStreamException {
        if (msgLog.isTraceEnabled()) msgLog.trace(""Outgoing SOAPMessage\n"" + reqMessage);
        BufferedOutputStream out = new BufferedOutputStream(connection.getOutputStream());
        out.write(reqMessage.getBytes(""UTF-8""));
        out.close();
        InputStream inputStream = null;
        if (connection.getResponseCode() < 400) inputStream = connection.getInputStream(); else inputStream = connection.getErrorStream();
        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
        IOUtils.copyStream(baos, inputStream);
        inputStream.close();
        byte[] byteArray = baos.toByteArray();
        String resMessage = new String(byteArray, ""UTF-8"");
        if (msgLog.isTraceEnabled()) msgLog.trace(""Incoming Response SOAPMessage\n"" + resMessage);
        return resMessage;
    }
",True
900355,19145296,13719500,"    public static double[][] getCurrency() throws IOException {
        URL url = new URL(""http://hk.finance.yahoo.com/currency"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""big5""));
        double currency[][] = new double[11][11];
        while (true) {
            String line = in.readLine();
            String reg = ""<td\\s((align=\""right\""\\sclass=\""yfnc_tabledata1\"")"" + ""|(class=\""yfnc_tabledata1\""\\salign=\""right\""))>"" + ""([\\d|\\.]+)</td>"";
            Matcher m = Pattern.compile(reg).matcher(line);
            int i = 0, j = 0;
            boolean isfound = false;
            while (m.find()) {
                isfound = true;
                currency[i][j] = Double.parseDouble(m.group(4));
                if (j == 10) {
                    j = 0;
                    i++;
                } else j++;
            }
            if (isfound) break;
        }
        return currency;
    }
","    private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException {
        if ((this.keyPair == null) || this.connection.isServer()) throw new SshException(""%s: unexpected %s"", this.connection.uri, msg.getType());
        final BigInteger k;
        {
            final DHPublicKeySpec remoteKeySpec = new DHPublicKeySpec(new BigInteger(msg.f), P1, G);
            final KeyFactory dhKeyFact = KeyFactory.getInstance(""DH"");
            final DHPublicKey remotePubKey = (DHPublicKey) dhKeyFact.generatePublic(remoteKeySpec);
            final KeyAgreement dhKex = KeyAgreement.getInstance(""DH"");
            dhKex.init(this.keyPair.getPrivate());
            dhKex.doPhase(remotePubKey, true);
            k = new BigInteger(dhKex.generateSecret());
        }
        final MessageDigest md = createMessageDigest();
        final byte[] h;
        {
            updateByteArray(md, SshVersion.LOCAL.toString().getBytes());
            updateByteArray(md, this.connection.getRemoteSshVersion().toString().getBytes());
            updateByteArray(md, this.keyExchangeInitLocal.getPayload());
            updateByteArray(md, this.keyExchangeInitRemote.getPayload());
            updateByteArray(md, msg.hostKey);
            updateByteArray(md, ((DHPublicKey) this.keyPair.getPublic()).getY().toByteArray());
            updateByteArray(md, msg.f);
            updateBigInt(md, k);
            h = md.digest();
        }
        if (this.sessionId == null) this.sessionId = h;
        this.keyExchangeInitLocal = null;
        this.keyExchangeInitRemote = null;
        this.h = h;
        this.k = k;
        this.connection.send(new SshKeyExchangeNewKeys());
    }
",False
900356,13747998,16006791,"    public DefaultMainControl(@NotNull final FileFilter scriptFileFilter, @NotNull final String scriptExtension, @NotNull final String scriptName, final int spellType, @Nullable final String spellFile, @NotNull final String scriptsDir, final ErrorView errorView, @NotNull final EditorFactory<G, A, R> editorFactory, final boolean forceReadFromFiles, @NotNull final GlobalSettings globalSettings, @NotNull final ConfigSourceFactory configSourceFactory, @NotNull final PathManager pathManager, @NotNull final GameObjectMatchers gameObjectMatchers, @NotNull final GameObjectFactory<G, A, R> gameObjectFactory, @NotNull final ArchetypeTypeSet archetypeTypeSet, @NotNull final ArchetypeSet<G, A, R> archetypeSet, @NotNull final ArchetypeChooserModel<G, A, R> archetypeChooserModel, @NotNull final AutojoinLists<G, A, R> autojoinLists, @NotNull final AbstractMapManager<G, A, R> mapManager, @NotNull final PluginModel<G, A, R> pluginModel, @NotNull final DelegatingMapValidator<G, A, R> validators, @NotNull final ScriptedEventEditor<G, A, R> scriptedEventEditor, @NotNull final AbstractResources<G, A, R> resources, @NotNull final Spells<NumberSpell> numberSpells, @NotNull final Spells<GameObjectSpell<G, A, R>> gameObjectSpells, @NotNull final PluginParameterFactory<G, A, R> pluginParameterFactory, @NotNull final ValidatorPreferences validatorPreferences, @NotNull final MapWriter<G, A, R> mapWriter) {
        final XmlHelper xmlHelper;
        try {
            xmlHelper = new XmlHelper();
        } catch (final ParserConfigurationException ex) {
            log.fatal(""Cannot create XML parser: "" + ex.getMessage());
            throw new MissingResourceException(""Cannot create XML parser: "" + ex.getMessage(), null, null);
        }
        final AttributeRangeChecker<G, A, R> attributeRangeChecker = new AttributeRangeChecker<G, A, R>(validatorPreferences);
        final EnvironmentChecker<G, A, R> environmentChecker = new EnvironmentChecker<G, A, R>(validatorPreferences);
        final DocumentBuilder documentBuilder = xmlHelper.getDocumentBuilder();
        try {
            final URL url = IOUtils.getResource(globalSettings.getConfigurationDirectory(), ""GameObjectMatchers.xml"");
            final ErrorViewCollector gameObjectMatchersErrorViewCollector = new ErrorViewCollector(errorView, url);
            try {
                documentBuilder.setErrorHandler(new ErrorViewCollectorErrorHandler(gameObjectMatchersErrorViewCollector, ErrorViewCategory.GAMEOBJECTMATCHERS_FILE_INVALID));
                try {
                    final GameObjectMatchersParser gameObjectMatchersParser = new GameObjectMatchersParser(documentBuilder, xmlHelper.getXPath());
                    gameObjectMatchersParser.readGameObjectMatchers(url, gameObjectMatchers, gameObjectMatchersErrorViewCollector);
                } finally {
                    documentBuilder.setErrorHandler(null);
                }
            } catch (final IOException ex) {
                gameObjectMatchersErrorViewCollector.addWarning(ErrorViewCategory.GAMEOBJECTMATCHERS_FILE_INVALID, ex.getMessage());
            }
            final ValidatorFactory<G, A, R> validatorFactory = new ValidatorFactory<G, A, R>(validatorPreferences, gameObjectMatchers, globalSettings, mapWriter);
            loadValidators(validators, validatorFactory, errorView);
            editorFactory.initMapValidators(validators, gameObjectMatchersErrorViewCollector, globalSettings, gameObjectMatchers, attributeRangeChecker, validatorPreferences);
            validators.addValidator(attributeRangeChecker);
            validators.addValidator(environmentChecker);
        } catch (final FileNotFoundException ex) {
            errorView.addWarning(ErrorViewCategory.GAMEOBJECTMATCHERS_FILE_INVALID, ""GameObjectMatchers.xml: "" + ex.getMessage());
        }
        final GameObjectMatcher shopSquareMatcher = gameObjectMatchers.getMatcher(""system_shop_square"", ""shop_square"");
        if (shopSquareMatcher != null) {
            final GameObjectMatcher noSpellsMatcher = gameObjectMatchers.getMatcher(""system_no_spells"", ""no_spells"");
            if (noSpellsMatcher != null) {
                final GameObjectMatcher blockedMatcher = gameObjectMatchers.getMatcher(""system_blocked"", ""blocked"");
                validators.addValidator(new ShopSquareChecker<G, A, R>(validatorPreferences, shopSquareMatcher, noSpellsMatcher, blockedMatcher));
            }
            final GameObjectMatcher paidItemMatcher = gameObjectMatchers.getMatcher(""system_paid_item"");
            if (paidItemMatcher != null) {
                validators.addValidator(new PaidItemShopSquareChecker<G, A, R>(validatorPreferences, shopSquareMatcher, paidItemMatcher));
            }
        }
        Map<String, TreasureTreeNode> specialTreasureLists;
        try {
            final URL url = IOUtils.getResource(globalSettings.getConfigurationDirectory(), ""TreasureLists.xml"");
            final ErrorViewCollector treasureListsErrorViewCollector = new ErrorViewCollector(errorView, url);
            try {
                final InputStream inputStream = url.openStream();
                try {
                    documentBuilder.setErrorHandler(new ErrorViewCollectorErrorHandler(treasureListsErrorViewCollector, ErrorViewCategory.TREASURES_FILE_INVALID));
                    try {
                        final Document specialTreasureListsDocument = documentBuilder.parse(new InputSource(inputStream));
                        specialTreasureLists = TreasureListsParser.parseTreasureLists(specialTreasureListsDocument);
                    } finally {
                        documentBuilder.setErrorHandler(null);
                    }
                } finally {
                    inputStream.close();
                }
            } catch (final IOException ex) {
                treasureListsErrorViewCollector.addWarning(ErrorViewCategory.TREASURES_FILE_INVALID, ex.getMessage());
                specialTreasureLists = Collections.emptyMap();
            } catch (final SAXException ex) {
                treasureListsErrorViewCollector.addWarning(ErrorViewCategory.TREASURES_FILE_INVALID, ex.getMessage());
                specialTreasureLists = Collections.emptyMap();
            }
        } catch (final FileNotFoundException ex) {
            errorView.addWarning(ErrorViewCategory.TREASURES_FILE_INVALID, ""TreasureLists.xml: "" + ex.getMessage());
            specialTreasureLists = Collections.emptyMap();
        }
        final ConfigSource configSource = forceReadFromFiles ? configSourceFactory.getFilesConfigSource() : configSourceFactory.getConfigSource(globalSettings.getConfigSourceName());
        treasureTree = TreasureLoader.parseTreasures(errorView, specialTreasureLists, configSource, globalSettings);
        final ArchetypeAttributeFactory archetypeAttributeFactory = new DefaultArchetypeAttributeFactory();
        final ArchetypeAttributeParser archetypeAttributeParser = new ArchetypeAttributeParser(archetypeAttributeFactory);
        final ArchetypeTypeParser archetypeTypeParser = new ArchetypeTypeParser(archetypeAttributeParser);
        ArchetypeTypeList eventTypeSet = null;
        try {
            final URL url = IOUtils.getResource(globalSettings.getConfigurationDirectory(), CommonConstants.TYPEDEF_FILE);
            final ErrorViewCollector typesErrorViewCollector = new ErrorViewCollector(errorView, url);
            documentBuilder.setErrorHandler(new ErrorViewCollectorErrorHandler(typesErrorViewCollector, ErrorViewCategory.GAMEOBJECTMATCHERS_FILE_INVALID));
            try {
                final ArchetypeTypeSetParser archetypeTypeSetParser = new ArchetypeTypeSetParser(documentBuilder, archetypeTypeSet, archetypeTypeParser);
                archetypeTypeSetParser.loadTypesFromXML(typesErrorViewCollector, new InputSource(url.toString()));
            } finally {
                documentBuilder.setErrorHandler(null);
            }
            final ArchetypeTypeList eventTypeSetTmp = archetypeTypeSet.getList(""event"");
            if (eventTypeSetTmp == null) {
                typesErrorViewCollector.addWarning(ErrorViewCategory.TYPES_ENTRY_INVALID, ""list 'list_event' does not exist"");
            } else {
                eventTypeSet = eventTypeSetTmp;
            }
        } catch (final FileNotFoundException ex) {
            errorView.addWarning(ErrorViewCategory.TYPES_FILE_INVALID, CommonConstants.TYPEDEF_FILE + "": "" + ex.getMessage());
        }
        if (eventTypeSet == null) {
            eventTypeSet = new ArchetypeTypeList();
        }
        scriptArchUtils = editorFactory.newScriptArchUtils(eventTypeSet);
        final ScriptedEventFactory<G, A, R> scriptedEventFactory = editorFactory.newScriptedEventFactory(scriptArchUtils, gameObjectFactory, scriptedEventEditor, archetypeSet);
        scriptArchEditor = new DefaultScriptArchEditor<G, A, R>(scriptedEventFactory, scriptExtension, scriptName, scriptArchUtils, scriptFileFilter, globalSettings, mapManager, pathManager);
        scriptedEventEditor.setScriptArchEditor(scriptArchEditor);
        scriptArchData = editorFactory.newScriptArchData();
        scriptArchDataUtils = editorFactory.newScriptArchDataUtils(scriptArchUtils, scriptedEventFactory, scriptedEventEditor);
        final long timeStart = System.currentTimeMillis();
        if (log.isInfoEnabled()) {
            log.info(""Start to load archetypes..."");
        }
        configSource.read(globalSettings, resources, errorView);
        for (final R archetype : archetypeSet.getArchetypes()) {
            final CharSequence editorFolder = archetype.getEditorFolder();
            if (editorFolder != null && !editorFolder.equals(GameObject.EDITOR_FOLDER_INTERN)) {
                final String[] tmp = StringUtils.PATTERN_SLASH.split(editorFolder, 2);
                if (tmp.length == 2) {
                    final String panelName = tmp[0];
                    final String folderName = tmp[1];
                    archetypeChooserModel.addArchetype(panelName, folderName, archetype);
                }
            }
        }
        if (log.isInfoEnabled()) {
            log.info(""Archetype loading took "" + (double) (System.currentTimeMillis() - timeStart) / 1000.0 + "" seconds."");
        }
        if (spellType != 0) {
            new ArchetypeSetSpellLoader<G, A, R>(gameObjectFactory).load(archetypeSet, spellType, gameObjectSpells);
            gameObjectSpells.sort();
        }
        if (spellFile != null) {
            try {
                final URL url = IOUtils.getResource(globalSettings.getConfigurationDirectory(), spellFile);
                final ErrorViewCollector errorViewCollector = new ErrorViewCollector(errorView, url);
                documentBuilder.setErrorHandler(new ErrorViewCollectorErrorHandler(errorViewCollector, ErrorViewCategory.SPELLS_FILE_INVALID));
                try {
                    XMLSpellLoader.load(errorViewCollector, url, xmlHelper.getDocumentBuilder(), numberSpells);
                } finally {
                    documentBuilder.setErrorHandler(null);
                }
            } catch (final FileNotFoundException ex) {
                errorView.addWarning(ErrorViewCategory.SPELLS_FILE_INVALID, spellFile + "": "" + ex.getMessage());
            }
            numberSpells.sort();
        }
        final File scriptsFile = new File(globalSettings.getMapsDirectory(), scriptsDir);
        final PluginModelParser<G, A, R> pluginModelParser = new PluginModelParser<G, A, R>(pluginParameterFactory);
        new PluginModelLoader<G, A, R>(pluginModelParser).loadPlugins(errorView, scriptsFile, pluginModel);
        new AutojoinListsParser<G, A, R>(errorView, archetypeSet, autojoinLists).loadList(globalSettings.getConfigurationDirectory());
        ArchetypeTypeChecks.addChecks(archetypeTypeSet, attributeRangeChecker, environmentChecker);
    }
","    public void print(PrintWriter out) {
        out.println(""<?xml version=\""1.0\""?>\n"" + ""<?xml-stylesheet type=\""text/xsl\"" href=\""http://www.urbigene.com/foaf/foaf2html.xsl\"" ?>\n"" + ""<rdf:RDF \n"" + ""xml:lang=\""en\"" \n"" + ""xmlns:rdf=\""http://www.w3.org/1999/02/22-rdf-syntax-ns#\""  \n"" + ""xmlns:rdfs=\""http://www.w3.org/2000/01/rdf-schema#\"" \n"" + ""xmlns=\""http://xmlns.com/foaf/0.1/\"" \n"" + ""xmlns:foaf=\""http://xmlns.com/foaf/0.1/\"" \n"" + ""xmlns:dc=\""http://purl.org/dc/elements/1.1/\"">\n"");
        out.println(""<!-- generated with SciFoaf http://www.urbigene.com/foaf -->"");
        if (this.mainAuthor == null && this.authors.getAuthorCount() > 0) {
            this.mainAuthor = this.authors.getAuthorAt(0);
        }
        if (this.mainAuthor != null) {
            out.println(""<foaf:PersonalProfileDocument rdf:about=\""\"">\n"" + ""\t<foaf:primaryTopic rdf:nodeID=\"""" + this.mainAuthor.getID() + ""\""/>\n"" + ""\t<foaf:maker rdf:resource=\""mailto:plindenbaum@yahoo.fr\""/>\n"" + ""\t<dc:title>FOAF for "" + XMLUtilities.escape(this.mainAuthor.getName()) + ""</dc:title>\n"" + ""\t<dc:description>\n"" + ""\tFriend-of-a-Friend description for "" + XMLUtilities.escape(this.mainAuthor.getName()) + ""\n"" + ""\t</dc:description>\n"" + ""</foaf:PersonalProfileDocument>\n\n"");
        }
        for (int i = 0; i < this.laboratories.size(); ++i) {
            Laboratory lab = this.laboratories.getLabAt(i);
            out.println(""<foaf:Group rdf:ID=\""laboratory_ID"" + i + ""\"" >"");
            out.println(""\t<foaf:name>"" + XMLUtilities.escape(lab.toString()) + ""</foaf:name>"");
            for (int j = 0; j < lab.getAuthorCount(); ++j) {
                out.println(""\t<foaf:member rdf:resource=\""#"" + lab.getAuthorAt(j).getID() + ""\"" />"");
            }
            out.println(""</foaf:Group>\n\n"");
        }
        for (int i = 0; i < this.authors.size(); ++i) {
            Author author = authors.getAuthorAt(i);
            out.println(""<foaf:Person rdf:ID=\"""" + xmlName(author.getID()) + ""\"" >"");
            out.println(""\t<foaf:name>"" + xmlName(author.getName()) + ""</foaf:name>"");
            out.println(""\t<foaf:title>Dr</foaf:title>"");
            out.println(""\t<foaf:family_name>"" + xmlName(author.getLastName()) + ""</foaf:family_name>"");
            if (author.getForeName() != null && author.getForeName().length() > 2) {
                out.println(""\t<foaf:firstName>"" + xmlName(author.getForeName()) + ""</foaf:firstName>"");
            }
            String prop = author.getProperty(""foaf:mbox"");
            if (prop != null) {
                String tokens[] = prop.split(""[\t ]+"");
                for (int j = 0; j < tokens.length; ++j) {
                    if (tokens[j].trim().length() == 0) continue;
                    if (tokens[j].equals(""mailto:"")) continue;
                    if (!tokens[j].startsWith(""mailto:"")) tokens[j] = ""mailto:"" + tokens[j];
                    try {
                        MessageDigest md = MessageDigest.getInstance(""SHA"");
                        md.update(tokens[j].getBytes());
                        byte[] digest = md.digest();
                        out.print(""\t<foaf:mbox_sha1sum>"");
                        for (int k = 0; k < digest.length; k++) {
                            String hex = Integer.toHexString(digest[k]);
                            if (hex.length() == 1) hex = ""0"" + hex;
                            hex = hex.substring(hex.length() - 2);
                            out.print(hex);
                        }
                        out.println(""</foaf:mbox_sha1sum>"");
                    } catch (Exception err) {
                        out.println(""\t<foaf:mbox rdf:resource=\"""" + tokens[j] + ""\"" />"");
                    }
                }
            }
            prop = author.getProperty(""foaf:nick"");
            if (prop != null) {
                String tokens[] = prop.split(""[\t ]+"");
                for (int j = 0; j < tokens.length; ++j) {
                    if (tokens[j].trim().length() == 0) continue;
                    out.println(""\t<foaf:surname>"" + XMLUtilities.escape(tokens[j]) + ""</foaf:surname>"");
                }
            }
            prop = author.getProperty(""foaf:homepage"");
            if (prop != null) {
                String tokens[] = prop.split(""[\t ]+"");
                for (int j = 0; j < tokens.length; ++j) {
                    if (!tokens[j].trim().startsWith(""http://"")) continue;
                    if (tokens[j].trim().equals(""http://"")) continue;
                    out.println(""\t<foaf:homepage  rdf:resource=\"""" + XMLUtilities.escape(tokens[j].trim()) + ""\""/>"");
                }
            }
            out.println(""\t<foaf:publications rdf:resource=\""http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=pubmed&amp;cmd=Search&amp;itool=pubmed_Abstract&amp;term="" + author.getTerm() + ""\""/>"");
            prop = author.getProperty(""foaf:img"");
            if (prop != null) {
                String tokens[] = prop.split(""[\t ]+"");
                for (int j = 0; j < tokens.length; ++j) {
                    if (!tokens[j].trim().startsWith(""http://"")) continue;
                    if (tokens[j].trim().equals(""http://"")) continue;
                    out.println(""\t<foaf:depiction rdf:resource=\"""" + XMLUtilities.escape(tokens[j].trim()) + ""\""/>"");
                }
            }
            AuthorList knows = this.whoknowwho.getKnown(author);
            for (int j = 0; j < knows.size(); ++j) {
                out.println(""\t<foaf:knows rdf:resource=\""#"" + xmlName(knows.getAuthorAt(j).getID()) + ""\"" />"");
            }
            Paper publications[] = this.papers.getAuthorPublications(author).toArray();
            if (!(publications.length == 0)) {
                HashSet meshes = new HashSet();
                for (int j = 0; j < publications.length; ++j) {
                    meshes.addAll(publications[j].meshTerms);
                }
                for (Iterator itermesh = meshes.iterator(); itermesh.hasNext(); ) {
                    MeshTerm meshterm = (MeshTerm) itermesh.next();
                    out.println(""\t<foaf:interest>\n"" + ""\t\t<rdf:Description rdf:about=\"""" + meshterm.getURL() + ""\"">\n"" + ""\t\t\t<dc:title>"" + XMLUtilities.escape(meshterm.toString()) + ""</dc:title>\n"" + ""\t\t</rdf:Description>\n"" + ""\t</foaf:interest>"");
                }
            }
            out.println(""</foaf:Person>\n\n"");
        }
        Paper paperarray[] = this.papers.toArray();
        for (int i = 0; i < paperarray.length; ++i) {
            out.println(""<foaf:Document rdf:about=\""http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=pubmed&amp;dopt=Abstract&amp;list_uids="" + paperarray[i].getPMID() + ""\"">"");
            out.println(""<dc:title>"" + XMLUtilities.escape(paperarray[i].getTitle()) + ""</dc:title>"");
            for (Iterator iter = paperarray[i].authors.iterator(); iter.hasNext(); ) {
                Author author = (Author) iter.next();
                out.println(""<dc:author rdf:resource=\""#"" + XMLUtilities.escape(author.getID()) + ""\""/>"");
            }
            out.println(""</foaf:Document>"");
        }
        out.println(""</rdf:RDF>"");
    }
",False
900357,7466372,821218,"    public void save(UploadedFile file, Long student, Long activity) {
        File destiny = new File(fileFolder, student + ""_"" + activity + ""_"" + file.getFileName());
        try {
            IOUtils.copy(file.getFile(), new FileOutputStream(destiny));
        } catch (IOException e) {
            throw new RuntimeException(""Erro ao copiar o arquivo."", e);
        }
    }
","    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",False
900358,15917727,19660641,"    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException nsae) {
                nsae.printStackTrace();
            }
        }
        try {
            digest.update(data.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            System.err.println(e);
        }
        return encodeHex(digest.digest());
    }
","    public static String MD5_hex(String p) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(p.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            String ret = hash.toString(16);
            return ret;
        } catch (NoSuchAlgorithmException e) {
            logger.error(""can not create confirmation key"", e);
            throw new TechException(e);
        }
    }
",True
900359,19483244,11548510,"    public static void copyFile(String original, String destination) throws Exception {
        File original_file = new File(original);
        File destination_file = new File(destination);
        if (!original_file.exists()) throw new Exception(""File with path "" + original + "" does not exist."");
        if (destination_file.exists()) throw new Exception(""File with path "" + destination + "" already exists."");
        FileReader in = new FileReader(original_file);
        FileWriter out = new FileWriter(destination_file);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900360,16236980,23098143,"    public void loadProperties() {
        try {
            java.util.Properties props = new java.util.Properties();
            java.net.URL url = ClassLoader.getSystemResource(""env.properties"");
            props.load(url.openStream());
            this.proxyCertificatePath = props.getProperty(""proxy.certificate.path"");
            this.dummyFileDirName = props.getProperty(""delete.dummyFileDirName"");
            this.idleTimeTestDelay = new Integer(props.getProperty(""idleTimeTestDelaySeconds""));
            if (props.getProperty(""gridftp.timeoutMilliSecs"") != null) {
                this.gridftpTimeoutMilliSecs = new Integer(props.getProperty(""gridftp.timeoutMilliSecs"").trim());
            }
            this.assertContentInWriteTests = new Boolean(props.getProperty(""assertContentInWriteTests""));
            this.gridftpHost1 = props.getProperty(""gridftp.host1"");
            this.gridftpPort1 = new Integer(props.getProperty(""gridftp.port1""));
            this.gridftpHost2 = props.getProperty(""gridftp.host2"");
            this.gridftpPort2 = new Integer(props.getProperty(""gridftp.port2""));
            this.srbGsiHost = props.getProperty(""srb.gsi.host"");
            this.srbGsiPort = new Integer(props.getProperty(""srb.gsi.port""));
            this.srbGsiPortMin = new Integer(props.getProperty(""srb.gsi.port.min""));
            this.srbGsiPortMax = new Integer(props.getProperty(""srb.gsi.port.max""));
            this.srbGsiDefaultResource = props.getProperty(""srb.gsi.defaultResource"");
            this.srbEncryptHost = props.getProperty(""srb.encrypt.host"");
            this.srbEncryptPort = new Integer(props.getProperty(""srb.encrypt.port""));
            this.srbEncryptPortMin = new Integer(props.getProperty(""srb.encrypt.port.min""));
            this.srbEncryptPortMax = new Integer(props.getProperty(""srb.encrypt.port.max""));
            this.srbEncryptDefaultResource = props.getProperty(""srb.encrypt.defaultResource"");
            this.srbEncryptHomeDirectory = props.getProperty(""srb.encrypt.homeDirectory"");
            this.srbEncryptMcatZone = props.getProperty(""srb.encrypt.mcatZone"");
            this.srbEncryptMdasDomainName = props.getProperty(""srb.encrypt.mdasDomainName"");
            this.srbEncryptUsername = props.getProperty(""srb.encrypt.username"");
            this.srbEncryptPassword = props.getProperty(""srb.encrypt.password"");
            this.sftpHost = props.getProperty(""sftp.host"");
            this.sftpPort = new Integer(props.getProperty(""sftp.port""));
            this.sftpPath = props.getProperty(""sftp.path"");
            this.sftpUsername = props.getProperty(""sftp.username"");
            this.sftpPassword = props.getProperty(""sftp.password"");
            if (props.getProperty(""sftp.timeoutMilliSecs"") != null) {
                this.sftpTimeoutMilliSecs = new Integer(props.getProperty(""sftp.timeoutMilliSecs"").trim());
            }
            irodsEncryptHost = props.getProperty(""irods.encrypt.host"");
            irodsEncryptPort = new Integer(props.getProperty(""irods.encrypt.port""));
            irodsEncryptResource = props.getProperty(""irods.encrypt.defaultResource"");
            irodsEncryptHomeDirectory = props.getProperty(""irods.encrypt.homeDirectory"");
            irodsEncryptZone = props.getProperty(""irods.encrypt.zone"");
            irodsEncryptUsername = props.getProperty(""irods.encrypt.username"");
            irodsEncryptPassword = props.getProperty(""irods.encrypt.password"");
            irodsGsiHost = props.getProperty(""irods.gsi.host"");
            irodsGsiPort = new Integer(props.getProperty(""irods.gsi.port""));
            irodsGsiZone = props.getProperty(""irods.gsi.zone"");
            srbQueryTimeout = new Integer(props.getProperty(""srb.query.timeout""));
            this.ftpUri = props.getProperty(""ftp.uri"");
            this.httpUri = props.getProperty(""http.uri"");
            this.httpProxy = props.getProperty(""http.proxy"");
            this.httpPort = new Integer(props.getProperty(""http.port""));
            this.fileUri = props.getProperty(""file.uri"");
            java.net.URI tempUri = new java.net.URI(this.fileUri);
            File f = new File(tempUri);
            if (!f.exists()) {
                String temp = System.getProperty(""java.io.tmpdir"");
                System.out.println(""Cannot list ["" + fileUri + ""] listing java.io.tmpdir instead ["" + temp + ""]"");
                this.fileUri = temp;
            }
            useSrbGsiInFsCopyTest = new Boolean(props.getProperty(""srb.gsi.use.in.fs.copy.test""));
            useSrbEncryptInFsCopyTest = new Boolean(props.getProperty(""srb.encrypt.use.in.fs.copy.test""));
            useGridftpHost1InFsCopyTest = new Boolean(props.getProperty(""gridftp.host1.use.in.fs.copy.test""));
            useGridftpHost2InFsCopyTest = new Boolean(props.getProperty(""gridftp.host2.use.in.fs.copy.test""));
            useSftpInFsCopyTest = new Boolean(props.getProperty(""sftp.use.in.fs.copy.test""));
            useLocalFileInFsCopyTest = new Boolean(props.getProperty(""file.use.in.fs.copy.test""));
            useIrodsGsiCopyTest = new Boolean(props.getProperty(""irods.gsi.use.in.fs.copy.test""));
            useIrodsEncryptCopyTest = new Boolean(props.getProperty(""irods.encrypt.use.in.fs.copy.test""));
            assertNotNull(this.proxyCertificatePath);
            assertNotNull(this.dummyFileDirName);
            assertNotNull(this.idleTimeTestDelay);
            assertNotNull(this.ftpUri);
            assertNotNull(this.httpUri);
        } catch (Exception ex) {
            Logger.getLogger(AbstractTestClass.class.getName()).log(Level.SEVERE, null, ex);
            fail(""Unable to locate and load 'testsettings.properties' file in source "" + ex);
        }
    }
","    public void process() {
        try {
            update(""Shutdown knowledge base ..."", 0);
            DBHelper.shutdownDB();
            update(""Shutdown knowledge base ..."", 9);
            String zipDir = P.DIR.getPKBDataPath();
            update(""Backup in progress ..."", 10);
            List<String> fileList = getFilesToZip(zipDir);
            File file = new File(fileName);
            ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(file));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            for (int i = 0; i < fileList.size(); i++) {
                String filePath = fileList.get(i);
                File f = new File(filePath);
                FileInputStream fis = new FileInputStream(f);
                String zipEntryName = f.getPath().substring(zipDir.length() + 1);
                ZipEntry anEntry = new ZipEntry(zipEntryName);
                zout.putNextEntry(anEntry);
                while ((bytesIn = fis.read(readBuffer)) != -1) {
                    zout.write(readBuffer, 0, bytesIn);
                }
                fis.close();
                int percentage = (int) Math.round((i + 1) * 80.0 / fileList.size());
                update(""Backup in progress ..."", 10 + percentage);
            }
            zout.close();
            update(""Restart knowledge base ..."", 91);
            DBHelper.startDB();
            update(""Backup is done!"", 100);
        } catch (Exception ex) {
            ex.printStackTrace();
            update(""Error occurs during backup!"", 100);
        }
    }
",False
900361,190292,13713980,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
","    private String sendMessage(HttpURLConnection connection, String reqMessage) throws IOException, XMLStreamException {
        if (msgLog.isTraceEnabled()) msgLog.trace(""Outgoing SOAPMessage\n"" + reqMessage);
        BufferedOutputStream out = new BufferedOutputStream(connection.getOutputStream());
        out.write(reqMessage.getBytes(""UTF-8""));
        out.close();
        InputStream inputStream = null;
        if (connection.getResponseCode() < 400) inputStream = connection.getInputStream(); else inputStream = connection.getErrorStream();
        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
        IOUtils.copyStream(baos, inputStream);
        inputStream.close();
        byte[] byteArray = baos.toByteArray();
        String resMessage = new String(byteArray, ""UTF-8"");
        if (msgLog.isTraceEnabled()) msgLog.trace(""Incoming Response SOAPMessage\n"" + resMessage);
        return resMessage;
    }
",True
900362,6424937,14190765,"    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.closeQuietly(fis);
            }
        }
    }
","    private void _PostParser(Document document, AnnotationManager annoMan, Document htmldoc, String baseurl) {
        xformer = annoMan.getTransformer();
        builder = annoMan.getBuilder();
        String annohash = """";
        if (document == null) return;
        NodeList ndlist = document.getElementsByTagNameNS(annoNS, ""body"");
        if (ndlist.getLength() != 1) {
            System.out.println(""Sorry Annotation Body was found "" + ndlist.getLength() + "" times"");
            return;
        }
        Element bodynode = (Element) ndlist.item(0);
        Node htmlNode = bodynode.getElementsByTagName(""html"").item(0);
        if (htmlNode == null) htmlNode = bodynode.getElementsByTagName(""HTML"").item(0);
        Document newdoc = builder.newDocument();
        Element rootelem = newdoc.createElementNS(rdfNS, ""r:RDF"");
        rootelem.setAttribute(""xmlns:r"", rdfNS);
        rootelem.setAttribute(""xmlns:a"", annoNS);
        rootelem.setAttribute(""xmlns:d"", dubNS);
        rootelem.setAttribute(""xmlns:t"", threadNS);
        newdoc.appendChild(rootelem);
        Element tmpelem;
        NodeList tmpndlist;
        Element annoElem = newdoc.createElementNS(annoNS, ""a:Annotation"");
        rootelem.appendChild(annoElem);
        tmpelem = (Element) document.getElementsByTagNameNS(annoNS, ""context"").item(0);
        String context = tmpelem.getChildNodes().item(0).getNodeValue();
        annoElem.setAttributeNS(annoNS, ""a:context"", context);
        NodeList elemcontl = tmpelem.getElementsByTagNameNS(alNS, ""context-element"");
        Node ncontext_element = null;
        if (elemcontl.getLength() > 0) {
            Node old_context_element = elemcontl.item(0);
            ncontext_element = newdoc.importNode(old_context_element, true);
        }
        tmpndlist = document.getElementsByTagNameNS(dubNS, ""title"");
        annoElem.setAttributeNS(dubNS, ""d:title"", tmpndlist.getLength() > 0 ? tmpndlist.item(0).getChildNodes().item(0).getNodeValue() : ""Default"");
        tmpelem = (Element) document.getElementsByTagNameNS(dubNS, ""creator"").item(0);
        annoElem.setAttributeNS(dubNS, ""d:creator"", tmpelem.getChildNodes().item(0).getNodeValue());
        tmpelem = (Element) document.getElementsByTagNameNS(annoNS, ""created"").item(0);
        annoElem.setAttributeNS(annoNS, ""a:created"", tmpelem.getChildNodes().item(0).getNodeValue());
        tmpelem = (Element) document.getElementsByTagNameNS(dubNS, ""date"").item(0);
        annoElem.setAttributeNS(dubNS, ""d:date"", tmpelem.getChildNodes().item(0).getNodeValue());
        tmpndlist = document.getElementsByTagNameNS(dubNS, ""language"");
        String language = (tmpndlist.getLength() > 0 ? tmpndlist.item(0).getChildNodes().item(0).getNodeValue() : ""en"");
        annoElem.setAttributeNS(dubNS, ""d:language"", language);
        Node typen = newdoc.importNode(document.getElementsByTagNameNS(rdfNS, ""type"").item(0), true);
        annoElem.appendChild(typen);
        Element contextn = newdoc.createElementNS(annoNS, ""a:context"");
        contextn.setAttributeNS(rdfNS, ""r:resource"", context);
        annoElem.appendChild(contextn);
        Node annotatesn = newdoc.importNode(document.getElementsByTagNameNS(annoNS, ""annotates"").item(0), true);
        annoElem.appendChild(annotatesn);
        Element newbodynode = newdoc.createElementNS(annoNS, ""a:body"");
        annoElem.appendChild(newbodynode);
        if (ncontext_element != null) {
            contextn.appendChild(ncontext_element);
        } else {
            System.out.println(""No context element found, we create one..."");
            try {
                XPointer xptr = new XPointer(htmldoc);
                NodeRange xprange = xptr.getRange(context, htmldoc);
                Element context_elem = newdoc.createElementNS(alNS, ""al:context-element"");
                context_elem.setAttributeNS(alNS, ""al:text"", xprange.getContentString());
                context_elem.appendChild(newdoc.createTextNode(annoMan.generateContextString(xprange)));
                contextn.appendChild(context_elem);
            } catch (XPointerRangeException e2) {
                e2.printStackTrace();
            }
        }
        WordFreq wf = new WordFreq(annoMan.extractTextFromNode(htmldoc));
        Element docident = newdoc.createElementNS(alNS, ""al:document-identifier"");
        annotatesn.appendChild(docident);
        docident.setAttributeNS(alNS, ""al:orig-url"", ((Element) annotatesn).getAttributeNS(rdfNS, ""resource""));
        docident.setAttributeNS(alNS, ""al:version"", ""1"");
        Iterator it = null;
        it = wf.getSortedWordlist();
        Map.Entry ent;
        String word;
        int count;
        int i = 0;
        while (it.hasNext()) {
            ent = (Map.Entry) it.next();
            word = ((String) ent.getKey());
            count = ((Counter) ent.getValue()).count;
            if ((word.length() > 4) && (i < 10)) {
                Element wordelem = newdoc.createElementNS(alNS, ""al:word"");
                wordelem.setAttributeNS(alNS, ""al:freq"", Integer.toString(count));
                wordelem.appendChild(newdoc.createTextNode(word));
                docident.appendChild(wordelem);
                i++;
            }
        }
        try {
            StringWriter strw = new StringWriter();
            MessageDigest messagedigest = MessageDigest.getInstance(""MD5"");
            xformer.transform(new DOMSource(newdoc), new StreamResult(strw));
            messagedigest.update(strw.toString().getBytes());
            byte[] md5bytes = messagedigest.digest();
            annohash = """";
            for (int b = 0; b < md5bytes.length; b++) {
                String s = Integer.toHexString(md5bytes[b] & 0xFF);
                annohash = annohash + ((s.length() == 1) ? ""0"" + s : s);
            }
            this.annohash = annohash;
            annoElem.setAttribute(""xmlns:al"", alNS);
            annoElem.setAttributeNS(alNS, ""al:id"", getAnnohash());
            Location = (baseurl + ""/annotation/"" + getAnnohash());
            annoElem.setAttributeNS(rdfNS, ""r:about"", Location);
            newbodynode.setAttributeNS(rdfNS, ""r:resource"", baseurl + ""/annotation/body/"" + getAnnohash());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (TransformerException e) {
            e.printStackTrace();
        }
        annoMan.store(newdoc.getDocumentElement());
        annoMan.createAnnoResource(newdoc.getDocumentElement(), getAnnohash());
        if (htmlNode != null) annoMan.createAnnoBody(htmlNode, getAnnohash());
        Location = (this.baseurl + ""/annotation/"" + getAnnohash());
        annoElem.setAttributeNS(rdfNS, ""r:about"", Location);
        this.responseDoc = newdoc;
    }
",False
900363,3667135,4615986,"    public void fileCopy(File inFile, File outFile) {
        try {
            FileInputStream in = new FileInputStream(inFile);
            FileOutputStream out = new FileOutputStream(outFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException e) {
            System.err.println(""Hubo un error de entrada/salida!!!"");
        }
    }
","    public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception {
        PreparedStatement ps = null;
        try {
            if (log.isDebugEnabled()) log.debug(""db connect - "" + db_.getClass().getName());
            String seqName = DefinitionService.getString(parameters, ""sequence_name"", null);
            if (seqName == null) {
                String errorString = ""Name of sequnce not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String tableName = DefinitionService.getString(parameters, ""name_table"", null);
            if (tableName == null) {
                String errorString = ""Name of table not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String columnName = DefinitionService.getString(parameters, ""name_pk_field"", null);
            if (columnName == null) {
                String errorString = ""Name of column not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            CustomSequenceType seqSite = new CustomSequenceType();
            seqSite.setSequenceName(seqName);
            seqSite.setTableName(tableName);
            seqSite.setColumnName(columnName);
            long seqValue = db_.getSequenceNextValue(seqSite);
            String valueColumnName = DefinitionService.getString(parameters, ""name_value_field"", null);
            if (columnName == null) {
                String errorString = ""Name of valueColumnName not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String insertValue = DefinitionService.getString(parameters, ""insert_value"", null);
            if (columnName == null) {
                String errorString = ""Name of insertValue not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String sql = ""insert into "" + tableName + "" "" + ""("" + columnName + "","" + valueColumnName + "")"" + ""values"" + ""(?,?)"";
            if (log.isDebugEnabled()) {
                log.debug(sql);
                log.debug(""pk "" + seqValue);
                log.debug(""value "" + insertValue);
            }
            ps = db_.prepareStatement(sql);
            ps.setLong(1, seqValue);
            ps.setString(2, insertValue);
            ps.executeUpdate();
            db_.commit();
        } catch (Exception e) {
            try {
                db_.rollback();
            } catch (Exception e1) {
            }
            log.error(""Error insert value"", e);
            throw e;
        } finally {
            org.riverock.generic.db.DatabaseManager.close(ps);
            ps = null;
        }
    }
",False
900364,20453777,15958994,"    private static List retrieveQuotes(Report report, Symbol symbol, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
","    public String loadURLString(java.net.URL url) {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            String s = """";
            while (br.ready() && s != null) {
                s = br.readLine();
                if (s != null) {
                    buf.append(s);
                    buf.append(""\n"");
                }
            }
            return buf.toString();
        } catch (IOException ex) {
            return """";
        } catch (NullPointerException npe) {
            return """";
        }
    }
",True
900365,14497172,131811,"    public String getHtml(String path) throws Exception {
        URL url = new URL(path);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        InputStream inputStream = conn.getInputStream();
        InputStreamReader isr = new InputStreamReader(inputStream, ""UTF-8"");
        StringBuilder sb = new StringBuilder();
        BufferedReader in = new BufferedReader(isr);
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
        }
        String result = sb.toString();
        return result;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",False
900366,10106969,1914865,"    public static String md5(String value) throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
        try {
            messageDigest.update(value.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            messageDigest.update(value.getBytes());
        }
        byte[] bytes = messageDigest.digest();
        return byteArrayToHexString(bytes);
    }
","    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.update(plainTextPassword.getBytes(charset));
            byte[] rawHash = digest.digest();
            return new String(Hex.encodeHex(rawHash));
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",True
900367,21570957,6697724,"    private static long saveAndClosePDFDocument(PDDocument document, OutputStreamProvider outProvider) throws IOException, COSVisitorException {
        File tempFile = null;
        InputStream in = null;
        OutputStream out = null;
        try {
            tempFile = File.createTempFile(""temp"", ""pdf"");
            OutputStream tempFileOut = new FileOutputStream(tempFile);
            tempFileOut = new BufferedOutputStream(tempFileOut);
            document.save(tempFileOut);
            document.close();
            tempFileOut.close();
            long length = tempFile.length();
            in = new BufferedInputStream(new FileInputStream(tempFile));
            out = new BufferedOutputStream(outProvider.getOutputStream());
            IOUtils.copy(in, out);
            return length;
        } finally {
            if (in != null) {
                IOUtils.closeQuietly(in);
            }
            if (out != null) {
                IOUtils.closeQuietly(out);
            }
            if (tempFile != null && !FileUtils.deleteQuietly(tempFile)) {
                tempFile.deleteOnExit();
            }
        }
    }
","    private void copyFile(File sourceFile, File targetFile) {
        beNice();
        dispatchEvent(SynchronizationEventType.FileCopy, sourceFile, targetFile);
        File temporaryFile = new File(targetFile.getPath().concat("".jnstemp""));
        while (temporaryFile.exists()) {
            try {
                beNice();
                temporaryFile.delete();
                beNice();
            } catch (Exception ex) {
            }
        }
        try {
            if (targetFile.exists()) {
                targetFile.delete();
            }
            FileInputStream fis = new FileInputStream(sourceFile);
            FileOutputStream fos = new FileOutputStream(temporaryFile);
            byte[] buffer = new byte[204800];
            int readBytes = 0;
            int counter = 0;
            while ((readBytes = fis.read(buffer)) != -1) {
                counter++;
                updateStatus(""... processing fragment "" + String.valueOf(counter));
                fos.write(buffer, 0, readBytes);
            }
            fis.close();
            fos.close();
            temporaryFile.renameTo(targetFile);
            temporaryFile.setLastModified(sourceFile.lastModified());
            targetFile.setLastModified(sourceFile.lastModified());
        } catch (IOException e) {
            Exception dispatchedException = new Exception(""ERROR: Copy File( "" + sourceFile.getPath() + "", "" + targetFile.getPath() + "" )"");
            dispatchEvent(dispatchedException, sourceFile, targetFile);
        }
        dispatchEvent(SynchronizationEventType.FileCopyDone, sourceFile, targetFile);
    }
",True
900368,2057012,3342342,"    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
","    private void downloadPhoto(File photo, String url) {
        try {
            HttpClient httpClient = new DefaultHttpClient();
            Log.v(TAG, ""Dowloading photo from "" + Server.URL + url);
            HttpGet request = new HttpGet(Server.URL + url);
            HttpResponse response = httpClient.execute(request);
            HttpEntity entity = response.getEntity();
            InputStream serverPhoto = entity.getContent();
            photo.createNewFile();
            FileOutputStream photoStream = new FileOutputStream(photo);
            byte[] buf = new byte[1024];
            int len;
            while ((len = serverPhoto.read(buf)) > 0) {
                photoStream.write(buf, 0, len);
            }
            photoStream.flush();
            photoStream.close();
        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
        }
    }
",False
900369,13498122,22580642,"    public boolean createUser(String username, String password, String name) throws Exception {
        boolean user_created = false;
        try {
            statement = connect.prepareStatement(""SELECT COUNT(*) from toepen.users WHERE username = ? LIMIT 1"");
            statement.setString(1, username);
            resultSet = statement.executeQuery();
            resultSet.next();
            if (resultSet.getInt(1) == 0) {
                MessageDigest md5 = MessageDigest.getInstance(""MD5"");
                md5.update(password.getBytes());
                BigInteger hash = new BigInteger(1, md5.digest());
                String password_hash = hash.toString(16);
                long ctime = System.currentTimeMillis() / 1000;
                statement = connect.prepareStatement(""INSERT INTO toepen.users "" + ""(username, password, name, ctime) "" + ""VALUES (?, ?, ?, ?)"");
                statement.setString(1, username);
                statement.setString(2, password_hash);
                statement.setString(3, name);
                statement.setLong(4, ctime);
                if (statement.executeUpdate() > 0) {
                    user_created = true;
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            close();
            return user_created;
        }
    }
","    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        long startTime = System.currentTimeMillis();
        boolean validClient = true;
        boolean validSession = false;
        String sessionKey = req.getParameter(""sid"");
        String storedKey = CLIENT_SESSION_KEYS.get(req.getRemoteAddr());
        if (sessionKey != null && storedKey != null && sessionKey.equals(storedKey)) validSession = true;
        DataStore ds = DataStore.getConnection();
        if (IPV6_DETECTED) {
            boolean doneWarning;
            synchronized (SJQServlet.class) {
                doneWarning = IPV6_WARNED;
                if (!IPV6_WARNED) IPV6_WARNED = true;
            }
            if (!doneWarning) LOG.warn(""IPv6 interface detected; client restriction settings ignored [restrictions do not support IPv6 addresses]"");
        } else {
            String[] clntRestrictions = ds.getSetting(""ValidClients"", """").split("";"");
            List<IPMatcher> matchers = new ArrayList<IPMatcher>();
            if (clntRestrictions.length == 1 && clntRestrictions[0].trim().length() == 0) {
                LOG.warn(""All client connections are being accepted and processed, please consider setting up client restrictions in SJQ settings"");
            } else {
                for (String s : clntRestrictions) {
                    s = s.trim();
                    try {
                        matchers.add(new IPMatcher(s));
                    } catch (IPMatcherException e) {
                        LOG.error(""Invalid client restriction settings; client restrictions ignored!"", e);
                        matchers.clear();
                        break;
                    }
                }
                validClient = matchers.size() > 0 ? false : true;
                for (IPMatcher m : matchers) {
                    try {
                        if (m.match(req.getRemoteAddr())) {
                            validClient = true;
                            break;
                        }
                    } catch (IPMatcherException e) {
                        LOG.error(""IPMatcherException"", e);
                    }
                }
            }
        }
        String clntProto = req.getParameter(""proto"");
        if (clntProto == null || Integer.parseInt(clntProto) != SJQ_PROTO) throw new RuntimeException(""Server is speaking protocol '"" + SJQ_PROTO + ""', but client is speaking protocol '"" + clntProto + ""'; install a client version that matches the server protocol version!"");
        resp.setHeader(""Content-Type"", ""text/plain"");
        resp.setDateHeader(""Expires"", 0);
        resp.setDateHeader(""Last-Modified"", System.currentTimeMillis());
        resp.setHeader(""Cache-Control"", ""no-store, no-cache, must-revalidate"");
        resp.setHeader(""Pragma"", ""no-cache"");
        String cmd = req.getParameter(""cmd"");
        if (cmd == null) {
            DataStore.returnConnection(ds);
            return;
        }
        ActiveClientList list = ActiveClientList.getInstance();
        BufferedWriter bw = new BufferedWriter(resp.getWriter());
        if (cmd.equals(""pop"")) {
            if (!validClient) {
                LOG.warn(""Client IP rejected: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                list.add(req.getRemoteHost());
                ClientParser clnt = new ClientParser(new StringReader(ds.getClientConf(req.getRemoteHost())));
                String offDay = clnt.getGlobalOption(""OFFDAY"");
                String offHour = clnt.getGlobalOption(""OFFHOUR"");
                Calendar now = Calendar.getInstance();
                if (RangeInterpreter.inRange(now.get(Calendar.DAY_OF_WEEK), 1, 7, offDay) || RangeInterpreter.inRange(now.get(Calendar.HOUR_OF_DAY), 0, 23, offHour)) {
                    LOG.warn(""Client '"" + req.getRemoteAddr() + ""' currently disabled via OFFDAY/OFFHOUR settings."");
                    bw.write(""null"");
                } else {
                    Task t = TaskQueue.getInstance().pop(req.getRemoteHost(), getPopCandidates(req.getRemoteHost(), clnt));
                    if (t == null) bw.write(""null""); else {
                        t.setResourcesUsed(Integer.parseInt(clnt.getTask(t.getTaskId()).getOption(""RESOURCES"")));
                        Object obj = null;
                        if (t.getObjType().equals(""media"")) obj = Butler.SageApi.mediaFileAPI.GetMediaFileForID(Integer.parseInt(t.getObjId())); else if (t.getObjType().equals(""sysmsg"")) obj = SystemMessageUtils.getSysMsg(t.getObjId());
                        ClientTask cTask = clnt.getTask(t.getTaskId());
                        JSONObject jobj = cTask.toJSONObject(obj);
                        String objType = null;
                        try {
                            if (jobj != null) objType = jobj.getString(Task.JSON_OBJ_TYPE);
                        } catch (JSONException e) {
                            throw new RuntimeException(""Invalid ClienTask JSON object conversion!"");
                        }
                        if (obj == null || jobj == null) {
                            LOG.error(""Source object has disappeared! ["" + t.getObjType() + ""/"" + t.getObjId() + ""]"");
                            TaskQueue.getInstance().updateTask(t.getObjId(), t.getTaskId(), Task.State.FAILED, t.getObjType());
                            bw.write(""null"");
                        } else if (objType.equals(""media"")) {
                            try {
                                long ratio = calcRatio(jobj.getString(Task.JSON_OBJ_ID), jobj.getString(Task.JSON_NORECORDING));
                                if (ratio > 0 && new FieldTimeUntilNextRecording(null, ""<="", ratio + ""S"").run()) {
                                    LOG.info(""Client '"" + req.getRemoteAddr() + ""' cannot pop task '"" + t.getObjType() + ""/"" + t.getTaskId() + ""/"" + t.getObjId() + ""'; :NORECORDING option prevents running of this task"");
                                    TaskQueue.getInstance().pushBack(t);
                                    bw.write(""null"");
                                } else bw.write(jobj.toString());
                            } catch (JSONException e) {
                                throw new RuntimeException(e);
                            }
                        } else bw.write(jobj.toString());
                    }
                }
            }
        } else if (cmd.equals(""update"")) {
            if (!validClient) {
                LOG.warn(""Client IP rejected: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                list.add(req.getRemoteHost());
                try {
                    Task t = new Task(new JSONObject(req.getParameter(""data"")));
                    TaskQueue.getInstance().updateTask(t);
                } catch (JSONException e) {
                    throw new RuntimeException(""Input error; client '"" + req.getRemoteHost() + ""', CMD: update"", e);
                }
            }
        } else if (cmd.equals(""showQ"")) {
            if (validSession) bw.write(TaskQueue.getInstance().toJSONArray().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""log"")) {
            if (validSession) {
                String mediaId = req.getParameter(""m"");
                String taskId = req.getParameter(""t"");
                String objType = req.getParameter(""o"");
                if ((mediaId != null && !mediaId.equals(""0"")) && (taskId != null && !taskId.equals(""0""))) bw.write(ds.readLog(mediaId, taskId, objType)); else {
                    BufferedReader r = new BufferedReader(new FileReader(""sjq.log""));
                    String line;
                    while ((line = r.readLine()) != null) bw.write(line + ""\n"");
                    r.close();
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""appState"")) {
            if (validSession) bw.write(Butler.dumpAppTrace()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""writeLog"")) {
            if (!validClient) {
                LOG.warn(""Client IP reject: "" + req.getRemoteAddr());
                notAuthorized(resp, bw);
            } else {
                String mediaId = req.getParameter(""m"");
                String taskId;
                if (!mediaId.equals(""-1"")) taskId = req.getParameter(""t""); else taskId = req.getRemoteHost();
                String objType = req.getParameter(""o"");
                if (!mediaId.equals(""0"") && Boolean.parseBoolean(ds.getSetting(""IgnoreTaskOutput"", ""false""))) {
                    LOG.info(""Dropping task output as per settings"");
                    DataStore.returnConnection(ds);
                    return;
                }
                String data = req.getParameter(""data"");
                String[] msg = StringUtils.splitByWholeSeparator(data, ""\r\n"");
                if (msg == null || msg.length == 1) msg = StringUtils.split(data, '\r');
                if (msg == null || msg.length == 1) msg = StringUtils.split(data, '\n');
                long now = System.currentTimeMillis();
                for (String line : msg) ds.logForTaskClient(mediaId, taskId, line, now, objType);
                if (msg.length > 0) ds.flushLogs();
            }
        } else if (cmd.equals(""ruleset"")) {
            if (validSession) bw.write(ds.getSetting(""ruleset"", """")); else notAuthorized(resp, bw);
        } else if (cmd.equals(""saveRuleset"")) {
            if (validSession) {
                ds.setSetting(""ruleset"", req.getParameter(""data""));
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getClients"")) {
            if (validSession) bw.write(ActiveClientList.getInstance().toJSONArray().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""loadClnt"")) {
            if (validSession) bw.write(ds.getClientConf(req.getParameter(""id""))); else notAuthorized(resp, bw);
        } else if (cmd.equals(""saveClnt"")) {
            if (validSession) {
                if (ds.saveClientConf(req.getParameter(""id""), req.getParameter(""data""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""history"")) {
            if (validSession) {
                int start, limit;
                try {
                    start = Integer.parseInt(req.getParameter(""start""));
                    limit = Integer.parseInt(req.getParameter(""limit""));
                } catch (NumberFormatException e) {
                    start = 0;
                    limit = -1;
                }
                bw.write(ds.getJobHistory(Integer.parseInt(req.getParameter(""t"")), start, limit, req.getParameter(""sort"")).toString());
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getSrvSetting"")) {
            if (validSession) bw.write(ds.getSetting(req.getParameter(""var""), """")); else notAuthorized(resp, bw);
        } else if (cmd.equals(""setSrvSetting"")) {
            if (validSession) {
                ds.setSetting(req.getParameter(""var""), req.getParameter(""val""));
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""setFileCleaner"")) {
            if (validSession) {
                ds.setSetting(""DelRegex"", req.getParameter(""orphan""));
                ds.setSetting(""IfRegex"", req.getParameter(""parent""));
                ds.setSetting(""IgnoreRegex"", req.getParameter(""ignore""));
                new Thread(new FileCleaner()).start();
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""getFileCleanerSettings"")) {
            if (validSession) {
                bw.write(ds.getSetting(""DelRegex"", """") + ""\n"");
                bw.write(ds.getSetting(""IfRegex"", """") + ""\n"");
                bw.write(ds.getSetting(""IgnoreRegex"", """"));
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""writeSrvSettings"")) {
            if (validSession) {
                try {
                    ds.setSettings(new JSONObject(req.getParameter(""data"")));
                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""readSrvSettings"")) {
            if (validSession) bw.write(ds.readSettings().toString()); else notAuthorized(resp, bw);
        } else if (cmd.equals(""login"")) {
            String pwd = ds.getSetting(""password"", """");
            try {
                MessageDigest msg = MessageDigest.getInstance(""MD5"");
                msg.update(req.getParameter(""password"").getBytes());
                String userPwd = new String(msg.digest());
                if (pwd.length() > 0 && pwd.equals(userPwd)) {
                    bw.write(""Success"");
                    int key = new java.util.Random().nextInt();
                    resp.addHeader(""SJQ-Session-Token"", Integer.toString(key));
                    CLIENT_SESSION_KEYS.put(req.getRemoteAddr(), Integer.toString(key));
                } else bw.write(""BadPassword"");
            } catch (NoSuchAlgorithmException e) {
                bw.write(e.getLocalizedMessage());
            }
        } else if (cmd.equals(""editPwd"")) {
            try {
                MessageDigest msg = MessageDigest.getInstance(""MD5"");
                String curPwd = ds.getSetting(""password"", """");
                String oldPwd = req.getParameter(""old"");
                msg.update(oldPwd.getBytes());
                oldPwd = new String(msg.digest());
                msg.reset();
                String newPwd = req.getParameter(""new"");
                String confPwd = req.getParameter(""conf"");
                if (!curPwd.equals(oldPwd)) bw.write(""BadOld""); else if (!newPwd.equals(confPwd) || newPwd.length() == 0) bw.write(""BadNew""); else {
                    msg.update(newPwd.getBytes());
                    newPwd = new String(msg.digest());
                    ds.setSetting(""password"", newPwd);
                    bw.write(""Success"");
                }
            } catch (NoSuchAlgorithmException e) {
                bw.write(e.getLocalizedMessage());
            }
        } else if (cmd.equals(""runStats"")) {
            if (validSession) {
                JSONObject o = new JSONObject();
                try {
                    o.put(""last"", Long.parseLong(ds.getSetting(""LastRun"", ""0"")));
                    o.put(""next"", Long.parseLong(ds.getSetting(""NextRun"", ""0"")));
                    bw.write(o.toString());
                } catch (JSONException e) {
                    bw.write(e.getLocalizedMessage());
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""runQLoader"")) {
            if (validSession) {
                Butler.wakeQueueLoader();
                bw.write(""Success"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""delActiveQ"")) {
            if (validSession) {
                if (TaskQueue.getInstance().delete(req.getParameter(""m""), req.getParameter(""t""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""clearActiveQ"")) {
            if (validSession) {
                if (TaskQueue.getInstance().clear()) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""editPri"")) {
            if (validSession) {
                try {
                    int priority = Integer.parseInt(req.getParameter(""p""));
                    if (TaskQueue.getInstance().editPriority(req.getParameter(""m""), req.getParameter(""t""), priority)) bw.write(""Success""); else bw.write(""Failed"");
                } catch (NumberFormatException e) {
                    bw.write(""Failed"");
                }
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""clearHistory"")) {
            if (validSession) {
                if (ds.clear(Integer.parseInt(req.getParameter(""t"")))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""delHistRow"")) {
            if (validSession) {
                if (ds.delTask(req.getParameter(""m""), req.getParameter(""t""), Integer.parseInt(req.getParameter(""y"")), req.getParameter(""o""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""rmLog"")) {
            if (validSession) {
                String mid = req.getParameter(""m"");
                String tid = req.getParameter(""t"");
                String oid = req.getParameter(""o"");
                if (mid.equals(""0"") && tid.equals(""0"") && oid.equals(""null"")) {
                    bw.write(""Failed: Can't delete server log file (sjq.log) while SageTV is running!"");
                } else if (ds.clearLog(mid, tid, oid)) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""qryMediaFile"")) {
            if (validSession) {
                JSONArray jarr = new JSONArray();
                MediaFileAPI.List mediaList = Butler.SageApi.mediaFileAPI.GetMediaFiles(ds.getMediaMask());
                String qry = req.getParameter(""q"");
                int max = Integer.parseInt(req.getParameter(""m""));
                for (MediaFileAPI.MediaFile mf : mediaList) {
                    if ((qry.matches(""\\d+"") && Integer.toString(mf.GetMediaFileID()).startsWith(qry)) || mf.GetMediaTitle().matches("".*"" + Pattern.quote(qry) + "".*"") || fileSegmentMatches(mf, qry)) {
                        JSONObject o = new JSONObject();
                        try {
                            o.put(""value"", mf.GetFileForSegment(0).getAbsolutePath());
                            String subtitle = null;
                            if (mf.GetMediaFileAiring() != null && mf.GetMediaFileAiring().GetShow() != null) subtitle = mf.GetMediaFileAiring().GetShow().GetShowEpisode();
                            String display;
                            if (subtitle != null && subtitle.length() > 0) display = mf.GetMediaTitle() + "": "" + subtitle; else display = mf.GetMediaTitle();
                            o.put(""display"", mf.GetMediaFileID() + "" - "" + display);
                            jarr.put(o);
                            if (jarr.length() >= max) break;
                        } catch (JSONException e) {
                            e.printStackTrace(System.out);
                        }
                    }
                }
                bw.write(jarr.toString());
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""debugMediaFile"")) {
            if (validSession) {
                if (Butler.debugQueueLoader(req.getParameter(""f""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""killTask"")) {
            if (validSession) {
                if (TaskQueue.getInstance().killTask(req.getParameter(""m""), req.getParameter(""t""), req.getParameter(""o""))) bw.write(""Success""); else bw.write(""Failed"");
            } else notAuthorized(resp, bw);
        } else if (cmd.equals(""keepAlive"")) {
            bw.write(Boolean.toString(!TaskQueue.getInstance().isTaskKilled(req.getParameter(""m""), req.getParameter(""t""), req.getParameter(""o""))));
        }
        bw.close();
        DataStore.returnConnection(ds);
        LOG.info(""Servlet POST request completed ["" + (System.currentTimeMillis() - startTime) + ""ms]"");
        return;
    }
",True
900370,16529002,441377,"    public static boolean copy(File source, File dest) {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
            if (in != null) in.close();
            if (out != null) out.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900371,14288802,521113,"    static Object read(String path, String encoding, boolean return_string) throws IOException {
        InputStream in;
        if (path.startsWith(""classpath:"")) {
            path = path.substring(""classpath:"".length());
            URL url = Estimate.class.getClassLoader().getResource(path);
            if (url == null) {
                throw new IllegalArgumentException(""Not found "" + path + "" in classpath."");
            }
            System.out.println(""read content from:"" + url.getFile());
            in = url.openStream();
        } else {
            File f = new File(path);
            if (!f.exists()) {
                throw new IllegalArgumentException(""Not found "" + path + "" in system."");
            }
            System.out.println(""read content from:"" + f.getAbsolutePath());
            in = new FileInputStream(f);
        }
        Reader re;
        if (encoding != null) {
            re = new InputStreamReader(in, encoding);
        } else {
            re = new InputStreamReader(in);
        }
        if (!return_string) {
            return re;
        }
        char[] chs = new char[1024];
        int count;
        StringBuffer content = new StringBuffer();
        while ((count = re.read(chs)) != -1) {
            content.append(chs, 0, count);
        }
        re.close();
        return content.toString();
    }
","    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }
",False
900372,189986,16646632,"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }
","    public static BufferedReader getReader(int license) {
        URL url = getResource(license);
        if (url == null) return null;
        InputStream inStream;
        try {
            inStream = url.openStream();
        } catch (IOException e) {
            return null;
        }
        return new BufferedReader(new InputStreamReader(inStream));
    }
",False
900373,21246898,682785,"    public static void main(String[] args) throws ParseException, FileNotFoundException, IOException {
        InputStream input = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream(""definition_template""));
        Translator t = new Translator(input, ""UTF8"");
        Node template = Translator.Start();
        File langs = new File(""support/support/translate/languages"");
        for (File f : langs.listFiles()) {
            if (f.getName().endsWith("".lng"")) {
                input = new BufferedInputStream(new FileInputStream(f));
                try {
                    Translator.ReInit(input, ""UTF8"");
                } catch (java.lang.NullPointerException e) {
                    new Translator(input, ""UTF8"");
                }
                Node newFile = Translator.Start();
                ArrayList<Addition> additions = new ArrayList<Addition>();
                syncKeys(template, newFile, additions);
                ArrayList<String> fileLines = new ArrayList<String>();
                Scanner scanner = new Scanner(new BufferedReader(new FileReader(f)));
                while (scanner.hasNextLine()) {
                    fileLines.add(scanner.nextLine());
                }
                int offset = 0;
                for (Addition a : additions) {
                    System.out.println(""Key added "" + a + "" to "" + f.getName());
                    if (a.afterLine < 0 || a.afterLine >= fileLines.size()) {
                        fileLines.add(a.getAddition(0));
                    } else {
                        fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0));
                    }
                }
                f.delete();
                Writer writer = new BufferedWriter(new FileWriter(f));
                for (String s : fileLines) writer.write(s + ""\n"");
                writer.close();
                System.out.println(""Language "" + f.getName() + "" had "" + additions.size() + "" additions"");
            }
        }
        File defFile = new File(langs, ""language.lng"");
        defFile.delete();
        defFile.createNewFile();
        InputStream copyStream = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream(""definition_template""));
        OutputStream out = new BufferedOutputStream(new FileOutputStream(defFile));
        int c = 0;
        while ((c = copyStream.read()) >= 0) out.write(c);
        out.close();
        System.out.println(""Languages updated."");
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900374,14773781,4076627,"    public void testJPEGBuffImage() throws MalformedURLException, IOException {
        System.out.println(""JPEGCodec BufferedImage:"");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + ""albums/hund/"" + images[i];
            InputStream istream = (new URL(url)).openStream();
            JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);
            BufferedImage image = dec.decodeAsBufferedImage();
            int width = image.getWidth();
            int height = image.getHeight();
            istream.close();
            System.out.println(""w: "" + width + "" - h: "" + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println(""zeit: "" + (stop - start));
    }
","    public void openFtpConnection(String workingDirectory) throws RQLException {
        try {
            ftpClient = new FTPClient();
            ftpClient.connect(server);
            ftpClient.login(user, password);
            ftpClient.changeWorkingDirectory(workingDirectory);
        } catch (IOException ioex) {
            throw new RQLException(""FTP client could not be created. Please check attributes given in constructor."", ioex);
        }
    }
",False
900375,18548122,12678042,"    private static String loadUrlToString(String a_url) throws IOException {
        URL l_url1 = new URL(a_url);
        BufferedReader br = new BufferedReader(new InputStreamReader(l_url1.openStream()));
        String l_content = """";
        String l_ligne = null;
        l_content = br.readLine();
        while ((l_ligne = br.readLine()) != null) {
            l_content += AA.SL + l_ligne;
        }
        return l_content;
    }
","    private void addEMInformation() {
        try {
            long emDate = System.currentTimeMillis();
            if (_local == true) {
                File emFile = new File(""emprotz.dat"");
                if (!emFile.exists()) {
                    return;
                }
                emDate = emFile.lastModified();
            }
            if (emDate > this._emFileDate) {
                this._emFileDate = emDate;
                this._emDate = emDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._emDeadline = null;
                        info._emFrames = null;
                        info._emValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""emprotz.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://home.comcast.net/"");
                    urlName.append(""~wxdude1/emsite/download/"");
                    urlName.append(""emprotz.zip"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        ZipInputStream zip = new ZipInputStream(stream);
                        zip.getNextEntry();
                        reader = new InputStreamReader(zip);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line1 = null;
                    int count = 0;
                    while ((line1 = file.readLine()) != null) {
                        String line2 = (line1 != null) ? file.readLine() : null;
                        String line3 = (line2 != null) ? file.readLine() : null;
                        String line4 = (line3 != null) ? file.readLine() : null;
                        count++;
                        if ((count > 1) && (line1 != null) && (line2 != null) && (line3 != null) && (line4 != null)) {
                            if (line1.length() > 2) {
                                int posBegin = line1.indexOf(""\"""", 0);
                                int posEnd = line1.indexOf(""\"""", posBegin + 1);
                                if ((posBegin >= 0) && (posEnd >= 0)) {
                                    String project = line1.substring(posBegin + 1, posEnd - posBegin);
                                    int projectNum = Integer.parseInt(project);
                                    Integer deadline = Integer.valueOf(line2.trim());
                                    Double value = Double.valueOf(line3.trim());
                                    Integer frames = Integer.valueOf(line4.trim());
                                    Information info = getInfo(projectNum);
                                    if (info == null) {
                                        info = createInfo(projectNum);
                                    }
                                    if (info._emValue == null) {
                                        info._emDeadline = deadline;
                                        info._emFrames = frames;
                                        info._emValue = value;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",True
900376,10207809,15609433,"  @SuppressWarnings(""finally"")
  private void decompress(final File src) throws IOException
  {
    final String srcPath = src.getPath();
    checkSourceFile(src);
    final boolean test = this.switches.contains(Switch.test);

    final File dst;
    if (test)
      dst = File.createTempFile(""jaxlib-bzip"", null);
    else
    {
      if (srcPath.endsWith("".bz2""))
        dst = new File(srcPath.substring(0, srcPath.length() - 4));
      else
      {
        this.log.println(""WARNING: Can't guess original name, using extension \"".out\"":"").println(srcPath);
        dst = new File(srcPath + "".out"");
      }
    }
    if (!checkDestFile(dst))
      return;

    final boolean showProgress = this.switches.contains(Switch.showProgress);

    BZip2InputStream  in          = null;
    FileOutputStream  out         = null;
    FileChannel       outChannel  = null;
    FileLock          inLock      = null;
    FileLock          outLock     = null;

    try
    {
      final FileInputStream in0       = new FileInputStream(src);
      final FileChannel     inChannel = in0.getChannel();
      final long            inSize    = inChannel.size();

      inLock = inChannel.tryLock(0, inSize, true);
      if (inLock == null)
        throw error(""source file locked by another process: "" + src);

      in          = new BZip2InputStream(new BufferedXInputStream(in0, 8192));
      out         = new FileOutputStream(dst);
      outChannel  = out.getChannel();

      outLock = outChannel.tryLock();
      if (outLock == null)
        throw error(""destination file locked by another process: "" + dst);

      if (showProgress || this.verbose)
      {
        this.log.print(""source: "" + src).print("": size="").println(inSize);
        this.log.println(""target: "" + dst);
      }

      long  pos       = 0;
      int   progress  = 0;
      final long maxStep = showProgress ? Math.max(8192, inSize / MAX_PROGRESS) : Integer.MAX_VALUE;

      while (true)
      {
        final long step = outChannel.transferFrom(in, pos, maxStep);
        if (step <= 0)
        {
          final long a = inChannel.size();
          if (a != inSize)
            throw error(""file "" + src + "" has been modified concurrently by another process"");

          if (inChannel.position() >= inSize)
          {
            if (showProgress)
            {
              for (int i = progress; i < MAX_PROGRESS; i++)
                this.log.print('#');
              this.log.println("" done"");
            }
            break;
          }
        }
        else
        {
          pos += step;
          if (showProgress)
          {
            final double  p           = (double) inChannel.position() / (double) inSize;
            final int     newProgress = (int) (MAX_PROGRESS * p);
            for (int i = progress; i < newProgress; i++)
              this.log.print('#');
            progress = newProgress;
          }
        }
      }

      final long outSize = outChannel.size();
      in.close();
      out.close();

      if (this.verbose)
      {
        final double ratio = (outSize == 0) ? (inSize * 100) : ((double) inSize / (double) outSize);
        this.log.print(""compressed size: "").print(inSize)
          .print(""; decompressed size: "").print(outSize)
          .print(""; compression ratio: "").print(ratio).println('%');
      }

      if (!test && !this.switches.contains(Switch.keep))
      {
        if (!src.delete())
          throw error(""unable to delete sourcefile: "" + src);
      }

      if (test && !dst.delete())
        throw error(""unable to delete testfile: "" + dst);
    }
    catch (final IOException ex)
    {
      IO.tryClose(in);
      IO.tryClose(out);
      IO.tryRelease(inLock);
      IO.tryRelease(outLock);
      try
      {
        this.log.println();
      }
      finally
      {
        throw ex;
      }
    }

  }
","    public static int[] bubbleSort2(int[] source) {
        if (null != source && source.length > 0) {
            boolean flag = false;
            while (!flag) {
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        break;
                    } else if (i == source.length - 2) {
                        flag = true;
                    }
                }
            }
        }
        return source;
    }
",False
900377,833870,7041871,"    public static void test(String args[]) {
        int trace;
        int bytes_read = 0;
        int last_contentLenght = 0;
        try {
            BufferedReader reader;
            URL url;
            url = new URL(args[0]);
            URLConnection istream = url.openConnection();
            last_contentLenght = istream.getContentLength();
            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
            System.out.println(url.toString());
            String line;
            trace = t2pNewTrace();
            while ((line = reader.readLine()) != null) {
                bytes_read = bytes_read + line.length() + 1;
                t2pProcessLine(trace, line);
            }
            t2pHandleEventPairs(trace);
            t2pSort(trace, 0);
            t2pExportTrace(trace, new String(""pngtest2.png""), 1000, 700, (float) 0, (float) 33);
            t2pExportTrace(trace, new String(""pngtest3.png""), 1000, 700, (float) 2.3, (float) 2.44);
            System.out.println(""Press any key to contiune read from stream !!!"");
            System.out.println(t2pGetProcessName(trace, 0));
            System.in.read();
            istream = url.openConnection();
            if (last_contentLenght != istream.getContentLength()) {
                istream = url.openConnection();
                istream.setRequestProperty(""Range"", ""bytes="" + Integer.toString(bytes_read) + ""-"");
                System.out.println(Integer.toString(istream.getContentLength()));
                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    t2pProcessLine(trace, line);
                }
            } else System.out.println(""File not changed !"");
            t2pDeleteTrace(trace);
        } catch (MalformedURLException e) {
            System.out.println(""MalformedURLException !!!"");
        } catch (IOException e) {
            System.out.println(""File not found "" + args[0]);
        }
        ;
    }
","    public static void bubbleSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
            System.out.println(""��"" + (i + 1) + ""������"");
            for (int k = 0; k < array.length; k++) {
                System.out.print(array[k] + "" "");
            }
            System.out.println();
        }
    }
",False
900378,7893892,2883828,"    public static String md5EncodeString(String s) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        if (s == null) return null;
        if (StringUtils.isBlank(s)) return """";
        MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
        algorithm.reset();
        algorithm.update(s.getBytes(""UTF-8""));
        byte messageDigest[] = algorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < messageDigest.length; i++) {
            String hex = Integer.toHexString(0xFF & messageDigest[i]);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
","        public static void copyFile(File from, File to) {
            try {
                FileInputStream in = new FileInputStream(from);
                FileOutputStream out = new FileOutputStream(to);
                byte[] buffer = new byte[1024 * 16];
                int read = 0;
                while ((read = in.read(buffer)) >= 0) {
                    out.write(buffer, 0, read);
                }
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
",False
900379,5113796,19309675,"    private BibtexDatabase importInspireEntries(String key, OutputPrinter frame) {
        String url = constructUrl(key);
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            conn.setRequestProperty(""User-Agent"", ""Jabref"");
            InputStream inputStream = conn.getInputStream();
            INSPIREBibtexFilterReader reader = new INSPIREBibtexFilterReader(new InputStreamReader(inputStream));
            ParserResult pr = BibtexParser.parse(reader);
            return pr.getDatabase();
        } catch (IOException e) {
            frame.showMessage(Globals.lang(""An Exception ocurred while accessing '%0'"", url) + ""\n\n"" + e.toString(), Globals.lang(getKeyName()), JOptionPane.ERROR_MESSAGE);
        } catch (RuntimeException e) {
            frame.showMessage(Globals.lang(""An Error occurred while fetching from INSPIRE source (%0):"", new String[] { url }) + ""\n\n"" + e.getMessage(), Globals.lang(getKeyName()), JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
","    public final void propertyChange(final PropertyChangeEvent event) {
        if (fChecker != null && event.getProperty().equals(ISpellCheckPreferenceKeys.SPELLING_USER_DICTIONARY)) {
            if (fUserDictionary != null) {
                fChecker.removeDictionary(fUserDictionary);
                fUserDictionary = null;
            }
            final String file = (String) event.getNewValue();
            if (file.length() > 0) {
                try {
                    final URL url = new URL(""file"", null, file);
                    InputStream stream = url.openStream();
                    if (stream != null) {
                        try {
                            fUserDictionary = new PersistentSpellDictionary(url);
                            fChecker.addDictionary(fUserDictionary);
                        } finally {
                            stream.close();
                        }
                    }
                } catch (MalformedURLException exception) {
                } catch (IOException exception) {
                }
            }
        }
    }
",False
900380,5759962,9782242,"    @Override
    public User login(String username, String password) {
        User user = null;
        try {
            user = (User) em.createQuery(""Select o from User o where o.username = :username"").setParameter(""username"", username).getSingleResult();
        } catch (NoResultException e) {
            throw new NestedException(e.getMessage(), e);
        }
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            if (hashtext.equals(user.getPassword())) return user;
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
        return null;
    }
","    private void createUser(AddEditUserForm addform, HttpServletRequest request, ActionMapping mapping) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(addform.getPassword().getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        Session hbsession = HibernateUtil.currentSession();
        try {
            Transaction tx = hbsession.beginTransaction();
            NvUsers user = new NvUsers();
            user.setLogin(addform.getLogin());
            user.setPassword(app.toString());
            hbsession.save(user);
            hbsession.flush();
            if (!hbsession.connection().getAutoCommit()) {
                tx.commit();
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }
",True
900381,15683090,4961134,"    private void doUpload(UploadKind uploadKind, WriteKind writeKind) throws Exception {
        int n = 512 * 1024;
        AtomicInteger total = new AtomicInteger(0);
        ServerSocket ss = startSinkServer(total);
        URL url = new URL(""http://localhost:"" + ss.getLocalPort() + ""/test1"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(""POST"");
        if (uploadKind == UploadKind.CHUNKED) {
            conn.setChunkedStreamingMode(-1);
        } else {
            conn.setFixedLengthStreamingMode(n);
        }
        OutputStream out = conn.getOutputStream();
        if (writeKind == WriteKind.BYTE_BY_BYTE) {
            for (int i = 0; i < n; ++i) {
                out.write('x');
            }
        } else {
            byte[] buf = new byte[writeKind == WriteKind.SMALL_BUFFERS ? 256 : 64 * 1024];
            Arrays.fill(buf, (byte) 'x');
            for (int i = 0; i < n; i += buf.length) {
                out.write(buf, 0, Math.min(buf.length, n - i));
            }
        }
        out.close();
        assertTrue(conn.getResponseCode() > 0);
        assertEquals(uploadKind == UploadKind.CHUNKED ? -1 : n, total.get());
    }
","    private void alterarArtista(Artista artista) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""UPDATE artista SET nome = ?,sexo = ?,email = ?,obs = ?,telefone = ? where numeroinscricao = ?"";
            ps = conn.prepareStatement(sql);
            ps.setString(1, artista.getNome());
            ps.setBoolean(2, artista.isSexo());
            ps.setString(3, artista.getEmail());
            ps.setString(4, artista.getObs());
            ps.setString(5, artista.getTelefone());
            ps.setInt(6, artista.getNumeroInscricao());
            ps.executeUpdate();
            alterarEndereco(conn, ps, artista);
            delObras(conn, ps, artista.getNumeroInscricao());
            sql = ""insert into obra VALUES (?,?,?,?,?,?)"";
            ps = conn.prepareStatement(sql);
            for (Obra obra : artista.getListaObras()) {
                salvarObra(conn, ps, obra, artista.getNumeroInscricao());
            }
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
",False
900382,14050307,489386,"    public int instantiate(int objectId, String description) throws FidoDatabaseException, ObjectNotFoundException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            try {
                String sql = ""insert into Objects (Description) "" + ""values ('"" + description + ""')"";
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, objectId) == false) throw new ObjectNotFoundException(objectId);
                stmt.executeUpdate(sql);
                int id;
                sql = ""select currval('objects_objectid_seq')"";
                rs = stmt.executeQuery(sql);
                if (rs.next() == false) throw new SQLException(""No rows returned from select currval() query""); else id = rs.getInt(1);
                ObjectLinkTable objectLinkList = new ObjectLinkTable();
                objectLinkList.linkObjects(stmt, id, ""instance"", objectId);
                conn.commit();
                return id;
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",False
900383,6037295,204078,"    public void copyContent(long mailId1, long mailId2) throws Exception {
        File file1 = new File(this.getMailDir(mailId1) + ""/"");
        File file2 = new File(this.getMailDir(mailId2) + ""/"");
        this.recursiveDir(file2);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; i++) {
                    if (files[i].isFile()) {
                        File file2s = new File(file2.getAbsolutePath() + ""/"" + files[i].getName());
                        if (!file2s.exists()) {
                            file2s.createNewFile();
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s));
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i]));
                            int read;
                            while ((read = in.read()) != -1) {
                                out.write(read);
                            }
                            out.flush();
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ex1) {
                                    ex1.printStackTrace();
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900384,20019830,18924485,"    public static void fileCopy(File sourceFile, File destFile) throws IOException {
        FileChannel source = null;
        FileChannel destination = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(destFile);
            source = fis.getChannel();
            destination = fos.getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            fis.close();
            fos.close();
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    public void processExplicitSchemaAndWSDL(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
        HashMap services = configContext.getAxisConfiguration().getServices();
        String filePart = req.getRequestURL().toString();
        String schema = filePart.substring(filePart.lastIndexOf(""/"") + 1, filePart.length());
        if ((services != null) && !services.isEmpty()) {
            Iterator i = services.values().iterator();
            while (i.hasNext()) {
                AxisService service = (AxisService) i.next();
                InputStream stream = service.getClassLoader().getResourceAsStream(""META-INF/"" + schema);
                if (stream != null) {
                    OutputStream out = res.getOutputStream();
                    res.setContentType(""text/xml"");
                    IOUtils.copy(stream, out, true);
                    return;
                }
            }
        }
    }
",True
900385,20587078,2238217,"    public static void main(String[] a) {
        ArrayList<String> allFilesToBeCopied = new ArrayList<String>();
        new File(outputDir).mkdirs();
        try {
            FileReader fis = new FileReader(completeFileWithDirToCathFileList);
            BufferedReader bis = new BufferedReader(fis);
            String line = """";
            String currentCombo = """";
            while ((line = bis.readLine()) != null) {
                String[] allEntries = line.split(""\\s+"");
                String fileName = allEntries[0];
                String thisCombo = allEntries[1] + allEntries[2] + allEntries[3] + allEntries[4];
                if (currentCombo.equals(thisCombo)) {
                } else {
                    System.out.println(""merke: "" + fileName);
                    allFilesToBeCopied.add(fileName);
                    currentCombo = thisCombo;
                }
            }
            System.out.println(allFilesToBeCopied.size());
            for (String file : allFilesToBeCopied) {
                try {
                    FileChannel srcChannel = new FileInputStream(CathDir + file).getChannel();
                    FileChannel dstChannel = new FileOutputStream(outputDir + file).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public void includeJs(Group group, Writer out, PageContext pageContext) throws IOException {
        includeResource(pageContext, out, RetentionHelper.buildRootRetentionFilePath(group, "".js""), JS_BEGIN_TAG, JS_END_TAG);
        ByteArrayOutputStream outtmp = new ByteArrayOutputStream();
        if (AbstractGroupBuilder.getInstance().buildGroupJsIfNeeded(group, outtmp, pageContext.getServletContext())) {
            FileOutputStream fileStream = new FileOutputStream(new File(RetentionHelper.buildFullRetentionFilePath(group, "".js"")));
            IOUtils.copy(new ByteArrayInputStream(outtmp.toByteArray()), fileStream);
            fileStream.close();
        }
    }
",True
900386,15767021,21266147,"    private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File selectedFile = documentFileChooser.getSelectedFile();
            File collectionCopyFile;
            String newDocumentName = selectedFile.getName();
            Document newDocument = new Document(newDocumentName);
            if (activeCollection.containsDocument(newDocument)) {
                int matchingFilenameDistinguisher = 1;
                StringBuilder distinguisherReplacer = new StringBuilder();
                newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");
                newDocument.setDocumentName(newDocumentName);
                while (activeCollection.containsDocument(newDocument)) {
                    matchingFilenameDistinguisher++;
                    newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();
                    newDocument.setDocumentName(newDocumentName);
                }
            }
            Scanner tokenizer = null;
            FileChannel fileSource = null;
            FileChannel collectionDestination = null;
            HashMap<String, Integer> termHashMap = new HashMap<String, Integer>();
            Index collectionIndex = activeCollection.getIndex();
            int documentTermMaxFrequency = 0;
            int currentTermFrequency;
            try {
                tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));
                tokenizer.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                String nextToken;
                while (tokenizer.hasNext()) {
                    nextToken = tokenizer.next().toLowerCase();
                    if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);
                }
                Term newTerm;
                for (String term : termHashMap.keySet()) {
                    newTerm = new Term(term);
                    if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);
                    currentTermFrequency = termHashMap.get(term);
                    if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;
                    collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);
                }
                activeCollection.addDocument(newDocument);
                String userHome = System.getProperty(""user.home"");
                String fileSeparator = System.getProperty(""file.separator"");
                collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);
                collectionCopyFile.createNewFile();
                fileSource = new FileInputStream(selectedFile).getChannel();
                collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();
                collectionDestination.transferFrom(fileSource, 0, fileSource.size());
            } catch (FileNotFoundException e) {
                System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                return;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, ""An I/O error occured during file transfer!"", ""File transfer I/O error"", JOptionPane.WARNING_MESSAGE);
                return;
            } finally {
                try {
                    if (tokenizer != null) tokenizer.close();
                    if (fileSource != null) fileSource.close();
                    if (collectionDestination != null) collectionDestination.close();
                } catch (IOException e) {
                    System.err.println(e.getMessage());
                }
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
","    public void execute() {
        File sourceFile = new File(oarfilePath);
        File destinationFile = new File(deploymentDirectory + File.separator + sourceFile.getName());
        try {
            FileInputStream fis = new FileInputStream(sourceFile);
            FileOutputStream fos = new FileOutputStream(destinationFile);
            byte[] readArray = new byte[2048];
            while (fis.read(readArray) != -1) {
                fos.write(readArray);
            }
            fis.close();
            fos.flush();
            fos.close();
        } catch (IOException ioe) {
            logger.severe(""failed to copy the file:"" + ioe);
        }
    }
",True
900387,21817955,13329811,"    public void movePrior(String[] showOrder, String[] orgID, String targetShowOrder, String targetOrgID) throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        int moveCount = showOrder.length;
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        String strQuery = ""select show_order from "" + Common.ORGANIZE_TABLE + "" where show_order="" + showOrder[moveCount - 1] + "" and organize_id= '"" + orgID[moveCount - 1] + ""'"";
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            result = ps.executeQuery();
            int maxOrderNo = 0;
            if (result.next()) {
                maxOrderNo = result.getInt(1);
            }
            String[] sqls = new String[moveCount + 1];
            sqls[0] = ""update "" + Common.ORGANIZE_TABLE + "" set show_order="" + maxOrderNo + "" where show_order="" + targetShowOrder + "" and organize_id= '"" + targetOrgID + ""'"";
            for (int i = 0; i < showOrder.length; i++) {
                sqls[i + 1] = ""update "" + Common.ORGANIZE_TABLE + "" set show_order=show_order-1"" + "" where show_order="" + showOrder[i] + "" and organize_id= '"" + orgID[i] + ""'"";
            }
            for (int j = 0; j < sqls.length; j++) {
                ps = con.prepareStatement(sqls[j]);
                int resultCount = ps.executeUpdate();
                if (resultCount != 1) {
                    throw new CesSystemException(""Organize.movePrior(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE update !! resultCount = "" + resultCount);
                }
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""Organize.movePrior(): SQLException while mov organize order "" + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            close(dbo, ps, result);
        }
    }
","    @Deprecated
    public void test() {
        try {
            String query = ""* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>"" + ""* <http://xmlns.com/foaf/0.1/knows> *"";
            String url = ""http://sindice.com/api/v2/search?qt=advanced&q="" + URLEncoder.encode(query, ""utf-8"") + ""&qt=advanced"";
            URL urlObj = new URL(url);
            URLConnection con = urlObj.openConnection();
            if (con != null) {
                Model model = ModelFactory.createDefaultModel();
                model.read(con.getInputStream(), null);
            }
            System.out.println(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",False
900388,11279071,343230,"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","        public Source resolve(String href, String base) throws TransformerException {
            if (href.endsWith("".txt"")) {
                try {
                    URL url = new URL(new URL(base), href);
                    java.io.InputStream in = url.openConnection().getInputStream();
                    java.io.InputStreamReader reader = new java.io.InputStreamReader(in, ""iso-8859-1"");
                    StringBuffer sb = new StringBuffer();
                    while (true) {
                        int c = reader.read();
                        if (c < 0) break;
                        sb.append((char) c);
                    }
                    com.icl.saxon.expr.TextFragmentValue tree = new com.icl.saxon.expr.TextFragmentValue(sb.toString(), url.toString(), (com.icl.saxon.Controller) transformer);
                    return tree.getFirst();
                } catch (Exception err) {
                    throw new TransformerException(err);
                }
            } else {
                return null;
            }
        }
",False
900389,4471001,19809975,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String getETag(final String uri, final long lastModified) {
        try {
            final MessageDigest dg = MessageDigest.getInstance(""MD5"");
            dg.update(uri.getBytes(""utf-8""));
            dg.update(new byte[] { (byte) ((lastModified >> 24) & 0xFF), (byte) ((lastModified >> 16) & 0xFF), (byte) ((lastModified >> 8) & 0xFF), (byte) (lastModified & 0xFF) });
            return CBASE64Codec.encode(dg.digest());
        } catch (final Exception ignore) {
            return uri + lastModified;
        }
    }
",False
900390,7954779,15826300,"    public void filter(File source, File destination, MNamespace mNamespace) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(source));
        BufferedWriter writer = new BufferedWriter(new FileWriter(destination));
        int line = 0;
        int column = 0;
        Stack parseStateStack = new Stack();
        parseStateStack.push(new ParseState(mNamespace));
        for (Iterator i = codePieces.iterator(); i.hasNext(); ) {
            NamedCodePiece cp = (NamedCodePiece) i.next();
            while (line < cp.getStartLine()) {
                line++;
                column = 0;
                writer.write(reader.readLine());
                writer.newLine();
            }
            while (column < cp.getStartPosition()) {
                writer.write(reader.read());
                column++;
            }
            cp.write(writer, parseStateStack, column);
            while (line < cp.getEndLine()) {
                line++;
                column = 0;
                reader.readLine();
            }
            while (column < cp.getEndPosition()) {
                column++;
                reader.read();
            }
        }
        String data;
        while ((data = reader.readLine()) != null) {
            writer.write(data);
            writer.newLine();
        }
        reader.close();
        writer.close();
    }
","    public static Map<String, List<String>> getResponseHeader(String address) {
        System.out.println(address);
        URLConnection conn = null;
        Map<String, List<String>> responseHeader = null;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            responseHeader = conn.getHeaderFields();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return responseHeader;
    }
",False
900391,22998998,17014842,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        FileChannel inputFileChannel = new FileInputStream(sourceFile).getChannel();
        FileChannel outputFileChannel = new FileOutputStream(destFile).getChannel();
        long offset = 0L;
        long length = inputFileChannel.size();
        final long MAXTRANSFERBUFFERLENGTH = 1024 * 1024;
        try {
            for (; offset < length; ) {
                offset += inputFileChannel.transferTo(offset, MAXTRANSFERBUFFERLENGTH, outputFileChannel);
                inputFileChannel.position(offset);
            }
        } finally {
            try {
                outputFileChannel.close();
            } catch (Exception ignore) {
            }
            try {
                inputFileChannel.close();
            } catch (IOException ignore) {
            }
        }
    }
","    private String createDefaultRepoConf() throws IOException {
        InputStream confIn = getClass().getResourceAsStream(REPO_CONF_PATH);
        File tempConfFile = File.createTempFile(""repository"", ""xml"");
        tempConfFile.deleteOnExit();
        IOUtils.copy(confIn, new FileOutputStream(tempConfFile));
        return tempConfFile.getAbsolutePath();
    }
",True
900392,12800568,13576759,"    public void exportFile() {
        String expfolder = PropertyHandler.getInstance().getProperty(PropertyHandler.KINDLE_EXPORT_FOLDER_KEY);
        File out = new File(expfolder + File.separator + previewInfo.getTitle() + "".prc"");
        File f = new File(absPath);
        try {
            FileOutputStream fout = new FileOutputStream(out);
            FileInputStream fin = new FileInputStream(f);
            int read = 0;
            byte[] buffer = new byte[1024 * 1024];
            while ((read = fin.read(buffer)) > 0) {
                fout.write(buffer, 0, read);
            }
            fin.close();
            fout.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private void resourceDirectoryCopy(String resource, IProject project, String target, IProgressMonitor monitor) throws URISyntaxException, IOException, CoreException {
        if (!target.endsWith(""/"")) {
            target += ""/"";
        }
        String res = resource;
        if (!res.endsWith(""/"")) ;
        {
            res += ""/"";
        }
        Enumeration<URL> it = bundle.findEntries(resource, ""*"", false);
        while (it.hasMoreElements()) {
            URL url = it.nextElement();
            File f = new File(FileLocator.toFileURL(url).toURI());
            String fName = f.getName();
            boolean skip = false;
            for (String skiper : skipList) {
                if (fName.equals(skiper)) {
                    skip = true;
                    break;
                }
            }
            if (skip) {
                continue;
            }
            String targetName = target + fName;
            if (f.isDirectory()) {
                IFolder folder = project.getFolder(targetName);
                if (!folder.exists()) {
                    folder.create(true, true, monitor);
                }
                resourceDirectoryCopy(res + f.getName(), project, targetName, monitor);
            } else if (f.isFile()) {
                IFile targetFile = project.getFile(targetName);
                InputStream is = null;
                try {
                    is = url.openStream();
                    if (targetFile.exists()) {
                        targetFile.setContents(is, true, false, monitor);
                    } else {
                        targetFile.create(is, true, monitor);
                    }
                } catch (Exception e) {
                    throw new IOException(e);
                } finally {
                    if (is != null) {
                        is.close();
                    }
                }
            }
        }
    }
",False
900393,10467996,13227684,"    public void copyFile(String oldPath, String newPath) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPath);
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            System.out.println(""复制单个文件操作出错"");
            e.printStackTrace();
        }
    }
","    public static void main(String[] args) {
        for (int i = 0; i < args.length - 2; i++) {
            if (!CommonArguments.parseArguments(args, i, u)) {
                u.usage();
                System.exit(1);
            }
            if (CommonParameters.startArg > (i + 1)) i = CommonParameters.startArg - 1;
        }
        if (args.length < CommonParameters.startArg + 2) {
            u.usage();
            System.exit(1);
        }
        try {
            int readsize = 1024;
            ContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);
            CCNHandle handle = CCNHandle.open();
            File theFile = new File(args[CommonParameters.startArg + 1]);
            if (theFile.exists()) {
                System.out.println(""Overwriting file: "" + args[CommonParameters.startArg + 1]);
            }
            FileOutputStream output = new FileOutputStream(theFile);
            long starttime = System.currentTimeMillis();
            CCNInputStream input;
            if (CommonParameters.unversioned) input = new CCNInputStream(argName, handle); else input = new CCNFileInputStream(argName, handle);
            if (CommonParameters.timeout != null) {
                input.setTimeout(CommonParameters.timeout);
            }
            byte[] buffer = new byte[readsize];
            int readcount = 0;
            long readtotal = 0;
            while ((readcount = input.read(buffer)) != -1) {
                readtotal += readcount;
                output.write(buffer, 0, readcount);
                output.flush();
            }
            if (CommonParameters.verbose) System.out.println(""ccngetfile took: "" + (System.currentTimeMillis() - starttime) + ""ms"");
            System.out.println(""Retrieved content "" + args[CommonParameters.startArg + 1] + "" got "" + readtotal + "" bytes."");
            System.exit(0);
        } catch (ConfigurationException e) {
            System.out.println(""Configuration exception in ccngetfile: "" + e.getMessage());
            e.printStackTrace();
        } catch (MalformedContentNameStringException e) {
            System.out.println(""Malformed name: "" + args[CommonParameters.startArg] + "" "" + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Cannot write file or read content. "" + e.getMessage());
            e.printStackTrace();
        }
        System.exit(1);
    }
",True
900394,3673887,6061403,"    public static final void copyFile(File source, File destination) throws IOException {
        FileChannel sourceChannel = new FileInputStream(source).getChannel();
        FileChannel targetChannel = new FileOutputStream(destination).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
        sourceChannel.close();
        targetChannel.close();
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900395,17944692,14050308,"            @Override
            public void run() {
                try {
                    if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                    final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                    final HttpClient httpClient = new DefaultHttpClient();
                    final HttpPost request = new HttpPost(UPLOADSCRIPT_URL);
                    final MultipartEntity requestEntity = new MultipartEntity();
                    requestEntity.addPart(""gpxfile"", new InputStreamBody(gpxInputStream, """" + System.currentTimeMillis() + "".gpx""));
                    httpClient.getParams().setBooleanParameter(""http.protocol.expect-continue"", false);
                    request.setEntity(requestEntity);
                    final HttpResponse response = httpClient.execute(request);
                    final int status = response.getStatusLine().getStatusCode();
                    if (status != HttpStatus.SC_OK) {
                        logger.error(""GPXUploader"", ""status != HttpStatus.SC_OK"");
                    } else {
                        final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()));
                        final char[] buf = new char[8 * 1024];
                        int read;
                        final StringBuilder sb = new StringBuilder();
                        while ((read = r.read(buf)) != -1) sb.append(buf, 0, read);
                        logger.debug(""GPXUploader"", ""Response: "" + sb.toString());
                    }
                } catch (final Exception e) {
                }
            }
","    public void deleteInstance(int instanceId) throws FidoDatabaseException, ObjectNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (contains(stmt, instanceId) == false) throw new ObjectNotFoundException(instanceId);
                ObjectLinkTable objectLinkList = new ObjectLinkTable();
                ObjectAttributeTable objectAttributeList = new ObjectAttributeTable();
                objectLinkList.deleteObject(stmt, instanceId);
                objectAttributeList.deleteObject(stmt, instanceId);
                stmt.executeUpdate(""delete from Objects where ObjectId = "" + instanceId);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",False
900396,587124,18583832,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    private static void copy(File source, File target) throws IOException {
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(source);
            to = new FileOutputStream(target);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",True
900397,2269290,420619,"    public final void copyFile(final File fromFile, final File toFile) throws IOException {
        this.createParentPathIfNeeded(toFile);
        final FileChannel sourceChannel = new FileInputStream(fromFile).getChannel();
        final FileChannel targetChannel = new FileOutputStream(toFile).getChannel();
        final long sourceFileSize = sourceChannel.size();
        sourceChannel.transferTo(0, sourceFileSize, targetChannel);
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900398,20784790,6288460,"    private static void copy(File source, File target) throws IOException {
        FileInputStream in = new FileInputStream(source);
        FileOutputStream out = new FileOutputStream(target);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
","    private static void createNonCompoundData(String dir, String type) {
        try {
            Set s = new HashSet();
            File nouns = new File(dir + ""index."" + type);
            FileInputStream fis = new FileInputStream(nouns);
            InputStreamReader reader = new InputStreamReader(fis);
            StringBuffer sb = new StringBuffer();
            int chr = reader.read();
            while (chr >= 0) {
                if (chr == '\n' || chr == '\r') {
                    String line = sb.toString();
                    if (line.length() > 0) {
                        if (line.charAt(0) != ' ') {
                            String[] spaceSplit = PerlHelp.split(line);
                            if (spaceSplit[0].indexOf('_') < 0) {
                                s.add(spaceSplit[0]);
                            }
                        }
                    }
                    sb.setLength(0);
                } else {
                    sb.append((char) chr);
                }
                chr = reader.read();
            }
            System.out.println(type + "" size="" + s.size());
            File output = new File(dir + ""nonCompound."" + type + ""s.gz"");
            FileOutputStream fos = new FileOutputStream(output);
            GZIPOutputStream gzos = new GZIPOutputStream(new BufferedOutputStream(fos));
            PrintWriter writer = new PrintWriter(gzos);
            writer.println(""# This file was extracted from WordNet data, the following copyright notice"");
            writer.println(""# from WordNet is attached."");
            writer.println(""#"");
            writer.println(""#  This software and database is being provided to you, the LICENSEE, by  "");
            writer.println(""#  Princeton University under the following license.  By obtaining, using  "");
            writer.println(""#  and/or copying this software and database, you agree that you have  "");
            writer.println(""#  read, understood, and will comply with these terms and conditions.:  "");
            writer.println(""#  "");
            writer.println(""#  Permission to use, copy, modify and distribute this software and  "");
            writer.println(""#  database and its documentation for any purpose and without fee or  "");
            writer.println(""#  royalty is hereby granted, provided that you agree to comply with  "");
            writer.println(""#  the following copyright notice and statements, including the disclaimer,  "");
            writer.println(""#  and that the same appear on ALL copies of the software, database and  "");
            writer.println(""#  documentation, including modifications that you make for internal  "");
            writer.println(""#  use or for distribution.  "");
            writer.println(""#  "");
            writer.println(""#  WordNet 1.7 Copyright 2001 by Princeton University.  All rights reserved. "");
            writer.println(""#  "");
            writer.println(""#  THIS SOFTWARE AND DATABASE IS PROVIDED \""AS IS\"" AND PRINCETON  "");
            writer.println(""#  UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR  "");
            writer.println(""#  IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PRINCETON  "");
            writer.println(""#  UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES OF MERCHANT-  "");
            writer.println(""#  ABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE  "");
            writer.println(""#  OF THE LICENSED SOFTWARE, DATABASE OR DOCUMENTATION WILL NOT  "");
            writer.println(""#  INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR "");
            writer.println(""#  OTHER RIGHTS. "");
            writer.println(""#  "");
            writer.println(""#  The name of Princeton University or Princeton may not be used in"");
            writer.println(""#  advertising or publicity pertaining to distribution of the software"");
            writer.println(""#  and/or database.  Title to copyright in this software, database and"");
            writer.println(""#  any associated documentation shall at all times remain with"");
            writer.println(""#  Princeton University and LICENSEE agrees to preserve same.  "");
            for (Iterator i = s.iterator(); i.hasNext(); ) {
                String mwe = (String) i.next();
                writer.println(mwe);
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900399,22135201,3104483,"    public void testCodingFromFileSmaller() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.write(""stuff;"");
        wrtout.write(""more stuff;"");
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
","    @Override
    public void writeTo(final TrackRepresentation t, final Class<?> type, final Type genericType, final Annotation[] annotations, final MediaType mediaType, final MultivaluedMap<String, Object> httpHeaders, final OutputStream entityStream) throws WebApplicationException {
        if (mediaType.isCompatible(MediaType.APPLICATION_OCTET_STREAM_TYPE)) {
            InputStream is = null;
            try {
                httpHeaders.add(""Content-Type"", ""audio/mp3"");
                IOUtils.copy(is = t.getInputStream(mediaType), entityStream);
            } catch (final IOException e) {
                LOG.warn(""IOException : maybe remote client has disconnected"");
            } finally {
                IOUtils.closeQuietly(is);
            }
        }
    }
",True
900400,10826994,7518607,"    public static void copyFile(File in, File out) throws EnhancedException {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (Exception e) {
            throw new EnhancedException(""Could not copy file "" + in.getAbsolutePath() + "" to "" + out.getAbsolutePath() + ""."", e);
        }
    }
","    private ArrayList<String> getFiles(String date) {
        ArrayList<String> files = new ArrayList<String>();
        String info = """";
        try {
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Obtaining_Data""));
            URL url = new URL(URL_ROUTE_VIEWS + date + ""/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                if (!line.equals("""")) info += line + ""%"";
            }
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Processing_Data""));
            info = Patterns.removeTags(info);
            StringTokenizer st = new StringTokenizer(info, ""%"");
            info = """";
            boolean alternador = false;
            int index = 1;
            while (st.hasMoreTokens()) {
                String token = st.nextToken();
                if (!token.trim().equals("""")) {
                    int pos = token.indexOf("".bz2"");
                    if (pos != -1) {
                        token = token.substring(1, pos + 4);
                        files.add(token);
                    }
                }
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return files;
    }
",False
900401,10386966,21343573,"    private ByteBuffer getByteBuffer(String resource) throws IOException {
        ClassLoader classLoader = this.getClass().getClassLoader();
        InputStream in = classLoader.getResourceAsStream(resource);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        return ByteBuffer.wrap(out.toByteArray());
    }
","    private static String getProviderName(URL url, PrintStream err) {
        InputStream in = null;
        try {
            in = url.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf-8""));
            String result = null;
            while (true) {
                String line = reader.readLine();
                if (line == null) {
                    break;
                }
                int commentPos = line.indexOf('#');
                if (commentPos >= 0) {
                    line = line.substring(0, commentPos);
                }
                line = line.trim();
                int len = line.length();
                if (len != 0) {
                    if (result != null) {
                        print(err, ""checkconfig.multiproviders"", url.toString());
                        return null;
                    }
                    result = line;
                }
            }
            if (result == null) {
                print(err, ""checkconfig.missingprovider"", url.toString());
                return null;
            }
            return result;
        } catch (IOException e) {
            print(err, ""configconfig.read"", url.toString(), e);
            return null;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
",False
900402,6371595,12214439,"    public void setUserPassword(final List<NewUser> users) {
        try {
            final List<Integer> usersToRemoveFromCache = new ArrayList<Integer>();
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.updatePassword""));
                    Iterator<NewUser> iter = users.iterator();
                    NewUser user;
                    PasswordHasher ph;
                    while (iter.hasNext()) {
                        user = iter.next();
                        ph = PasswordFactory.getInstance().getPasswordHasher();
                        psImpl.setString(1, ph.hashPassword(user.password));
                        psImpl.setString(2, ph.getSalt());
                        psImpl.setInt(3, user.userId);
                        psImpl.executeUpdate();
                        usersToRemoveFromCache.add(user.userId);
                    }
                }
            });
            List<JESRealmUser> list = (List<JESRealmUser>) new ProcessEnvelope().executeObject(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public Object executeProcessReturnObject() throws SQLException {
                    List<JESRealmUser> list = new ArrayList<JESRealmUser>(users.size() + 10);
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realms.user.load""));
                    Iterator<NewUser> iter = users.iterator();
                    NewUser user;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setInt(1, user.userId);
                        rsImpl = psImpl.executeQuery();
                        while (rsImpl.next()) {
                            list.add(new JESRealmUser(user.username, user.userId, rsImpl.getInt(""realm_id""), rsImpl.getInt(""domain_id""), user.password, rsImpl.getString(""realm_name_lower_case"")));
                        }
                    }
                    return list;
                }
            });
            final List<JESRealmUser> encrypted = new ArrayList<JESRealmUser>(list.size());
            Iterator<JESRealmUser> iter = list.iterator();
            JESRealmUser jesRealmUser;
            Realm realm;
            while (iter.hasNext()) {
                jesRealmUser = iter.next();
                realm = cm.getRealm(jesRealmUser.realm);
                encrypted.add(new JESRealmUser(null, jesRealmUser.userId, jesRealmUser.realmId, jesRealmUser.domainId, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(jesRealmUser.username.toLowerCase(locale), realm.getFullRealmName().equals(""null"") ? """" : realm.getFullRealmName(), jesRealmUser.password), null));
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realms.user.update""));
                    Iterator<JESRealmUser> iter = encrypted.iterator();
                    JESRealmUser jesRealmUser;
                    while (iter.hasNext()) {
                        jesRealmUser = iter.next();
                        psImpl.setString(1, jesRealmUser.password);
                        psImpl.setInt(2, jesRealmUser.realmId);
                        psImpl.setInt(3, jesRealmUser.userId);
                        psImpl.setInt(4, jesRealmUser.domainId);
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.removeUsers(usersToRemoveFromCache);
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
","    public boolean saveNote(NoteData n) {
        String query;
        try {
            conn.setAutoCommit(false);
            Statement stmt = null;
            ResultSet rset = null;
            stmt = conn.createStatement();
            query = ""select * from notes where noteid = "" + n.getID();
            rset = stmt.executeQuery(query);
            if (rset.next()) {
                query = ""UPDATE notes SET title = '"" + escapeCharacters(n.getTitle()) + ""', keywords = '"" + escapeCharacters(n.getKeywords()) + ""' WHERE noteid = "" + n.getID();
                try {
                    stmt.executeUpdate(query);
                } catch (SQLException e) {
                    e.printStackTrace();
                    conn.rollback();
                    conn.setAutoCommit(true);
                    return false;
                }
                LinkedList<FieldData> fields = n.getFields();
                ListIterator<FieldData> iter = fields.listIterator(0);
                FieldData f = null;
                PreparedStatement pstmt = conn.prepareStatement(""UPDATE fielddata SET data = ? WHERE noteid = ? AND fieldid = ?"");
                try {
                    while (iter.hasNext()) {
                        f = iter.next();
                        if (f instanceof FieldDataImage) {
                            System.out.println(""field is an image."");
                            pstmt.setBytes(1, ((FieldDataImage) f).getDataBytes());
                        } else {
                            System.out.println(""field is not an image"");
                            pstmt.setString(1, f.getData());
                        }
                        pstmt.setInt(2, n.getID());
                        pstmt.setInt(3, f.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                query = ""DELETE FROM links WHERE (note1id = "" + n.getID() + "" OR note2id = "" + n.getID() + "")"";
                try {
                    stmt.execute(query);
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                Vector<Link> associations = n.getAssociations();
                ListIterator<Link> itr = associations.listIterator();
                Link association = null;
                pstmt = conn.prepareStatement(""INSERT INTO links (note1id, note2id) VALUES (?, ?)"");
                try {
                    while (itr.hasNext()) {
                        association = itr.next();
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, association.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
            } else {
                query = ""INSERT INTO notes (templateid, title, keywords) VALUES ("" + n.getTemplate().getID() + "", '"" + escapeCharacters(n.getTitle()) + ""', '"" + escapeCharacters(n.getKeywords()) + ""')"";
                try {
                    stmt.executeUpdate(query);
                } catch (SQLException e) {
                    e.printStackTrace();
                    conn.rollback();
                    conn.setAutoCommit(true);
                    return false;
                }
                LinkedList<FieldData> fields = n.getFields();
                ListIterator<FieldData> iter = fields.listIterator(0);
                FieldData f = null;
                n.setID(Integer.parseInt(executeMySQLGet(""SELECT LAST_INSERT_ID()"")));
                PreparedStatement pstmt;
                try {
                    pstmt = conn.prepareStatement(""INSERT INTO fielddata (noteid, fieldid, data) VALUES (?,?,?)"");
                    while (iter.hasNext()) {
                        f = iter.next();
                        if (f instanceof FieldDataImage) {
                            System.out.println(""field is an image."");
                            pstmt.setBytes(3, ((FieldDataImage) f).getDataBytes());
                        } else {
                            System.out.println(""field is not an image"");
                            pstmt.setString(3, f.getData());
                        }
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, f.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                Vector<Link> assoc = n.getAssociations();
                Iterator<Link> itr = assoc.listIterator();
                Link l = null;
                pstmt = conn.prepareStatement(""INSERT INTO links (note1id, note2id) VALUES (?,?)"");
                try {
                    while (itr.hasNext()) {
                        l = itr.next();
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, l.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }
",True
900403,14770723,11771875,"    public static boolean copyFile(File dest, File source) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        boolean rv = false;
        byte[] buf = new byte[1000000];
        int bytesRead = 0;
        if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(dest);
            while ((bytesRead = fis.read(buf)) > 0) fos.write(buf, 0, bytesRead);
            fis.close();
            fis = null;
            fos.close();
            fos = null;
            rv = true;
        } catch (Throwable t) {
            throw new ApplicationException(""copy error ("" + source.getAbsolutePath() + "" => "" + dest.getAbsolutePath(), t);
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (Exception e) {
                }
                fis = null;
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (Exception e) {
                }
                fos = null;
            }
        }
        return rv;
    }
","    private synchronized jdbcResultSet executeHTTP(String s) throws SQLException {
        byte result[];
        try {
            URL url = new URL(sConnect);
            String p = StringConverter.unicodeToHexString(sUser);
            p += ""+"" + StringConverter.unicodeToHexString(sPassword);
            p += ""+"" + StringConverter.unicodeToHexString(s);
            URLConnection c = url.openConnection();
            c.setDoOutput(true);
            OutputStream os = c.getOutputStream();
            os.write(p.getBytes(ENCODING));
            os.close();
            c.connect();
            InputStream is = (InputStream) c.getContent();
            BufferedInputStream in = new BufferedInputStream(is);
            int len = c.getContentLength();
            result = new byte[len];
            for (int i = 0; i < len; i++) {
                int r = in.read();
                result[i] = (byte) r;
            }
        } catch (Exception e) {
            throw Trace.error(Trace.CONNECTION_IS_BROKEN, e.getMessage());
        }
        return new jdbcResultSet(new Result(result));
    }
",False
900404,21977773,14711051,"        public void run() {
            try {
                if (useStream || inputStream != null) {
                    InputStream inputStream = null;
                    if (LoadDocumentOperation.this.inputStream != null) inputStream = LoadDocumentOperation.this.inputStream; else inputStream = url.openStream();
                    if (frame != null) document = officeApplication.getDocumentService().loadDocument(frame, inputStream, documentDescriptor); else document = officeApplication.getDocumentService().loadDocument(inputStream, documentDescriptor);
                    try {
                        inputStream.close();
                    } catch (Throwable throwable) {
                    }
                } else {
                    if (frame != null) document = officeApplication.getDocumentService().loadDocument(frame, url.toString(), documentDescriptor); else document = officeApplication.getDocumentService().loadDocument(url.toString(), documentDescriptor);
                }
                done = true;
            } catch (Exception exception) {
                this.exception = exception;
            } catch (ThreadDeath threadDeath) {
            }
        }
","    public static void copyFile(final File in, final File out) throws IOException {
        final FileChannel inChannel = new FileInputStream(in).getChannel();
        final FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",False
900405,6980854,4047586,"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public static void toValueSAX(Property property, Value value, int valueType, ContentHandler contentHandler, AttributesImpl na, Context context) throws SAXException, RepositoryException {
        na.clear();
        String _value = null;
        switch(valueType) {
            case PropertyType.DATE:
                DateFormat df = new SimpleDateFormat(BackupFormatConstants.DATE_FORMAT_STRING);
                df.setTimeZone(value.getDate().getTimeZone());
                _value = df.format(value.getDate().getTime());
                break;
            case PropertyType.BINARY:
                String outResourceName = property.getParent().getPath() + ""/"" + property.getName();
                OutputStream os = null;
                InputStream is = null;
                try {
                    os = context.getPersistenceManager().getOutResource(outResourceName, true);
                    is = value.getStream();
                    IOUtils.copy(is, os);
                    os.flush();
                } catch (Exception e) {
                    throw new SAXException(""Could not backup binary value of property ["" + property.getName() + ""]"", e);
                } finally {
                    if (null != is) {
                        try {
                            is.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    if (null != os) {
                        try {
                            os.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                na.addAttribute("""", ATTACHMENT, (NAMESPACE.length() > 0 ? NAMESPACE + "":"" : """") + ATTACHMENT, ""string"", outResourceName);
                break;
            case PropertyType.REFERENCE:
                _value = value.getString();
                break;
            default:
                _value = value.getString();
        }
        contentHandler.startElement("""", VALUE, (NAMESPACE.length() > 0 ? NAMESPACE + "":"" : """") + VALUE, na);
        if (null != _value) contentHandler.characters(_value.toCharArray(), 0, _value.length());
        contentHandler.endElement("""", VALUE, (NAMESPACE.length() > 0 ? NAMESPACE + "":"" : """") + VALUE);
    }
",True
900406,6270867,14284458,"    public static String md5Encrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] md5hash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            md5hash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < md5hash.length; i++) {
                if (Integer.toHexString(0xFF & md5hash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & md5hash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & md5hash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }
","    private String md5(String txt) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(txt.getBytes(), 0, txt.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (Exception e) {
            return ""BAD MD5"";
        }
    }
",True
900407,19172383,11730227,"        public void readEntry(String name, InputStream input) throws Exception {
            File file = new File(this.directory, name);
            OutputStream output = new BufferedOutputStream(FileUtils.openOutputStream(file));
            try {
                org.apache.commons.io.IOUtils.copy(input, output);
            } finally {
                output.close();
            }
        }
","    private void copy(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
",True
900408,4340712,7847812,"    public static Map<VariableLengthInteger, ElementDescriptor> readDescriptors(URL url) throws IOException, XMLStreamException {
        if (url == null) {
            throw new IllegalArgumentException(""url is null"");
        }
        InputStream stream = new BufferedInputStream(url.openStream());
        try {
            return readDescriptors(stream);
        } finally {
            try {
                stream.close();
            } catch (IOException ignored) {
            }
        }
    }
","    protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException {
        ChallengeAction challengeAction;
        ManagerResponse challengeResponse;
        String challenge;
        String key;
        LoginAction loginAction;
        ManagerResponse loginResponse;
        if (socket == null) {
            connect();
        }
        if (!socket.isConnected()) {
            connect();
        }
        synchronized (protocolIdentifier) {
            if (protocolIdentifier.value == null) {
                try {
                    protocolIdentifier.wait(timeout);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            if (protocolIdentifier.value == null) {
                disconnect();
                if (reader != null && reader.getTerminationException() != null) {
                    throw reader.getTerminationException();
                } else {
                    throw new TimeoutException(""Timeout waiting for protocol identifier"");
                }
            }
        }
        challengeAction = new ChallengeAction(""MD5"");
        try {
            challengeResponse = sendAction(challengeAction);
        } catch (Exception e) {
            disconnect();
            throw new AuthenticationFailedException(""Unable to send challenge action"", e);
        }
        if (challengeResponse instanceof ChallengeResponse) {
            challenge = ((ChallengeResponse) challengeResponse).getChallenge();
        } else {
            disconnect();
            throw new AuthenticationFailedException(""Unable to get challenge from Asterisk. ChallengeAction returned: "" + challengeResponse.getMessage());
        }
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            if (challenge != null) {
                md.update(challenge.getBytes());
            }
            if (password != null) {
                md.update(password.getBytes());
            }
            key = ManagerUtil.toHexString(md.digest());
        } catch (NoSuchAlgorithmException ex) {
            disconnect();
            throw new AuthenticationFailedException(""Unable to create login key using MD5 Message Digest"", ex);
        }
        loginAction = new LoginAction(username, ""MD5"", key, eventMask);
        try {
            loginResponse = sendAction(loginAction);
        } catch (Exception e) {
            disconnect();
            throw new AuthenticationFailedException(""Unable to send login action"", e);
        }
        if (loginResponse instanceof ManagerError) {
            disconnect();
            throw new AuthenticationFailedException(loginResponse.getMessage());
        }
        version = determineVersion();
        writer.setTargetVersion(version);
        ConnectEvent connectEvent = new ConnectEvent(this);
        connectEvent.setProtocolIdentifier(getProtocolIdentifier());
        connectEvent.setDateReceived(DateUtil.getDate());
        fireEvent(connectEvent);
    }
",False
900409,7911395,18142979,"    public void executaAlteracoes() {
        Album album = Album.getAlbum();
        Photo[] fotos = album.getFotos();
        Photo f;
        int ultimoFotoID = -1;
        int albumID = album.getAlbumID();
        sucesso = true;
        PainelWebFotos.setCursorWait(true);
        albumID = recordAlbumData(album, albumID);
        sucesso = recordFotoData(fotos, ultimoFotoID, albumID);
        String caminhoAlbum = Util.getFolder(""albunsRoot"").getPath() + File.separator + albumID;
        File diretorioAlbum = new File(caminhoAlbum);
        if (!diretorioAlbum.isDirectory()) {
            if (!diretorioAlbum.mkdir()) {
                Util.log(""[AcaoAlterarAlbum.executaAlteracoes.7]/ERRO: diretorio "" + caminhoAlbum + "" n�o pode ser criado. abortando"");
                return;
            }
        }
        for (int i = 0; i < fotos.length; i++) {
            f = fotos[i];
            if (f.getCaminhoArquivo().length() > 0) {
                try {
                    FileChannel canalOrigem = new FileInputStream(f.getCaminhoArquivo()).getChannel();
                    FileChannel canalDestino = new FileOutputStream(caminhoAlbum + File.separator + f.getFotoID() + "".jpg"").getChannel();
                    canalDestino.transferFrom(canalOrigem, 0, canalOrigem.size());
                    canalOrigem = null;
                    canalDestino = null;
                } catch (Exception e) {
                    Util.log(""[AcaoAlterarAlbum.executaAlteracoes.8]/ERRO: "" + e);
                    sucesso = false;
                }
            }
        }
        prepareThumbsAndFTP(fotos, albumID, caminhoAlbum);
        prepareExtraFiles(album, caminhoAlbum);
        fireChangesToGUI(fotos);
        dispatchAlbum();
        PainelWebFotos.setCursorWait(false);
    }
","    private String copyTutorial() throws IOException {
        File inputFile = new File(getFilenameForOriginalTutorial());
        File outputFile = new File(getFilenameForCopiedTutorial());
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        return getFilenameForCopiedTutorial();
    }
",True
900410,9593609,10942052,"    public static void main(String[] args) throws Exception {
        File rootDir = new File(""C:\\dev\\workspace_fgd\\gouvqc_crggid\\WebContent\\WEB-INF\\upload"");
        File storeDir = new File(rootDir, ""storeDir"");
        File workDir = new File(rootDir, ""workDir"");
        LoggerFacade loggerFacade = new CommonsLoggingLogger(logger);
        final FileResourceManager frm = new SmbFileResourceManager(storeDir.getPath(), workDir.getPath(), true, loggerFacade);
        frm.start();
        final String resourceId = ""811375c8-7cae-4429-9a0e-9222f47dab45"";
        {
            if (!frm.resourceExists(resourceId)) {
                String txId = frm.generatedUniqueTxId();
                frm.startTransaction(txId);
                FileInputStream inputStream = new FileInputStream(resourceId);
                frm.createResource(txId, resourceId);
                OutputStream outputStream = frm.writeResource(txId, resourceId);
                IOUtils.copy(inputStream, outputStream);
                IOUtils.closeQuietly(inputStream);
                IOUtils.closeQuietly(outputStream);
                frm.prepareTransaction(txId);
                frm.commitTransaction(txId);
            }
        }
        for (int i = 0; i < 30; i++) {
            final int index = i;
            new Thread() {

                @Override
                public void run() {
                    try {
                        String txId = frm.generatedUniqueTxId();
                        frm.startTransaction(txId);
                        InputStream inputStream = frm.readResource(resourceId);
                        frm.prepareTransaction(txId);
                        frm.commitTransaction(txId);
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (début)"");
                        }
                        String contenu = TikaUtils.getParsedContent(inputStream, ""file.pdf"");
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (fin)"");
                        }
                    } catch (ResourceManagerSystemException e) {
                        throw new RuntimeException(e);
                    } catch (ResourceManagerException e) {
                        throw new RuntimeException(e);
                    } catch (TikaException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }.start();
        }
        Thread.sleep(60000);
        frm.stop(FileResourceManager.SHUTDOWN_MODE_NORMAL);
    }
","    public static void copy(String from, String to) throws Exception {
        File inputFile = new File(from);
        File outputFile = new File(to);
        FileInputStream in = new FileInputStream(inputFile);
        FileOutputStream out = new FileOutputStream(outputFile);
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) != -1) out.write(buffer, 0, len);
        in.close();
        out.close();
    }
",True
900411,13862028,7214727,"    public static void main(String[] args) {
        try {
            String completePath = null;
            String predictionFileName = null;
            if (args.length == 2) {
                completePath = args[0];
                predictionFileName = args[1];
            } else {
                System.out.println(""Please provide complete path to training_set parent folder as an argument. EXITING"");
                System.exit(0);
            }
            File inputFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel inC = new FileInputStream(inputFile).getChannel();
            int filesize = (int) inC.size();
            ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize);
            MovieLimitsTHash = new TShortObjectHashMap(17770, 1);
            int i = 0, totalcount = 0;
            short movie;
            int startIndex, endIndex;
            TIntArrayList a;
            while (mappedfile.hasRemaining()) {
                movie = mappedfile.getShort();
                startIndex = mappedfile.getInt();
                endIndex = mappedfile.getInt();
                a = new TIntArrayList(2);
                a.add(startIndex);
                a.add(endIndex);
                MovieLimitsTHash.put(movie, a);
            }
            inC.close();
            mappedfile = null;
            System.out.println(""Loaded movie index hash"");
            inputFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustIndexFileName);
            inC = new FileInputStream(inputFile).getChannel();
            filesize = (int) inC.size();
            mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize);
            CustomerLimitsTHash = new TIntObjectHashMap(480189, 1);
            int custid;
            while (mappedfile.hasRemaining()) {
                custid = mappedfile.getInt();
                startIndex = mappedfile.getInt();
                endIndex = mappedfile.getInt();
                a = new TIntArrayList(2);
                a.add(startIndex);
                a.add(endIndex);
                CustomerLimitsTHash.put(custid, a);
            }
            inC.close();
            mappedfile = null;
            System.out.println(""Loaded customer index hash"");
            MoviesAndRatingsPerCustomer = InitializeMovieRatingsForCustomerHashMap(completePath, CustomerLimitsTHash);
            System.out.println(""Populated MoviesAndRatingsPerCustomer hashmap"");
            File outfile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + predictionFileName);
            FileChannel out = new FileOutputStream(outfile, true).getChannel();
            inputFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + ""formattedProbeData.txt"");
            inC = new FileInputStream(inputFile).getChannel();
            filesize = (int) inC.size();
            ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize);
            int custAndRatingSize = 0;
            TIntByteHashMap custsandratings = new TIntByteHashMap();
            int ignoreProcessedRows = 0;
            int movieViewershipSize = 0;
            while (probemappedfile.hasRemaining()) {
                short testmovie = probemappedfile.getShort();
                int testCustomer = probemappedfile.getInt();
                if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) {
                } else {
                    CustomersAndRatingsPerMovie = InitializeCustomerRatingsForMovieHashMap(completePath, testmovie);
                    custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie);
                    custAndRatingSize = custsandratings.size();
                }
                TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer);
                short[] testCustMovies = testCustMovieAndRatingsMap.keys();
                float finalPrediction = 0;
                finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap);
                System.out.println(""prediction for movie: "" + testmovie + "" for customer "" + testCustomer + "" is "" + finalPrediction);
                ByteBuffer buf = ByteBuffer.allocate(11);
                buf.putShort(testmovie);
                buf.putInt(testCustomer);
                buf.putFloat(finalPrediction);
                buf.flip();
                out.write(buf);
                buf = null;
                testCustMovieAndRatingsMap = null;
                testCustMovies = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public byte[] pipeBytes() {
        byte ba[] = null;
        try {
            URL url = new URL(server);
            conn = (HttpURLConnection) url.openConnection();
            InputStream is = conn.getInputStream();
            ByteArrayOutputStream tout = new ByteArrayOutputStream();
            int nmax = 10000;
            byte b[] = new byte[nmax + 1];
            int nread = 0;
            while ((nread = is.read(b, 0, nmax)) >= 0) tout.write(b, 0, nread);
            ba = tout.toByteArray();
        } catch (Exception ex) {
            System.err.println(ex);
        }
        return ba;
    }
",False
900412,13020691,5391696,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    public static StringBuffer getCachedFile(String url) throws Exception {
        File urlCache = new File(""tmp-cache/"" + url.replace('/', '-'));
        new File(""tmp-cache/"").mkdir();
        if (urlCache.exists()) {
            BufferedReader in = new BufferedReader(new FileReader(urlCache));
            StringBuffer buffer = new StringBuffer();
            String input;
            while ((input = in.readLine()) != null) {
                buffer.append(input + ""\n"");
            }
            in.close();
            return buffer;
        } else {
            URL url2 = new URL(url.replace("" "", ""%20""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url2.openStream()));
            BufferedWriter cacheWriter = new BufferedWriter(new FileWriter(urlCache));
            StringBuffer buffer = new StringBuffer();
            String input;
            while ((input = in.readLine()) != null) {
                buffer.append(input + ""\n"");
                cacheWriter.write(input + ""\n"");
            }
            cacheWriter.close();
            in.close();
            return buffer;
        }
    }
",False
900413,17374912,20368648,"        public void copyTo(File folder) {
            if (!isNewFile()) {
                return;
            }
            if (!folder.exists()) {
                folder.mkdir();
            }
            File dest = new File(folder, name);
            try {
                FileInputStream in = new FileInputStream(currentPath);
                FileOutputStream out = new FileOutputStream(dest);
                byte[] readBuf = new byte[1024 * 512];
                int readLength;
                long totalCopiedSize = 0;
                boolean canceled = false;
                while ((readLength = in.read(readBuf)) != -1) {
                    out.write(readBuf, 0, readLength);
                }
                in.close();
                out.close();
                if (canceled) {
                    dest.delete();
                } else {
                    currentPath = dest;
                    newFile = false;
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
","    private void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",True
900414,19090291,9068428,"    public static String extractIconPath(String siteURL) throws IOException {
        siteURL = siteURL.trim();
        if (!siteURL.startsWith(""http://"")) {
            siteURL = ""http://"" + siteURL;
        }
        URL url = new URL(siteURL);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String iconURL = null;
        String iconPath = null;
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.contains(""type=\""image/x-icon\"""") || inputLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                String tmp = new String(inputLine);
                String[] smallLines = inputLine.replace("">"", "">\n"").split(""\n"");
                for (String smallLine : smallLines) {
                    if (smallLine.contains(""type=\""image/x-icon\"""") || smallLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                        tmp = smallLine;
                        break;
                    }
                }
                iconURL = tmp.replaceAll(""^.*href=\"""", """");
                iconURL = iconURL.replaceAll(""\"".*"", """");
                tmp = null;
                String originalSiteURL = new String(siteURL);
                siteURL = getHome(siteURL);
                if (iconURL.charAt(0) == '/') {
                    if (siteURL.charAt(siteURL.length() - 1) == '/') {
                        iconURL = siteURL + iconURL.substring(1);
                    } else {
                        iconURL = siteURL + iconURL;
                    }
                } else if (!iconURL.startsWith(""http://"")) {
                    if (siteURL.charAt(siteURL.length() - 1) == '/') {
                        iconURL = siteURL + iconURL;
                    } else {
                        iconURL = siteURL + ""/"" + iconURL;
                    }
                }
                siteURL = originalSiteURL;
                break;
            }
            if (inputLine.contains(""</head>"".toLowerCase())) {
                break;
            }
        }
        in.close();
        siteURL = getHome(siteURL);
        if (iconURL == null || """".equals(iconURL.trim())) {
            iconURL = ""favicon.ico"";
            if (siteURL.charAt(siteURL.length() - 1) == '/') {
                iconURL = siteURL + iconURL;
            } else {
                iconURL = siteURL + ""/"" + iconURL;
            }
        }
        try {
            String iconFileName = siteURL;
            if (iconFileName.startsWith(""http://"")) {
                iconFileName = iconFileName.substring(7);
            }
            iconFileName = iconFileName.replaceAll(""\\W"", "" "").trim().replace("" "", ""_"").concat("".ico"");
            iconPath = JReader.getConfig().getShortcutIconsDir() + File.separator + iconFileName;
            InputStream inIcon = new URL(iconURL).openStream();
            OutputStream outIcon = new FileOutputStream(iconPath);
            byte[] buf = new byte[1024];
            int len;
            while ((len = inIcon.read(buf)) > 0) {
                outIcon.write(buf, 0, len);
            }
            inIcon.close();
            outIcon.close();
        } catch (Exception e) {
        }
        return iconPath;
    }
","    public static String getTextFileFromURL(String urlName) {
        try {
            StringBuffer textFile = new StringBuffer("""");
            String line = null;
            URL url = new URL(urlName);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) textFile = textFile.append(line + ""\n"");
            reader.close();
            return textFile.toString();
        } catch (Exception e) {
            Debug.signal(Debug.ERROR, null, ""Failed to open "" + urlName + "", exception "" + e);
            return null;
        }
    }
",True
900415,11664487,330896,"    public static void main(String[] args) throws IOException {
        ReadableByteChannel in = Channels.newChannel((new FileInputStream(""/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov"")));
        Movie movie = MovieCreator.build(in);
        in.close();
        List<Track> tracks = movie.getTracks();
        movie.setTracks(new LinkedList<Track>());
        double startTime = 35.000;
        double endTime = 145.000;
        boolean timeCorrected = false;
        for (Track track : tracks) {
            if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) {
                if (timeCorrected) {
                    throw new RuntimeException(""The startTime has already been corrected by another track with SyncSample. Not Supported."");
                }
                startTime = correctTimeToNextSyncSample(track, startTime);
                endTime = correctTimeToNextSyncSample(track, endTime);
                timeCorrected = true;
            }
        }
        for (Track track : tracks) {
            long currentSample = 0;
            double currentTime = 0;
            long startSample = -1;
            long endSample = -1;
            for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) {
                TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i);
                for (int j = 0; j < entry.getCount(); j++) {
                    if (currentTime <= startTime) {
                        startSample = currentSample;
                    }
                    if (currentTime <= endTime) {
                        endSample = currentSample;
                    } else {
                        break;
                    }
                    currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale();
                    currentSample++;
                }
            }
            movie.addTrack(new CroppedTrack(track, startSample, endSample));
        }
        long start1 = System.currentTimeMillis();
        IsoFile out = new DefaultMp4Builder().build(movie);
        long start2 = System.currentTimeMillis();
        FileOutputStream fos = new FileOutputStream(String.format(""output-%f-%f.mp4"", startTime, endTime));
        FileChannel fc = fos.getChannel();
        out.getBox(fc);
        fc.close();
        fos.close();
        long start3 = System.currentTimeMillis();
        System.err.println(""Building IsoFile took : "" + (start2 - start1) + ""ms"");
        System.err.println(""Writing IsoFile took  : "" + (start3 - start2) + ""ms"");
        System.err.println(""Writing IsoFile speed : "" + (new File(String.format(""output-%f-%f.mp4"", startTime, endTime)).length() / (start3 - start2) / 1000) + ""MB/s"");
    }
","    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",True
900416,5620476,23537684,"    private String[] verifyConnection(Socket clientConnection) throws Exception {
        List<String> requestLines = new ArrayList<String>();
        InputStream is = clientConnection.getInputStream();
        BufferedReader in = new BufferedReader(new InputStreamReader(is));
        StringTokenizer st = new StringTokenizer(in.readLine());
        if (!st.hasMoreTokens()) {
            throw new IllegalArgumentException(""There's no method token in this connection"");
        }
        String method = st.nextToken();
        if (!st.hasMoreTokens()) {
            throw new IllegalArgumentException(""There's no URI token in this connection"");
        }
        String uri = decodePercent(st.nextToken());
        if (!st.hasMoreTokens()) {
            throw new IllegalArgumentException(""There's no version token in this connection"");
        }
        String version = st.nextToken();
        Properties parms = new Properties();
        int qmi = uri.indexOf('?');
        if (qmi >= 0) {
            decodeParms(uri.substring(qmi + 1), parms);
            uri = decodePercent(uri.substring(0, qmi));
        }
        String params = """";
        if (parms.size() > 0) {
            params = ""?"";
            for (Object key : parms.keySet()) {
                params = params + key + ""="" + parms.getProperty(((String) key)) + ""&"";
            }
            params = params.substring(0, params.length() - 1).replace("" "", ""%20"");
        }
        logger.debug(""HTTP Request: "" + method + "" "" + uri + params + "" "" + version);
        requestLines.add(method + "" "" + uri + params + "" "" + version);
        Properties headerVars = new Properties();
        String line;
        String currentBoundary = null;
        Stack<String> boundaryStack = new Stack<String>();
        boolean readingBoundary = false;
        String additionalData = """";
        while (in.ready() && (line = in.readLine()) != null) {
            if (line.equals("""") && (headerVars.get(""Content-Type"") == null || headerVars.get(""Content-Length"") == null)) {
                break;
            }
            logger.debug(""HTTP Request Header: "" + line);
            if (line.contains("": "")) {
                String vals[] = line.split("": "");
                headerVars.put(vals[0].trim(), vals[1].trim());
            }
            if (!readingBoundary && line.contains("": "")) {
                if (line.contains(""boundary="")) {
                    currentBoundary = line.split(""boundary="")[1].trim();
                    boundaryStack.push(""--"" + currentBoundary);
                }
                continue;
            } else if (line.equals("""") && boundaryStack.isEmpty()) {
                int val = Integer.parseInt((String) headerVars.get(""Content-Length""));
                if (headerVars.getProperty(""Content-Type"").contains(""x-www-form-urlencoded"")) {
                    char buf[] = new char[val];
                    int read = in.read(buf);
                    line = String.valueOf(buf, 0, read);
                    additionalData = line;
                    logger.debug(""HTTP Request Header Form Parameters: "" + line);
                }
            } else if (line.equals(boundaryStack.peek()) && !readingBoundary) {
                readingBoundary = true;
            } else if (line.equals(boundaryStack.peek()) && readingBoundary) {
                readingBoundary = false;
            } else if (line.contains("": "") && readingBoundary) {
                if (method.equalsIgnoreCase(""PUT"")) {
                    if (line.contains(""form-data; "")) {
                        String formValues = line.split(""form-data; "")[1];
                        for (String varValue : formValues.replace(""\"""", """").split(""; "")) {
                            String[] vV = varValue.split(""="");
                            vV[0] = decodePercent(vV[0]);
                            vV[1] = decodePercent(vV[1]);
                            headerVars.put(vV[0], vV[1]);
                        }
                    }
                }
            } else if (line.contains("""") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get(""filename"") != null) {
                int length = Integer.parseInt(headerVars.getProperty(""Content-Length""));
                if (headerVars.getProperty(""Content-Transfer-Encoding"").contains(""binary"")) {
                    File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue(""TempDirectory""));
                    if (!uploadFilePath.exists()) {
                        logger.error(""Temporaty dir does not exist: "" + uploadFilePath.getCanonicalPath());
                    }
                    if (!uploadFilePath.isDirectory()) {
                        logger.error(""Temporary dir is not a directory: "" + uploadFilePath.getCanonicalPath());
                    }
                    if (!uploadFilePath.canWrite()) {
                        logger.error(""VOctopus Webserver doesn't have permissions to write on temporary dir: "" + uploadFilePath.getCanonicalPath());
                    }
                    FileOutputStream out = null;
                    try {
                        String putUploadPath = uploadFilePath.getAbsolutePath() + ""/"" + headerVars.getProperty(""filename"");
                        out = new FileOutputStream(putUploadPath);
                        OutputStream outf = new BufferedOutputStream(out);
                        int c;
                        while (in.ready() && (c = in.read()) != -1 && length-- > 0) {
                            outf.write(c);
                        }
                    } finally {
                        if (out != null) {
                            out.close();
                        }
                    }
                    File copied = new File(VOctopusConfigurationManager.getInstance().getDocumentRootPath() + uri + headerVars.get(""filename""));
                    File tempFile = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue(""TempDirectory"") + ""/"" + headerVars.get(""filename""));
                    FileChannel ic = new FileInputStream(tempFile.getAbsolutePath()).getChannel();
                    FileChannel oc = new FileOutputStream(copied.getAbsolutePath()).getChannel();
                    ic.transferTo(0, ic.size(), oc);
                    ic.close();
                    oc.close();
                }
            }
        }
        for (Object var : headerVars.keySet()) {
            requestLines.add(var + "": "" + headerVars.get(var));
        }
        if (!additionalData.equals("""")) {
            requestLines.add(""ADDITIONAL"" + additionalData);
        }
        return requestLines.toArray(new String[requestLines.size()]);
    }
","    public static void copyResourceToFile(Class owningClass, String resourceName, File destinationDir) {
        final byte[] resourceBytes = readResource(owningClass, resourceName);
        final ByteArrayInputStream inputStream = new ByteArrayInputStream(resourceBytes);
        final File destinationFile = new File(destinationDir, resourceName);
        final FileOutputStream fileOutputStream;
        try {
            fileOutputStream = new FileOutputStream(destinationFile);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        try {
            IOUtils.copy(inputStream, fileOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",True
900417,11717079,6597125,"    void copyFile(File inputFile, File outputFile) {
        try {
            FileReader in;
            in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static void writeToFile(final File file, final InputStream in) throws IOException {
        IOUtils.createFile(file);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(file);
            IOUtils.copyStream(in, fos);
        } finally {
            IOUtils.closeIO(fos);
        }
    }
",True
900418,369844,21649305,"    private boolean enregistreToi() {
        PrintWriter lEcrivain;
        String laDest = ""./img_types/"" + sonImage;
        if (!new File(""./img_types"").exists()) {
            new File(""./img_types"").mkdirs();
        }
        try {
            FileChannel leFicSource = new FileInputStream(sonFichier).getChannel();
            FileChannel leFicDest = new FileOutputStream(laDest).getChannel();
            leFicSource.transferTo(0, leFicSource.size(), leFicDest);
            leFicSource.close();
            leFicDest.close();
            lEcrivain = new PrintWriter(new FileWriter(new File(""bundll/types.jay""), true));
            lEcrivain.println(sonNom);
            lEcrivain.println(sonImage);
            if (sonOptionRadio1.isSelected()) {
                lEcrivain.println(""0:?"");
            }
            if (sonOptionRadio2.isSelected()) {
                lEcrivain.println(""1:"" + JOptionPane.showInputDialog(null, ""Vous avez choisis de rendre ce terrain difficile � franchir.\nVeuillez en indiquer la raison."", ""Demande de pr�cision"", JOptionPane.INFORMATION_MESSAGE));
            }
            if (sonOptionRadio3.isSelected()) {
                lEcrivain.println(""2:?"");
            }
            lEcrivain.close();
            return true;
        } catch (Exception lException) {
            return false;
        }
    }
","    private String choosePivotVertex() throws ProcessorExecutionException {
        String result = null;
        Graph src;
        Graph dest;
        Path tmpDir;
        System.out.println(""##########>"" + _dirMgr.getSeqNum() + "" Choose the pivot vertex"");
        src = new Graph(Graph.defaultGraph());
        src.setPath(_curr_path);
        dest = new Graph(Graph.defaultGraph());
        try {
            tmpDir = _dirMgr.getTempDir();
        } catch (IOException e) {
            throw new ProcessorExecutionException(e);
        }
        dest.setPath(tmpDir);
        GraphAlgorithm choose_pivot = new PivotChoose();
        choose_pivot.setConf(context);
        choose_pivot.setSource(src);
        choose_pivot.setDestination(dest);
        choose_pivot.setMapperNum(getMapperNum());
        choose_pivot.setReducerNum(getReducerNum());
        choose_pivot.execute();
        try {
            Path the_file = new Path(tmpDir.toString() + ""/part-00000"");
            FileSystem client = FileSystem.get(context);
            if (!client.exists(the_file)) {
                throw new ProcessorExecutionException(""Did not find the chosen vertex in "" + the_file.toString());
            }
            FSDataInputStream input_stream = client.open(the_file);
            ByteArrayOutputStream output_stream = new ByteArrayOutputStream();
            IOUtils.copyBytes(input_stream, output_stream, context, false);
            String the_line = output_stream.toString();
            result = the_line.substring(PivotChoose.KEY_PIVOT.length()).trim();
            input_stream.close();
            output_stream.close();
            System.out.println(""##########> Chosen pivot id = "" + result);
        } catch (IOException e) {
            throw new ProcessorExecutionException(e);
        }
        return result;
    }
",True
900419,1811746,5306724,"    public void testSimpleHttpPostsChunked() throws Exception {
        int reqNo = 20;
        Random rnd = new Random();
        List testData = new ArrayList(reqNo);
        for (int i = 0; i < reqNo; i++) {
            int size = rnd.nextInt(20000);
            byte[] data = new byte[size];
            rnd.nextBytes(data);
            testData.add(data);
        }
        this.server.registerHandler(""*"", new HttpRequestHandler() {

            public void handle(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException, IOException {
                if (request instanceof HttpEntityEnclosingRequest) {
                    HttpEntity incoming = ((HttpEntityEnclosingRequest) request).getEntity();
                    byte[] data = EntityUtils.toByteArray(incoming);
                    ByteArrayEntity outgoing = new ByteArrayEntity(data);
                    outgoing.setChunked(true);
                    response.setEntity(outgoing);
                } else {
                    StringEntity outgoing = new StringEntity(""No content"");
                    response.setEntity(outgoing);
                }
            }
        });
        this.server.start();
        DefaultHttpClientConnection conn = new DefaultHttpClientConnection();
        HttpHost host = new HttpHost(""localhost"", this.server.getPort());
        try {
            for (int r = 0; r < reqNo; r++) {
                if (!conn.isOpen()) {
                    Socket socket = new Socket(host.getHostName(), host.getPort());
                    conn.bind(socket, this.client.getParams());
                }
                BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest(""POST"", ""/"");
                byte[] data = (byte[]) testData.get(r);
                ByteArrayEntity outgoing = new ByteArrayEntity(data);
                outgoing.setChunked(true);
                post.setEntity(outgoing);
                HttpResponse response = this.client.execute(post, host, conn);
                byte[] received = EntityUtils.toByteArray(response.getEntity());
                byte[] expected = (byte[]) testData.get(r);
                assertEquals(expected.length, received.length);
                for (int i = 0; i < expected.length; i++) {
                    assertEquals(expected[i], received[i]);
                }
                if (!this.client.keepAlive(response)) {
                    conn.close();
                }
            }
            HttpConnectionMetrics cm = conn.getMetrics();
            assertEquals(reqNo, cm.getRequestCount());
            assertEquals(reqNo, cm.getResponseCount());
        } finally {
            conn.close();
            this.server.shutdown();
        }
    }
","    private void initURL() {
        try {
            log.fine(""Checking: "" + locator);
            URLConnection conn = URIFactory.url(locator).openConnection();
            conn.setUseCaches(false);
            log.info(conn.getHeaderFields().toString());
            String header = conn.getHeaderField(null);
            if (header.contains(""404"")) {
                log.info(""404 file not found: "" + locator);
                return;
            }
            if (header.contains(""500"")) {
                log.info(""500 server error: "" + locator);
                return;
            }
            if (conn.getContentLength() > 0) {
                byte[] buffer = new byte[50];
                conn.getInputStream().read(buffer);
                if (new String(buffer).trim().startsWith(""<!DOCTYPE"")) return;
            } else if (conn.getContentLength() == 0) {
                exists = true;
                return;
            }
            exists = true;
            length = conn.getContentLength();
        } catch (Exception ioe) {
            System.err.println(ioe);
        }
    }
",False
900420,9209383,5777003,"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        final Map<String, String> fileAttr = new HashMap<String, String>();
        boolean download = false;
        String dw = req.getParameter(""d"");
        if (StringUtils.isNotEmpty(dw) && StringUtils.equals(dw, ""true"")) {
            download = true;
        }
        final ByteArrayOutputStream imageOutputStream = new ByteArrayOutputStream(DEFAULT_CONTENT_LENGTH_SIZE);
        InputStream imageInputStream = null;
        try {
            imageInputStream = getImageAsStream(req, fileAttr);
            IOUtils.copy(imageInputStream, imageOutputStream);
            resp.setHeader(""Cache-Control"", ""no-store"");
            resp.setHeader(""Pragma"", ""no-cache"");
            resp.setDateHeader(""Expires"", 0);
            resp.setContentType(fileAttr.get(""mimetype""));
            if (download) {
                resp.setHeader(""Content-Disposition"", ""attachment; filename=\"""" + fileAttr.get(""filename"") + ""\"""");
            }
            final ServletOutputStream responseOutputStream = resp.getOutputStream();
            responseOutputStream.write(imageOutputStream.toByteArray());
            responseOutputStream.flush();
            responseOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
            resp.setContentType(""text/html"");
            resp.getWriter().println(""<h1>Sorry... cannot find document</h1>"");
        } finally {
            IOUtils.closeQuietly(imageInputStream);
            IOUtils.closeQuietly(imageOutputStream);
        }
    }
","    public void testDecodeJTLM_publish100() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema(""/JTLM/schemas/TLMComposite.xsd"", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS);
        String[] exiFiles = { ""/JTLM/publish100/publish100.bitPacked"", ""/JTLM/publish100/publish100.byteAligned"", ""/JTLM/publish100/publish100.preCompress"", ""/JTLM/publish100/publish100.compress"" };
        for (int i = 0; i < Alignments.length; i++) {
            AlignmentType alignment = Alignments[i];
            EXIDecoder decoder = new EXIDecoder();
            Scanner scanner;
            decoder.setAlignmentType(alignment);
            URL url = resolveSystemIdAsURL(exiFiles[i]);
            int n_events, n_texts;
            decoder.setEXISchema(grammarCache);
            decoder.setInputStream(url.openStream());
            scanner = decoder.processHeader();
            ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>();
            EXIEvent exiEvent;
            n_events = 0;
            n_texts = 0;
            while ((exiEvent = scanner.nextEvent()) != null) {
                ++n_events;
                if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) {
                    String stringValue = exiEvent.getCharacters().makeString();
                    if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) {
                        --n_events;
                        continue;
                    }
                    if (n_texts % 100 == 0) {
                        final int n = n_texts / 100;
                        Assert.assertEquals(publish100_centennials[n], stringValue);
                    }
                    ++n_texts;
                }
                exiEventList.add(exiEvent);
            }
            Assert.assertEquals(10610, n_events);
        }
    }
",False
900421,6322440,3050742,"    public static void copyFile(final File fromFile, File toFile) throws IOException {
        try {
            if (!fromFile.exists()) {
                throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsoluteFile());
            }
            if (!fromFile.isFile()) {
                throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsoluteFile());
            }
            if (!fromFile.canRead()) {
                throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsoluteFile());
            }
            if (toFile.isDirectory()) {
                toFile = new File(toFile, fromFile.getName());
            }
            if (toFile.exists() && !toFile.canWrite()) {
                throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFile.getAbsoluteFile());
            }
            final FileChannel inChannel = new FileInputStream(fromFile).getChannel();
            final FileChannel outChannel = new FileOutputStream(toFile).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } catch (final IOException e) {
                throw e;
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (final IOException e) {
            if (LOGGER.isErrorEnabled()) {
                LOGGER.error(""CopyFile went wrong!"", e);
            }
        }
    }
","    public static String encryptPasswd(String pass) {
        try {
            if (pass == null || pass.length() == 0) return pass;
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(pass.getBytes(""UTF-8""));
            return Base64OutputStream.encode(sha.digest());
        } catch (Throwable t) {
            throw new SystemException(t);
        }
    }
",False
900422,14007786,21750583,"    @Override
    protected IStatus run(IProgressMonitor monitor) {
        final int BUFFER_SIZE = 1024;
        final int DISPLAY_BUFFER_SIZE = 8196;
        File sourceFile = new File(_sourceFile);
        File destFile = new File(_destFile);
        if (sourceFile.exists()) {
            try {
                Log.getInstance(FileCopierJob.class).debug(String.format(""Start copy of %s to %s"", _sourceFile, _destFile));
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile));
                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(sourceFile));
                monitor.beginTask(Messages.getString(""FileCopierJob.MainTask"") + "" "" + _sourceFile, (int) ((sourceFile.length() / DISPLAY_BUFFER_SIZE) + 4));
                monitor.worked(1);
                byte[] buffer = new byte[BUFFER_SIZE];
                int stepRead = 0;
                int read;
                boolean copying = true;
                while (copying) {
                    read = bis.read(buffer);
                    if (read > 0) {
                        bos.write(buffer, 0, read);
                        stepRead += read;
                    } else {
                        copying = false;
                    }
                    if (monitor.isCanceled()) {
                        bos.close();
                        bis.close();
                        deleteFile(_destFile);
                        return Status.CANCEL_STATUS;
                    }
                    if (stepRead >= DISPLAY_BUFFER_SIZE) {
                        monitor.worked(1);
                        stepRead = 0;
                    }
                }
                bos.flush();
                bos.close();
                bis.close();
                monitor.worked(1);
            } catch (Exception e) {
                processError(""Error while copying: "" + e.getMessage());
            }
            Log.getInstance(FileCopierJob.class).debug(""End of copy."");
            return Status.OK_STATUS;
        } else {
            processError(Messages.getString(""FileCopierJob.ErrorSourceDontExists"") + sourceFile.getAbsolutePath());
            return Status.CANCEL_STATUS;
        }
    }
","    protected void doProxyInternally(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        HttpRequestBase proxyReq = buildProxyRequest(req);
        URI reqUri = proxyReq.getURI();
        String cookieDomain = reqUri.getHost();
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpContext httpContext = new BasicHttpContext();
        httpContext.setAttribute(""org.atricorel.idbus.kernel.main.binding.http.HttpServletRequest"", req);
        int intIdx = 0;
        for (int i = 0; i < httpClient.getRequestInterceptorCount(); i++) {
            if (httpClient.getRequestInterceptor(i) instanceof RequestAddCookies) {
                intIdx = i;
                break;
            }
        }
        IDBusRequestAddCookies interceptor = new IDBusRequestAddCookies(cookieDomain);
        httpClient.removeRequestInterceptorByClass(RequestAddCookies.class);
        httpClient.addRequestInterceptor(interceptor, intIdx);
        httpClient.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS, false);
        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.BROWSER_COMPATIBILITY);
        if (logger.isTraceEnabled()) logger.trace(""Staring to follow redirects for "" + req.getPathInfo());
        HttpResponse proxyRes = null;
        List<Header> storedHeaders = new ArrayList<Header>(40);
        boolean followTargetUrl = true;
        byte[] buff = new byte[1024];
        while (followTargetUrl) {
            if (logger.isTraceEnabled()) logger.trace(""Sending internal request "" + proxyReq);
            proxyRes = httpClient.execute(proxyReq, httpContext);
            String targetUrl = null;
            Header[] headers = proxyRes.getAllHeaders();
            for (Header header : headers) {
                if (header.getName().equals(""Server"")) continue;
                if (header.getName().equals(""Transfer-Encoding"")) continue;
                if (header.getName().equals(""Location"")) continue;
                if (header.getName().equals(""Expires"")) continue;
                if (header.getName().equals(""Content-Length"")) continue;
                if (header.getName().equals(""Content-Type"")) continue;
                storedHeaders.add(header);
            }
            if (logger.isTraceEnabled()) logger.trace(""HTTP/STATUS:"" + proxyRes.getStatusLine().getStatusCode() + ""["" + proxyReq + ""]"");
            switch(proxyRes.getStatusLine().getStatusCode()) {
                case 200:
                    followTargetUrl = false;
                    break;
                case 404:
                    followTargetUrl = false;
                    break;
                case 500:
                    followTargetUrl = false;
                    break;
                case 302:
                    Header location = proxyRes.getFirstHeader(""Location"");
                    targetUrl = location.getValue();
                    if (!internalProcessingPolicy.match(req, targetUrl)) {
                        if (logger.isTraceEnabled()) logger.trace(""Do not follow HTTP 302 to ["" + location.getValue() + ""]"");
                        Collections.addAll(storedHeaders, proxyRes.getHeaders(""Location""));
                        followTargetUrl = false;
                    } else {
                        if (logger.isTraceEnabled()) logger.trace(""Do follow HTTP 302 to ["" + location.getValue() + ""]"");
                        followTargetUrl = true;
                    }
                    break;
                default:
                    followTargetUrl = false;
                    break;
            }
            HttpEntity entity = proxyRes.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                try {
                    if (!followTargetUrl) {
                        for (Header header : headers) {
                            if (header.getName().equals(""Content-Type"")) res.setHeader(header.getName(), header.getValue());
                            if (header.getName().equals(""Content-Length"")) res.setHeader(header.getName(), header.getValue());
                        }
                        res.setStatus(proxyRes.getStatusLine().getStatusCode());
                        for (Header header : storedHeaders) {
                            if (header.getName().startsWith(""Set-Cookie"")) res.addHeader(header.getName(), header.getValue()); else res.setHeader(header.getName(), header.getValue());
                        }
                        IOUtils.copy(instream, res.getOutputStream());
                        res.getOutputStream().flush();
                    } else {
                        int r = instream.read(buff);
                        int total = r;
                        while (r > 0) {
                            r = instream.read(buff);
                            total += r;
                        }
                        if (total > 0) logger.warn(""Ignoring response content size : "" + total);
                    }
                } catch (IOException ex) {
                    throw ex;
                } catch (RuntimeException ex) {
                    proxyReq.abort();
                    throw ex;
                } finally {
                    try {
                        instream.close();
                    } catch (Exception ignore) {
                    }
                }
            } else {
                if (!followTargetUrl) {
                    res.setStatus(proxyRes.getStatusLine().getStatusCode());
                    for (Header header : headers) {
                        if (header.getName().equals(""Content-Type"")) res.setHeader(header.getName(), header.getValue());
                        if (header.getName().equals(""Content-Length"")) res.setHeader(header.getName(), header.getValue());
                    }
                    for (Header header : storedHeaders) {
                        if (header.getName().startsWith(""Set-Cookie"")) res.addHeader(header.getName(), header.getValue()); else res.setHeader(header.getName(), header.getValue());
                    }
                }
            }
            if (followTargetUrl) {
                proxyReq = buildProxyRequest(targetUrl);
                httpContext = null;
            }
        }
        if (logger.isTraceEnabled()) logger.trace(""Ended following redirects for "" + req.getPathInfo());
    }
",True
900423,11799025,21870537,"    @Override
    public Document duplicate() {
        BinaryDocument b = new BinaryDocument(this.name, this.content.getContentType());
        try {
            IOUtils.copy(this.getContent().getInputStream(), this.getContent().getOutputStream());
            return b;
        } catch (IOException e) {
            throw ManagedIOException.manage(e);
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900424,20081426,592607,"    private static GSP loadGSP(URL url) {
        try {
            InputStream input = url.openStream();
            int c;
            while ((c = input.read()) != -1) {
                result = result + (char) c;
            }
            Unmarshaller unmarshaller = getUnmarshaller();
            unmarshaller.setValidation(false);
            GSP gsp = (GSP) unmarshaller.unmarshal(new InputSource());
            return gsp;
        } catch (Exception e) {
            System.out.println(""loadGSP "" + e);
            e.printStackTrace();
            return null;
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900425,9136261,17398520,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        Reader source = null;
        Writer destination = null;
        char[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""FileCopy: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""file is unwriteable: "" + dest_name);
                } else {
                    throw new FileCopyException(""FileCopy: destination "" + ""is not a file: "" + dest_name);
                }
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new BufferedReader(new FileReader(source_file));
            destination = new BufferedWriter(new FileWriter(destination_file));
            buffer = new char[1024];
            while (true) {
                bytes_read = source.read(buffer, 0, 1024);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) {
                try {
                    source.close();
                } catch (IOException e) {
                    ;
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                    ;
                }
            }
        }
    }
","    public void SendFile(File testfile) {
        try {
            SocketChannel sock = SocketChannel.open(new InetSocketAddress(""127.0.0.1"", 1234));
            sock.configureBlocking(true);
            while (!sock.finishConnect()) {
                System.out.println(""NOT connected!"");
            }
            System.out.println(""CONNECTED!"");
            FileInputStream fis = new FileInputStream(testfile);
            FileChannel fic = fis.getChannel();
            long len = fic.size();
            Buffer.clear();
            Buffer.putLong(len);
            Buffer.flip();
            sock.write(Buffer);
            long cnt = 0;
            while (cnt < len) {
                Buffer.clear();
                int add = fic.read(Buffer);
                cnt += add;
                Buffer.flip();
                while (Buffer.hasRemaining()) {
                    sock.write(Buffer);
                }
            }
            fic.close();
            File tmpfile = getTmp().createNewFile(""tmp"", ""tmp"");
            FileOutputStream fos = new FileOutputStream(tmpfile);
            FileChannel foc = fos.getChannel();
            int mlen = -1;
            do {
                Buffer.clear();
                mlen = sock.read(Buffer);
                Buffer.flip();
                if (mlen > 0) {
                    foc.write(Buffer);
                }
            } while (mlen > 0);
            foc.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900426,21224683,13067555,"    public void delete(String user) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                stmt.executeUpdate(""delete from Principals where PrincipalId = '"" + user + ""'"");
                stmt.executeUpdate(""delete from Roles where PrincipalId = '"" + user + ""'"");
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    public static String MD5Digest(String source) {
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(source.getBytes(""UTF8""));
            byte[] hash = digest.digest();
            String strHash = byteArrayToHexString(hash);
            return strHash;
        } catch (NoSuchAlgorithmException e) {
            String msg = ""%s: %s"";
            msg = String.format(msg, e.getClass().getName(), e.getMessage());
            logger.error(msg);
            return null;
        } catch (UnsupportedEncodingException e) {
            String msg = ""%s: %s"";
            msg = String.format(msg, e.getClass().getName(), e.getMessage());
            logger.error(msg);
            return null;
        }
    }
",False
900427,7781594,6569409,"                @Override
                protected IStatus runCancelableRunnable(IProgressMonitor monitor) {
                    IStatus returnValue = Status.OK_STATUS;
                    monitor.beginTask(NLS.bind(Messages.SaveFileOnDiskHandler_SavingFiles, open), informationUnitsFromExecutionEvent.size());
                    for (InformationUnit informationUnit : informationUnitsFromExecutionEvent) {
                        if (!monitor.isCanceled()) {
                            monitor.setTaskName(NLS.bind(Messages.SaveFileOnDiskHandler_Saving, informationUnit.getLabel()));
                            InformationStructureRead read = InformationStructureRead.newSession(informationUnit);
                            read.getValueByNodeId(Activator.FILENAME);
                            IFile binaryReferenceFile = InformationUtil.getBinaryReferenceFile(informationUnit);
                            FileWriter writer = null;
                            try {
                                if (binaryReferenceFile != null) {
                                    File file = new File(open, (String) read.getValueByNodeId(Activator.FILENAME));
                                    InputStream contents = binaryReferenceFile.getContents();
                                    writer = new FileWriter(file);
                                    IOUtils.copy(contents, writer);
                                    monitor.worked(1);
                                }
                            } catch (Exception e) {
                                returnValue = StatusCreator.newStatus(NLS.bind(Messages.SaveFileOnDiskHandler_ErrorSaving, informationUnit.getLabel(), e));
                                break;
                            } finally {
                                if (writer != null) {
                                    try {
                                        writer.flush();
                                        writer.close();
                                    } catch (IOException e) {
                                    }
                                }
                            }
                        }
                    }
                    return returnValue;
                }
","    public String obfuscateString(String string) {
        String obfuscatedString = null;
        try {
            MessageDigest md = MessageDigest.getInstance(ENCRYPTION_ALGORITHM);
            md.update(string.getBytes());
            byte[] digest = md.digest();
            obfuscatedString = new String(Base64.encode(digest)).replace(DELIM_PATH, '=');
        } catch (NoSuchAlgorithmException e) {
            StatusHandler.log(""SHA not available"", null);
            obfuscatedString = LABEL_FAILED_TO_OBFUSCATE;
        }
        return obfuscatedString;
    }
",False
900428,12721185,310580,"    public static int fileUpload(long lngFileSize, InputStream inputStream, String strFilePath, String strFileName) throws IOException {
        String SEPARATOR = System.getProperty(""file.separator"");
        if (lngFileSize > (10 * 1024 * 1024)) {
            return -1;
        }
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            File dir = new File(strFilePath);
            if (!dir.exists()) dir.mkdirs();
            is = inputStream;
            fos = new FileOutputStream(new File(strFilePath + SEPARATOR + strFileName));
            IOUtils.copy(is, fos);
        } catch (Exception ex) {
            return -2;
        } finally {
            try {
                fos.close();
                is.close();
            } catch (Exception ex2) {
            }
        }
        return 0;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900429,5482150,15178715,"    private static void writeUrl(String filePath, String data, String charCoding, boolean urlIsFile) throws IOException {
        int chunkLength;
        OutputStream os = null;
        try {
            if (!urlIsFile) {
                URL urlObj = new URL(filePath);
                URLConnection uc = urlObj.openConnection();
                os = uc.getOutputStream();
                if (charCoding == null) {
                    String type = uc.getContentType();
                    if (type != null) {
                        charCoding = getCharCodingFromType(type);
                    }
                }
            } else {
                File f = new File(filePath);
                os = new FileOutputStream(f);
            }
            Writer w;
            if (charCoding == null) {
                w = new OutputStreamWriter(os);
            } else {
                w = new OutputStreamWriter(os, charCoding);
            }
            w.write(data);
            w.flush();
        } finally {
            if (os != null) os.close();
        }
    }
","    public static void main(String[] args) throws IOException, DataFormatException {
        byte in_buf[] = new byte[20000];
        if (args.length < 2) {
            System.out.println(""too few arguments"");
            System.exit(0);
        }
        String inputName = args[0];
        InputStream in = new FileInputStream(inputName);
        int index = 0;
        for (int i = 1; i < args.length; i++) {
            int size = Integer.parseInt(args[i]);
            boolean copy = size >= 0;
            if (size < 0) {
                size = -size;
            }
            OutputStream out = null;
            if (copy) {
                index++;
                out = new FileOutputStream(inputName + ""."" + index + "".dat"");
            }
            while (size > 0) {
                int read = in.read(in_buf, 0, Math.min(in_buf.length, size));
                if (read < 0) {
                    break;
                }
                size -= read;
                if (copy) {
                    out.write(in_buf, 0, read);
                }
            }
            if (copy) {
                out.close();
            }
        }
        index++;
        OutputStream out = new FileOutputStream(inputName + ""."" + index + "".dat"");
        while (true) {
            int read = in.read(in_buf);
            if (read < 0) {
                break;
            }
            out.write(in_buf, 0, read);
        }
        out.close();
        in.close();
    }
",False
900430,12267657,6930078,"    public Reader create(final URI url) throws IOException {
        this.url = url;
        if (!url.isAbsolute()) {
            return new FileReader(new File(url.toString()));
        }
        URLConnection connection = url.toURL().openConnection();
        connection.setDoInput(true);
        final InputStream inputStream = connection.getInputStream();
        return new InputStreamReader(inputStream);
    }
","    public void ztest_cluster() throws Exception {
        Configuration.init();
        TomcatServer ts1 = new TomcatServer();
        ts1.registerServlet(""/*"", TestServlet.class.getName());
        ts1.registerCluster(5554);
        ts1.start(5555);
        TomcatServer ts2 = new TomcatServer();
        ts2.registerServlet(""/*"", TestServlet.class.getName());
        ts2.registerCluster(5554);
        ts2.start(5556);
        URL url1 = new URL(""http://127.0.0.1:5555/a"");
        HttpURLConnection c1 = (HttpURLConnection) url1.openConnection();
        assert getData(c1).equals(""a null"");
        String cookie = c1.getHeaderField(""Set-Cookie"");
        Thread.sleep(5000);
        URL url2 = new URL(""http://127.0.0.1:5556/a"");
        HttpURLConnection c2 = (HttpURLConnection) url2.openConnection();
        c2.setRequestProperty(""Cookie"", cookie);
        assert getData(c2).equals(""a a"");
    }
",False
900431,417300,15519967,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
","    private void output(HttpServletResponse resp, InputStream is, long length, String fileName) throws Exception {
        resp.reset();
        String mimeType = ""image/jpeg"";
        resp.setContentType(mimeType);
        resp.setContentLength((int) length);
        resp.setHeader(""Content-Disposition"", ""inline; filename=\"""" + fileName + ""\"""");
        resp.setHeader(""Cache-Control"", ""must-revalidate"");
        ServletOutputStream sout = resp.getOutputStream();
        IOUtils.copy(is, sout);
        sout.flush();
        resp.flushBuffer();
    }
",True
900432,8296360,19060603,"    public static void copiaAnexos(String from, String to, AnexoTO[] anexoTO) {
        FileChannel in = null, out = null;
        for (int i = 0; i < anexoTO.length; i++) {
            try {
                in = new FileInputStream(new File((uploadDiretorio.concat(from)).concat(File.separator + anexoTO[i].getNome()))).getChannel();
                out = new FileOutputStream(new File((uploadDiretorio.concat(to)).concat(File.separator + anexoTO[i].getNome()))).getChannel();
                long size = in.size();
                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                out.write(buf);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (in != null) try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (out != null) try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",True
900433,266571,12214442,"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }
","    public boolean saveTemplate(Template t) {
        try {
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            String query;
            ResultSet rset;
            if (Integer.parseInt(executeMySQLGet(""SELECT COUNT(*) FROM templates WHERE name='"" + escapeCharacters(t.getName()) + ""'"")) != 0) return false;
            query = ""select * from templates where templateid = "" + t.getID();
            rset = stmt.executeQuery(query);
            if (rset.next()) {
                System.err.println(""Updating already saved template is not supported!!!!!!"");
                return false;
            } else {
                query = ""INSERT INTO templates (name, parentid) VALUES ('"" + escapeCharacters(t.getName()) + ""', "" + t.getParentID() + "")"";
                try {
                    stmt.executeUpdate(query);
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                int templateid = Integer.parseInt(executeMySQLGet(""SELECT LAST_INSERT_ID()""));
                t.setID(templateid);
                LinkedList<Field> fields = t.getFields();
                ListIterator<Field> iter = fields.listIterator();
                Field f = null;
                PreparedStatement pstmt = conn.prepareStatement(""INSERT INTO templatefields(fieldtype, name, templateid, defaultvalue)"" + ""VALUES (?,?,?,?)"");
                try {
                    while (iter.hasNext()) {
                        f = iter.next();
                        if (f.getType() == Field.IMAGE) {
                            System.out.println(""field is an image."");
                            byte data[] = ((FieldDataImage) f.getDefault()).getDataBytes();
                            pstmt.setBytes(4, data);
                        } else {
                            System.out.println(""field is not an image"");
                            String deflt = (f.getDefault()).getData();
                            pstmt.setString(4, deflt);
                        }
                        pstmt.setInt(1, f.getType());
                        pstmt.setString(2, f.getName());
                        pstmt.setInt(3, t.getID());
                        pstmt.execute();
                        f.setID(Integer.parseInt(executeMySQLGet(""SELECT LAST_INSERT_ID()"")));
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (SQLException ex) {
            System.err.println(""Error saving the Template"");
            return false;
        }
        return true;
    }
",True
900434,21605296,17267680,"    public void transport(File file) throws TransportException {
        FTPClient client = new FTPClient();
        try {
            client.connect(getOption(""host""));
            client.login(getOption(""username""), getOption(""password""));
            client.changeWorkingDirectory(getOption(""remotePath""));
            transportRecursive(client, file);
            client.disconnect();
        } catch (Exception e) {
            throw new TransportException(e);
        }
    }
","    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File file = new File(tmpDeployDir, new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",False
900435,18923105,22689223,"    public static byte[] read(URL url) throws IOException {
        byte[] bytes;
        InputStream is = null;
        try {
            is = url.openStream();
            bytes = readAllBytes(is);
        } finally {
            if (is != null) {
                is.close();
            }
        }
        return bytes;
    }
","        @Override
        public void testAction(ITestThread testThread) throws Throwable {
            try {
                final InputStream urlIn = new URL(""http://jdistunit.sourceforge.net"").openStream();
                final int availableBytes = urlIn.available();
                if (0 == availableBytes) {
                    throw new IllegalStateException(""Zero bytes on target host."");
                }
                in = new BufferedReader(new InputStreamReader(urlIn));
                String line;
                while (null != (line = in.readLine())) {
                    page.append(line);
                    page.append('\n');
                    if (0 != lineDelay) {
                        OS.sleep(lineDelay);
                    }
                    if (null != testThread && testThread.isActionStopped()) {
                        break;
                    }
                }
            } finally {
                if (null != in) {
                    in.close();
                    in = null;
                }
            }
        }
",False
900436,888827,20080195,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public void restoreDrivers() throws ExplorerException {
        try {
            drivers.clear();
            URL url = URLUtil.getResourceURL(""default_drivers.xml"");
            loadDefaultDrivers(url.openStream());
        } catch (IOException e) {
            throw new ExplorerException(e);
        }
    }
",False
900437,1312612,19915605,"    public void initFromXml(final String xmlFileName) throws java.net.MalformedURLException, ConfigurationException, IOException {
        if (xmlInitialized) {
            return;
        }
        templates = null;
        MergeTemplateWriter.setTokenList(getTokenProvider().getKnownTokens());
        java.net.URL url = new FileFinder().getUrl(getTokenProvider().getClass(), xmlFileName);
        InputStreamReader xmlFileReader = new InputStreamReader(url.openStream());
        KnownTemplates temps = MergeTemplateWriter.importFromXML(xmlFileReader);
        xmlFileReader.close();
        KnownTemplates.setDefaultInstance(temps);
        setTemplates(temps);
        setInitialized(true);
    }
","    public static String Execute(HttpRequestBase httprequest) throws IOException, ClientProtocolException {
        httprequest.setHeader(""Accept"", ""application/json"");
        httprequest.setHeader(""Content-type"", ""application/json"");
        String result = """";
        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response = httpclient.execute(httprequest);
        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line = """";
        while ((line = rd.readLine()) != null) {
            result += line + ""\n"";
        }
        return result;
    }
",False
900438,8924519,12274679,"    private String grabInformationFromWeb(String query, String infoName) throws Exception {
        String result = """";
        URL url = new URL(query);
        HttpURLConnection request = null;
        request = (HttpURLConnection) url.openConnection();
        if (request != null) {
            InputStream in = url.openStream();
            int c = 0;
            StringBuilder sb = new StringBuilder();
            while ((c = in.read()) != -1) {
                sb = sb.append((char) c);
            }
            String s = sb.toString();
            result = Utils.getTagValue(s, ""<"" + infoName + "">"", ""</"" + infoName + "">"");
            in.close();
        }
        return result;
    }
","    public JSONObject executeJSON(final String path, final JSONObject jsRequest) throws IOException, HttpException, JSONException {
        final HttpPost httpRequest = newHttpPost(path);
        httpRequest.setHeader(""Content-Type"", ""application/json"");
        final String request = jsRequest.toString();
        httpRequest.setEntity(new StringEntity(request));
        final HttpResponse httpResponse = executeHttp(httpRequest);
        final String response = EntityUtils.toString(httpResponse.getEntity());
        return new JSONObject(response);
    }
",False
900439,9665214,1037402,"    public void testConvert() throws IOException, ConverterException {
        InputStreamReader reader = new InputStreamReader(new FileInputStream(""test"" + File.separator + ""input"" + File.separator + ""A0851ohneex.dat""), CharsetUtil.forName(""x-PICA""));
        FileWriter writer = new FileWriter(""test"" + File.separator + ""output"" + File.separator + ""ddbInterToMarcxmlTest.out"");
        Converter c = context.getConverter(""ddb-intern"", ""MARC21-xml"", ""x-PICA"", ""UTF-8"");
        ConversionParameters params = new ConversionParameters();
        params.setSourceCharset(""x-PICA"");
        params.setTargetCharset(""UTF-8"");
        params.setAddCollectionHeader(true);
        params.setAddCollectionFooter(true);
        c.convert(reader, writer, params);
    }
","    public static final String getContent(String address) {
        String content = """";
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            URL url = new URL(address);
            out = new ByteArrayOutputStream();
            conn = url.openConnection();
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
            }
            content = out.toString();
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        return content;
    }
",False
900440,3024980,22728535,"    @Test
    public void testCopy_inputStreamToWriter_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        YellOnFlushAndCloseOutputStreamTest out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        IOUtils.copy(in, writer, ""UTF8"");
        out.off();
        writer.flush();
        assertTrue(""Not all bytes were read"", in.available() == 0);
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF8"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
","                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.8""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""imagenes/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""imagenes/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
",True
900441,5498222,11312022,"    public static void copyFile(String inputFile, String outputFile) throws IOException {
        FileInputStream fis = new FileInputStream(inputFile);
        FileOutputStream fos = new FileOutputStream(outputFile);
        for (int b = fis.read(); b != -1; b = fis.read()) fos.write(b);
        fos.close();
        fis.close();
    }
","    public static void downloadFromUrl(URL url, String localFilename, String userAgent) throws IOException {
        InputStream is = null;
        FileOutputStream fos = null;
        System.setProperty(""java.net.useSystemProxies"", ""true"");
        try {
            URLConnection urlConn = url.openConnection();
            if (userAgent != null) {
                urlConn.setRequestProperty(""User-Agent"", userAgent);
            }
            is = urlConn.getInputStream();
            fos = new FileOutputStream(localFilename);
            byte[] buffer = new byte[4096];
            int len;
            while ((len = is.read(buffer)) > 0) {
                fos.write(buffer, 0, len);
            }
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } finally {
                if (fos != null) {
                    fos.close();
                }
            }
        }
    }
",False
900442,14632238,6270868,"    public static void bubble(double[] a) {
        for (int i = a.length - 1; i > 0; i--) for (int j = 0; j < i; j++) if (a[j] > a[j + 1]) {
            double temp = a[j];
            a[j] = a[j + 1];
            a[j + 1] = temp;
        }
    }
","    public static String shaEncrypt(final String txt) {
        String enTxt = txt;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Error:"", e);
        }
        if (null != md) {
            byte[] shahash = new byte[32];
            try {
                md.update(txt.getBytes(""UTF-8""), 0, txt.length());
            } catch (UnsupportedEncodingException e) {
                logger.error(""Error:"", e);
            }
            shahash = md.digest();
            StringBuffer md5StrBuff = new StringBuffer();
            for (int i = 0; i < shahash.length; i++) {
                if (Integer.toHexString(0xFF & shahash[i]).length() == 1) {
                    md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & shahash[i]));
                } else {
                    md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]));
                }
            }
            enTxt = md5StrBuff.toString();
        }
        return enTxt;
    }
",False
900443,8702780,778641,"    final void saveProject(Project project, final File file) {
        if (projectsList.contains(project)) {
            if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) {
                try {
                    if (!file.exists()) {
                        if (!file.createNewFile()) throw new IOException(""cannot create file "" + file.getAbsolutePath());
                    }
                    File tmpFile = File.createTempFile(""JFPSM"", "".tmp"");
                    ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
                    zoStream.setMethod(ZipOutputStream.DEFLATED);
                    ZipEntry projectXMLEntry = new ZipEntry(""project.xml"");
                    projectXMLEntry.setMethod(ZipEntry.DEFLATED);
                    zoStream.putNextEntry(projectXMLEntry);
                    CustomXMLEncoder encoder = new CustomXMLEncoder(new BufferedOutputStream(new FileOutputStream(tmpFile)));
                    encoder.writeObject(project);
                    encoder.close();
                    int bytesIn;
                    byte[] readBuffer = new byte[1024];
                    FileInputStream fis = new FileInputStream(tmpFile);
                    while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn);
                    fis.close();
                    ZipEntry entry;
                    String floorDirectory;
                    for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) {
                        floorDirectory = ""levelset/"" + floorSet.getName() + ""/"" + floor.getName() + ""/"";
                        for (MapType type : MapType.values()) {
                            entry = new ZipEntry(floorDirectory + type.getFilename());
                            entry.setMethod(ZipEntry.DEFLATED);
                            zoStream.putNextEntry(entry);
                            ImageIO.write(floor.getMap(type).getImage(), ""png"", zoStream);
                        }
                    }
                    final String tileDirectory = ""tileset/"";
                    for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) {
                        entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + "".png"");
                        entry.setMethod(ZipEntry.DEFLATED);
                        zoStream.putNextEntry(entry);
                        ImageIO.write(tile.getTexture(textureIndex), ""png"", zoStream);
                    }
                    zoStream.close();
                    tmpFile.delete();
                } catch (IOException ioe) {
                    throw new RuntimeException(""The project "" + project.getName() + "" cannot be saved!"", ioe);
                }
            }
        } else throw new IllegalArgumentException(""The project "" + project.getName() + "" is not handled by this project set!"");
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900444,11193872,19053519,"    private static <T> Collection<T> loadFromServices(Class<T> interf) throws Exception {
        ClassLoader classLoader = DSServiceLoader.class.getClassLoader();
        Enumeration<URL> e = classLoader.getResources(""META-INF/services/"" + interf.getName());
        Collection<T> services = new ArrayList<T>();
        while (e.hasMoreElements()) {
            URL url = e.nextElement();
            InputStream is = url.openStream();
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                while (true) {
                    String line = r.readLine();
                    if (line == null) {
                        break;
                    }
                    int comment = line.indexOf('#');
                    if (comment >= 0) {
                        line = line.substring(0, comment);
                    }
                    String name = line.trim();
                    if (name.length() == 0) {
                        continue;
                    }
                    Class<?> clz = Class.forName(name, true, classLoader);
                    Class<? extends T> impl = clz.asSubclass(interf);
                    Constructor<? extends T> ctor = impl.getConstructor();
                    T svc = ctor.newInstance();
                    services.add(svc);
                }
            } finally {
                is.close();
            }
        }
        return services;
    }
","    protected String getManualDownloadURL() {
        if (_newestVersionString.indexOf(""weekly"") > 0) {
            return ""http://www.cs.rice.edu/~javaplt/drjavarice/weekly/"";
        }
        final String DRJAVA_FILES_PAGE = ""http://sourceforge.net/project/showfiles.php?group_id=44253"";
        final String LINK_PREFIX = ""<a href=\""/project/showfiles.php?group_id=44253"";
        final String LINK_SUFFIX = ""\"">"";
        BufferedReader br = null;
        try {
            URL url = new URL(DRJAVA_FILES_PAGE);
            InputStream urls = url.openStream();
            InputStreamReader is = new InputStreamReader(urls);
            br = new BufferedReader(is);
            String line;
            int pos;
            while ((line = br.readLine()) != null) {
                if ((pos = line.indexOf(_newestVersionString)) >= 0) {
                    int prePos = line.indexOf(LINK_PREFIX);
                    if ((prePos >= 0) && (prePos < pos)) {
                        int suffixPos = line.indexOf(LINK_SUFFIX, prePos);
                        if ((suffixPos >= 0) && (suffixPos + LINK_SUFFIX.length() == pos)) {
                            String versionLink = edu.rice.cs.plt.text.TextUtil.xmlUnescape(line.substring(prePos + LINK_PREFIX.length(), suffixPos));
                            return DRJAVA_FILES_PAGE + versionLink;
                        }
                    }
                }
            }
            ;
        } catch (IOException e) {
            return DRJAVA_FILES_PAGE;
        } finally {
            try {
                if (br != null) br.close();
            } catch (IOException e) {
            }
        }
        return DRJAVA_FILES_PAGE;
    }
",True
900445,7130579,1708100,"    public void copyFile(String oldPath, String newPath) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPath);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPath);
                FileOutputStream fs = new FileOutputStream(newPath);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    private void sendFile(File file, HttpExchange response) throws IOException {
        response.getResponseHeaders().add(FileUploadBase.CONTENT_LENGTH, Long.toString(file.length()));
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(file);
            IOUtils.copy(inputStream, response.getResponseBody());
        } catch (Exception exception) {
            throw new IOException(""error sending file"", exception);
        } finally {
            IOUtils.closeQuietly(inputStream);
        }
    }
",True
900446,5271797,5138483,"    private void loadMap() {
        final String wordList = ""vietwordlist.txt"";
        try {
            File dataFile = new File(supportDir, wordList);
            if (!dataFile.exists()) {
                final ReadableByteChannel input = Channels.newChannel(ClassLoader.getSystemResourceAsStream(""dict/"" + dataFile.getName()));
                final FileChannel output = new FileOutputStream(dataFile).getChannel();
                output.transferFrom(input, 0, 1000000L);
                input.close();
                output.close();
            }
            long fileLastModified = dataFile.lastModified();
            if (map == null) {
                map = new HashMap();
            } else {
                if (fileLastModified <= mapLastModified) {
                    return;
                }
                map.clear();
            }
            mapLastModified = fileLastModified;
            BufferedReader bs = new BufferedReader(new InputStreamReader(new FileInputStream(dataFile), ""UTF-8""));
            String accented;
            while ((accented = bs.readLine()) != null) {
                String plain = VietUtilities.stripDiacritics(accented);
                map.put(plain.toLowerCase(), accented);
            }
            bs.close();
        } catch (IOException e) {
            map = null;
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, myResources.getString(""Cannot_find_\"""") + wordList + myResources.getString(""\""_in\n"") + supportDir.toString(), VietPad.APP_NAME, JOptionPane.ERROR_MESSAGE);
        }
    }
","    public static List<String> extract(String zipFilePath, String destDirPath) throws IOException {
        List<String> list = null;
        ZipFile zip = new ZipFile(zipFilePath);
        try {
            Enumeration<? extends ZipEntry> entries = zip.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                File destFile = new File(destDirPath, entry.getName());
                if (entry.isDirectory()) {
                    destFile.mkdirs();
                } else {
                    InputStream in = zip.getInputStream(entry);
                    OutputStream out = new FileOutputStream(destFile);
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        IOUtils.closeQuietly(in);
                        IOUtils.closeQuietly(out);
                        try {
                            out.close();
                        } catch (IOException ioe) {
                            ioe.getMessage();
                        }
                        try {
                            in.close();
                        } catch (IOException ioe) {
                            ioe.getMessage();
                        }
                    }
                }
                if (list == null) {
                    list = new ArrayList<String>();
                }
                list.add(destFile.getAbsolutePath());
            }
            return list;
        } finally {
            try {
                zip.close();
            } catch (Exception e) {
                e.getMessage();
            }
        }
    }
",True
900447,21302551,649639,"    public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) {
        Parser p = new Parser();
        javax.xml.parsers.DocumentBuilder db;
        try {
            db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            log.error("""", e);
            throw new RuntimeException();
        }
        Document document = db.newDocument();
        InputStream is = htmlInputStream;
        if (log.isDebugEnabled()) {
            ByteArrayOutputStream baos;
            baos = new ByteArrayOutputStream();
            try {
                IOUtils.copy(is, baos);
            } catch (IOException e) {
                log.error(""Fail to make input stream copy."", e);
            }
            IOUtils.closeQuietly(is);
            ByteArrayInputStream byteArrayInputStream;
            byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray());
            try {
                IOUtils.toString(new ByteArrayInputStream(baos.toByteArray()), ""UTF-8"");
            } catch (IOException e) {
                log.error("""", e);
            }
            IOUtils.closeQuietly(byteArrayInputStream);
            is = new ByteArrayInputStream(baos.toByteArray());
        }
        try {
            InputSource iSource = new InputSource(is);
            iSource.setEncoding(encoding);
            Source transformerSource = new SAXSource(p, iSource);
            Result result = new DOMResult(document);
            Transformer xslTransformer = getTransformerByName(classpathXsltResource, false);
            try {
                xslTransformer.transform(transformerSource, result);
            } catch (TransformerException e) {
                throw new RuntimeException(e);
            }
        } finally {
            try {
                is.close();
            } catch (Exception e) {
                log.warn("""", e);
            }
        }
        return document;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900448,2464907,3134513,"    private boolean importTablesData(Connection conn) {
        try {
            boolean status = true;
            boolean autoCommit = conn.getAutoCommit();
            conn.setAutoCommit(false);
            String dbType = this.getFromSession(""database"");
            List statements = ParseDBDumpFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + ""/database/"" + dbType + ""/"" + dbType + ""_data_dump.sql"");
            for (Iterator iter = statements.iterator(); iter.hasNext(); ) {
                String query = (String) iter.next();
                if (query == null || """".equals(query.trim())) {
                    continue;
                }
                query = query.trim();
                Statement s = conn.createStatement();
                try {
                    if (query.startsWith(""UPDATE"") || query.startsWith(""INSERT"") || query.startsWith(""SET"")) {
                        s.executeUpdate(query);
                    } else if (query.startsWith(""SELECT"")) {
                        s.executeQuery(query);
                    } else {
                        throw new SQLException(""Invalid query: "" + query);
                    }
                } catch (SQLException ex) {
                    status = false;
                    conn.rollback();
                    logger.error(""Error importing data for "" + query + "": "" + ex, ex);
                    this.context.put(""exceptionMessage"", ex.getMessage() + ""\n"" + query);
                    break;
                } finally {
                    s.close();
                }
            }
            conn.setAutoCommit(autoCommit);
            return status;
        } catch (Exception e) {
            throw new ForumException(e);
        }
    }
","    public static boolean validPassword(String password, String passwordInDb) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        byte[] pwdInDb = hexStringToByte(passwordInDb);
        byte[] salt = new byte[SALT_LENGTH];
        System.arraycopy(pwdInDb, 0, salt, 0, SALT_LENGTH);
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF-8""));
        byte[] digest = md.digest();
        byte[] digestInDb = new byte[pwdInDb.length - SALT_LENGTH];
        System.arraycopy(pwdInDb, SALT_LENGTH, digestInDb, 0, digestInDb.length);
        if (Arrays.equals(digest, digestInDb)) {
            return true;
        } else {
            return false;
        }
    }
",False
900449,9439748,21195765,"    public static void transfer(FileInputStream fileInStream, FileOutputStream fileOutStream) throws IOException {
        FileChannel fileInChannel = fileInStream.getChannel();
        FileChannel fileOutChannel = fileOutStream.getChannel();
        long fileInSize = fileInChannel.size();
        try {
            long transferred = fileInChannel.transferTo(0, fileInSize, fileOutChannel);
            if (transferred != fileInSize) {
                throw new IOException(""transfer() did not complete"");
            }
        } finally {
            ensureClose(fileInChannel, fileOutChannel);
        }
    }
","    private void writeFile(FileInputStream inFile, FileOutputStream outFile) throws IOException {
        byte[] buf = new byte[2048];
        int read;
        while ((read = inFile.read(buf)) > 0) outFile.write(buf, 0, read);
        inFile.close();
    }
",True
900450,10192341,5609837,"    @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        PositionParser pp;
        Database.init(""XIDResult"");
        pp = new PositionParser(""01:33:50.904+30:39:35.79"");
        String url = ""http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script="";
        String script = ""format object \""%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\""\n"";
        String tmp = """";
        script += pp.getPosition() + "" radius=1m"";
        url += URLEncoder.encode(script, ""ISO-8859-1"");
        URL simurl = new URL(url);
        BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
        String boeuf;
        boolean data_found = false;
        JSONObject retour = new JSONObject();
        JSONArray dataarray = new JSONArray();
        JSONArray colarray = new JSONArray();
        JSONObject jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""ID"");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""Position"");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""Type"");
        colarray.add(jsloc);
        retour.put(""aoColumns"", colarray);
        int datasize = 0;
        while ((boeuf = in.readLine()) != null) {
            if (data_found) {
                String[] fields = boeuf.trim().split(""\\|"", -1);
                int pos = fields.length - 1;
                if (pos >= 3) {
                    String type = fields[pos];
                    pos--;
                    String dec = fields[pos];
                    pos--;
                    String ra = fields[pos];
                    String id = """";
                    for (int i = 0; i < pos; i++) {
                        id += fields[i];
                        if (i < (pos - 1)) {
                            id += ""|"";
                        }
                    }
                    if (id.length() <= 30) {
                        JSONArray darray = new JSONArray();
                        darray.add(id.trim());
                        darray.add(ra + "" "" + dec);
                        darray.add(type.trim());
                        dataarray.add(darray);
                        datasize++;
                    }
                }
            } else if (boeuf.startsWith(""::data"")) {
                data_found = true;
            }
        }
        retour.put(""aaData"", dataarray);
        retour.put(""iTotalRecords"", datasize);
        retour.put(""iTotalDisplayRecords"", datasize);
        System.out.println(retour.toJSONString());
        in.close();
    }
","    public String postXmlRequest(String url, String data) {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(url);
        StringBuffer responseStr = new StringBuffer();
        try {
            System.out.println(data);
            Log4j.logger.info(""Request:\n"" + data);
            StringEntity reqEntity = new StringEntity(data, ""UTF-8"");
            reqEntity.setContentType(""text/xml"");
            httppost.setEntity(reqEntity);
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            this.setPostSatus(response.getStatusLine().getStatusCode());
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""));
            String line = null;
            while ((line = reader.readLine()) != null) {
                responseStr.append(line + ""\n"");
            }
            if (entity != null) {
                entity.consumeContent();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println(responseStr);
        Log4j.logger.info(""Response:\n"" + responseStr);
        return responseStr.toString();
    }
",True
900451,14495973,16485992,"    public static int copy(File src, int amount, File dst) {
        final int BUFFER_SIZE = 1024;
        int amountToRead = amount;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new BufferedInputStream(new FileInputStream(src));
            out = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[BUFFER_SIZE];
            while (amountToRead > 0) {
                int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead));
                if (read == -1) break;
                amountToRead -= read;
                out.write(buf, 0, read);
            }
        } catch (IOException e) {
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException e) {
            }
            if (out != null) {
                try {
                    out.flush();
                } catch (IOException e) {
                }
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
        return amount - amountToRead;
    }
","    private void sendBinaryFile(File file) throws IOException, CVSException {
        BufferedInputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            if (m_bCompressFiles) {
                GZIPOutputStream gzipOut = null;
                InputStream gzipIn = null;
                File gzipFile = null;
                try {
                    gzipFile = File.createTempFile(""javacvs"", ""tmp"");
                    gzipOut = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(gzipFile)));
                    int b;
                    while ((b = in.read()) != -1) gzipOut.write((byte) b);
                    gzipOut.close();
                    long gzipLength = gzipFile.length();
                    sendLine(""z"" + Long.toString(gzipLength));
                    gzipIn = new BufferedInputStream(new FileInputStream(gzipFile));
                    for (long i = 0; i < gzipLength; i++) {
                        b = gzipIn.read();
                        if (b == -1) throw new EOFException();
                        m_Out.write((byte) b);
                    }
                } finally {
                    if (gzipOut != null) gzipOut.close();
                    if (gzipIn != null) gzipIn.close();
                    if (gzipFile != null) gzipFile.delete();
                }
            } else {
                long nLength = file.length();
                sendLine(Long.toString(nLength));
                for (long i = 0; i < nLength; i++) {
                    int b = in.read();
                    if (b == -1) throw new EOFException();
                    m_Out.write((byte) b);
                }
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900452,18099086,13433127,"    @Override
    protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {
        res.setHeader(""X-Generator"", ""VisualMon"");
        String path = req.getPathInfo();
        if (null == path || """".equals(path)) res.sendRedirect(req.getServletPath() + ""/""); else if (""/chart"".equals(path)) {
            try {
                res.setHeader(""Cache-Control"", ""private,no-cache,no-store,must-revalidate"");
                res.addHeader(""Cache-Control"", ""post-check=0,pre-check=0"");
                res.setHeader(""Expires"", ""Sat, 26 Jul 1997 05:00:00 GMT"");
                res.setHeader(""Pragma"", ""no-cache"");
                res.setDateHeader(""Expires"", 0);
                renderChart(req, res);
            } catch (InterruptedException e) {
                log.info(""Chart generation was interrupted"", e);
                Thread.currentThread().interrupt();
            }
        } else if (path.startsWith(""/log_"")) {
            String name = path.substring(5);
            LogProvider provider = null;
            for (LogProvider prov : cfg.getLogProviders()) {
                if (name.equals(prov.getName())) {
                    provider = prov;
                    break;
                }
            }
            if (null == provider) {
                log.error(""Log provider with name \""{}\"" not found"", name);
                res.sendError(HttpServletResponse.SC_NOT_FOUND);
            } else {
                render(res, provider.getLog(filter.getLocale()));
            }
        } else if (""/"".equals(path)) {
            List<LogEntry> logs = new ArrayList<LogEntry>();
            for (LogProvider provider : cfg.getLogProviders()) logs.add(new LogEntry(provider.getName(), provider.getTitle(filter.getLocale())));
            render(res, new ProbeDataList(filter.getSnapshot(), filter.getAlerts(), logs, ResourceBundle.getBundle(""de.frostcode.visualmon.stats"", filter.getLocale()).getString(""category.empty""), cfg.getDashboardTitle().get(filter.getLocale())));
        } else {
            URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo());
            if (null == url) {
                res.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            res.setDateHeader(""Last-Modified"", new File(url.getFile()).lastModified());
            res.setDateHeader(""Expires"", new Date().getTime() + YEAR_IN_SECONDS * 1000L);
            res.setHeader(""Cache-Control"", ""max-age="" + YEAR_IN_SECONDS);
            URLConnection conn = url.openConnection();
            String resourcePath = url.getPath();
            String contentType = conn.getContentType();
            if (resourcePath.endsWith("".xsl"")) {
                contentType = ""text/xml"";
                res.setCharacterEncoding(ENCODING);
            }
            if (contentType == null || ""content/unknown"".equals(contentType)) {
                if (resourcePath.endsWith("".css"")) contentType = ""text/css""; else contentType = getServletContext().getMimeType(resourcePath);
            }
            res.setContentType(contentType);
            res.setContentLength(conn.getContentLength());
            OutputStream out = res.getOutputStream();
            IOUtils.copy(conn.getInputStream(), out);
            IOUtils.closeQuietly(conn.getInputStream());
            IOUtils.closeQuietly(out);
        }
    }
","    public void save(File selectedFile) throws IOException {
        if (storeEntriesInFiles) {
            boolean moved = false;
            for (int i = 0; i < tempFiles.size(); i++) {
                File newFile = new File(selectedFile.getAbsolutePath() + ""_"" + Integer.toString(i) + "".zettmp"");
                moved = tempFiles.get(i).renameTo(newFile);
                if (!moved) {
                    BufferedReader read = new BufferedReader(new FileReader(tempFiles.get(i)));
                    PrintWriter write = new PrintWriter(newFile);
                    String s;
                    while ((s = read.readLine()) != null) write.print(s);
                    read.close();
                    write.flush();
                    write.close();
                    tempFiles.get(i).delete();
                }
                tempFiles.set(i, newFile);
            }
        }
        GZIPOutputStream output = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(selectedFile)));
        XStream xml_convert = new XStream();
        xml_convert.setMode(XStream.ID_REFERENCES);
        xml_convert.toXML(this, output);
        output.flush();
        output.close();
    }
",True
900453,849586,23241192,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    private void publishMap(LWMap map) throws IOException {
        File savedMap = PublishUtil.saveMap(map);
        InputStream istream = new BufferedInputStream(new FileInputStream(savedMap));
        OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile(""ConceptMap"", ""vue"")));
        int fileLength = (int) savedMap.length();
        byte bytes[] = new byte[fileLength];
        while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
        istream.close();
        ostream.close();
    }
",True
900454,23188868,5659863,"            public void run(IProgressMonitor runnerMonitor) throws CoreException {
                try {
                    Map<String, File> projectFiles = new HashMap<String, File>();
                    IPath basePath = new Path(""/"");
                    for (File nextLocation : filesToZip) {
                        projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter));
                    }
                    if (projectFiles.isEmpty()) {
                        PlatformActivator.logDebug(""Zip file ("" + zipFileName + "") not created because there were no files to zip"");
                        return;
                    }
                    IPath resultsPath = PlatformActivator.getDefault().getResultsPath();
                    File copyRoot = resultsPath.toFile();
                    copyRoot.mkdirs();
                    IPath zipFilePath = resultsPath.append(new Path(finalZip));
                    String zipFileName = zipFilePath.toPortableString();
                    ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
                    try {
                        out.setLevel(Deflater.DEFAULT_COMPRESSION);
                        for (String filePath : projectFiles.keySet()) {
                            File nextFile = projectFiles.get(filePath);
                            FileInputStream fin = new FileInputStream(nextFile);
                            try {
                                out.putNextEntry(new ZipEntry(filePath));
                                try {
                                    byte[] bin = new byte[4096];
                                    int bread = fin.read(bin, 0, 4096);
                                    while (bread != -1) {
                                        out.write(bin, 0, bread);
                                        bread = fin.read(bin, 0, 4096);
                                    }
                                } finally {
                                    out.closeEntry();
                                }
                            } finally {
                                fin.close();
                            }
                        }
                    } finally {
                        out.close();
                    }
                } catch (FileNotFoundException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                } catch (IOException e) {
                    Status error = new Status(Status.ERROR, PlatformActivator.PLUGIN_ID, Status.ERROR, e.getLocalizedMessage(), e);
                    throw new CoreException(error);
                }
            }
","    public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException {
        if (file == null) return null;
        if (rw == null || rw.length() == 0) {
            return null;
        }
        rw = rw.toLowerCase();
        if (rw.equals(MODE_READ)) {
            if (FileUtil.exists(file, enableException)) {
                FileInputStream fis = new FileInputStream(file);
                FileChannel ch = fis.getChannel();
                setObjectMap(ch.hashCode(), fis, FIS);
                return ch;
            }
        } else if (rw.equals(MODE_WRITE)) {
            FileOutputStream fos = new FileOutputStream(file);
            FileChannel ch = fos.getChannel();
            setObjectMap(ch.hashCode(), fos, FOS_W);
            return ch;
        } else if (rw.equals(MODE_APPEND)) {
            if (FileUtil.exists(file, enableException)) {
                RandomAccessFile raf = new RandomAccessFile(file, ""rw"");
                FileChannel ch = raf.getChannel();
                ch.position(ch.size());
                setObjectMap(ch.hashCode(), raf, FOS_A);
                return ch;
            }
        } else if (rw.equals(MODE_READ_WRITE)) {
            if (FileUtil.exists(file, enableException)) {
                RandomAccessFile raf = new RandomAccessFile(file, rw);
                FileChannel ch = raf.getChannel();
                setObjectMap(ch.hashCode(), raf, RAF);
                return ch;
            }
        } else {
            throw new IllegalArgumentException(""Illegal read/write type : ["" + rw + ""]\n"" + ""You can use following types for: \n"" + ""  (1) Read Only  = \""r\""\n"" + ""  (2) Write Only = \""w\""\n"" + ""  (3) Read/Write = \""rw\""\n"" + ""  (4) Append     = \""a\"""");
        }
        return null;
    }
",True
900455,4822222,7209394,"    public static void copy(String srcFileName, String destFileName) throws IOException {
        if (srcFileName == null) {
            throw new IllegalArgumentException(""srcFileName is null"");
        }
        if (destFileName == null) {
            throw new IllegalArgumentException(""destFileName is null"");
        }
        FileChannel src = null;
        FileChannel dest = null;
        try {
            src = new FileInputStream(srcFileName).getChannel();
            dest = new FileOutputStream(destFileName).getChannel();
            long n = src.size();
            MappedByteBuffer buf = src.map(FileChannel.MapMode.READ_ONLY, 0, n);
            dest.write(buf);
        } finally {
            if (dest != null) {
                try {
                    dest.close();
                } catch (IOException e1) {
                }
            }
            if (src != null) {
                try {
                    src.close();
                } catch (IOException e1) {
                }
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900456,17901734,10359449,"    public static void track(String strUserName, String strShortDescription, String strLongDescription, String strPriority, String strComponent) {
        String strFromToken = """";
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""__FORM_TOKEN"")) {
                    Pattern pattern = Pattern.compile(""value=\""[^\""]*\"""");
                    Matcher matcher = pattern.matcher(buffer);
                    int start = 0;
                    matcher.find(start);
                    int von = matcher.start() + 7;
                    int bis = matcher.end() - 1;
                    strFromToken = buffer.substring(von, bis);
                }
                buffer = reader.readLine();
            }
            HttpClient client = new HttpClient();
            PostMethod method = new PostMethod(getTracUrl() + ""newticket"");
            method.setRequestHeader(""Cookie"", ""trac_form_token="" + strFromToken);
            method.addParameter(""__FORM_TOKEN"", strFromToken);
            method.addParameter(""reporter"", strUserName);
            method.addParameter(""summary"", strShortDescription);
            method.addParameter(""type"", ""Fehler"");
            method.addParameter(""description"", strLongDescription);
            method.addParameter(""action"", ""create"");
            method.addParameter(""status"", ""new"");
            method.addParameter(""priority"", strPriority);
            method.addParameter(""milestone"", """");
            method.addParameter(""component"", strComponent);
            method.addParameter(""keywords"", ""BugReporter"");
            method.addParameter(""cc"", """");
            method.addParameter(""version"", """");
            client.executeMethod(method);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    protected Class findClass(String name) throws ClassNotFoundException {
        String classFile = name.replace('.', '/') + "".class"";
        InputStream classInputStream = null;
        if (this.extensionJars != null) {
            for (int i = 0; i < this.extensionJars.length; i++) {
                JarFile extensionJar = this.extensionJars[i];
                JarEntry jarEntry = extensionJar.getJarEntry(classFile);
                if (jarEntry != null) {
                    try {
                        classInputStream = extensionJar.getInputStream(jarEntry);
                    } catch (IOException ex) {
                        throw new ClassNotFoundException(""Couldn't read class "" + name, ex);
                    }
                }
            }
        }
        if (classInputStream == null) {
            URL url = getResource(classFile);
            if (url == null) {
                throw new ClassNotFoundException(""Class "" + name);
            }
            try {
                classInputStream = url.openStream();
            } catch (IOException ex) {
                throw new ClassNotFoundException(""Couldn't read class "" + name, ex);
            }
        }
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            BufferedInputStream in = new BufferedInputStream(classInputStream);
            byte[] buffer = new byte[8096];
            int size;
            while ((size = in.read(buffer)) != -1) {
                out.write(buffer, 0, size);
            }
            in.close();
            return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain);
        } catch (IOException ex) {
            throw new ClassNotFoundException(""Class "" + name, ex);
        }
    }
",False
900457,9240872,20368648,"    public static void transfer(FileInputStream fileInStream, FileOutputStream fileOutStream) throws IOException {
        FileChannel fileInChannel = fileInStream.getChannel();
        FileChannel fileOutChannel = fileOutStream.getChannel();
        long fileInSize = fileInChannel.size();
        try {
            long transferred = fileInChannel.transferTo(0, fileInSize, fileOutChannel);
            if (transferred != fileInSize) {
                throw new IOException(""transfer() did not complete"");
            }
        } finally {
            ensureClose(fileInChannel, fileOutChannel);
        }
    }
","    private void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",True
900458,4988270,288978,"    public static void resize(File originalFile, File resizedFile, int width, String format) throws IOException {
        if (format != null && ""gif"".equals(format.toLowerCase())) {
            resize(originalFile, resizedFile, width, 1);
            return;
        }
        FileInputStream fis = new FileInputStream(originalFile);
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        int readLength = -1;
        int bufferSize = 1024;
        byte bytes[] = new byte[bufferSize];
        while ((readLength = fis.read(bytes, 0, bufferSize)) != -1) {
            byteStream.write(bytes, 0, readLength);
        }
        byte[] in = byteStream.toByteArray();
        fis.close();
        byteStream.close();
        Image inputImage = Toolkit.getDefaultToolkit().createImage(in);
        waitForImage(inputImage);
        int imageWidth = inputImage.getWidth(null);
        if (imageWidth < 1) throw new IllegalArgumentException(""image width "" + imageWidth + "" is out of range"");
        int imageHeight = inputImage.getHeight(null);
        if (imageHeight < 1) throw new IllegalArgumentException(""image height "" + imageHeight + "" is out of range"");
        int height = -1;
        double scaleW = (double) imageWidth / (double) width;
        double scaleY = (double) imageHeight / (double) height;
        if (scaleW >= 0 && scaleY >= 0) {
            if (scaleW > scaleY) {
                height = -1;
            } else {
                width = -1;
            }
        }
        Image outputImage = inputImage.getScaledInstance(width, height, java.awt.Image.SCALE_DEFAULT);
        checkImage(outputImage);
        encode(new FileOutputStream(resizedFile), outputImage, format);
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900459,17633231,956075,"    private void openConnection() throws IOException {
        connection = (HttpURLConnection) url.openConnection(Global.getProxy());
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setRequestMethod(""POST"");
        connection.setRequestProperty(""Content-Type"", ""text/xml; charset="" + XmlRpcMessages.getString(""XmlRpcClient.Encoding""));
        if (requestProperties != null) {
            for (Iterator propertyNames = requestProperties.keySet().iterator(); propertyNames.hasNext(); ) {
                String propertyName = (String) propertyNames.next();
                connection.setRequestProperty(propertyName, (String) requestProperties.get(propertyName));
            }
        }
    }
","    public void loginSendSpace() throws Exception {
        loginsuccessful = false;
        HttpParams params = new BasicHttpParams();
        params.setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6"");
        DefaultHttpClient httpclient = new DefaultHttpClient(params);
        NULogger.getLogger().info(""Trying to log in to sendspace"");
        HttpPost httppost = new HttpPost(""http://www.sendspace.com/login.html"");
        httppost.setHeader(""Cookie"", sidcookie + "";"" + ssuicookie);
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair(""action"", ""login""));
        formparams.add(new BasicNameValuePair(""submit"", ""login""));
        formparams.add(new BasicNameValuePair(""target"", ""%252F""));
        formparams.add(new BasicNameValuePair(""action_type"", ""login""));
        formparams.add(new BasicNameValuePair(""remember"", ""1""));
        formparams.add(new BasicNameValuePair(""username"", getUsername()));
        formparams.add(new BasicNameValuePair(""password"", getPassword()));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, ""UTF-8"");
        httppost.setEntity(entity);
        HttpResponse httpresponse = httpclient.execute(httppost);
        NULogger.getLogger().info(""Getting cookies........"");
        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();
        Cookie escookie = null;
        while (it.hasNext()) {
            escookie = it.next();
            if (escookie.getName().equalsIgnoreCase(""ssal"")) {
                ssalcookie = escookie.getName() + ""="" + escookie.getValue();
                NULogger.getLogger().info(ssalcookie);
                loginsuccessful = true;
            }
        }
        if (loginsuccessful) {
            username = getUsername();
            password = getPassword();
            NULogger.getLogger().info(""SendSpace login success :)"");
        } else {
            NULogger.getLogger().info(""SendSpace login failed :("");
            loginsuccessful = false;
            username = """";
            password = """";
            JOptionPane.showMessageDialog(NeembuuUploader.getInstance(), ""<html><b>"" + HOSTNAME + ""</b> "" + TranslationProvider.get(""neembuuuploader.accounts.loginerror"") + ""</html>"", HOSTNAME, JOptionPane.WARNING_MESSAGE);
            AccountsManager.getInstance().setVisible(true);
        }
    }
",False
900460,17871427,9219797,"    public void decryptFile(String encryptedFile, String decryptedFile, String password) throws Exception {
        CipherInputStream in;
        OutputStream out;
        Cipher cipher;
        SecretKey key;
        byte[] byteBuffer;
        cipher = Cipher.getInstance(""DES"");
        key = new SecretKeySpec(password.getBytes(), ""DES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        in = new CipherInputStream(new FileInputStream(encryptedFile), cipher);
        out = new FileOutputStream(decryptedFile);
        byteBuffer = new byte[1024];
        for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) ;
        in.close();
        out.close();
    }
","    public static void encryptFile(String infile, String outfile, String keyFile) throws Exception {
        javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(""DES/ECB/PKCS5Padding"");
        cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, getKey());
        java.io.FileInputStream in = new java.io.FileInputStream(infile);
        java.io.FileOutputStream fileOut = new java.io.FileOutputStream(outfile);
        javax.crypto.CipherOutputStream out = new javax.crypto.CipherOutputStream(fileOut, cipher);
        byte[] buffer = new byte[kBufferSize];
        int length;
        while ((length = in.read(buffer)) != -1) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
",True
900461,1362134,18731109,"    public void delete(int row) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                int max = findMaxRank(stmt);
                if ((row < 1) || (row > max)) throw new IllegalArgumentException(""Row number not between 1 and "" + max);
                stmt.executeUpdate(""delete from WordClassifications where Rank = "" + row);
                for (int i = row; i < max; ++i) stmt.executeUpdate(""update WordClassifications set Rank = "" + i + "" where Rank = "" + (i + 1));
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",False
900462,11101258,22768446,"    private String getPlayerName(String id) throws UnsupportedEncodingException, IOException {
        String result = """";
        Map<String, String> players = (Map<String, String>) sc.getAttribute(""players"");
        if (players.containsKey(id)) {
            result = players.get(id);
            System.out.println(""skip name:"" + result);
        } else {
            String palyerURL = ""http://goal.2010worldcup.163.com/player/"" + id + "".html"";
            URL url = new URL(palyerURL);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
            String line = null;
            String nameFrom = ""英文名:"";
            String nameTo = ""</dd>"";
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(nameFrom) != -1) {
                    result = line.substring(line.indexOf(nameFrom) + nameFrom.length(), line.indexOf(nameTo));
                    break;
                }
            }
            reader.close();
            players.put(id, result);
        }
        return result;
    }
","    public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigestedStr = encoder.encode(digestedPassword);
            return prefixKey + encodedDigestedStr;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
",False
900463,3488916,3067994,"    public static void main(String[] args) {
        if (args.length != 2) throw new IllegalArgumentException(""Expected arguments: fileName log"");
        String fileName = args[0];
        String logFile = args[1];
        LineNumberReader reader = null;
        PrintWriter writer = null;
        try {
            Reader reader0 = new FileReader(fileName);
            reader = new LineNumberReader(reader0);
            Writer writer0 = new FileWriter(logFile);
            BufferedWriter writer1 = new BufferedWriter(writer0);
            writer = new PrintWriter(writer1);
            String line = reader.readLine();
            while (line != null) {
                line = line.trim();
                if (line.length() >= 81) {
                    writer.println(""Analyzing Sudoku #"" + reader.getLineNumber());
                    System.out.println(""Analyzing Sudoku #"" + reader.getLineNumber());
                    Grid grid = new Grid();
                    for (int i = 0; i < 81; i++) {
                        char ch = line.charAt(i);
                        if (ch >= '1' && ch <= '9') {
                            int value = (ch - '0');
                            grid.setCellValue(i % 9, i / 9, value);
                        }
                    }
                    Solver solver = new Solver(grid);
                    solver.rebuildPotentialValues();
                    try {
                        Map<Rule, Integer> rules = solver.solve(null);
                        Map<String, Integer> ruleNames = solver.toNamedList(rules);
                        double difficulty = 0;
                        String hardestRule = """";
                        for (Rule rule : rules.keySet()) {
                            if (rule.getDifficulty() > difficulty) {
                                difficulty = rule.getDifficulty();
                                hardestRule = rule.getName();
                            }
                        }
                        for (String rule : ruleNames.keySet()) {
                            int count = ruleNames.get(rule);
                            writer.println(Integer.toString(count) + "" "" + rule);
                            System.out.println(Integer.toString(count) + "" "" + rule);
                        }
                        writer.println(""Hardest technique: "" + hardestRule);
                        System.out.println(""Hardest technique: "" + hardestRule);
                        writer.println(""Difficulty: "" + difficulty);
                        System.out.println(""Difficulty: "" + difficulty);
                    } catch (UnsupportedOperationException ex) {
                        writer.println(""Failed !"");
                        System.out.println(""Failed !"");
                    }
                    writer.println();
                    System.out.println();
                    writer.flush();
                } else System.out.println(""Skipping incomplete line: "" + line);
                line = reader.readLine();
            }
            writer.close();
            reader.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (reader != null) reader.close();
                if (writer != null) writer.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        System.out.print(""Finished."");
    }
","    private String hashMD5(String strToHash) throws Exception {
        try {
            byte[] bHash = new byte[strToHash.length() * 2];
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(strToHash.getBytes(""UTF-16LE""));
            bHash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (byte element : bHash) {
                String strTemp = Integer.toHexString(element);
                hexString.append(strTemp.replaceAll(""f"", """"));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException duu) {
            throw new Exception(""NoSuchAlgorithmException: "" + duu.getMessage());
        }
    }
",False
900464,441377,2911006,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    protected String encrypt(String text) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(text.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            String hash = (new BASE64Encoder()).encode(raw);
            return hash;
        } catch (Exception ex) {
            throw new TiiraException(ex);
        }
    }
",False
900465,14924022,22626443,"    private boolean saveDocumentXml(String repository, String tempRepo) {
        boolean result = true;
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String expression = ""documents/document"";
            InputSource insource = new InputSource(new FileInputStream(tempRepo + File.separator + AppConstants.DMS_XML));
            NodeList nodeList = (NodeList) xpath.evaluate(expression, insource, XPathConstants.NODESET);
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                System.out.println(node.getNodeName());
                DocumentModel document = new DocumentModel();
                NodeList childs = node.getChildNodes();
                for (int j = 0; j < childs.getLength(); j++) {
                    Node child = childs.item(j);
                    if (child.getNodeType() == Node.ELEMENT_NODE) {
                        if (child.getNodeName() != null && child.getFirstChild() != null && child.getFirstChild().getNodeValue() != null) {
                            System.out.println(child.getNodeName() + ""::"" + child.getFirstChild().getNodeValue());
                        }
                        if (Document.FLD_ID.equals(child.getNodeName())) {
                            if (child.getFirstChild() != null) {
                                String szId = child.getFirstChild().getNodeValue();
                                if (szId != null && szId.length() > 0) {
                                    try {
                                        document.setId(new Long(szId));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } else if (document.FLD_NAME.equals(child.getNodeName())) {
                            document.setName(child.getFirstChild().getNodeValue());
                            document.setTitle(document.getName());
                            document.setDescr(document.getName());
                            document.setExt(getExtension(document.getName()));
                        } else if (document.FLD_LOCATION.equals(child.getNodeName())) {
                            document.setLocation(child.getFirstChild().getNodeValue());
                        } else if (document.FLD_OWNER.equals(child.getNodeName())) {
                            Long id = new Long(child.getFirstChild().getNodeValue());
                            User user = new UserModel();
                            user.setId(id);
                            user = (User) userService.find(user);
                            if (user != null && user.getId() != null) {
                                document.setOwner(user);
                            }
                        }
                    }
                }
                boolean isSave = docService.save(document);
                if (isSave) {
                    String repo = preference.getRepository();
                    Calendar calendar = Calendar.getInstance();
                    StringBuffer sbRepo = new StringBuffer(repo);
                    sbRepo.append(File.separator);
                    StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));
                    sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));
                    File fileFolder = new File(sbRepo.append(sbFolder).toString());
                    if (!fileFolder.exists()) {
                        fileFolder.mkdirs();
                    }
                    FileChannel fcSource = null, fcDest = null;
                    try {
                        StringBuffer sbFile = new StringBuffer(fileFolder.getAbsolutePath());
                        StringBuffer fname = new StringBuffer(document.getId().toString());
                        fname.append(""."").append(document.getExt());
                        sbFile.append(File.separator).append(fname);
                        fcSource = new FileInputStream(tempRepo + File.separator + document.getName()).getChannel();
                        fcDest = new FileOutputStream(sbFile.toString()).getChannel();
                        fcDest.transferFrom(fcSource, 0, fcSource.size());
                        document.setLocation(sbFolder.toString());
                        document.setSize(fcSource.size());
                        log.info(""Batch upload file "" + document.getName() + "" into ["" + document.getLocation() + ""] as "" + document.getName() + ""."" + document.getExt());
                        folder.setId(DEFAULT_FOLDER);
                        folder = (Folder) folderService.find(folder);
                        if (folder != null && folder.getId() != null) {
                            document.setFolder(folder);
                        }
                        workspace.setId(DEFAULT_WORKSPACE);
                        workspace = (Workspace) workspaceService.find(workspace);
                        if (workspace != null && workspace.getId() != null) {
                            document.setWorkspace(workspace);
                        }
                        user.setId(DEFAULT_USER);
                        user = (User) userService.find(user);
                        if (user != null && user.getId() != null) {
                            document.setCrtby(user.getId());
                        }
                        document.setCrtdate(new Date());
                        document = (DocumentModel) docService.resetDuplicateDocName(document);
                        docService.save(document);
                        DocumentIndexer.indexDocument(preference, document);
                    } catch (FileNotFoundException notFoundEx) {
                        log.error(""saveFile file not found: "" + document.getName(), notFoundEx);
                    } catch (IOException ioEx) {
                        log.error(""saveFile IOException: "" + document.getName(), ioEx);
                    } finally {
                        try {
                            if (fcSource != null) {
                                fcSource.close();
                            }
                            if (fcDest != null) {
                                fcDest.close();
                            }
                        } catch (Exception e) {
                            log.error(e.getMessage(), e);
                        }
                    }
                }
            }
        } catch (Exception e) {
            result = false;
            e.printStackTrace();
        }
        return result;
    }
","    public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) {
        FileOutputStream arcFile = null;
        JarOutputStream jout = null;
        DirectoryScanner ds = null;
        ds = new DirectoryScanner();
        ds.setCaseSensitive(true);
        ds.setBasedir(in);
        ds.scan();
        ds.setCaseSensitive(true);
        String[] names = ds.getIncludedFiles();
        ArrayList exName = new ArrayList();
        if (names == null || names.length < 1) return null;
        File tempArc = new File(tempDir, outArc.substring(0, outArc.length()));
        try {
            Manifest mf = null;
            List v = new ArrayList();
            for (int i = 0; i < names.length; i++) {
                if (names[i].toUpperCase().indexOf(""MANIFEST.MF"") > -1) {
                    FileInputStream fis = new FileInputStream(in.getAbsolutePath() + ""/"" + names[i].replace('\\', '/'));
                    mf = new Manifest(fis);
                } else v.add(names[i]);
            }
            String[] toJar = new String[v.size()];
            v.toArray(toJar);
            tempArc.createNewFile();
            arcFile = new FileOutputStream(tempArc);
            if (mf == null) jout = new JarOutputStream(arcFile); else jout = new JarOutputStream(arcFile, mf);
            byte[] buffer = new byte[1024];
            for (int i = 0; i < toJar.length; i++) {
                if (conf != null) {
                    if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) {
                        exName.add(toJar[i]);
                        continue;
                    }
                }
                String currentPath = in.getAbsolutePath() + ""/"" + toJar[i];
                String entryName = toJar[i].replace('\\', '/');
                JarEntry currentEntry = new JarEntry(entryName);
                jout.putNextEntry(currentEntry);
                FileInputStream fis = new FileInputStream(currentPath);
                int len;
                while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len);
                fis.close();
                jout.closeEntry();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            try {
                jout.close();
                arcFile.close();
            } catch (IOException e1) {
                throw new RuntimeException(e1);
            }
        }
        return tempArc;
    }
",True
900466,4013485,1042173,"    void copyFileOnPeer(String path, RServerInfo peerserver, boolean allowoverwrite) throws IOException {
        RFile file = new RFile(path);
        OutputStream out = null;
        FileInputStream in = null;
        try {
            in = fileManager.openFileRead(path);
            out = localClient.openWrite(file, false, WriteMode.TRANSACTED, 1, peerserver, !allowoverwrite);
            IOUtils.copyLarge(in, out);
            out.close();
            out = null;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Throwable t) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (Throwable t) {
                }
            }
        }
    }
","    @Test
    public void config() throws IOException {
        Reader reader = new FileReader(new File(""src/test/resources/test.yml""));
        Writer writer = new FileWriter(new File(""src/site/apt/config.apt""));
        writer.write(""------\n"");
        writer.write(FileUtils.readFully(reader));
        writer.flush();
        writer.close();
    }
",True
900467,17267601,10118207,"    public void setBckImg(String newPath) {
        try {
            File inputFile = new File(getPath());
            File outputFile = new File(newPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(outputFile);
                } catch (FileNotFoundException ex1) {
                    ex1.printStackTrace();
                    JOptionPane.showMessageDialog(null, ex1.getMessage().substring(0, Math.min(ex1.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
                }
                int c;
                if (out != null) {
                    while ((c = in.read()) != -1) out.write(c);
                    out.close();
                }
                in.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
            JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
        }
        setPath(newPath);
        bckImg = new ImageIcon(getPath());
    }
","    public static final boolean zipUpdate(String zipfile, String name, String oldname, byte[] contents, boolean delete) {
        try {
            File temp = File.createTempFile(""atf"", "".zip"");
            InputStream in = new BufferedInputStream(new FileInputStream(zipfile));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(temp));
            ZipInputStream zin = new ZipInputStream(in);
            ZipOutputStream zout = new ZipOutputStream(os);
            ZipEntry e;
            ZipEntry e2;
            byte buffer[] = new byte[TEMP_FILE_BUFFER_SIZE];
            int bytesRead;
            boolean found = false;
            boolean rename = false;
            String oname = name;
            if (oldname != null) {
                name = oldname;
                rename = true;
            }
            while ((e = zin.getNextEntry()) != null) {
                if (!e.isDirectory()) {
                    String ename = e.getName();
                    if (delete && ename.equals(name)) continue;
                    e2 = new ZipEntry(rename ? oname : ename);
                    zout.putNextEntry(e2);
                    if (ename.equals(name)) {
                        found = true;
                        zout.write(contents);
                    } else {
                        while ((bytesRead = zin.read(buffer)) != -1) zout.write(buffer, 0, bytesRead);
                    }
                    zout.closeEntry();
                }
            }
            if (!found && !delete) {
                e = new ZipEntry(name);
                zout.putNextEntry(e);
                zout.write(contents);
                zout.closeEntry();
            }
            zin.close();
            zout.close();
            File fp = new File(zipfile);
            fp.delete();
            MLUtil.copyFile(temp, fp);
            temp.delete();
            return (true);
        } catch (FileNotFoundException e) {
            MLUtil.runtimeError(e, ""updateZip "" + zipfile + "" "" + name);
        } catch (IOException e) {
            MLUtil.runtimeError(e, ""updateZip "" + zipfile + "" "" + name);
        }
        return (false);
    }
",True
900468,7895612,14370985,"    public final String encrypt(String input) throws Exception {
        try {
            MessageDigest messageDigest = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            messageDigest.reset();
            messageDigest.update(input.getBytes());
            String output = convert(messageDigest.digest());
            return output;
        } catch (Throwable ex) {
            if (logger.isDebugEnabled()) {
                logger.debug(""Fatal Error while digesting input string"", ex);
            }
        }
        return input;
    }
","    public static String encrypt(String password) {
        String sign = password;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(sign.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) hexString.append(""0"" + Integer.toHexString((0xFF & hash[i]))); else hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
            sign = hexString.toString();
        } catch (Exception nsae) {
            nsae.printStackTrace();
        }
        return sign;
    }
",True
900469,8708601,21370186,"    public void testReadNormal() throws Exception {
        archiveFileManager.executeWith(new TemporaryFileExecutor() {

            public void execute(File temporaryFile) throws Exception {
                ZipArchive archive = new ZipArchive(temporaryFile.getPath());
                InputStream input = archive.getInputFrom(ARCHIVE_FILE_1);
                if (input != null) {
                    ByteArrayOutputStream output = new ByteArrayOutputStream();
                    IOUtils.copyAndClose(input, output);
                    assertEquals(ARCHIVE_FILE_1 + "" contents not correct"", ARCHIVE_FILE_1_CONTENT, output.toString());
                } else {
                    fail(""cannot open "" + ARCHIVE_FILE_1);
                }
            }
        });
    }
","    public static void replaceAll(File file, String substitute, String substituteReplacement) throws IOException {
        log.debug(""Replace "" + substitute + "" by "" + substituteReplacement);
        Pattern pattern = Pattern.compile(substitute);
        FileInputStream fis = new FileInputStream(file);
        FileChannel fc = fis.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        Matcher matcher = pattern.matcher(cb);
        String outString = matcher.replaceAll(substituteReplacement);
        log.debug(outString);
        FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());
        PrintStream ps = new PrintStream(fos);
        ps.print(outString);
        ps.close();
        fos.close();
    }
",True
900470,11219274,13883878,"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name + ""/"");
                zip.putNextEntry(zipEntry);
                zip.closeEntry();
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(updateFilename(name));
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","        PathElement(String path) throws MaxError {
            this.path = path;
            if (path.startsWith(""http:"")) {
                try {
                    url = new URL(path);
                    HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    con.setRequestMethod(""HEAD"");
                    valid = (con.getResponseCode() == HttpURLConnection.HTTP_OK);
                } catch (Exception e) {
                    valid = false;
                }
            } else {
                if (path.startsWith(""jmax:"")) file = new File(Registry.resolveJMaxURI(path)); else file = new File(path);
                valid = file.exists();
            }
        }
",False
900471,4787102,22135198,"    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        OutputStream output = getOutputStream();
        if (cachedContent != null) {
            output.write(cachedContent);
        } else {
            FileInputStream input = new FileInputStream(dfosFile);
            IOUtils.copy(input, output);
            dfosFile.delete();
            dfosFile = null;
        }
        output.close();
        cachedContent = null;
    }
","    public void testCodingBeyondContentLimitFromFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.write(""stuff;"");
        wrtout.write(""more stuff; and a lot more stuff"");
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",True
900472,3762872,10977091,"    public String getHash(String str) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] toChapter1Digest = md.digest();
            return Keystore.hexEncode(toChapter1Digest);
        } catch (Exception e) {
            logger.error(""Error in creating DN hash: "" + e.getMessage());
            return null;
        }
    }
","    public String md5(String password) {
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
        }
        m.update(password.getBytes(), 0, password.length());
        return new BigInteger(1, m.digest()).toString(16);
    }
",True
900473,16001374,2103971,"    static void copyFile(File file, File destDir) {
        File destFile = new File(destDir, file.getName());
        if (destFile.exists() && (!destFile.canWrite())) {
            throw new SyncException(""Cannot overwrite "" + destFile + "" because "" + ""it is read-only"");
        }
        try {
            FileInputStream in = new FileInputStream(file);
            try {
                FileOutputStream out = new FileOutputStream(destFile);
                try {
                    byte[] buffer = new byte[BUFFER_SIZE];
                    int read;
                    while ((read = in.read(buffer)) != -1) {
                        out.write(buffer, 0, read);
                    }
                } finally {
                    out.close();
                }
            } finally {
                in.close();
            }
        } catch (IOException e) {
            throw new SyncException(""I/O error copying "" + file + "" to "" + destDir + "" (message: "" + e.getMessage() + "")"", e);
        }
        if (!destFile.setLastModified(file.lastModified())) {
            throw new SyncException(""Could not set last modified timestamp "" + ""of "" + destFile);
        }
    }
","    @Override
    protected void writeFile() {
        super.writeFile();
        try {
            String tagListFilePath = file.toURI().toASCIIString();
            tagListFilePath = tagListFilePath.substring(0, tagListFilePath.lastIndexOf(FileManager.GLIPS_VIEW_EXTENSION)) + FileManager.TAG_LIST_FILE_EXTENSION;
            File tagListFile = new File(new URI(tagListFilePath));
            StringBuffer buffer = new StringBuffer("""");
            for (String tagName : tags) {
                buffer.append(tagName + ""\n"");
            }
            ByteBuffer byteBuffer = ByteBuffer.wrap(buffer.toString().getBytes(""UTF-8""));
            FileOutputStream out = new FileOutputStream(tagListFile);
            FileChannel channel = out.getChannel();
            channel.write(byteBuffer);
            channel.close();
        } catch (Exception ex) {
        }
        try {
            String parentPath = file.getParentFile().toURI().toASCIIString();
            if (!parentPath.endsWith(""/"")) {
                parentPath += ""/"";
            }
            File srcFile = null, destFile = null;
            byte[] tab = new byte[1000];
            int nb = 0;
            InputStream in = null;
            OutputStream out = null;
            for (String destinationName : dataBaseFiles.keySet()) {
                srcFile = dataBaseFiles.get(destinationName);
                if (srcFile != null) {
                    destFile = new File(new URI(parentPath + destinationName));
                    in = new BufferedInputStream(new FileInputStream(srcFile));
                    out = new BufferedOutputStream(new FileOutputStream(destFile));
                    while (in.available() > 0) {
                        nb = in.read(tab);
                        if (nb > 0) {
                            out.write(tab, 0, nb);
                        }
                    }
                    in.close();
                    out.flush();
                    out.close();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",True
900474,12595519,1718589,"    @SuppressWarnings(""unchecked"")
    public static void main(String[] args) {
        System.out.println(""Starting encoding test...."");
        Properties p = new Properties();
        try {
            InputStream pStream = ClassLoader.getSystemResourceAsStream(""sample_weather.properties"");
            p.load(pStream);
        } catch (Exception e) {
            System.err.println(""Could not load properties file."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        if (WeatherUpdater.DEBUG) {
            System.out.println(""hostname: "" + p.getProperty(""weather.hostname""));
        }
        if (WeatherUpdater.DEBUG) {
            System.out.println(""database: "" + p.getProperty(""weather.database""));
        }
        if (WeatherUpdater.DEBUG) {
            System.out.println(""username: "" + p.getProperty(""weather.username""));
        }
        if (WeatherUpdater.DEBUG) {
            System.out.println(""password: "" + p.getProperty(""weather.password""));
        }
        SqlAccount sqlAccount = new SqlAccount(p.getProperty(""weather.hostname""), p.getProperty(""weather.database""), p.getProperty(""weather.username""), p.getProperty(""weather.password""));
        DatabaseInterface dbi = null;
        try {
            dbi = new DatabaseInterface(sqlAccount);
        } catch (Exception e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Established connection to database."");
        String query = ""SELECT * FROM Current_Weather WHERE ZipCode = '99702'"";
        ResultTable results;
        System.out.println(""Executing query: "" + query);
        try {
            results = dbi.executeQuery(query);
        } catch (Exception e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Got results from query."");
        System.out.println(""Converted results into the following table:"");
        System.out.println(results);
        System.out.println();
        Class<? extends ResultEncoder> encoder_class;
        Class<? extends ResultDecoder> decoder_class;
        try {
            encoder_class = (Class<? extends ResultEncoder>) Class.forName(p.getProperty(""mysms.coding.resultEncoder""));
            decoder_class = (Class<? extends ResultDecoder>) Class.forName(p.getProperty(""mysms.coding.resultDecoder""));
        } catch (Exception e) {
            System.err.println(""Could not find specified encoder: "" + p.getProperty(""result.encoder""));
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Found class of encoder: "" + encoder_class);
        System.out.println(""Found class of decoder: "" + decoder_class);
        ResultEncoder encoder;
        ResultDecoder decoder;
        try {
            encoder = encoder_class.newInstance();
            if (encoder_class.equals(decoder_class) && decoder_class.isInstance(encoder)) {
                decoder = (ResultDecoder) encoder;
            } else {
                decoder = decoder_class.newInstance();
            }
        } catch (Exception e) {
            System.err.println(""Could not create instances of encoder and decoder."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Created instances of encoder and decoder."");
        if (decoder.equals(encoder)) {
            System.out.println(""Decoder and encoder are same object."");
        }
        ByteBuffer buffer;
        try {
            buffer = encoder.encode(null, results);
        } catch (Exception e) {
            System.err.println(""Could not encode results."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Encoded results to ByteBuffer with size: "" + buffer.capacity());
        File temp;
        try {
            temp = File.createTempFile(""encoding_test"", "".results"");
            temp.deleteOnExit();
            FileChannel out = new FileOutputStream(temp).getChannel();
            out.write(buffer);
            out.close();
        } catch (Exception e) {
            System.err.println(""Could not write buffer to file."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Wrote buffer to file: \"""" + temp.getName() + ""\"" with length: "" + temp.length());
        ByteBuffer re_buffer;
        try {
            FileInputStream in = new FileInputStream(temp.getAbsolutePath());
            byte[] temp_buffer = new byte[(int) temp.length()];
            int totalRead = 0;
            int numRead = 0;
            while (totalRead < temp_buffer.length) {
                numRead = in.read(temp_buffer, totalRead, temp_buffer.length - totalRead);
                if (numRead < 0) {
                    break;
                } else {
                    totalRead += numRead;
                }
            }
            re_buffer = ByteBuffer.wrap(temp_buffer);
            in.close();
        } catch (Exception e) {
            System.err.println(""Could not read from temporary file into buffer."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Read file back into buffer with length: "" + re_buffer.capacity());
        ResultTable re_results;
        try {
            re_results = decoder.decode(null, re_buffer);
        } catch (Exception e) {
            System.err.println(""Could not decode buffer into a ResultTable."");
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }
        System.out.println(""Decoded buffer back into the following table:"");
        System.out.println(re_results);
        System.out.println();
        System.out.println(""... encoding test complete."");
    }
","    @Override
    public ImageData getImageData(URL url) {
        InputStream in = null;
        try {
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""user-agent"", ""Tahiti/Alpha5x"");
            conn.setRequestProperty(""agent-system"", ""aglets"");
            conn.setAllowUserInteraction(true);
            conn.connect();
            in = conn.getInputStream();
            String type = conn.getContentType();
            int len = conn.getContentLength();
            if (len < 0) {
                len = in.available();
            }
            byte[] b = new byte[len];
            int off = 0;
            int n = 0;
            while (n < len) {
                int count = in.read(b, off + n, len - n);
                if (count < 0) {
                    throw new java.io.EOFException();
                }
                n += count;
            }
            in.close();
            return new AgletImageData(url, b, type);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
",False
900475,210006,20209162,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public java.io.File gzip(java.io.File file) throws Exception {
        java.io.File tmp = null;
        InputStream is = null;
        OutputStream os = null;
        try {
            tmp = java.io.File.createTempFile(file.getName(), "".gz"");
            tmp.deleteOnExit();
            is = new BufferedInputStream(new FileInputStream(file));
            os = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(tmp)));
            byte[] buf = new byte[4096];
            int nread = -1;
            while ((nread = is.read(buf)) != -1) {
                os.write(buf, 0, nread);
            }
            os.flush();
        } finally {
            os.close();
            is.close();
        }
        return tmp;
    }
",True
900476,16055802,4681906,"    public static void main(String[] args) throws Exception {
        DES des = new DES();
        StreamBlockReader reader = new StreamBlockReader(new FileInputStream(""D:\\test1.txt""));
        StreamBlockWriter writer = new StreamBlockWriter(new FileOutputStream(""D:\\test2.txt""));
        SingleKey key = new SingleKey(new Block(64), """");
        key = new SingleKey(new Block(""1111111100000000111111110000000011111111000000001111111100000000""), """");
        Mode mode = new ECBDESMode(des);
        des.decrypt(reader, writer, key, mode);
    }
","    public void launch(String xmlControl, String xmlDoc, long docId) {
        AgentLauncher l;
        Environment env;
        Properties prop;
        Resource res;
        String token;
        String deflt;
        String answ;
        String key;
        String entry;
        ShipService service;
        de.fhg.igd.util.URL url;
        java.net.URL wsurl;
        NodeList flow;
        InputSource xmlcontrolstream;
        TreeMap results;
        synchronized (lock_) {
            if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) {
                System.out.println(""---- Need control AND XML document! ----"");
                return;
            }
            Vector v_delegations_host = new Vector();
            Vector v_delegations_url = new Vector();
            Vector v_delegations_method = new Vector();
            xmlcontrolstream = new InputSource(new StringReader(xmlControl));
            NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE);
            for (int i = 0; i < destinations.getLength(); i++) {
                if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) {
                    System.out.println(destinations.item(i).getTextContent());
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST);
                    v_delegations_host.add(entry);
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL);
                    v_delegations_url.add(entry);
                    entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD);
                    v_delegations_method.add(entry);
                }
            }
            token = """";
            results = new TreeMap();
            for (int i = 0; i < TOKEN_LENGTH; i++) {
                token = token + (char) (Math.random() * 26 + 65);
            }
            results.put(token, null);
            prop = AgentStructure.defaults();
            prop.setProperty(AgentStructure.PROP_AGENT_CLASS, AGENT_);
            prop.setProperty(AgentBehaviour.CTX_DOCID, String.valueOf(docId));
            prop.setProperty(AgentBehaviour.CTX_XML, xmlDoc);
            prop.setProperty(""token"", token);
            deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE);
            prop.setProperty(AgentStructure.PROP_AGENT_EXCLUDE, deflt + "":"" + ADDITIONAL_EXCLUDES);
            service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS));
            for (int i = 0; i < v_delegations_host.size(); i++) {
                System.out.println(""\n-----SCANNING DELEGATES-----"");
                System.out.println(""\n-----DELEGATE "" + i + ""-----"");
                System.out.println(""-----HOST: "" + i + "": "" + (String) v_delegations_host.elementAt(i));
                System.out.println(""-----URL: "" + i + "": "" + (String) v_delegations_url.elementAt(i));
                System.out.println(""-----METHOD: "" + i + "": "" + (String) v_delegations_method.elementAt(i));
                try {
                    url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i));
                    boolean alive = service.isAlive(url);
                    System.out.println(""-----ALIVE: "" + alive);
                    if (alive) {
                        wsurl = new java.net.URL((String) v_delegations_url.elementAt(i));
                        try {
                            wsurl.openStream();
                            System.out.println(""-----WEBSERVICE: ON"");
                            if (!prop.containsKey(0 + ""."" + AgentBehaviour.XML_URL)) {
                                System.out.println(""-----MIGRATION: First online host found. I will migrate here:)!"");
                                prop.setProperty(0 + ""."" + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i));
                                prop.setProperty(0 + ""."" + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i));
                                prop.setProperty(0 + ""."" + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i));
                            } else {
                                System.out.println(""-----MIGRATION: I will not migrate here:(!"");
                            }
                        } catch (IOException ex) {
                            System.out.println(""-----WEBSERVICE: Could not connect to the webservice!"");
                            System.out.println(""-----MIGRATION: WEBSERVICE NOT FOUND! I will not migrate here:(!"");
                        }
                    }
                } catch (ShipException she) {
                    System.out.println(""-----ALIVE: false"");
                    System.out.println(""-----MIGRATION: HOST NOT FOUND! I will not migrate here:(!"");
                } catch (SecurityException see) {
                    System.out.println(""-----EXCEPTION: Access connection to remote SHIP service fails! "" + ""No proper ShipPermission permission to invoke lookups! "" + ""Ignoring this host...."");
                } catch (MalformedURLException murle) {
                    System.out.println(""-----EXCEPTION: The host URL is not valid! Ignoring this host...."");
                }
            }
            res = new MemoryResource();
            env = Environment.getEnvironment();
            key = WhatIs.stringValue(AgentLauncher.WHATIS);
            l = (AgentLauncher) env.lookup(key);
            if (l == null) {
                System.out.println(""Can't find the agent launcher"");
                return;
            }
            try {
                l.launchAgent(res, prop);
            } catch (IllegalAgentException ex) {
                System.out.println(ex);
            } catch (GeneralSecurityException ex) {
                System.out.println(ex);
            } catch (IOException ex) {
                System.out.println(ex);
            }
            syncmap_.put(token, results);
            System.out.println(""----- TOKEN = "" + token + ""------"");
        }
        try {
            synchronized (token) {
                token.wait(TIMEOUT);
                Map m_results = (Map) syncmap_.get(token);
                Collection c_results = m_results.values();
                String[] sa_results = (String[]) c_results.toArray(new String[0]);
                answ = """";
                for (int j = 0; j < sa_results.length; j++) {
                    answ = answ + sa_results[j];
                }
                syncmap_.remove(token);
                System.out.println(""----- "" + answ + "" -----"");
                callbackWS(xmlControl, answ, docId);
            }
        } catch (InterruptedException ex) {
            System.out.println(ex);
        }
    }
",False
900477,11397480,288978,"    public void render(Map map, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream(OUTPUT_BYTE_ARRAY_INITIAL_SIZE);
        File file = (File) map.get(""targetFile"");
        IOUtils.copy(new FileInputStream(file), baos);
        httpServletResponse.setContentType(getContentType());
        httpServletResponse.setContentLength(baos.size());
        httpServletResponse.addHeader(""Content-disposition"", ""attachment; filename="" + file.getName());
        ServletOutputStream out = httpServletResponse.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900478,1953115,13325917,"    protected int doWork() {
        SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT));
        reader.getFileHeader().setSortOrder(SORT_ORDER);
        SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT);
        Iterator<SAMRecord> iterator = reader.iterator();
        while (iterator.hasNext()) writer.addAlignment(iterator.next());
        reader.close();
        writer.close();
        return 0;
    }
","    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getCanonicalPath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getCanonicalPath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getCanonicalPath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFile.getCanonicalPath());
            throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[1024 * 1024];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
            if (fromFile.isHidden()) {
            }
            toFile.setLastModified(fromFile.lastModified());
            toFile.setExecutable(fromFile.canExecute());
            toFile.setReadable(fromFile.canRead());
            toFile.setWritable(toFile.canWrite());
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",True
900479,23250845,6317842,"    private void unzipResource(final String resourceName, final File targetDirectory) throws IOException {
        assertTrue(resourceName.startsWith(""/""));
        final URL resource = this.getClass().getResource(resourceName);
        assertNotNull(""Expected '"" + resourceName + ""' not found."", resource);
        assertTrue(targetDirectory.isAbsolute());
        FileUtils.deleteDirectory(targetDirectory);
        assertTrue(targetDirectory.mkdirs());
        ZipInputStream in = null;
        boolean suppressExceptionOnClose = true;
        try {
            in = new ZipInputStream(resource.openStream());
            ZipEntry e;
            while ((e = in.getNextEntry()) != null) {
                if (e.isDirectory()) {
                    continue;
                }
                final File dest = new File(targetDirectory, e.getName());
                assertTrue(dest.isAbsolute());
                OutputStream out = null;
                try {
                    out = FileUtils.openOutputStream(dest);
                    IOUtils.copy(in, out);
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (out != null) {
                            out.close();
                        }
                        suppressExceptionOnClose = true;
                    } catch (final IOException ex) {
                        if (!suppressExceptionOnClose) {
                            throw ex;
                        }
                    }
                }
                in.closeEntry();
            }
            suppressExceptionOnClose = false;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (final IOException e) {
                if (!suppressExceptionOnClose) {
                    throw e;
                }
            }
        }
    }
","    public static String MD5(String str, String encoding) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        messageDigest.reset();
        try {
            messageDigest.update(str.getBytes(encoding));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
",False
900480,13121131,20761702,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    private File newFile(File oldFile) throws IOException {
        int counter = 0;
        File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName());
        while (nFile.exists()) {
            nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + ""_"" + counter);
        }
        IOUtils.copyFile(oldFile, nFile);
        return nFile;
    }
",True
900481,7905116,21561833,"	protected List<? extends SearchResult> searchVideo(String words, int number, int offset, CancelMonitor cancelMonitor) {
		List<VideoSearchResult> resultsList = new ArrayList<>();
		try {
			// set up the HTTP request factory
			HttpTransport transport = new NetHttpTransport();
			HttpRequestFactory factory = transport.createRequestFactory(new HttpRequestInitializer() {

				@Override
				public void initialize(HttpRequest request) {
					// set the parser
					JsonCParser parser = new JsonCParser();
					parser.jsonFactory = JSON_FACTORY;
					request.addParser(parser);
					// set up the Google headers
					GoogleHeaders headers = new GoogleHeaders();
					headers.setApplicationName(""OGLExplorer/1.0"");
					headers.gdataVersion = ""2"";
					request.headers = headers;
				}
			});
			// build the YouTube URL
			YouTubeUrl url = new YouTubeUrl(""https://gdata.youtube.com/feeds/api/videos"");
			url.maxResults = number;
			url.words = words;
			url.startIndex = offset + 1;
			// build
			HttpRequest request = factory.buildGetRequest(url);
			// execute
			HttpResponse response = request.execute();
			VideoFeed feed = response.parseAs(VideoFeed.class);
			if (feed.items == null) {
				return null;
			}
			// browse result and convert them to the local generic object model
			for (int i = 0; i < feed.items.size() && !cancelMonitor.isCanceled(); i++) {
				Video result = feed.items.get(i);
				VideoSearchResult modelResult = new VideoSearchResult(offset + i + 1);
				modelResult.setTitle(result.title);
				modelResult.setDescription(result.description);
				modelResult.setThumbnailURL(new URL(result.thumbnail.lowThumbnailURL));
				modelResult.setPath(result.player.defaultUrl);
				resultsList.add(modelResult);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (cancelMonitor.isCanceled()) {
			return null;
		}
		return resultsList;
	}
","    private static void copyFile(String src, String dest) throws IOException {
        File destFile = new File(dest);
        if (destFile.exists()) {
            destFile.delete();
        }
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",False
900482,4579115,18142979,"    public void copy(String original, String copy) throws SQLException {
        try {
            OutputStream out = openFileOutputStream(copy, false);
            InputStream in = openFileInputStream(original);
            IOUtils.copyAndClose(in, out);
        } catch (IOException e) {
            throw Message.convertIOException(e, ""Can not copy "" + original + "" to "" + copy);
        }
    }
","    private String copyTutorial() throws IOException {
        File inputFile = new File(getFilenameForOriginalTutorial());
        File outputFile = new File(getFilenameForCopiedTutorial());
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        return getFilenameForCopiedTutorial();
    }
",True
900483,12039036,8352957,"    public static ArrayList<Credential> importCredentials(String urlString) {
        ArrayList<Credential> results = new ArrayList<Credential>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""-----END PGP SIGNATURE-----"")) {
                    Credential credential = ProfileParser.parseCredential(buff.toString(), true);
                    results.add(credential);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
            System.err.println(e);
        }
        return results;
    }
","    void IconmenuItem6_actionPerformed(ActionEvent e) {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setDefaultPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getDefaultPath().lastIndexOf(separator);
            String imgName = getDefaultPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getDefaultPath());
                File outputFile = new File(newPath);
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), """", JOptionPane.ERROR_MESSAGE);
            }
            setDefaultPath(newPath);
            createDefaultImage();
        }
    }
",False
900484,17267601,12821749,"    public void setBckImg(String newPath) {
        try {
            File inputFile = new File(getPath());
            File outputFile = new File(newPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(outputFile);
                } catch (FileNotFoundException ex1) {
                    ex1.printStackTrace();
                    JOptionPane.showMessageDialog(null, ex1.getMessage().substring(0, Math.min(ex1.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
                }
                int c;
                if (out != null) {
                    while ((c = in.read()) != -1) out.write(c);
                    out.close();
                }
                in.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
            JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
        }
        setPath(newPath);
        bckImg = new ImageIcon(getPath());
    }
","    public static void fastBackup(File file) {
        FileChannel in = null;
        FileChannel out = null;
        FileInputStream fin = null;
        FileOutputStream fout = null;
        try {
            in = (fin = new FileInputStream(file)).getChannel();
            out = (fout = new FileOutputStream(file.getAbsolutePath() + "".bak"")).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (IOException e) {
            Logging.getErrorLog().reportError(""Fast backup failure ("" + file.getAbsolutePath() + ""): "" + e.getMessage());
        } finally {
            if (fin != null) {
                try {
                    fin.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException(""Failed to close file input stream"", e);
                }
            }
            if (fout != null) {
                try {
                    fout.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException(""Failed to close file output stream"", e);
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException(""Failed to close file channel"", e);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    Logging.getErrorLog().reportException(""Failed to close file channel"", e);
                }
            }
        }
    }
",True
900485,16658637,346058,"    private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException {
        StringBuilder contents = new StringBuilder();
        StringOutputStream s = new StringOutputStream();
        IOUtils.copy(SeleniumConfiguration.class.getResourceAsStream(""default-user-extensions.js""), s);
        contents.append(s.toString());
        File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false);
        if (providedUserExtensions != null) {
            contents.append(FileUtils.readFileToString(providedUserExtensions, null));
        }
        seleniumUserExtensions = new File(seleniumConfiguration.getDirectoryConfiguration().getInput(), ""user-extensions.js"");
        FileUtils.forceMkdir(seleniumUserExtensions.getParentFile());
        FileUtils.writeStringToFile(seleniumUserExtensions, contents.toString(), null);
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900486,10941155,14652853,"    private void detachFile(File file, Block b) throws IOException {
        File tmpFile = volume.createDetachFile(b, file.getName());
        try {
            IOUtils.copyBytes(new FileInputStream(file), new FileOutputStream(tmpFile), 16 * 1024, true);
            if (file.length() != tmpFile.length()) {
                throw new IOException(""Copy of file "" + file + "" size "" + file.length() + "" into file "" + tmpFile + "" resulted in a size of "" + tmpFile.length());
            }
            FileUtil.replaceFile(tmpFile, file);
        } catch (IOException e) {
            boolean done = tmpFile.delete();
            if (!done) {
                DataNode.LOG.info(""detachFile failed to delete temporary file "" + tmpFile);
            }
            throw e;
        }
    }
","    public static void main(String args[]) {
        String midletClass = null;
        ;
        File appletInputFile = null;
        File deviceInputFile = null;
        File midletInputFile = null;
        File htmlOutputFile = null;
        File appletOutputFile = null;
        File deviceOutputFile = null;
        File midletOutputFile = null;
        List params = new ArrayList();
        for (int i = 0; i < args.length; i++) {
            params.add(args[i]);
        }
        Iterator argsIterator = params.iterator();
        while (argsIterator.hasNext()) {
            String arg = (String) argsIterator.next();
            argsIterator.remove();
            if ((arg.equals(""--help"")) || (arg.equals(""-help""))) {
                System.out.println(usage());
                System.exit(0);
            } else if (arg.equals(""--midletClass"")) {
                midletClass = (String) argsIterator.next();
                argsIterator.remove();
            } else if (arg.equals(""--appletInput"")) {
                appletInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--deviceInput"")) {
                deviceInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--midletInput"")) {
                midletInputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--htmlOutput"")) {
                htmlOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--appletOutput"")) {
                appletOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--deviceOutput"")) {
                deviceOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            } else if (arg.equals(""--midletOutput"")) {
                midletOutputFile = new File((String) argsIterator.next());
                argsIterator.remove();
            }
        }
        if (midletClass == null || appletInputFile == null || deviceInputFile == null || midletInputFile == null || htmlOutputFile == null || appletOutputFile == null || deviceOutputFile == null || midletOutputFile == null) {
            System.out.println(usage());
            System.exit(0);
        }
        try {
            DeviceImpl device = null;
            String descriptorLocation = null;
            JarFile jar = new JarFile(deviceInputFile);
            for (Enumeration en = jar.entries(); en.hasMoreElements(); ) {
                String entry = ((JarEntry) en.nextElement()).getName();
                if ((entry.toLowerCase().endsWith("".xml"") || entry.toLowerCase().endsWith(""device.txt"")) && !entry.toLowerCase().startsWith(""meta-inf"")) {
                    descriptorLocation = entry;
                    break;
                }
            }
            if (descriptorLocation != null) {
                EmulatorContext context = new EmulatorContext() {

                    private DisplayComponent displayComponent = new NoUiDisplayComponent();

                    private InputMethod inputMethod = new J2SEInputMethod();

                    private DeviceDisplay deviceDisplay = new J2SEDeviceDisplay(this);

                    private FontManager fontManager = new J2SEFontManager();

                    private DeviceComponent deviceComponent = new SwingDeviceComponent(true);

                    public DisplayComponent getDisplayComponent() {
                        return displayComponent;
                    }

                    public InputMethod getDeviceInputMethod() {
                        return inputMethod;
                    }

                    public DeviceDisplay getDeviceDisplay() {
                        return deviceDisplay;
                    }

                    public FontManager getDeviceFontManager() {
                        return fontManager;
                    }

                    public InputStream getResourceAsStream(String name) {
                        return MIDletBridge.getCurrentMIDlet().getClass().getResourceAsStream(name);
                    }

                    public DeviceComponent getDeviceComponent() {
                        return deviceComponent;
                    }
                };
                URL[] urls = new URL[1];
                urls[0] = deviceInputFile.toURI().toURL();
                ClassLoader classLoader = new ExtensionsClassLoader(urls, urls.getClass().getClassLoader());
                device = DeviceImpl.create(context, classLoader, descriptorLocation, J2SEDevice.class);
            }
            if (device == null) {
                System.out.println(""Error parsing device package: "" + descriptorLocation);
                System.exit(0);
            }
            createHtml(htmlOutputFile, device, midletClass, midletOutputFile, appletOutputFile, deviceOutputFile);
            createMidlet(midletInputFile.toURI().toURL(), midletOutputFile);
            IOUtils.copyFile(appletInputFile, appletOutputFile);
            IOUtils.copyFile(deviceInputFile, deviceOutputFile);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        System.exit(0);
    }
",True
900487,19251430,5933078,"    public static List<String> unZip(File tarFile, File directory) throws IOException {
        List<String> result = new ArrayList<String>();
        InputStream inputStream = new FileInputStream(tarFile);
        ZipArchiveInputStream in = new ZipArchiveInputStream(inputStream);
        ZipArchiveEntry entry = in.getNextZipEntry();
        while (entry != null) {
            OutputStream out = new FileOutputStream(new File(directory, entry.getName()));
            IOUtils.copy(in, out);
            out.close();
            result.add(entry.getName());
            entry = in.getNextZipEntry();
        }
        in.close();
        return result;
    }
","    public boolean authorize(String username, String password, String filename) {
        open(filename);
        boolean isAuthorized = false;
        StringBuffer encPasswd = null;
        try {
            MessageDigest mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(password.getBytes());
            byte[] digest = mdAlgorithm.digest();
            encPasswd = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                password = Integer.toHexString(255 & digest[i]);
                if (password.length() < 2) {
                    password = ""0"" + password;
                }
                encPasswd.append(password);
            }
        } catch (NoSuchAlgorithmException ex) {
        }
        String encPassword = encPasswd.toString();
        String tempPassword = getPassword(username);
        System.out.println(""epass"" + encPassword);
        System.out.println(""pass"" + tempPassword);
        if (tempPassword.equals(encPassword)) {
            isAuthorized = true;
        } else {
            isAuthorized = false;
        }
        close();
        return isAuthorized;
    }
",False
900488,18516388,19579830,"    public void test() throws Exception {
        StorageString s = new StorageString(""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        try {
            s.getWriter();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.addText(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
    }
","    public static void copy(File toCopy, File dest) throws IOException {
        FileInputStream src = new FileInputStream(toCopy);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            while (src.available() > 0) {
                out.write(src.read());
            }
        } finally {
            src.close();
            out.close();
        }
    }
",True
900489,6508481,7350139,"    static void invalidSlave(String msg, Socket sock) throws IOException {
        BufferedReader _sinp = null;
        PrintWriter _sout = null;
        try {
            _sout = new PrintWriter(sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            _sout.println(msg);
            logger.info(""NEW< "" + msg);
            String txt = AsyncSlaveListener.readLine(_sinp, 30);
            String sname = """";
            String spass = """";
            String shash = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                shash = items[3].trim();
            } catch (Exception e) {
                throw new IOException(""Slave Inititalization Faailed"");
            }
            String pass = sname + spass + _pass;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = AsyncSlaveListener.hash2hex(md5.digest()).toLowerCase();
            if (!hash.equals(shash)) {
                throw new IOException(""Slave Inititalization Faailed"");
            }
        } catch (Exception e) {
        }
        throw new IOException(""Slave Inititalization Faailed"");
    }
","    public static void messageDigestTest() {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(""computer"".getBytes());
            md.update(""networks"".getBytes());
            System.out.println(new String(md.digest()));
            System.out.println(new String(md.digest(""computernetworks"".getBytes())));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900490,16058262,7187035,"    public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException {
        boolean result = false;
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(""Copying file "" + src + "" to "" + dest + "" extent "" + extent + "" exists "" + dest.exists());
        }
        if (dest.exists()) {
            if (overwrite) {
                dest.delete();
                LOGGER.finer(dest.getAbsolutePath() + "" removed before copy."");
            } else {
                return result;
            }
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel fcin = null;
        FileChannel fcout = null;
        try {
            fis = new FileInputStream(src);
            fos = new FileOutputStream(dest);
            fcin = fis.getChannel();
            fcout = fos.getChannel();
            if (extent < 0) {
                extent = fcin.size();
            }
            long trans = fcin.transferTo(0, extent, fcout);
            if (trans < extent) {
                result = false;
            }
            result = true;
        } catch (IOException e) {
            String message = ""Copying "" + src.getAbsolutePath() + "" to "" + dest.getAbsolutePath() + "" with extent "" + extent + "" got IOE: "" + e.getMessage();
            if (e.getMessage().equals(""Invalid argument"")) {
                LOGGER.severe(""Failed copy, trying workaround: "" + message);
                workaroundCopyFile(src, dest);
            } else {
                IOException newE = new IOException(message);
                newE.setStackTrace(e.getStackTrace());
                throw newE;
            }
        } finally {
            if (fcin != null) {
                fcin.close();
            }
            if (fcout != null) {
                fcout.close();
            }
            if (fis != null) {
                fis.close();
            }
            if (fos != null) {
                fos.close();
            }
        }
        return result;
    }
","    @Override
    public byte[] read(String path) throws PersistenceException {
        InputStream reader = null;
        ByteArrayOutputStream sw = new ByteArrayOutputStream();
        try {
            reader = new FileInputStream(path);
            IOUtils.copy(reader, sw);
        } catch (Exception e) {
            LOGGER.error(""fail to read file - "" + path, e);
            throw new PersistenceException(e);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    LOGGER.error(""fail to close reader"", e);
                }
            }
        }
        return sw.toByteArray();
    }
",True
900491,21870536,10584420,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String checkUpdate() {
        URL url = null;
        try {
            url = new URL(""http://googlemeupdate.bravehost.com/"");
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
        InputStream html = null;
        try {
            html = url.openStream();
            int c = 0;
            String Buffer = """";
            String Code = """";
            while (c != -1) {
                try {
                    c = html.read();
                } catch (IOException ex) {
                }
                Buffer = Buffer + (char) c;
            }
            return Buffer.substring(Buffer.lastIndexOf(""Google.mE Version: "") + 19, Buffer.indexOf(""||""));
        } catch (IOException ex) {
            ex.printStackTrace();
            return """";
        }
    }
",False
900492,20305472,10348730,"    @Override
    public void run() {
        try {
            FileChannel out = new FileOutputStream(outputfile).getChannel();
            long pos = 0;
            status.setText(""Slučovač: Proces Slučování spuštěn.. Prosím čekejte.."");
            for (int i = 1; i <= noofparts; i++) {
                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + ""v"" + i).getChannel();
                status.setText(""Slučovač: Slučuji část "" + i + "".."");
                this.splitsize = in.size();
                out.transferFrom(in, pos, splitsize);
                pos += splitsize;
                in.close();
                if (deleteOnFinish) new File(originalfilename + "".v"" + i).delete();
                pb.setValue(100 * i / noofparts);
            }
            out.close();
            status.setText(""Slučovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        }
    }
","    private void installBinaryFile(File source, File destination) {
        byte[] buffer = new byte[8192];
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            new ProjectCreateException(e, ""Failed to read binary file: %1$s"", source.getAbsolutePath());
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900493,23620425,7158123,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
","    public void truncateLog(long finalZxid) throws IOException {
        long highestZxid = 0;
        for (File f : dataDir.listFiles()) {
            long zxid = isValidSnapshot(f);
            if (zxid == -1) {
                LOG.warn(""Skipping "" + f);
                continue;
            }
            if (zxid > highestZxid) {
                highestZxid = zxid;
            }
        }
        File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid);
        boolean truncated = false;
        for (File f : files) {
            FileInputStream fin = new FileInputStream(f);
            InputArchive ia = BinaryInputArchive.getArchive(fin);
            FileChannel fchan = fin.getChannel();
            try {
                while (true) {
                    byte[] bytes = ia.readBuffer(""txtEntry"");
                    if (bytes.length == 0) {
                        throw new EOFException();
                    }
                    InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes));
                    TxnHeader hdr = new TxnHeader();
                    deserializeTxn(iab, hdr);
                    if (ia.readByte(""EOF"") != 'B') {
                        throw new EOFException();
                    }
                    if (hdr.getZxid() == finalZxid) {
                        long pos = fchan.position();
                        fin.close();
                        FileOutputStream fout = new FileOutputStream(f);
                        FileChannel fchanOut = fout.getChannel();
                        fchanOut.truncate(pos);
                        truncated = true;
                        break;
                    }
                }
            } catch (EOFException eof) {
            }
            if (truncated == true) {
                break;
            }
        }
        if (truncated == false) {
            LOG.error(""Not able to truncate the log "" + Long.toHexString(finalZxid));
            System.exit(13);
        }
    }
",True
900494,19279420,11324607,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        final FileManager fmanager = FileManager.getFileManager(request, leechget);
        ServletFileUpload upload = new ServletFileUpload();
        FileItemIterator iter;
        try {
            iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (!item.isFormField()) {
                    final FileObject file = fmanager.getFile(name);
                    if (!file.exists()) {
                        IOUtils.copyLarge(stream, file.getContent().getOutputStream());
                    }
                }
            }
        } catch (FileUploadException e1) {
            e1.printStackTrace();
        }
    }
","    @Override
    @Transactional
    public FileData store(FileData data, InputStream stream) {
        try {
            FileData file = save(data);
            file.setPath(file.getGroup() + File.separator + file.getId());
            file = save(file);
            File folder = new File(PATH, file.getGroup());
            if (!folder.exists()) folder.mkdirs();
            File filename = new File(folder, file.getId() + """");
            IOUtils.copyLarge(stream, new FileOutputStream(filename));
            return file;
        } catch (IOException e) {
            throw new ServiceException(""storage"", e);
        }
    }
",True
900495,7816467,21937981,"    private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException {
        CharBuffer charBuffer = null;
        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, encoding));
        File backingFile = new File(backingFilename);
        this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile());
        FileOutputStream fos;
        fos = new FileOutputStream(this.decodedFile);
        IOUtils.copy(reader, fos, WRITE_ENCODING);
        fos.close();
        charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer();
        return charBuffer;
    }
","    private void process(String zipFileName, String directory, String db) throws SQLException {
        InputStream in = null;
        try {
            if (!FileUtils.exists(zipFileName)) {
                throw new IOException(""File not found: "" + zipFileName);
            }
            String originalDbName = null;
            int originalDbLen = 0;
            if (db != null) {
                originalDbName = getOriginalDbName(zipFileName, db);
                if (originalDbName == null) {
                    throw new IOException(""No database named "" + db + "" found"");
                }
                if (originalDbName.startsWith(File.separator)) {
                    originalDbName = originalDbName.substring(1);
                }
                originalDbLen = originalDbName.length();
            }
            in = FileUtils.openFileInputStream(zipFileName);
            ZipInputStream zipIn = new ZipInputStream(in);
            while (true) {
                ZipEntry entry = zipIn.getNextEntry();
                if (entry == null) {
                    break;
                }
                String fileName = entry.getName();
                fileName = fileName.replace('\\', File.separatorChar);
                fileName = fileName.replace('/', File.separatorChar);
                if (fileName.startsWith(File.separator)) {
                    fileName = fileName.substring(1);
                }
                boolean copy = false;
                if (db == null) {
                    copy = true;
                } else if (fileName.startsWith(originalDbName + ""."")) {
                    fileName = db + fileName.substring(originalDbLen);
                    copy = true;
                }
                if (copy) {
                    OutputStream out = null;
                    try {
                        out = FileUtils.openFileOutputStream(directory + File.separator + fileName, false);
                        IOUtils.copy(zipIn, out);
                        out.close();
                    } finally {
                        IOUtils.closeSilently(out);
                    }
                }
                zipIn.closeEntry();
            }
            zipIn.closeEntry();
            zipIn.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(in);
        }
    }
",True
900496,11627705,668660,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900497,6908734,1156882,"    public <E extends Exception> void doWithConnection(String httpAddress, ICallableWithParameter<Void, URLConnection, E> toDo) throws E, ConnectionException {
        URLConnection connection;
        try {
            URL url = new URL(httpAddress);
            connection = url.openConnection();
        } catch (MalformedURLException e) {
            throw new ConnectionException(""Connecting to "" + httpAddress + "" got"", e);
        } catch (IOException e) {
            throw new ConnectionException(""Connecting to "" + httpAddress + "" got"", e);
        }
        authenticationHandler.doWithProxyAuthentication(connection, toDo);
    }
","            @Override
            public void onClick(View v) {
                Log.d(Config.SS_TAG, ""Sending POST request to server..."");
                DefaultHttpClient httpClient = new DefaultHttpClient();
                HttpPost httpPost = new HttpPost(Config.RPC_SERVLET_URL);
                JSONObject requestJson = new JSONObject();
                JSONArray callsJson = new JSONArray();
                try {
                    JSONObject callJson = new JSONObject();
                    callJson.put(""method"", ""ping"");
                    callJson.put(""void"", ""null"");
                    callsJson.put(0, callJson);
                    requestJson.put(""calls"", callsJson);
                    httpPost.setEntity(new StringEntity(requestJson.toString(), ""UTF-8""));
                    HttpResponse httpResponse = httpClient.execute(httpPost);
                    final int responseStatusCode = httpResponse.getStatusLine().getStatusCode();
                    if (200 <= responseStatusCode && responseStatusCode < 300) {
                        Log.d(Config.SS_TAG, ""Successful ping - status code: "" + responseStatusCode);
                        BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), ""UTF-8""), 8 * 1024);
                        StringBuilder sb = new StringBuilder();
                        String line;
                        while ((line = reader.readLine()) != null) {
                            sb.append(line).append(""\n"");
                        }
                        JSONTokener tokener = new JSONTokener(sb.toString());
                        JSONObject responseJson = new JSONObject(tokener);
                        JSONArray resultsJson = responseJson.getJSONArray(""results"");
                        JSONObject result = resultsJson.getJSONObject(0);
                        String returnValue = result.getJSONObject(""data"").getString(""return"");
                        Log.d(Config.SS_TAG, ""Response message: "" + returnValue);
                    } else {
                        Log.e(Config.SS_TAG, ""Unsuccessful ping..."");
                    }
                } catch (Exception e) {
                    Log.e(Config.SS_TAG, ""Error while trying to ping rpc servlet"");
                    e.printStackTrace();
                }
            }
",False
900498,1466343,9096316,"    public boolean finish() {
        IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName.getText());
        try {
            project.create(null);
            project.open(null);
            IProjectDescription desc = project.getDescription();
            desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
            project.setDescription(desc, null);
            IJavaProject javaProject = JavaCore.create(project);
            IPath fitLib = project.getFullPath().append(FIT_LIBRARY);
            javaProject.setRawClasspath(createClassPathEntries(project, fitLib), null);
            copyLibrary(project);
            javaProject.setOutputLocation(createOutputFolder(project, DEFAULT_OUTPUT_FOLDER).getFullPath(), null);
            createOutputFolder(project, fitTests.getText());
            createOutputFolder(project, fitResults.getText());
            if (!DEFAULT_OUTPUT_FOLDER.equals(fitResults.getText())) {
                DefaultFolderProperties.setDefinedOutputLocation(project, fitResults.getText());
            }
            if (!DEFAULT_SOURCE_FOLDER.equals(fitFixtures.getText())) {
                DefaultFolderProperties.setDefinedSourceLocation(project, fitFixtures.getText());
            }
            if (includeExamplesCheck.getSelection()) {
                copySamples(project);
            }
        } catch (CoreException e) {
            handleError(getContainer().getShell(), project, ""Could not create project:"" + e.getMessage());
            return false;
        } catch (IOException e) {
            handleError(getContainer().getShell(), project, ""Could not create project:"" + e.getMessage());
            return false;
        }
        return true;
    }
","    private void handleNodeDown(long eventID, long nodeID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1) {
            log.warn(EventConstants.NODE_DOWN_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid: "" + eventID + ""/"" + nodeID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            try {
                dbConn.setAutoCommit(false);
            } catch (SQLException sqle) {
                log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                return;
            }
            PreparedStatement activeSvcsStmt = dbConn.prepareStatement(OutageConstants.DB_GET_ACTIVE_SERVICES_FOR_NODE);
            PreparedStatement openStmt = dbConn.prepareStatement(OutageConstants.DB_OPEN_RECORD);
            PreparedStatement newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
            PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
            newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
            if (log.isDebugEnabled()) log.debug(""handleNodeDown: creating new outage entries..."");
            activeSvcsStmt.setLong(1, nodeID);
            ResultSet activeSvcsRS = activeSvcsStmt.executeQuery();
            while (activeSvcsRS.next()) {
                String ipAddr = activeSvcsRS.getString(1);
                long serviceID = activeSvcsRS.getLong(2);
                if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                    if (log.isDebugEnabled()) log.debug(""handleNodeDown: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" already down"");
                } else {
                    long outageID = -1;
                    ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                    if (seqRS.next()) {
                        outageID = seqRS.getLong(1);
                    }
                    seqRS.close();
                    newOutageWriter.setLong(1, outageID);
                    newOutageWriter.setLong(2, eventID);
                    newOutageWriter.setLong(3, nodeID);
                    newOutageWriter.setString(4, ipAddr);
                    newOutageWriter.setLong(5, serviceID);
                    newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                    newOutageWriter.executeUpdate();
                    if (log.isDebugEnabled()) log.debug(""handleNodeDown: Recording outage for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
                }
            }
            activeSvcsRS.close();
            try {
                dbConn.commit();
                if (log.isDebugEnabled()) log.debug(""Outage recorded for all active services for "" + nodeID);
            } catch (SQLException se) {
                log.warn(""Rolling back transaction, nodeDown could not be recorded  for nodeId: "" + nodeID, se);
                try {
                    dbConn.rollback();
                } catch (SQLException sqle) {
                    log.warn(""SQL exception during rollback, reason"", sqle);
                }
            }
            activeSvcsStmt.close();
            openStmt.close();
            newOutageWriter.close();
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeDown\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",False
900499,17808807,8428267,"    static String doHttp(String postURL, String text) {
        String returnValue = null;
        StringBuffer sb = new StringBuffer();
        sb.append(""bsh.client=Remote"");
        sb.append(""&bsh.script="");
        sb.append(URLEncoder.encode(text));
        String formData = sb.toString();
        try {
            URL url = new URL(postURL);
            HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
            urlcon.setRequestMethod(""POST"");
            urlcon.setRequestProperty(""Content-type"", ""application/x-www-form-urlencoded"");
            urlcon.setDoOutput(true);
            urlcon.setDoInput(true);
            PrintWriter pout = new PrintWriter(new OutputStreamWriter(urlcon.getOutputStream(), ""8859_1""), true);
            pout.print(formData);
            pout.flush();
            int rc = urlcon.getResponseCode();
            if (rc != HttpURLConnection.HTTP_OK) System.out.println(""Error, HTTP response: "" + rc);
            returnValue = urlcon.getHeaderField(""Bsh-Return"");
            BufferedReader bin = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
            String line;
            while ((line = bin.readLine()) != null) System.out.println(line);
            System.out.println(""Return Value: "" + returnValue);
        } catch (MalformedURLException e) {
            System.out.println(e);
        } catch (IOException e2) {
            System.out.println(e2);
        }
        return returnValue;
    }
","    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException nsae) {
                nsae.printStackTrace();
            }
        }
        try {
            digest.update(data.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            System.err.println(e);
        }
        return encodeHex(digest.digest());
    }
",False
900500,6310814,12734324,"    public boolean downloadNextTLE() {
        boolean success = true;
        if (!downloadINI) {
            errorText = ""startTLEDownload() must be ran before downloadNextTLE() can begin"";
            return false;
        }
        if (!this.hasMoreToDownload()) {
            errorText = ""There are no more TLEs to download"";
            return false;
        }
        int i = currentTLEindex;
        try {
            URL url = new URL(rootWeb + fileNames[i]);
            URLConnection c = url.openConnection();
            InputStreamReader isr = new InputStreamReader(c.getInputStream());
            BufferedReader br = new BufferedReader(isr);
            File outFile = new File(localPath + fileNames[i]);
            BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));
            String currentLine = """";
            while ((currentLine = br.readLine()) != null) {
                writer.write(currentLine);
                writer.newLine();
            }
            br.close();
            writer.close();
        } catch (Exception e) {
            System.out.println(""Error Reading/Writing TLE - "" + fileNames[i] + ""\n"" + e.toString());
            success = false;
            errorText = e.toString();
            return false;
        }
        currentTLEindex++;
        return success;
    }
","    public static String post(String url, Map params, String line_delimiter) {
        String response = """";
        try {
            URL _url = new URL(url);
            URLConnection conn = _url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            String postdata = """";
            int mapsize = params.size();
            Iterator keyValue = params.entrySet().iterator();
            for (int i = 0; i < mapsize; i++) {
                Map.Entry entry = (Map.Entry) keyValue.next();
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                if (i > 0) postdata += ""&"";
                postdata += URLEncoder.encode(key, ""UTF-8"") + ""="" + URLEncoder.encode(value, ""UTF-8"");
            }
            wr.write(postdata);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) response += line + line_delimiter;
            wr.close();
            rd.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return response;
    }
",False
900501,9104988,11433309,"    public String getHashedPhoneId(Context aContext) {
        if (hashedPhoneId == null) {
            final String androidId = BuildInfo.getAndroidID(aContext);
            if (androidId == null) {
                hashedPhoneId = ""EMULATOR"";
            } else {
                try {
                    final MessageDigest messageDigest = MessageDigest.getInstance(""SHA"");
                    messageDigest.update(androidId.getBytes());
                    messageDigest.update(aContext.getPackageName().getBytes());
                    final StringBuilder stringBuilder = new StringBuilder();
                    for (byte b : messageDigest.digest()) {
                        stringBuilder.append(String.format(""%02X"", b));
                    }
                    hashedPhoneId = stringBuilder.toString();
                } catch (Exception e) {
                    Log.e(LoggingExceptionHandler.class.getName(), ""Unable to get phone id"", e);
                    hashedPhoneId = ""Not Available"";
                }
            }
        }
        return hashedPhoneId;
    }
","    public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException {
        int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte();
        if (startByte >= 0) {
            FileInputStream fis = new FileInputStream(file);
            FileChannel fc = fis.getChannel();
            ByteBuffer bb = ByteBuffer.allocate(startByte);
            fc.read(bb);
            FileOutputStream out = new FileOutputStream(outputFile);
            out.write(bb.array());
            out.close();
            fc.close();
            fis.close();
            return outputFile;
        }
        throw new TagNotFoundException(""There is no ID3v2Tag data in this file"");
    }
",False
900502,3820224,23429413,"    private String hashString(String key) {
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(key.getBytes());
            byte[] hash = digest.digest();
            BigInteger bi = new BigInteger(1, hash);
            return String.format(""%0"" + (hash.length << 1) + ""X"", bi) + KERNEL_VERSION;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return """" + key.hashCode();
        }
    }
","    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md4result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD4"", new BouncyCastleProvider());
            md.reset();
            md.update(input.getBytes(""UnicodeLittleUnmarked""));
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md4result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (UnsupportedEncodingException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        }
        return (md4result.toString());
    }
",True
900503,22625085,120983,"    @Transient
    private String md5sum(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(text.getBytes());
            byte messageDigest[] = md.digest();
            return bufferToHex(messageDigest, 0, messageDigest.length);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
","    void sort(int a[]) throws Exception {
        for (int i = a.length; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                }
                pause(i, j);
            }
            if (!flipped) {
                return;
            }
        }
    }
",False
900504,3224152,18456843,"    private String transferWSDL(String usernameAndPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (this.password != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(usernameAndPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File file = new File(tmpDir, new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            logger.error(""Failed to download wsdl from URL : "" + wsdlURL);
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
","    public String storeUploadedZip(byte[] zip, String name) {
        List filesToStore = new ArrayList();
        int i = 0;
        ZipInputStream zipIs = new ZipInputStream(new ByteArrayInputStream(zip));
        ZipEntry zipEntry = zipIs.getNextEntry();
        while (zipEntry != null) {
            if (zipEntry.isDirectory() == false) {
                i++;
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(zipIs, baos);
                baos.close();
            }
            zipIs.closeEntry();
            zipEntry = zipIs.getNextEntry();
        }
    }
",True
900505,9591960,8389315,"    protected Object serveFile(MyServerSocket socket, String filenm, URL url) {
        PrintStream out = null;
        InputStream in = null;
        long len = 0;
        try {
            out = new PrintStream(socket.getOutputStream());
            in = url.openStream();
            len = in.available();
        } catch (IOException e) {
            HttpHelper.httpWrap(HttpHelper.EXC, e.toString(), 0);
        }
        if (HttpHelper.isImage(filenm)) {
            out.print(HttpHelper.httpWrapPic(filenm, len));
        } else if (filenm.endsWith("".html"")) {
            Comms.copyStreamSED(in, out, MPRES);
        } else if (HttpHelper.isOtherFile(filenm)) {
            out.print(HttpHelper.httpWrapOtherFile(filenm, len));
        } else {
            String type = MimeUtils.getMimeType(filenm);
            if (type.equals(MimeUtils.UNKNOWN_MIME_TYPE)) {
                out.print(HttpHelper.httpWrapMimeType(type, len));
            } else {
                out.print(HttpHelper.httpWrapMimeType(type, len));
            }
        }
        if (in == null) {
            Log.logThis(""THE INPUT STREAM IS NULL...url="" + url);
        } else Files.copyStream(in, out);
        return null;
    }
","        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
",False
900506,3000477,9983984,"    private static String hashWithDigest(String in, String digest) {
        try {
            MessageDigest Digester = MessageDigest.getInstance(digest);
            Digester.update(in.getBytes(""UTF-8""), 0, in.length());
            byte[] sha1Hash = Digester.digest();
            return toSimpleHexString(sha1Hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(""Hashing the password failed"", ex);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""Encoding the string failed"", e);
        }
    }
","    private String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",True
900507,23141718,7492253,"    protected URLConnection openConnection(URL url) throws IOException {
        if (bundleEntry != null) return (new BundleURLConnection(url, bundleEntry));
        String bidString = url.getHost();
        if (bidString == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_ID, url.toExternalForm()));
        }
        AbstractBundle bundle = null;
        long bundleID;
        try {
            bundleID = Long.parseLong(bidString);
        } catch (NumberFormatException nfe) {
            throw new MalformedURLException(NLS.bind(AdaptorMsg.URL_INVALID_BUNDLE_ID, bidString));
        }
        bundle = (AbstractBundle) context.getBundle(bundleID);
        if (!url.getAuthority().equals(SECURITY_AUTHORIZED)) {
            checkAdminPermission(bundle);
        }
        if (bundle == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_FOUND, url.toExternalForm()));
        }
        return (new BundleURLConnection(url, findBundleEntry(url, bundle)));
    }
","    protected Connection openRelativeFile(String file) throws IOException {
        if (cachedBits == null) {
            cachedBits = new ByteArray(url.openConnection().getInputStream()).getBytes();
        }
        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(cachedBits));
        ZipEntry zentry;
        while (true) {
            zentry = zin.getNextEntry();
            if (zentry == null) {
                throw new IOException(""Couldn't find resource "" + file + "" in ZIP-file"");
            }
            if (zentry.getName().equals(file)) {
                return new Connection(zin, zentry.getSize());
            }
        }
    }
",False
900508,373792,3024981,"    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
","    @Test
    public void testCopy_inputStreamToWriter_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((InputStream) null, writer, ""UTF8"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
",True
900509,12883277,18892407,"    private void createWikiPages(WikiContext context) throws PluginException {
        OntologyWikiPageName owpn = new OntologyWikiPageName(omemo.getFormDataAlias().toUpperCase(), omemo.getFormDataVersionDate());
        String wikiPageFullFileName = WikiPageName2FullFileName(context, owpn.toString());
        String rdfFileNameWithPath = getWorkDir(context) + File.separator + owpn.toFileName();
        FileOutputStream fos = null;
        FileInputStream fis = null;
        try {
            fos = new FileOutputStream(wikiPageFullFileName);
            fis = new FileInputStream(rdfFileNameWithPath);
            InfoExtractor infoe = new InfoExtractor(fis, omemo.getFormDataNS(), omemo.getFormDataOntLang());
            infoe.writePage(getWorkDir(context), owpn, Omemo.checksWikiPageName);
            fis.close();
            fos.close();
        } catch (Exception e) {
            log.error(""Can not read local rdf file or can not write wiki page"");
            throw new PluginException(""Error creating wiki pages. See logs"");
        }
    }
","    private void copyTemplateFile(String sourceRoot, String targetRoot, String extension) throws Exception {
        String inputFileName = sourceRoot + extension;
        String outputFileName = targetRoot + extension;
        System.out.println(""Copying resource file: "" + outputFileName);
        File inputFile = new File(inputFileName);
        if (!inputFile.exists() || !inputFile.canRead()) {
            throw new Exception(""Could not read from the file "" + inputFileName);
        }
        File outputFile = new File(outputFileName);
        if (!outputFile.exists()) {
            if (!outputFile.createNewFile() || !outputFile.canWrite()) throw new Exception(""Could not write to the file "" + outputFileName);
        }
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        try {
            char[] buffer = new char[1024];
            int nread = 0;
            while ((nread = in.read(buffer)) != -1) {
                out.write(buffer, 0, nread);
            }
        } finally {
            in.close();
            out.close();
        }
    }
",True
900510,13506128,19652844,"    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            System.out.println(""Mensagem original: "" + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
","    public long getLastModified() {
        if (lastModified == 0) {
            if (connection == null) try {
                connection = url.openConnection();
            } catch (IOException e) {
            }
            if (connection != null) lastModified = connection.getLastModified();
        }
        return lastModified;
    }
",False
900511,16002345,9830409,"    public OAIRecord getRecord(String identifier, String metadataPrefix) throws OAIException {
        PrefixResolverDefault prefixResolver;
        XPath xpath;
        XPathContext xpathSupport;
        int ctxtNode;
        XObject list;
        Node node;
        OAIRecord rec = new OAIRecord();
        priCheckBaseURL();
        String params = priBuildParamString("""", """", """", identifier, metadataPrefix);
        try {
            URL url = new URL(strBaseURL + ""?verb=GetRecord"" + params);
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            http = frndTrySend(http);
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            docFactory.setNamespaceAware(true);
            if (validation == VALIDATION_VERY_STRICT) {
                docFactory.setValidating(true);
            } else {
                docFactory.setValidating(false);
            }
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document xml = null;
            try {
                xml = docBuilder.parse(http.getInputStream());
                rec.frndSetValid(true);
            } catch (IllegalArgumentException iae) {
                throw new OAIException(OAIException.CRITICAL_ERR, iae.getMessage());
            } catch (SAXException se) {
                if (validation != VALIDATION_LOOSE) {
                    throw new OAIException(OAIException.XML_PARSE_ERR, se.getMessage());
                } else {
                    try {
                        url = new URL(strBaseURL + ""?verb=GetRecord"" + params);
                        http.disconnect();
                        http = (HttpURLConnection) url.openConnection();
                        http = frndTrySend(http);
                        xml = docBuilder.parse(priCreateDummyGetRecord(identifier, http.getInputStream()));
                        rec.frndSetValid(false);
                    } catch (SAXException se2) {
                        throw new OAIException(OAIException.XML_PARSE_ERR, se2.getMessage());
                    }
                }
            }
            try {
                namespaceNode = xml.createElement(""GetRecord"");
                namespaceNode.setAttribute(""xmlns:oai"", XMLNS_OAI + ""GetRecord"");
                namespaceNode.setAttribute(""xmlns:dc"", XMLNS_DC);
                prefixResolver = new PrefixResolverDefault(namespaceNode);
                xpath = new XPath(""/oai:GetRecord/oai:record"", null, prefixResolver, XPath.SELECT, null);
                xpathSupport = new XPathContext();
                ctxtNode = xpathSupport.getDTMHandleFromNode(xml);
                list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                node = list.nodeset().nextNode();
                if (node == null) {
                    namespaceNode.setAttribute(""xmlns:oai"", XMLNS_OAI_2_0);
                    prefixResolver = new PrefixResolverDefault(namespaceNode);
                    xpath = new XPath(""/oai:OAI-PMH/oai:GetRecord/oai:record"", null, prefixResolver, XPath.SELECT, null);
                    list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                    node = list.nodeset().nextNode();
                    if (node == null) {
                        namespaceNode.setAttribute(""xmlns:oai"", XMLNS_OAI_1_0 + ""GetRecord"");
                        prefixResolver = new PrefixResolverDefault(namespaceNode);
                        xpath = new XPath(""/oai:GetRecord/oai:record"", null, prefixResolver, XPath.SELECT, null);
                        list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                        node = list.nodeset().nextNode();
                    } else {
                        xpath = new XPath(""oai:OAI-PMH/oai:error"", null, prefixResolver, XPath.SELECT, null);
                        list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                        ixmlErrors = list.nodelist();
                        if (ixmlErrors.getLength() > 0) {
                            strProtocolVersion = ""2"";
                            throw new OAIException(OAIException.OAI_ERR, getLastOAIError().getCode() + "": "" + getLastOAIError().getReason());
                        }
                    }
                }
                if (node != null) {
                    rec.frndSetRepository(this);
                    rec.frndSetMetadataPrefix(metadataPrefix);
                    rec.frndSetIdOnly(false);
                    ctxtNode = xpathSupport.getDTMHandleFromNode(node);
                    xpath = new XPath(""//oai:header/oai:identifier"", null, prefixResolver, XPath.SELECT, null);
                    list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                    rec.frndSetIdentifier(list.nodeset().nextNode().getFirstChild().getNodeValue());
                    xpath = new XPath(""//oai:header/oai:datestamp"", null, prefixResolver, XPath.SELECT, null);
                    list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                    rec.frndSetDatestamp(list.nodeset().nextNode().getFirstChild().getNodeValue());
                    rec.frndSetRecord(node);
                    NamedNodeMap nmap = node.getAttributes();
                    if (nmap != null) {
                        if (nmap.getNamedItem(""status"") != null) {
                            rec.frndSetStatus(nmap.getNamedItem(""status"").getFirstChild().getNodeValue());
                        }
                    }
                } else {
                    rec = null;
                }
                xpath = new XPath(""//oai:responseDate"", null, prefixResolver, XPath.SELECT, null);
                list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                node = list.nodeset().nextNode();
                if (node != null) {
                    strResponseDate = node.getFirstChild().getNodeValue();
                } else {
                    if (validation == VALIDATION_LOOSE) {
                        strResponseDate = """";
                    } else {
                        throw new OAIException(OAIException.INVALID_RESPONSE_ERR, ""GetRecord missing responseDate"");
                    }
                }
                xpath = new XPath(""//oai:requestURL | //oai:request"", null, prefixResolver, XPath.SELECT, null);
                list = xpath.execute(xpathSupport, ctxtNode, prefixResolver);
                node = list.nodeset().nextNode();
                if (node != null) {
                    ixmlRequest = node;
                } else {
                    if (validation == VALIDATION_LOOSE) {
                        ixmlRequest = null;
                    } else {
                        throw new OAIException(OAIException.INVALID_RESPONSE_ERR, ""GetRecord missing requestURL"");
                    }
                }
                xpath = null;
                prefixResolver = null;
                xpathSupport = null;
                list = null;
            } catch (TransformerException te) {
                throw new OAIException(OAIException.CRITICAL_ERR, te.getMessage());
            }
            url = null;
            docFactory = null;
            docBuilder = null;
        } catch (MalformedURLException mue) {
            throw new OAIException(OAIException.CRITICAL_ERR, mue.getMessage());
        } catch (FactoryConfigurationError fce) {
            throw new OAIException(OAIException.CRITICAL_ERR, fce.getMessage());
        } catch (ParserConfigurationException pce) {
            throw new OAIException(OAIException.CRITICAL_ERR, pce.getMessage());
        } catch (IOException ie) {
            throw new OAIException(OAIException.CRITICAL_ERR, ie.getMessage());
        }
        return rec;
    }
","    @Test
    public final void testCheckCookies() {
        URL url = null;
        try {
            url = new URL(""http://localhost:8080"");
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        }
        StringBuffer content = new StringBuffer();
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0; H010818)"");
            cookie = connection.getHeaderField(""Set-Cookie"");
            if (cookie != null) System.out.println(""cookie: "" + cookie.toString());
            connection.setDoInput(true);
            InputStream is = connection.getInputStream();
            byte[] buffer = new byte[2048];
            int count;
            while (-1 != (count = is.read(buffer))) {
                content.append(new String(buffer, 0, count));
            }
        } catch (IOException e) {
            System.out.print(e.getMessage());
            return;
        }
    }
",False
900512,20359284,22177057,"    private void SaveToArchive(Layer layer, String layerFileName) throws Exception {
        Object archiveObj = layer.getBlackboard().get(""ArchiveFileName"");
        Object entryObj = layer.getBlackboard().get(""ArchiveEntryPrefix"");
        if ((archiveObj == null) || (entryObj == null)) return;
        String archiveName = archiveObj.toString();
        String entryPrefix = entryObj.toString();
        if ((archiveName == """") || (entryPrefix == """")) return;
        File tempZip = File.createTempFile(""tmp"", "".zip"");
        InputStream in = new BufferedInputStream(new FileInputStream(archiveName));
        OutputStream out = new BufferedOutputStream(new FileOutputStream(tempZip));
        copy(in, out);
        in.close();
        out.close();
        ZipFile zipFile = new ZipFile(tempZip);
        ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(archiveName)));
        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempZip));
        ZipEntry entry = zin.getNextEntry();
        while (entry != null) {
            String entryName = entry.getName();
            String en = GUIUtil.nameWithoutExtension(new File(entryName));
            if (en.equalsIgnoreCase(entryPrefix)) {
                if (entryName.endsWith("".jmp"")) {
                    String layerTaskPath = CreateArchivePlugIn.createLayerTask(layer, archiveName, entryPrefix);
                    CreateArchivePlugIn.WriteZipEntry(layerTaskPath, entryPrefix, zout);
                } else if ((!entryName.endsWith("".shx"")) && (!entryName.endsWith("".dbf"")) && (!entryName.endsWith("".shp.xml"")) && (!entryName.endsWith("".prj""))) {
                    CreateArchivePlugIn.WriteZipEntry(layerFileName, entryPrefix, zout);
                }
            } else {
                zout.putNextEntry(entry);
                copy(zin, zout);
            }
            entry = zin.getNextEntry();
        }
        zin.close();
        zout.close();
        zipFile.close();
        tempZip.delete();
    }
","    private void saveFile(File destination) {
        InputStream in = null;
        OutputStream out = null;
        try {
            if (fileScheme) in = new BufferedInputStream(new FileInputStream(source.getPath())); else in = new BufferedInputStream(getContentResolver().openInputStream(source));
            out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[1024];
            while (in.read(buffer) != -1) out.write(buffer);
            Toast.makeText(this, R.string.saveas_file_saved, Toast.LENGTH_SHORT).show();
        } catch (FileNotFoundException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
    }
",False
900513,13776078,22530929,"    private GmailContact convertContactToGmailContact(Contact contact) throws GmailManagerException {
        boolean homePhone = false, homePhone2 = false, homeFax = false, homeMobile = false, homePager = false;
        boolean businessPhone = false, businessPhone2 = false, businessFax = false, businessMobile = false, businessPager = false;
        boolean otherPhone = false, otherFax = false;
        if (log.isTraceEnabled()) log.trace(""Converting Foundation contact to Gmail contact: Name:"" + contact.getName().getFirstName().getPropertyValueAsString());
        try {
            GmailContact gmailContact = new GmailContact();
            gmailContact.setId(contact.getUid());
            Name name = contact.getName();
            if (name != null) if (name.getFirstName() != null && name.getFirstName().getPropertyValueAsString() != null) {
                StringBuffer buffer = new StringBuffer();
                buffer.append(name.getFirstName().getPropertyValueAsString()).append("" "");
                if (name.getMiddleName() != null && name.getMiddleName().getPropertyValueAsString() != null) buffer.append(name.getMiddleName().getPropertyValueAsString()).append("" "");
                if (name.getLastName() != null && name.getLastName().getPropertyValueAsString() != null) buffer.append(name.getLastName().getPropertyValueAsString()).append("" "");
                if (log.isDebugEnabled()) log.debug(""NAME: "" + buffer.toString().trim());
                gmailContact.setName(buffer.toString().trim());
            }
            if (contact.getPersonalDetail() != null) {
                if (contact.getPersonalDetail().getEmails() != null && contact.getPersonalDetail().getEmails().size() > 0) {
                    if (contact.getPersonalDetail().getEmails().get(0) != null) {
                        Email email1 = (Email) contact.getPersonalDetail().getEmails().get(0);
                        if (email1.getPropertyValueAsString() != null && email1.getPropertyValueAsString().equals("""") == false) {
                            if (log.isDebugEnabled()) log.debug(""EMAIL1: "" + email1.getPropertyValueAsString());
                            gmailContact.setEmail(email1.getPropertyValueAsString());
                        }
                    }
                    if (contact.getPersonalDetail().getEmails().size() > 1 && contact.getPersonalDetail().getEmails().get(1) != null) {
                        Email email2 = (Email) contact.getPersonalDetail().getEmails().get(1);
                        if (email2.getPropertyValueAsString() != null && email2.getPropertyValueAsString().equals("""") == false) {
                            if (log.isDebugEnabled()) log.debug(""EMAIL2: "" + email2.getPropertyValueAsString());
                            gmailContact.setEmail2(email2.getPropertyValueAsString());
                        }
                    }
                }
                Address address = contact.getPersonalDetail().getAddress();
                if (address != null) if (address.getStreet() != null) if (address.getStreet().getPropertyValueAsString() != null) {
                    StringBuffer addressBuffer = new StringBuffer();
                    addressBuffer.append(address.getStreet().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getPostalCode().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getCity().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getState().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getCountry().getPropertyValueAsString());
                    if (log.isDebugEnabled()) log.debug(""HOME_ADDRESS: "" + addressBuffer.toString());
                    gmailContact.setHomeAddress(addressBuffer.toString());
                }
                Address addressOther = contact.getPersonalDetail().getOtherAddress();
                if (addressOther != null) if (addressOther.getStreet() != null) if (addressOther.getStreet().getPropertyValueAsString() != null) {
                    StringBuffer addressBuffer = new StringBuffer();
                    addressBuffer.append(addressOther.getStreet().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(addressOther.getPostalCode().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(addressOther.getCity().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(addressOther.getState().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(addressOther.getCountry().getPropertyValueAsString());
                    if (log.isDebugEnabled()) log.debug(""OTHER_ADDRESS: "" + addressBuffer.toString());
                    gmailContact.setOtherAddress(addressBuffer.toString());
                }
                if (contact.getPersonalDetail().getPhones() != null && contact.getPersonalDetail().getPhones().size() > 0) {
                    for (int i = 0; i < contact.getPersonalDetail().getPhones().size(); i++) {
                        Phone phone = (Phone) contact.getPersonalDetail().getPhones().get(i);
                        if (log.isDebugEnabled()) log.debug(""PERSONAL_PHONE: "" + phone.getPropertyValueAsString() + "" type:"" + phone.getPhoneType());
                        if (phone.getPhoneType().equals(SIFC.HOME_TELEPHONE_NUMBER) && homePhone == false) {
                            gmailContact.setHomePhone(phone.getPropertyValueAsString());
                            homePhone = true;
                        } else if (phone.getPhoneType().equals(SIFC.HOME2_TELEPHONE_NUMBER) && homePhone2 == false) {
                            gmailContact.setHomePhone2(phone.getPropertyValueAsString());
                            homePhone2 = true;
                        } else if (phone.getPhoneType().equals(SIFC.HOME_FAX_NUMBER) && homeFax == false) {
                            gmailContact.setHomeFax(phone.getPropertyValueAsString());
                            homeFax = true;
                        } else if ((phone.getPhoneType().equals(SIFC.MOBILE_TELEPHONE_NUMBER) || phone.getPhoneType().equals(SIFC.MOBILE_HOME_TELEPHONE_NUMBER)) && homeMobile == false) {
                            gmailContact.setMobilePhone(phone.getPropertyValueAsString());
                            homeMobile = true;
                        } else if (phone.getPhoneType().equals(SIFC.PAGER_NUMBER) && homePager == false) {
                            gmailContact.setPager(phone.getPropertyValueAsString());
                            homePager = true;
                        } else if (phone.getPhoneType().equals(SIFC.OTHER_TELEPHONE_NUMBER) && otherPhone == false) {
                            gmailContact.setOtherPhone(phone.getPropertyValueAsString());
                            otherPhone = true;
                        } else if (phone.getPhoneType().equals(SIFC.OTHER_FAX_NUMBER) && otherFax == false) {
                            gmailContact.setOtherFax(phone.getPropertyValueAsString());
                            otherFax = true;
                        } else {
                            if (log.isDebugEnabled()) log.debug(""GOOGLE - Whoops - Personal Phones UNKNOWN TYPE:"" + phone.getPhoneType() + "" VALUE:"" + phone.getPropertyValueAsString());
                        }
                    }
                }
            }
            if (contact.getBusinessDetail() != null) {
                if (contact.getBusinessDetail().getEmails() != null && contact.getBusinessDetail().getEmails().size() > 0) {
                    if (contact.getBusinessDetail().getEmails().get(0) != null) {
                        Email email3 = (Email) contact.getBusinessDetail().getEmails().get(0);
                        if (email3.getPropertyValueAsString() != null && email3.getPropertyValueAsString().equals("""") == false) {
                            if (log.isDebugEnabled()) log.debug(""EMAIL3: "" + email3.getPropertyValueAsString());
                            gmailContact.setEmail3(email3.getPropertyValueAsString());
                        }
                    }
                }
                Address address = contact.getBusinessDetail().getAddress();
                if (address != null) if (address.getStreet() != null) if (address.getStreet().getPropertyValueAsString() != null) {
                    StringBuffer addressBuffer = new StringBuffer();
                    addressBuffer.append(address.getStreet().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getPostalCode().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getCity().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getState().getPropertyValueAsString()).append("" "");
                    addressBuffer.append(address.getCountry().getPropertyValueAsString());
                    if (log.isDebugEnabled()) log.debug(""BUSINESS_ADDRESS: "" + addressBuffer.toString());
                    gmailContact.setBusinessAddress(addressBuffer.toString());
                }
                if (contact.getBusinessDetail().getPhones() != null && contact.getBusinessDetail().getPhones().size() > 0) {
                    for (int i = 0; i < contact.getBusinessDetail().getPhones().size(); i++) {
                        Phone phone = (Phone) contact.getBusinessDetail().getPhones().get(i);
                        if (log.isDebugEnabled()) log.debug(""BUSINESS_PHONE: "" + phone.getPropertyValueAsString() + "" type:"" + phone.getPhoneType());
                        if (phone.getPhoneType().equals(SIFC.BUSINESS_TELEPHONE_NUMBER) && businessPhone == false) {
                            gmailContact.setBusinessPhone(phone.getPropertyValueAsString());
                            businessPhone = true;
                        } else if (phone.getPhoneType().equals(SIFC.BUSINESS2_TELEPHONE_NUMBER) && businessPhone2 == false) {
                            gmailContact.setBusinessPhone2(phone.getPropertyValueAsString());
                            businessPhone2 = true;
                        } else if (phone.getPhoneType().equals(SIFC.BUSINESS_FAX_NUMBER) && businessFax == false) {
                            gmailContact.setBusinessFax(phone.getPropertyValueAsString());
                            businessFax = true;
                        } else if (phone.getPhoneType().equals(SIFC.MOBILE_BUSINESS_TELEPHONE_NUMBER) && homeMobile == false && businessMobile == false) {
                            gmailContact.setMobilePhone(phone.getPropertyValueAsString());
                            businessMobile = true;
                        } else if (phone.getPhoneType().equals(SIFC.PAGER_NUMBER) && homePager == false && businessPager == false) {
                            gmailContact.setPager(phone.getPropertyValueAsString());
                            businessPager = true;
                        } else {
                            if (log.isDebugEnabled()) log.debug(""GOOGLE - Whoops - Business Phones UNKNOWN TYPE:"" + phone.getPhoneType() + "" VALUE:"" + phone.getPropertyValueAsString());
                        }
                    }
                }
                if (contact.getBusinessDetail().getCompany() != null) if (contact.getBusinessDetail().getCompany().getPropertyValueAsString() != null) {
                    if (log.isDebugEnabled()) log.debug(""COMPANY: "" + contact.getBusinessDetail().getCompany().getPropertyValueAsString());
                    gmailContact.setCompany(contact.getBusinessDetail().getCompany().getPropertyValueAsString());
                }
                if (contact.getBusinessDetail().getTitles() != null && contact.getBusinessDetail().getTitles().size() > 0) {
                    if (contact.getBusinessDetail().getTitles().get(0) != null) {
                        Title title = (Title) contact.getBusinessDetail().getTitles().get(0);
                        if (log.isDebugEnabled()) log.debug(""TITLE: "" + title.getPropertyValueAsString());
                        gmailContact.setJobTitle(title.getPropertyValueAsString());
                    }
                }
            }
            if (contact.getNotes() != null && contact.getNotes().size() > 0) {
                if (contact.getNotes().get(0) != null) {
                    Note notes = (Note) contact.getNotes().get(0);
                    if (notes.getPropertyValueAsString() != null && notes.getPropertyValueAsString().equals("""") == false) {
                        if (log.isDebugEnabled()) log.debug(""NOTES: "" + notes.getPropertyValueAsString());
                        gmailContact.setNotes(notes.getPropertyValueAsString());
                    }
                }
            }
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(contact.toString().getBytes());
            gmailContact.setMd5Hash(new BigInteger(m.digest()).toString());
            return gmailContact;
        } catch (Exception e) {
            throw new GmailManagerException(""GOOGLE Gmail - convertContactToGmailContact error: "" + e.getMessage());
        }
    }
","    public static String md5Encode(String pass) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(pass.getBytes());
            byte[] result = md.digest();
            return bytes2hexStr(result);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""La librería java.security no implemente MD5"");
        }
    }
",True
900514,4773756,14624031,"    public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException {
        ZipOutputStream myZipOut = null;
        BufferedInputStream myDocumentInputStream = null;
        String myFinalFile = null;
        String myTargetPath = null;
        String myTargetFileName = null;
        String myInputFileName = null;
        byte[] myBytesBuffer = null;
        int myLength = 0;
        try {
            myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile));
            myZipOut.putNextEntry(new ZipEntry(myTargetPath + myTargetFileName));
            myDocumentInputStream = new BufferedInputStream(new FileInputStream(myInputFileName));
            while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength);
            myZipOut.closeEntry();
            myZipOut.close();
        } catch (FileNotFoundException e) {
            throw (new BpsProcessException(BpsProcessException.ERR_OPEN_FILE, ""FileNotFoundException while building zip dest file""));
        } catch (IOException e) {
            throw (new BpsProcessException(BpsProcessException.ERR_OPEN_FILE, ""IOException while building zip dest file""));
        }
    }
","    public static void copyFile(File in, File out) throws ObclipseException {
        try {
            FileChannel inChannel = null;
            FileChannel outChannel = null;
            try {
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (FileNotFoundException e) {
            Msg.error(""The file ''{0}'' to copy does not exist!"", e, in.getAbsolutePath());
        } catch (IOException e) {
            Msg.ioException(in, out, e);
        }
    }
",True
900515,5933080,23429413,"    public void addUser(String username, String password, String filename) {
        String data = """";
        try {
            open(filename);
            MessageDigest mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(password.getBytes());
            byte[] digest = mdAlgorithm.digest();
            StringBuffer encPasswd = new StringBuffer();
            for (int i = 0; i < digest.length; i++) {
                password = Integer.toHexString(255 & digest[i]);
                if (password.length() < 2) {
                    password = ""0"" + password;
                }
                encPasswd.append(password);
                data = username + "" "" + encPasswd + ""\r\n"";
            }
            try {
                long length = file.length();
                file.seek(length);
                file.write(data.getBytes());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            close();
        } catch (NoSuchAlgorithmException ex) {
        }
    }
","    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md4result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD4"", new BouncyCastleProvider());
            md.reset();
            md.update(input.getBytes(""UnicodeLittleUnmarked""));
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md4result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (UnsupportedEncodingException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD4Hash"", Level.FATAL, ex);
        }
        return (md4result.toString());
    }
",True
900516,12908415,12214439,"    private synchronized void persist() {
        Connection conn = null;
        try {
            PoolManager pm = PoolManager.getInstance();
            conn = pm.getConnection(JukeXTrackStore.DB_NAME);
            conn.setAutoCommit(false);
            Statement state = conn.createStatement();
            state.executeUpdate(""DELETE FROM PlaylistEntry WHERE playlistid="" + this.id);
            if (this.size() > 0) {
                StringBuffer sql = new StringBuffer();
                sql.append(""INSERT INTO PlaylistEntry ( playlistid , trackid , position ) VALUES "");
                int location = 0;
                Iterator i = ll.iterator();
                while (i.hasNext()) {
                    long currTrackID = ((DatabaseObject) i.next()).getId();
                    sql.append('(').append(this.id).append(',').append(currTrackID).append(',').append(location++).append(')');
                    if (i.hasNext()) sql.append(',');
                }
                state.executeUpdate(sql.toString());
            }
            conn.commit();
            conn.setAutoCommit(true);
            state.close();
        } catch (SQLException se) {
            try {
                conn.rollback();
            } catch (SQLException ignore) {
            }
            log.error(""Encountered an error persisting a playlist"", se);
        } finally {
            try {
                conn.close();
            } catch (SQLException ignore) {
            }
        }
    }
","    public boolean saveNote(NoteData n) {
        String query;
        try {
            conn.setAutoCommit(false);
            Statement stmt = null;
            ResultSet rset = null;
            stmt = conn.createStatement();
            query = ""select * from notes where noteid = "" + n.getID();
            rset = stmt.executeQuery(query);
            if (rset.next()) {
                query = ""UPDATE notes SET title = '"" + escapeCharacters(n.getTitle()) + ""', keywords = '"" + escapeCharacters(n.getKeywords()) + ""' WHERE noteid = "" + n.getID();
                try {
                    stmt.executeUpdate(query);
                } catch (SQLException e) {
                    e.printStackTrace();
                    conn.rollback();
                    conn.setAutoCommit(true);
                    return false;
                }
                LinkedList<FieldData> fields = n.getFields();
                ListIterator<FieldData> iter = fields.listIterator(0);
                FieldData f = null;
                PreparedStatement pstmt = conn.prepareStatement(""UPDATE fielddata SET data = ? WHERE noteid = ? AND fieldid = ?"");
                try {
                    while (iter.hasNext()) {
                        f = iter.next();
                        if (f instanceof FieldDataImage) {
                            System.out.println(""field is an image."");
                            pstmt.setBytes(1, ((FieldDataImage) f).getDataBytes());
                        } else {
                            System.out.println(""field is not an image"");
                            pstmt.setString(1, f.getData());
                        }
                        pstmt.setInt(2, n.getID());
                        pstmt.setInt(3, f.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                query = ""DELETE FROM links WHERE (note1id = "" + n.getID() + "" OR note2id = "" + n.getID() + "")"";
                try {
                    stmt.execute(query);
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                Vector<Link> associations = n.getAssociations();
                ListIterator<Link> itr = associations.listIterator();
                Link association = null;
                pstmt = conn.prepareStatement(""INSERT INTO links (note1id, note2id) VALUES (?, ?)"");
                try {
                    while (itr.hasNext()) {
                        association = itr.next();
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, association.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
            } else {
                query = ""INSERT INTO notes (templateid, title, keywords) VALUES ("" + n.getTemplate().getID() + "", '"" + escapeCharacters(n.getTitle()) + ""', '"" + escapeCharacters(n.getKeywords()) + ""')"";
                try {
                    stmt.executeUpdate(query);
                } catch (SQLException e) {
                    e.printStackTrace();
                    conn.rollback();
                    conn.setAutoCommit(true);
                    return false;
                }
                LinkedList<FieldData> fields = n.getFields();
                ListIterator<FieldData> iter = fields.listIterator(0);
                FieldData f = null;
                n.setID(Integer.parseInt(executeMySQLGet(""SELECT LAST_INSERT_ID()"")));
                PreparedStatement pstmt;
                try {
                    pstmt = conn.prepareStatement(""INSERT INTO fielddata (noteid, fieldid, data) VALUES (?,?,?)"");
                    while (iter.hasNext()) {
                        f = iter.next();
                        if (f instanceof FieldDataImage) {
                            System.out.println(""field is an image."");
                            pstmt.setBytes(3, ((FieldDataImage) f).getDataBytes());
                        } else {
                            System.out.println(""field is not an image"");
                            pstmt.setString(3, f.getData());
                        }
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, f.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
                Vector<Link> assoc = n.getAssociations();
                Iterator<Link> itr = assoc.listIterator();
                Link l = null;
                pstmt = conn.prepareStatement(""INSERT INTO links (note1id, note2id) VALUES (?,?)"");
                try {
                    while (itr.hasNext()) {
                        l = itr.next();
                        pstmt.setInt(1, n.getID());
                        pstmt.setInt(2, l.getID());
                        pstmt.execute();
                    }
                } catch (SQLException e) {
                    conn.rollback();
                    conn.setAutoCommit(true);
                    e.printStackTrace();
                    return false;
                }
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }
",True
900517,23390255,17597668,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    private boolean copyFiles(File sourceDir, File destinationDir) {
        boolean result = false;
        try {
            if (sourceDir != null && destinationDir != null && sourceDir.exists() && destinationDir.exists() && sourceDir.isDirectory() && destinationDir.isDirectory()) {
                File sourceFiles[] = sourceDir.listFiles();
                if (sourceFiles != null && sourceFiles.length > 0) {
                    File destFiles[] = destinationDir.listFiles();
                    if (destFiles != null && destFiles.length > 0) {
                        for (int i = 0; i < destFiles.length; i++) {
                            if (destFiles[i] != null) {
                                destFiles[i].delete();
                            }
                        }
                    }
                    for (int i = 0; i < sourceFiles.length; i++) {
                        if (sourceFiles[i] != null && sourceFiles[i].exists() && sourceFiles[i].isFile()) {
                            String fileName = destFiles[i].getName();
                            File destFile = new File(destinationDir.getAbsolutePath() + ""/"" + fileName);
                            if (!destFile.exists()) destFile.createNewFile();
                            FileInputStream in = new FileInputStream(sourceFiles[i]);
                            FileOutputStream out = new FileOutputStream(destFile);
                            FileChannel fcIn = in.getChannel();
                            FileChannel fcOut = out.getChannel();
                            fcIn.transferTo(0, fcIn.size(), fcOut);
                        }
                    }
                }
            }
            result = true;
        } catch (Exception e) {
            System.out.println(""Exception in copyFiles Method : "" + e);
        }
        return result;
    }
",True
900518,9150851,1022820,"    public static String encrypt(String text) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""UTF-8""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
","    public static final String computeHash(String stringToCompile) {
        String retVal = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(stringToCompile.getBytes());
            byte[] result = md5.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < result.length; i++) {
                hexString.append(Integer.toHexString(0xFF & result[i]));
            }
            retVal = hexString.toString();
            if (log.isDebugEnabled()) log.debug(""MD5 hash for \"""" + stringToCompile + ""\"" is: "" + retVal);
        } catch (Exception exe) {
            log.error(exe.getMessage(), exe);
        }
        return retVal;
    }
",True
900519,20286589,93208,"    public static void copyFile(final File source, final File target) throws FileNotFoundException, IOException {
        FileChannel in = new FileInputStream(source).getChannel(), out = new FileOutputStream(target).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
        out.close();
        in.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900520,9530015,4774514,"    public static void main(String[] args) throws Throwable {
        Options options = new Options();
        options.addOption(new CommandLineOptionBuilder(""cas"", ""cas file"").isRequired(true).build());
        options.addOption(new CommandLineOptionBuilder(""o"", ""output directory"").longName(""outputDir"").isRequired(true).build());
        options.addOption(new CommandLineOptionBuilder(""tempDir"", ""temp directory"").build());
        options.addOption(new CommandLineOptionBuilder(""prefix"", ""file prefix for all generated files ( default "" + DEFAULT_PREFIX + "" )"").build());
        options.addOption(new CommandLineOptionBuilder(""trim"", ""trim file in sfffile's tab delimmed trim format"").build());
        options.addOption(new CommandLineOptionBuilder(""trimMap"", ""trim map file containing tab delimited trimmed fastX file to untrimmed counterpart"").build());
        options.addOption(new CommandLineOptionBuilder(""chromat_dir"", ""directory of chromatograms to be converted into phd "" + ""(it is assumed the read data for these chromatograms are in a fasta file which the .cas file knows about"").build());
        options.addOption(new CommandLineOptionBuilder(""s"", ""cache size ( default "" + DEFAULT_CACHE_SIZE + "" )"").longName(""cache_size"").build());
        options.addOption(new CommandLineOptionBuilder(""useIllumina"", ""any FASTQ files in this assembly are encoded in Illumina 1.3+ format (default is Sanger)"").isFlag(true).build());
        options.addOption(new CommandLineOptionBuilder(""useClosureTrimming"", ""apply additional contig trimming based on JCVI Closure rules"").isFlag(true).build());
        CommandLine commandLine;
        try {
            commandLine = CommandLineUtils.parseCommandLine(options, args);
            int cacheSize = commandLine.hasOption(""s"") ? Integer.parseInt(commandLine.getOptionValue(""s"")) : DEFAULT_CACHE_SIZE;
            File casFile = new File(commandLine.getOptionValue(""cas""));
            File casWorkingDirectory = casFile.getParentFile();
            ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue(""o""));
            String prefix = commandLine.hasOption(""prefix"") ? commandLine.getOptionValue(""prefix"") : DEFAULT_PREFIX;
            TrimDataStore trimDatastore;
            if (commandLine.hasOption(""trim"")) {
                List<TrimDataStore> dataStores = new ArrayList<TrimDataStore>();
                final String trimFiles = commandLine.getOptionValue(""trim"");
                for (String trimFile : trimFiles.split("","")) {
                    System.out.println(""adding trim file "" + trimFile);
                    dataStores.add(new DefaultTrimFileDataStore(new File(trimFile)));
                }
                trimDatastore = MultipleDataStoreWrapper.createMultipleDataStoreWrapper(TrimDataStore.class, dataStores);
            } else {
                trimDatastore = TrimDataStoreUtil.EMPTY_DATASTORE;
            }
            CasTrimMap trimToUntrimmedMap;
            if (commandLine.hasOption(""trimMap"")) {
                trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue(""trimMap"")));
            } else {
                trimToUntrimmedMap = new UnTrimmedExtensionTrimMap();
            }
            boolean useClosureTrimming = commandLine.hasOption(""useClosureTrimming"");
            TraceDataStore<FileSangerTrace> sangerTraceDataStore = null;
            Map<String, File> sangerFileMap = null;
            ReadOnlyDirectoryFileServer sourceChromatogramFileServer = null;
            if (commandLine.hasOption(""chromat_dir"")) {
                sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue(""chromat_dir"")));
                sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, "".scf"");
                sangerFileMap = new HashMap<String, File>();
                Iterator<String> iter = sangerTraceDataStore.getIds();
                while (iter.hasNext()) {
                    String id = iter.next();
                    sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile());
                }
            }
            PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + "".log"")), true);
            PrintWriter consensusOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + "".consensus.fasta"")), true);
            PrintWriter traceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + "".traceFiles.txt"")), true);
            PrintWriter referenceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + "".referenceFiles.txt"")), true);
            long startTime = System.currentTimeMillis();
            logOut.println(System.getProperty(""user.dir""));
            final ReadWriteDirectoryFileServer tempDir;
            if (!commandLine.hasOption(""tempDir"")) {
                tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR);
            } else {
                File t = new File(commandLine.getOptionValue(""tempDir""));
                IOUtil.mkdirs(t);
                tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t);
            }
            try {
                if (!outputDir.contains(""chromat_dir"")) {
                    outputDir.createNewDir(""chromat_dir"");
                }
                if (sourceChromatogramFileServer != null) {
                    for (File f : sourceChromatogramFileServer) {
                        String name = f.getName();
                        OutputStream out = new FileOutputStream(outputDir.createNewFile(""chromat_dir/"" + name));
                        final FileInputStream fileInputStream = new FileInputStream(f);
                        try {
                            IOUtils.copy(fileInputStream, out);
                        } finally {
                            IOUtils.closeQuietly(out);
                            IOUtils.closeQuietly(fileInputStream);
                        }
                    }
                }
                FastQQualityCodec qualityCodec = commandLine.hasOption(""useIllumina"") ? FastQQualityCodec.ILLUMINA : FastQQualityCodec.SANGER;
                CasDataStoreFactory casDataStoreFactory = new MultiCasDataStoreFactory(new H2SffCasDataStoreFactory(casWorkingDirectory, tempDir, EmptyDataStoreFilter.INSTANCE), new H2FastQCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, qualityCodec, tempDir.getRootDir()), new FastaCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, cacheSize));
                final SliceMapFactory sliceMapFactory = new LargeNoQualitySliceMapFactory();
                CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build();
                System.out.println(""finished making casAssemblies"");
                for (File traceFile : casAssembly.getNuceotideFiles()) {
                    traceFilesOut.println(traceFile.getAbsolutePath());
                    final String name = traceFile.getName();
                    String extension = FilenameUtils.getExtension(name);
                    if (name.contains(""fastq"")) {
                        if (!outputDir.contains(""solexa_dir"")) {
                            outputDir.createNewDir(""solexa_dir"");
                        }
                        if (outputDir.contains(""solexa_dir/"" + name)) {
                            IOUtil.delete(outputDir.getFile(""solexa_dir/"" + name));
                        }
                        outputDir.createNewSymLink(traceFile.getAbsolutePath(), ""solexa_dir/"" + name);
                    } else if (""sff"".equals(extension)) {
                        if (!outputDir.contains(""sff_dir"")) {
                            outputDir.createNewDir(""sff_dir"");
                        }
                        if (outputDir.contains(""sff_dir/"" + name)) {
                            IOUtil.delete(outputDir.getFile(""sff_dir/"" + name));
                        }
                        outputDir.createNewSymLink(traceFile.getAbsolutePath(), ""sff_dir/"" + name);
                    }
                }
                for (File traceFile : casAssembly.getReferenceFiles()) {
                    referenceFilesOut.println(traceFile.getAbsolutePath());
                }
                DataStore<CasContig> contigDatastore = casAssembly.getContigDataStore();
                Map<String, AceContig> aceContigs = new HashMap<String, AceContig>();
                CasIdLookup readIdLookup = sangerFileMap == null ? casAssembly.getReadIdLookup() : new DifferentFileCasIdLookupAdapter(casAssembly.getReadIdLookup(), sangerFileMap);
                Date phdDate = new Date(startTime);
                NextGenClosureAceContigTrimmer closureContigTrimmer = null;
                if (useClosureTrimming) {
                    closureContigTrimmer = new NextGenClosureAceContigTrimmer(2, 5, 10);
                }
                for (CasContig casContig : contigDatastore) {
                    final AceContigAdapter adpatedCasContig = new AceContigAdapter(casContig, phdDate, readIdLookup);
                    CoverageMap<CoverageRegion<AcePlacedRead>> coverageMap = DefaultCoverageMap.buildCoverageMap(adpatedCasContig);
                    for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) {
                        if (useClosureTrimming) {
                            AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig);
                            if (trimmedAceContig == null) {
                                System.out.printf(""%s was completely trimmed... skipping%n"", aceContig.getId());
                                continue;
                            }
                            aceContig = trimmedAceContig;
                        }
                        aceContigs.put(aceContig.getId(), aceContig);
                        consensusOut.print(new DefaultNucleotideEncodedSequenceFastaRecord(aceContig.getId(), NucleotideGlyph.convertToString(NucleotideGlyph.convertToUngapped(aceContig.getConsensus().decode()))));
                    }
                }
                System.out.printf(""finished adapting %d casAssemblies into %d ace contigs%n"", contigDatastore.size(), aceContigs.size());
                QualityDataStore qualityDataStore = sangerTraceDataStore == null ? casAssembly.getQualityDataStore() : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(QualityDataStore.class, TraceQualityDataStoreAdapter.adapt(sangerTraceDataStore), casAssembly.getQualityDataStore());
                final DateTime phdDateTime = new DateTime(phdDate);
                final PhdDataStore casPhdDataStore = CachedDataStore.createCachedDataStore(PhdDataStore.class, new ArtificalPhdDataStore(casAssembly.getNucleotideDataStore(), qualityDataStore, phdDateTime), cacheSize);
                final PhdDataStore phdDataStore = sangerTraceDataStore == null ? casPhdDataStore : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(PhdDataStore.class, new PhdSangerTraceDataStoreAdapter<FileSangerTrace>(sangerTraceDataStore, phdDateTime), casPhdDataStore);
                WholeAssemblyAceTag pathToPhd = new DefaultWholeAssemblyAceTag(""phdball"", ""cas2consed"", new Date(DateTimeUtils.currentTimeMillis()), ""../phd_dir/"" + prefix + "".phd.ball"");
                AceAssembly aceAssembly = new DefaultAceAssembly<AceContig>(new SimpleDataStore<AceContig>(aceContigs), phdDataStore, Collections.<File>emptyList(), new DefaultAceTagMap(Collections.<ConsensusAceTag>emptyList(), Collections.<ReadAceTag>emptyList(), Arrays.asList(pathToPhd)));
                System.out.println(""writing consed package..."");
                ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false);
            } catch (Throwable t) {
                t.printStackTrace(logOut);
                throw t;
            } finally {
                long endTime = System.currentTimeMillis();
                logOut.printf(""took %s%n"", new Period(endTime - startTime));
                logOut.flush();
                logOut.close();
                outputDir.close();
                consensusOut.close();
                traceFilesOut.close();
                referenceFilesOut.close();
                trimDatastore.close();
            }
        } catch (ParseException e) {
            printHelp(options);
            System.exit(1);
        }
    }
","    protected synchronized String encryptThis(String seed, String text) throws EncryptionException {
        String encryptedValue = null;
        String textToEncrypt = text;
        if (seed != null) {
            textToEncrypt = seed.toLowerCase() + text;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(textToEncrypt.getBytes(""UTF-8""));
            encryptedValue = (new BASE64Encoder()).encode(md.digest());
        } catch (Exception e) {
            throw new EncryptionException(e);
        }
        return encryptedValue;
    }
",False
900521,22447616,8080019,"    public Usuario insertUsuario(IUsuario usuario) throws SQLException {
        Connection conn = null;
        String insert = ""insert into Usuario (idusuario, nome, email, telefone, cpf, login, senha) "" + ""values "" + ""(nextval('seq_usuario'), '"" + usuario.getNome() + ""', '"" + usuario.getEmail() + ""', "" + ""'"" + usuario.getTelefone() + ""', '"" + usuario.getCpf() + ""', '"" + usuario.getLogin() + ""', '"" + usuario.getSenha() + ""')"";
        try {
            conn = connectionFactory.getConnection(true);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            Integer result = stmt.executeUpdate(insert);
            if (result == 1) {
                String sqlSelect = ""select last_value from seq_usuario"";
                ResultSet rs = stmt.executeQuery(sqlSelect);
                while (rs.next()) {
                    usuario.setIdUsuario(rs.getInt(""last_value""));
                }
                if (usuario instanceof Requerente) {
                    RequerenteDAO requerenteDAO = new RequerenteDAO();
                    requerenteDAO.insertRequerente((Requerente) usuario, conn);
                } else if (usuario instanceof RecursoHumano) {
                    RecursoHumanoDAO recursoHumanoDAO = new RecursoHumanoDAO();
                    recursoHumanoDAO.insertRecursoHumano((RecursoHumano) usuario, conn);
                }
            }
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
        return null;
    }
","    public static String getInstanceUserdata() throws IOException {
        int retries = 0;
        while (true) {
            try {
                URL url = new URL(""http://169.254.169.254/latest/user-data/"");
                InputStreamReader rdr = new InputStreamReader(url.openStream());
                StringWriter wtr = new StringWriter();
                char[] buf = new char[1024];
                int bytes;
                while ((bytes = rdr.read(buf)) > -1) {
                    if (bytes > 0) {
                        wtr.write(buf, 0, bytes);
                    }
                }
                rdr.close();
                return wtr.toString();
            } catch (IOException ex) {
                if (retries == 5) {
                    logger.debug(""Problem getting user data, retries exhausted..."");
                    return null;
                } else {
                    logger.debug(""Problem getting user data, retrying..."");
                    try {
                        Thread.sleep((int) Math.pow(2.0, retries) * 1000);
                    } catch (InterruptedException e) {
                    }
                    retries++;
                }
            }
        }
    }
",False
900522,19392395,14212319,"    private void updateIngredients(Recipe recipe, int id) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        try {
            conn = getConnection();
            pst1 = conn.prepareStatement(""DELETE FROM ingredients WHERE recipe_id = ?"");
            pst1.setInt(1, id);
            if (pst1.executeUpdate() >= 0) {
                pst2 = conn.prepareStatement(""INSERT INTO ingredients (recipe_id, name, amount, measure_id, shop_flag) VALUES (?,?,?,?,?)"");
                IngredientContainer ings = recipe.getIngredients();
                Ingredient ingBean = null;
                Iterator it;
                for (it = ings.getIngredients().iterator(); it.hasNext(); ) {
                    ingBean = (Ingredient) it.next();
                    pst2.setInt(1, id);
                    pst2.setString(2, ingBean.getName());
                    pst2.setDouble(3, ingBean.getAmount());
                    pst2.setInt(4, ingBean.getType());
                    pst2.setInt(5, ingBean.getShopFlag());
                    pst2.executeUpdate();
                }
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            MainFrame.appendStatusText(""Can't add ingredient, the exception was "" + e.getMessage());
        } finally {
            try {
                if (pst1 != null) pst1.close();
                pst1 = null;
                if (pst2 != null) pst2.close();
                pst2 = null;
            } catch (Exception ex) {
                MainFrame.appendStatusText(""Can't close database connection."");
            }
        }
    }
","    @Override
    public String resolveItem(String oldJpgFsPath) throws DatabaseException {
        if (oldJpgFsPath == null || """".equals(oldJpgFsPath)) throw new NullPointerException(""oldJpgFsPath"");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn(""Unable to set autocommit off"", e);
        }
        PreparedStatement statement = null;
        String ret = null;
        try {
            statement = getConnection().prepareStatement(SELECT_ITEM_STATEMENT);
            statement.setString(1, oldJpgFsPath);
            ResultSet rs = statement.executeQuery();
            int i = 0;
            int id = -1;
            int rowsAffected = 0;
            while (rs.next()) {
                id = rs.getInt(""id"");
                ret = rs.getString(""imageFile"");
                i++;
            }
            if (id != -1 && new File(ret).exists()) {
                statement = getConnection().prepareStatement(UPDATE_ITEM_STATEMENT);
                statement.setInt(1, id);
                rowsAffected = statement.executeUpdate();
            } else {
                return null;
            }
            if (rowsAffected == 1) {
                getConnection().commit();
                LOGGER.debug(""DB has been updated."");
            } else {
                getConnection().rollback();
                LOGGER.error(""DB has not been updated -> rollback!"");
            }
        } catch (SQLException e) {
            LOGGER.error(e);
        } finally {
            closeConnection();
        }
        return ret;
    }
",True
900523,3689392,1162514,"    public static String encrypt(String plaintext) throws Exception {
        String algorithm = XML.get(""security.algorithm"");
        if (algorithm == null) algorithm = ""SHA-1"";
        MessageDigest md = MessageDigest.getInstance(algorithm);
        md.update(plaintext.getBytes(""UTF-8""));
        return new BASE64Encoder().encode(md.digest());
    }
","    private LSInput resolveResource(String aPublicId, String aSystemId, String aBaseURI, boolean baseUsed) {
        LSInput lsInput = new DefaultLSInput();
        lsInput.setPublicId(aPublicId);
        lsInput.setSystemId(aSystemId);
        String base = null;
        try {
            int baseEndPos = -1;
            if (aBaseURI != null) {
                baseEndPos = aBaseURI.lastIndexOf(""/"");
            }
            if (baseEndPos <= 0) {
                if (baseUsed) {
                    return null;
                } else {
                    return resolveResource(aPublicId, aSystemId, schemaBasePath + ""/"" + aSystemId, true);
                }
            }
            base = aBaseURI.substring(0, baseEndPos);
            URL url = new URL(base + ""/"" + aSystemId);
            lsInput.setByteStream(url.openConnection().getInputStream());
            return lsInput;
        } catch (IOException e) {
            return resolveResource(aPublicId, aSystemId, base, baseUsed);
        }
    }
",False
900524,1663419,11562158,"    private static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    private File writeResourceToFile(String resource) throws IOException {
        File tmp = File.createTempFile(""zfppt"" + resource, null);
        InputStream res = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
        OutputStream out = new FileOutputStream(tmp);
        IOUtils.copy(res, out);
        out.close();
        return tmp;
    }
",True
900525,2994948,13325917,"    public JSONObject getTargetGraph(HttpSession session, JSONObject json) throws JSONException {
        StringBuffer out = new StringBuffer();
        Graph tgt = null;
        MappingManager manager = (MappingManager) session.getAttribute(RuncibleConstants.MAPPING_MANAGER.key());
        try {
            tgt = manager.getTargetGraph();
            if (tgt != null) {
                FlexGraphViewFactory factory = new FlexGraphViewFactory();
                factory.setColorScheme(ColorSchemes.ORANGES);
                factory.visit(tgt);
                GraphView view = factory.getGraphView();
                GraphViewRenderer renderer = new FlexGraphViewRenderer();
                renderer.setGraphView(view);
                InputStream xmlStream = renderer.renderGraphView();
                StringWriter writer = new StringWriter();
                IOUtils.copy(xmlStream, writer);
                writer.close();
                System.out.println(writer.toString());
                out.append(writer.toString());
            } else {
                out.append(""No target graph loaded."");
            }
        } catch (Exception e) {
            return JSONUtils.SimpleJSONError(""Cannot load target graph: "" + e.getMessage());
        }
        return JSONUtils.SimpleJSONResponse(out.toString());
    }
","    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getCanonicalPath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getCanonicalPath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getCanonicalPath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFile.getCanonicalPath());
            throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[1024 * 1024];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
            if (fromFile.isHidden()) {
            }
            toFile.setLastModified(fromFile.lastModified());
            toFile.setExecutable(fromFile.canExecute());
            toFile.setReadable(fromFile.canRead());
            toFile.setWritable(toFile.canWrite());
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",True
900526,14481932,23353199,"    public static String upload_file(String sessionid, String localFilePath, String remoteTagPath) {
        String jsonstring = ""If you see this message, there is some problem inside the function:upload_file()"";
        String srcPath = localFilePath;
        String uploadUrl = ""https://s2.cloud.cm/rpc/json/?session_id="" + sessionid + ""&c=Storage&m=upload_file&tag="" + remoteTagPath;
        String end = ""\r\n"";
        String twoHyphens = ""--"";
        String boundary = ""******"";
        try {
            URL url = new URL(uploadUrl);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod(""POST"");
            httpURLConnection.setRequestProperty(""Connection"", ""Keep-Alive"");
            httpURLConnection.setRequestProperty(""Charset"", ""UTF-8"");
            httpURLConnection.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary="" + boundary);
            DataOutputStream dos = new DataOutputStream(httpURLConnection.getOutputStream());
            dos.writeBytes(twoHyphens + boundary + end);
            dos.writeBytes(""Content-Disposition: form-data; name=\""file\""; filename=\"""" + srcPath.substring(srcPath.lastIndexOf(""/"") + 1) + ""\"""" + end);
            dos.writeBytes(end);
            FileInputStream fis = new FileInputStream(srcPath);
            byte[] buffer = new byte[8192];
            int count = 0;
            while ((count = fis.read(buffer)) != -1) {
                dos.write(buffer, 0, count);
            }
            fis.close();
            dos.writeBytes(end);
            dos.writeBytes(twoHyphens + boundary + twoHyphens + end);
            dos.flush();
            InputStream is = httpURLConnection.getInputStream();
            InputStreamReader isr = new InputStreamReader(is, ""utf-8"");
            BufferedReader br = new BufferedReader(isr);
            jsonstring = br.readLine();
            dos.close();
            is.close();
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
","    public static void extractZip(Resource zip, FileObject outputDirectory) {
        ZipInputStream zis = null;
        try {
            zis = new ZipInputStream(zip.getResourceURL().openStream());
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                String[] pathElements = entry.getName().split(""/"");
                FileObject extractDir = outputDirectory;
                for (int i = 0; i < pathElements.length - 1; i++) {
                    String pathElementName = pathElements[i];
                    FileObject pathElementFile = extractDir.resolveFile(pathElementName);
                    if (!pathElementFile.exists()) {
                        pathElementFile.createFolder();
                    }
                    extractDir = pathElementFile;
                }
                String fileName = entry.getName();
                if (fileName.endsWith(""/"")) {
                    fileName = fileName.substring(0, fileName.length() - 1);
                }
                if (fileName.contains(""/"")) {
                    fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                }
                if (entry.isDirectory()) {
                    extractDir.resolveFile(fileName).createFolder();
                } else {
                    FileObject file = extractDir.resolveFile(fileName);
                    file.createFile();
                    int size = (int) entry.getSize();
                    byte[] unpackBuffer = new byte[size];
                    zis.read(unpackBuffer, 0, size);
                    InputStream in = null;
                    OutputStream out = null;
                    try {
                        in = new ByteArrayInputStream(unpackBuffer);
                        out = file.getContent().getOutputStream();
                        IOUtils.copy(in, out);
                    } finally {
                        IOUtils.closeQuietly(in);
                        IOUtils.closeQuietly(out);
                    }
                }
            }
        } catch (IOException e2) {
            throw new RuntimeException(e2);
        } finally {
            IOUtils.closeQuietly(zis);
        }
    }
",False
900527,9270406,2273819,"    public void downSync(Vector v) throws SQLException {
        try {
            con = allocateConnection(tableName);
            PreparedStatement update = con.prepareStatement(""update cal_Event set owner=?,subject=?,text=?,place=?,"" + ""contactperson=?,startdate=?,enddate=?,starttime=?,endtime=?,allday=?,"" + ""syncstatus=?,dirtybits=? where OId=? and syncstatus=?"");
            PreparedStatement insert = con.prepareStatement(""insert into cal_Event (owner,subject,text,place,"" + ""contactperson,startdate,enddate,starttime,endtime,allday,syncstatus,"" + ""dirtybits) values(?,?,?,?,?,?,?,?,?,?,?,?)"");
            PreparedStatement insert1 = con.prepareStatement(DBUtil.getQueryCurrentOID(con, ""cal_Event"", ""newoid""));
            PreparedStatement delete1 = con.prepareStatement(""delete from  cal_Event_Remind where event=?"");
            PreparedStatement delete2 = con.prepareStatement(""delete from  cal_Event where OId=? "" + ""and (syncstatus=? or syncstatus=?)"");
            for (int i = 0; i < v.size(); i++) {
                try {
                    DO = (EventDO) v.elementAt(i);
                    if (DO.getSyncstatus() == INSERT) {
                        insert.setBigDecimal(1, DO.getOwner());
                        insert.setString(2, DO.getSubject());
                        insert.setString(3, DO.getText());
                        insert.setString(4, DO.getPlace());
                        insert.setString(5, DO.getContactperson());
                        insert.setDate(6, DO.getStartdate());
                        insert.setDate(7, DO.getEnddate());
                        insert.setTime(8, DO.getStarttime());
                        insert.setTime(9, DO.getEndtime());
                        insert.setBoolean(10, DO.getAllday());
                        insert.setInt(11, RESET);
                        insert.setInt(12, RESET);
                        con.executeUpdate(insert, null);
                        con.reset();
                        rs = con.executeQuery(insert1, null);
                        if (rs.next()) DO.setOId(rs.getBigDecimal(""newoid""));
                        con.reset();
                    } else if (DO.getSyncstatus() == UPDATE) {
                        update.setBigDecimal(1, DO.getOwner());
                        update.setString(2, DO.getSubject());
                        update.setString(3, DO.getText());
                        update.setString(4, DO.getPlace());
                        update.setString(5, DO.getContactperson());
                        update.setDate(6, DO.getStartdate());
                        update.setDate(7, DO.getEnddate());
                        update.setTime(8, DO.getStarttime());
                        update.setTime(9, DO.getEndtime());
                        update.setBoolean(10, DO.getAllday());
                        update.setInt(11, RESET);
                        update.setInt(12, RESET);
                        update.setBigDecimal(13, DO.getOId());
                        update.setInt(14, RESET);
                        con.executeUpdate(update, null);
                        con.reset();
                    } else if (DO.getSyncstatus() == DELETE) {
                        try {
                            con.setAutoCommit(false);
                            delete1.setBigDecimal(1, DO.getOId());
                            con.executeUpdate(delete1, null);
                            delete2.setBigDecimal(1, DO.getOId());
                            delete2.setInt(2, RESET);
                            delete2.setInt(3, DELETE);
                            if (con.executeUpdate(delete2, null) < 1) {
                                con.rollback();
                            } else {
                                con.commit();
                            }
                        } catch (Exception e) {
                            con.rollback();
                            throw e;
                        } finally {
                            con.reset();
                        }
                    }
                } catch (Exception e) {
                    if (DO != null) logError(""Sync-EventDO.owner = "" + DO.getOwner().toString() + "" oid = "" + (DO.getOId() != null ? DO.getOId().toString() : ""NULL""), e);
                }
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            if (DEBUG) logError("""", e);
            throw e;
        } finally {
            release();
        }
    }
","        String digest(final UserAccountEntity account) {
            try {
                final MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
                digest.reset();
                digest.update(account.getUserId().getBytes(""UTF-8""));
                digest.update(account.getLastLogin().toString().getBytes(""UTF-8""));
                digest.update(account.getPerson().getGivenName().getBytes(""UTF-8""));
                digest.update(account.getPerson().getSurname().getBytes(""UTF-8""));
                digest.update(account.getPerson().getEmail().getBytes(""UTF-8""));
                digest.update(m_random);
                return new String(Base64.altEncode(digest.digest()));
            } catch (final Exception e) {
                LOG.error(""Exception"", e);
                throw new RuntimeException(e);
            }
        }
",False
900528,13020691,19710610,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    public void copyImage(String from, String to) {
        File inputFile = new File(from);
        File outputFile = new File(to);
        try {
            if (inputFile.canRead()) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                byte[] buf = new byte[65536];
                int c;
                while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
                in.close();
                out.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",False
900529,5951609,12568442,"    public void testCryptHash() {
        Log.v(""Test"", ""[*] testCryptHash()"");
        String testStr = ""Hash me"";
        byte messageDigest[];
        MessageDigest digest = null;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest.digest(testStr.getBytes());
            digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest = null;
            digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(imei.getBytes());
            messageDigest = digest.digest();
            hashedImei = this.toHex(messageDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
","    public static String MD5(String text) {
        byte[] md5hash = new byte[32];
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return convertToHex(md5hash);
    }
",True
900530,18096549,8694461,"    public static void copyFile(File src, File dest, boolean notifyUserOnError) {
        if (src.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
                byte[] read = new byte[128];
                int len = 128;
                while ((len = in.read(read)) > 0) out.write(read, 0, len);
                out.flush();
                out.close();
                in.close();
            } catch (IOException e) {
                String message = ""Error while copying "" + src.getAbsolutePath() + "" to "" + dest.getAbsolutePath() + "" : "" + e.getMessage();
                if (notifyUserOnError) {
                    Log.getInstance(SystemUtils.class).warnWithUserNotification(message);
                } else {
                    Log.getInstance(SystemUtils.class).warn(message);
                }
            }
        } else {
            String message = ""Unable to copy file: source does not exists: "" + src.getAbsolutePath();
            if (notifyUserOnError) {
                Log.getInstance(SystemUtils.class).warnWithUserNotification(message);
            } else {
                Log.getInstance(SystemUtils.class).warn(message);
            }
        }
    }
","    public InputStream getFtpInputStream() throws IOException {
        try {
            URL url = getURL();
            URLConnection urlc = url.openConnection();
            return urlc.getInputStream();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",False
900531,8335460,8841555,"    public static String encrypt(String password, String algorithm, byte[] salt) {
        StringBuffer buffer = new StringBuffer();
        MessageDigest digest = null;
        int size = 0;
        if (""CRYPT"".equalsIgnoreCase(algorithm)) {
            throw new InternalError(""Not implemented"");
        } else if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {
            size = 20;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SSHA}"");
            } else {
                buffer.append(""{SHA}"");
            }
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {
            size = 16;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SMD5}"");
            } else {
                buffer.append(""{MD5}"");
            }
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        }
        int outSize = size;
        digest.reset();
        digest.update(password.getBytes());
        if (salt != null && salt.length > 0) {
            digest.update(salt);
            outSize += salt.length;
        }
        byte[] out = new byte[outSize];
        System.arraycopy(digest.digest(), 0, out, 0, size);
        if (salt != null && salt.length > 0) {
            System.arraycopy(salt, 0, out, size, salt.length);
        }
        buffer.append(Base64.encode(out));
        return buffer.toString();
    }
","    public String getMd5CodeOf16(String str) {
        StringBuffer buf = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte b[] = md.digest();
            int i;
            buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } finally {
            return buf.toString().substring(8, 24);
        }
    }
",True
900532,662799,9591165,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception {
        Data data = ref.data;
        File file = new File(base + path);
        file.getParentFile().mkdirs();
        if (Debug.level > 1) System.err.println(""read file "" + data.file + "" at index "" + data.index);
        OutputStream output = new FileOutputStream(file);
        if (hashall) output = new DigestOutputStream(output, MessageDigest.getInstance(""MD5""));
        reader.read(output, data.index, data.file);
        output.close();
        if (hashall) {
            String filehash = StringUtils.toHex(((DigestOutputStream) output).getMessageDigest().digest());
            if (!hash.equals(filehash)) throw new RuntimeException(""hash wasn't equal for "" + file);
        }
        file.setLastModified(ref.lastmod);
        if (file.length() != data.size) throw new RuntimeException(""corrupted file "" + file);
    }
",True
900533,3498857,18317332,"    public static void main(String[] args) throws IOException {
        String zipPath = ""C:\\test.zip"";
        CZipInputStream zip_in = null;
        try {
            byte[] c = new byte[1024];
            int slen;
            zip_in = new CZipInputStream(new FileInputStream(zipPath), ""utf-8"");
            do {
                ZipEntry file = zip_in.getNextEntry();
                if (file == null) break;
                String fileName = file.getName();
                System.out.println(fileName);
                String ext = fileName.substring(fileName.lastIndexOf("".""));
                long seed = new Date(System.currentTimeMillis()).getTime();
                String newFileName = Long.toString(seed) + ext;
                FileOutputStream out = new FileOutputStream(newFileName);
                while ((slen = zip_in.read(c, 0, c.length)) != -1) out.write(c, 0, slen);
                out.close();
            } while (true);
        } catch (ZipException zipe) {
            zipe.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            zip_in.close();
        }
    }
","        void execute(Connection conn, Component parent, String context, final ProgressMonitor progressMonitor, ProgressWrapper progressWrapper) throws Exception {
            int noOfComponents = m_components.length;
            Statement statement = null;
            StringBuffer pmNoteBuf = new StringBuffer(m_update ? ""Updating "" : ""Creating "");
            pmNoteBuf.append(m_itemNameAbbrev);
            pmNoteBuf.append("" "");
            pmNoteBuf.append(m_itemNameValue);
            final String pmNote = pmNoteBuf.toString();
            progressMonitor.setNote(pmNote);
            try {
                conn.setAutoCommit(false);
                int id = -1;
                if (m_update) {
                    statement = conn.createStatement();
                    String sql = getUpdateSql(noOfComponents, m_id);
                    statement.executeUpdate(sql);
                    id = m_id;
                    if (m_indexesChanged) deleteComponents(conn, id);
                } else {
                    PreparedStatement pStmt = getInsertPrepStmt(conn, noOfComponents);
                    pStmt.executeUpdate();
                    Integer res = DbCommon.getAutoGenId(parent, context, pStmt);
                    if (res == null) return;
                    id = res.intValue();
                }
                if (!m_update || m_indexesChanged) {
                    PreparedStatement insertCompPrepStmt = conn.prepareStatement(getInsertComponentPrepStmtSql());
                    for (int i = 0; i < noOfComponents; i++) {
                        createComponent(progressMonitor, m_components, pmNote, id, i, insertCompPrepStmt);
                    }
                }
                conn.commit();
                m_itemTable.getPrimaryId().setVal(m_item, id);
                m_itemCache.updateCache(m_item, id);
            } catch (SQLException ex) {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                throw ex;
            } finally {
                if (statement != null) {
                    statement.close();
                }
            }
        }
",False
900534,14341903,18506484,"    private static void processFile(String file) throws IOException {
        FileInputStream in = new FileInputStream(file);
        int read = 0;
        byte[] buf = new byte[2048];
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        while ((read = in.read(buf)) > 0) bout.write(buf, 0, read);
        in.close();
        String converted = bout.toString().replaceAll(""@project.name@"", projectNameS).replaceAll(""@base.package@"", basePackageS).replaceAll(""@base.dir@"", baseDir).replaceAll(""@webapp.dir@"", webAppDir).replaceAll(""path=\""target/classes\"""", ""path=\""src/main/webapp/WEB-INF/classes\"""");
        FileOutputStream out = new FileOutputStream(file);
        out.write(converted.getBytes());
        out.close();
    }
","    private int addPollToDB(DataSource database) {
        int pollid = -2;
        Connection con = null;
        try {
            con = database.getConnection();
            con.setAutoCommit(false);
            String add = ""insert into polls"" + "" values( ?, ?, ?, ?)"";
            PreparedStatement prepStatement = con.prepareStatement(add);
            prepStatement.setString(1, selectedCourse.getAdmin());
            prepStatement.setString(2, selectedCourse.getCourseId());
            prepStatement.setString(3, getTitle());
            prepStatement.setInt(4, 0);
            prepStatement.executeUpdate();
            String findNewID = ""select max(pollid) from polls"";
            prepStatement = con.prepareStatement(findNewID);
            ResultSet newID = prepStatement.executeQuery();
            pollid = -2;
            while (newID.next()) {
                pollid = newID.getInt(1);
            }
            if (pollid == -2) {
                this.sqlError = true;
                throw new Exception();
            }
            String[] options = getAllOptions();
            for (int i = 0; i < 4; i++) {
                String insertOption = ""insert into polloptions values ( ?, ?, ? )"";
                prepStatement = con.prepareStatement(insertOption);
                prepStatement.setString(1, options[i]);
                prepStatement.setInt(2, 0);
                prepStatement.setInt(3, pollid);
                prepStatement.executeUpdate();
            }
            prepStatement.close();
            con.commit();
        } catch (Exception e) {
            sqlError = true;
            e.printStackTrace();
            if (con != null) try {
                con.rollback();
            } catch (Exception logOrIgnore) {
            }
            try {
                throw e;
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        } finally {
            if (con != null) try {
                con.close();
            } catch (Exception logOrIgnore) {
            }
        }
        return pollid;
    }
",False
900535,23030047,3850809,"    public static void downloadImage(File file, String imageUrl) throws IOException {
        int size = 0;
        int copied = 0;
        InputStream in = null;
        FileOutputStream out = null;
        try {
            URL url;
            url = new URL(imageUrl);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(false);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod(""GET"");
            httpURLConnection.connect();
            size = httpURLConnection.getContentLength();
            in = httpURLConnection.getInputStream();
            out = new FileOutputStream(file);
            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
            int n = 0;
            int percent = 0;
            int lastPercent = 0;
            while (-1 != (n = in.read(buffer))) {
                out.write(buffer, 0, n);
                copied += n;
                percent = copied * 100 / size;
                if (lastPercent != percent) {
                    lastPercent = percent;
                    String message = MessageUtils.getMessage(JWallpaperChanger.class, ""downloadPercent"", """" + percent + ""%"");
                    Platform.getPlatform().setTrayCaption(message);
                }
            }
            out.flush();
        } finally {
            Platform.getPlatform().setTrayCaption(null);
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private void buildBundle() {
        if (targetProject == null) {
            MessageDialog.openError(getShell(), ""Error"", ""No target SPAB project selected!"");
            return;
        }
        if (projectProcessDirSelector.getText().trim().length() == 0) {
            MessageDialog.openError(getShell(), ""Error"", ""No process directory selected for project "" + targetProject.getName() + ""!"");
            return;
        }
        deleteBundleFile();
        try {
            File projectDir = targetProject.getLocation().toFile();
            File projectProcessesDir = new File(projectDir, projectProcessDirSelector.getText());
            boolean bpmoCopied = IOUtils.copyProcessFilesSecure(getBPMOFile(), projectProcessesDir);
            boolean sbpelCopied = IOUtils.copyProcessFilesSecure(getSBPELFile(), projectProcessesDir);
            boolean xmlCopied = IOUtils.copyProcessFilesSecure(getBPEL4SWSFile(), projectProcessesDir);
            bundleFile = IOUtils.archiveBundle(projectDir, Activator.getDefault().getStateLocation().toFile());
            if (bpmoCopied) {
                new File(projectProcessesDir, getBPMOFile().getName()).delete();
            }
            if (sbpelCopied) {
                new File(projectProcessesDir, getSBPELFile().getName()).delete();
            }
            if (xmlCopied) {
                new File(projectProcessesDir, getBPEL4SWSFile().getName()).delete();
            }
        } catch (Throwable anyError) {
            LogManager.logError(anyError);
            MessageDialog.openError(getShell(), ""Error"", ""Error building SPAB :\n"" + anyError.getMessage());
            updateBundleUI();
            return;
        }
        bpmoFile = getBPMOFile();
        sbpelFile = getSBPELFile();
        xmlFile = getBPEL4SWSFile();
        updateBundleUI();
        getWizard().getContainer().updateButtons();
    }
",False
900536,10482004,6371585,"    public static void main(String[] args) throws IOException {
        System.out.println(""Start filtering zgps..."");
        final Config config = ConfigUtils.loadConfig(args[0]);
        final String CONFIG_MODULE = ""GPSFilterZGPS"";
        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));
        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));
        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));
        System.out.println(""Start reading selected stages..."");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedStages);
        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");
        System.out.println(""Start reading and writing zgps..."");
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));
            out.write(in.readLine());
            out.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = in.readLine()) != null) {
                String[] entries = lineFromInputFile.split(""\t"");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    out.write(lineFromInputFile);
                    out.newLine();
                    out.flush();
                }
            }
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""Could not find source file for selected stages."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IO Exception while reading or writing zgps."");
            e.printStackTrace();
        }
        System.out.println(""Done."");
    }
","    public void setDefaultDomain(final int domainId) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""domain.setDefaultDomainId""));
                    psImpl.setInt(1, domainId);
                    psImpl.executeUpdate();
                }
            });
            connection.commit();
            cm.updateDefaultDomain();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",False
900537,555928,6198171,"    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
","    public static JSONObject doJSONQuery(String urlstr) throws IOException, MalformedURLException, JSONException, SolrException {
        URL url = new URL(urlstr);
        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuffer buffer = new StringBuffer();
            String str;
            while ((str = in.readLine()) != null) {
                buffer.append(str + ""\n"");
            }
            in.close();
            JSONObject response = new JSONObject(buffer.toString());
            return response;
        } catch (IOException e) {
            if (con != null) {
                try {
                    int statusCode = con.getResponseCode();
                    if (statusCode >= 400) {
                        throw (new SolrSelectUtils()).new SolrException(statusCode);
                    }
                } catch (IOException exc) {
                }
            }
            throw (e);
        }
    }
",False
900538,23069799,699718,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    PasswordTableWindow(String login) {
        super(login + "", tecle a senha de uso �nico"");
        this.login = login;
        Error.log(4001, ""Autentica��o etapa 3 iniciada."");
        Container container = getContentPane();
        container.setLayout(new FlowLayout());
        btnNumber = new JButton[10];
        btnOK = new JButton(""OK"");
        btnClear = new JButton(""Limpar"");
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(2, 10));
        ResultSet rs;
        Statement stmt;
        String sql;
        Vector<Integer> result = new Vector<Integer>();
        sql = ""select key from Senhas_De_Unica_Vez where login='"" + login + ""'"";
        try {
            theConn = DatabaseConnection.getConnection();
            stmt = theConn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                result.add(rs.getInt(""key""));
            }
            rs.close();
            stmt.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (theConn != null) theConn.close();
            } catch (Exception exception) {
            }
        }
        Random rn = new Random();
        int r = rn.nextInt();
        if (result.size() == 0) {
            rn = new Random();
            Vector<Integer> passwordVector = new Vector<Integer>();
            Vector<String> hashVector = new Vector<String>();
            for (int i = 0; i < 10; i++) {
                r = rn.nextInt() % 10000;
                if (r < 0) r = r * (-1);
                passwordVector.add(r);
            }
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter(login + "".txt"", false));
                for (int i = 0; i < 10; i++) {
                    out.append("""" + i + "" "" + passwordVector.get(i) + ""\n"");
                }
                out.close();
                try {
                    for (int i = 0; i < 10; i++) {
                        MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
                        messageDigest.update(passwordVector.get(i).toString().getBytes());
                        BigInteger bigInt = new BigInteger(1, messageDigest.digest());
                        String digest = bigInt.toString(16);
                        sql = ""insert into Senhas_De_Unica_Vez (login,key,password) values "" + ""('"" + login + ""',"" + i + "",'"" + digest + ""')"";
                        try {
                            theConn = DatabaseConnection.getConnection();
                            stmt = theConn.createStatement();
                            stmt.executeUpdate(sql);
                            stmt.close();
                        } catch (Exception exception) {
                            exception.printStackTrace();
                        } finally {
                            try {
                                if (theConn != null) theConn.close();
                            } catch (Exception exception) {
                            }
                        }
                    }
                } catch (NoSuchAlgorithmException exception) {
                    exception.printStackTrace();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(null, ""nova tabela de senhas criada para o usu�rio "" + login + ""."");
            Error.log(1002, ""Sistema encerrado"");
            System.exit(0);
        }
        if (r < 0) r = r * (-1);
        int index = r % result.size();
        if (index > result.size()) index = 0;
        key = result.get(index);
        labelKey = new JLabel(""Chave n�mero "" + key + "" "");
        passwordField = new JPasswordField(12);
        ButtonHandler handler = new ButtonHandler();
        for (int i = 0; i < 10; i++) {
            btnNumber[i] = new JButton("""" + i);
            buttonPanel.add(btnNumber[i]);
            btnNumber[i].addActionListener(handler);
        }
        btnOK.addActionListener(handler);
        btnClear.addActionListener(handler);
        container.add(buttonPanel);
        container.add(passwordField);
        container.add(labelKey);
        container.add(btnOK);
        container.add(btnClear);
        setSize(325, 200);
        setVisible(true);
    }
",False
900539,1156852,16379577,"    private List<String> getRobots(String beginURL, String contextRoot) {
        List<String> vtRobots = new ArrayList<String>();
        BufferedReader bfReader = null;
        try {
            URL urlx = new URL(beginURL + ""/"" + contextRoot + ""/"" + ""robots.txt"");
            URLConnection urlConn = urlx.openConnection();
            urlConn.setUseCaches(false);
            bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String sxLine = """";
            while ((sxLine = bfReader.readLine()) != null) {
                if (sxLine.startsWith(""Disallow:"")) {
                    vtRobots.add(sxLine.substring(10));
                }
            }
        } catch (Exception e) {
            PetstoreUtil.getLogger().log(Level.SEVERE, ""Exception"" + e);
            vtRobots = null;
        } finally {
            try {
                if (bfReader != null) {
                    bfReader.close();
                }
            } catch (Exception ee) {
            }
        }
        return vtRobots;
    }
","    public InputStream sendGetMessage(Properties args) throws IOException {
        String argString = """";
        if (args != null) {
            argString = ""?"" + toEncodedString(args);
        }
        URL url = new URL(servlet.toExternalForm() + argString);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        sendHeaders(con);
        return con.getInputStream();
    }
",False
900540,6214331,11346792,"    public static void copyFile(File src, File dest) {
        try {
            FileInputStream in = new FileInputStream(src);
            FileOutputStream out = new FileOutputStream(dest);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(ioe);
        }
    }
","    public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException {
        if (!generatedOutputDirectory.exists()) {
            generatedOutputDirectory.createFolder();
        }
        if (outputDirectory.exists()) {
            outputDirectory.createFolder();
        }
        ZipUtils.extractZip(new ClasspathResource(classResolver, ""/com/erinors/tapestry/tapdoc/service/xdoc/resources.zip""), outputDirectory);
        for (Library library : libraryModels) {
            String libraryName = library.getName();
            String libraryLocation = library.getLocation();
            generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder();
            try {
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Library.xsl""), ""libraryName"", libraryName);
                FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile(""index.xml"");
                Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                out.write(result);
                out.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            for (Component component : library.getComponents()) {
                String componentName = component.getName();
                System.out.println(""Generating "" + libraryName + "":"" + componentName + ""..."");
                Map<String, String> parameters = new HashMap<String, String>();
                parameters.put(""libraryName"", libraryName);
                parameters.put(""componentName"", componentName);
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Component.xsl""), parameters);
                Writer out = null;
                try {
                    FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true));
                    out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                    out.write(result);
                    out.close();
                    Resource specificationLocation = component.getSpecificationLocation();
                    if (specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL() != null) {
                        File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + ""_tapdoc/resource"").getResourceURL().toURI());
                        FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile(""resource"");
                        if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) {
                            File[] files = srcResourcesDirectory.listFiles();
                            if (files != null) {
                                for (File resource : files) {
                                    if (resource.isFile() && !resource.isHidden()) {
                                        FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName());
                                        resourceFileObject.createFile();
                                        InputStream inResource = null;
                                        OutputStream outResource = null;
                                        try {
                                            inResource = new FileInputStream(resource);
                                            outResource = resourceFileObject.getContent().getOutputStream();
                                            IOUtils.copy(inResource, outResource);
                                        } finally {
                                            IOUtils.closeQuietly(inResource);
                                            IOUtils.closeQuietly(outResource);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    throw new RuntimeException(e);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
        }
        {
            Writer out = null;
            try {
                String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream(""Overview.xsl""));
                FileObject index = generatedOutputDirectory.resolveFile(""index.xml"");
                out = new OutputStreamWriter(index.getContent().getOutputStream(), ""UTF-8"");
                out.write(result);
                out.close();
            } catch (Exception e) {
                throw new RuntimeException(e);
            } finally {
                IOUtils.closeQuietly(out);
            }
        }
    }
",True
900541,1953925,10247943,"    public boolean deploy(MMedia[] media) {
        if (this.getIP_Address().equals(""127.0.0.1"") || this.getName().equals(""localhost"")) {
            log.warning(""You have not defined your own server, we will not really deploy to localhost!"");
            return true;
        }
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(getIP_Address());
            if (ftp.login(getUserName(), getPassword())) log.info(""Connected to "" + getIP_Address() + "" as "" + getUserName()); else {
                log.warning(""Could NOT connect to "" + getIP_Address() + "" as "" + getUserName());
                return false;
            }
        } catch (Exception e) {
            log.log(Level.WARNING, ""Could NOT connect to "" + getIP_Address() + "" as "" + getUserName(), e);
            return false;
        }
        boolean success = true;
        String cmd = null;
        try {
            cmd = ""cwd"";
            ftp.changeWorkingDirectory(getFolder());
            cmd = ""list"";
            String[] fileNames = ftp.listNames();
            log.log(Level.FINE, ""Number of files in "" + getFolder() + "": "" + fileNames.length);
            cmd = ""bin"";
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
            for (int i = 0; i < media.length; i++) {
                if (!media[i].isSummary()) {
                    log.log(Level.INFO, "" Deploying Media Item:"" + media[i].get_ID() + media[i].getExtension());
                    MImage thisImage = media[i].getImage();
                    byte[] buffer = thisImage.getData();
                    ByteArrayInputStream is = new ByteArrayInputStream(buffer);
                    String fileName = media[i].get_ID() + media[i].getExtension();
                    cmd = ""put "" + fileName;
                    ftp.storeFile(fileName, is);
                    is.close();
                }
            }
        } catch (Exception e) {
            log.log(Level.WARNING, cmd, e);
            success = false;
        }
        try {
            cmd = ""logout"";
            ftp.logout();
            cmd = ""disconnect"";
            ftp.disconnect();
        } catch (Exception e) {
            log.log(Level.WARNING, cmd, e);
        }
        ftp = null;
        return success;
    }
","    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException {
        try {
            if (vtf == null) {
                LOG.debug(""Serializing from database"");
                existDocument.stream(out);
            } else {
                LOG.debug(""Serializing from buffer"");
                InputStream is = vtf.getByteStream();
                IOUtils.copy(is, out);
                out.flush();
                IOUtils.closeQuietly(is);
                vtf.delete();
                vtf = null;
            }
        } catch (PermissionDeniedException e) {
            LOG.debug(e.getMessage());
            throw new NotAuthorizedException(this);
        } finally {
            IOUtils.closeQuietly(out);
        }
    }
",False
900542,12760982,19541856,"    public static String MD5Encode(String password) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(password.getBytes());
            final byte[] digest = messageDigest.digest();
            final StringBuilder buf = new StringBuilder(digest.length * 2);
            final char[] HEX_DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            for (int j = 0; j < digest.length; j++) {
                buf.append(HEX_DIGITS[(digest[j] >> 4) & 0x0f]);
                buf.append(HEX_DIGITS[digest[j] & 0x0f]);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            return password;
        }
    }
","    @RequestMapping(value = ""/image/{fileName}"", method = RequestMethod.GET)
    public void getImage(@PathVariable String fileName, HttpServletRequest req, HttpServletResponse res) throws Exception {
        File file = new File(STORAGE_PATH + fileName + "".jpg"");
        res.setHeader(""Cache-Control"", ""no-store"");
        res.setHeader(""Pragma"", ""no-cache"");
        res.setDateHeader(""Expires"", 0);
        res.setContentType(""image/jpg"");
        ServletOutputStream ostream = res.getOutputStream();
        IOUtils.copy(new FileInputStream(file), ostream);
        ostream.flush();
        ostream.close();
    }
",False
900543,17385831,21733173,"    public static void copyFile(String sourceName, String destName) throws IOException {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException exception) {
            throw exception;
        } finally {
            if (sourceChannel != null) {
                try {
                    sourceChannel.close();
                } catch (IOException ex) {
                }
            }
            if (destChannel != null) {
                try {
                    destChannel.close();
                } catch (IOException ex) {
                }
            }
        }
    }
","    private void downloadFtp(File file, URL jurl) throws SocketException, IOException {
        System.out.println(""downloadFtp("" + file + "", "" + jurl + "")"");
        FTPClient client = new FTPClient();
        client.addProtocolCommandListener(new ProtocolCommandListener() {

            public void protocolCommandSent(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }

            public void protocolReplyReceived(ProtocolCommandEvent event) {
                System.out.println(""downloadFtp: "" + event.getMessage());
            }
        });
        try {
            client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort());
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                throw new IOException(""FTP server refused connection."");
            }
            if (!client.login(""anonymous"", ""anonymous"")) {
                client.logout();
                throw new IOException(""Authentication failure."");
            }
            client.setFileType(FTP.BINARY_FILE_TYPE);
            client.enterLocalPassiveMode();
            FileOutputStream out = new FileOutputStream(file);
            boolean ok = client.retrieveFile(jurl.getPath(), out);
            out.close();
            client.logout();
            if (!ok) {
                throw new IOException(""File transfer failure."");
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (client.isConnected()) {
                try {
                    client.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
",False
900544,9857940,10242903,"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new ProjectEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
","    private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException {
        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
        FeatureParser featp = new FeatureParser();
        parser.parse(URIFactory.url(serverPrefix + ""/das/"" + source + ""/features?segment="" + e.id + "":"" + e.start + "","" + e.stop).openStream(), featp);
        return featp.list;
    }
",False
900545,16022022,16069456,"    public boolean copy(Class<?> subCls, String subCol, long id) {
        boolean bool = false;
        this.result = null;
        Connection conn = null;
        Object vo = null;
        try {
            conn = ConnectUtil.getConnect();
            conn.setAutoCommit(false);
            PojoParser parser = PojoParser.getInstances();
            String sql = SqlUtil.getInsertSql(this.getCls());
            vo = this.findById(conn, ""select * from "" + parser.getTableName(cls) + "" where "" + parser.getPriamryKey(cls) + ""="" + id);
            String pk = parser.getPriamryKey(cls);
            this.getCls().getMethod(""set"" + SqlUtil.getFieldName(pk), new Class[] { long.class }).invoke(vo, new Object[] { 0 });
            PreparedStatement ps = conn.prepareStatement(sql);
            setPsParams(ps, vo);
            ps.executeUpdate();
            ps.close();
            long key = this.id;
            parser = PojoParser.getInstances();
            sql = SqlUtil.getInsertSql(subCls);
            Class<?> clses = this.cls;
            this.cls = subCls;
            ps = conn.prepareStatement(""select * from "" + parser.getTableName(subCls) + "" where "" + subCol + ""="" + id);
            this.assembleObjToList(ps);
            ps = conn.prepareStatement(sql);
            ids = new long[orgList.size()];
            Method m = subCls.getMethod(""set"" + SqlUtil.getFieldName(subCol), new Class[] { long.class });
            for (int i = 0; i < orgList.size(); ++i) {
                Object obj = orgList.get(i);
                subCls.getMethod(""set"" + SqlUtil.getFieldName(parser.getPriamryKey(subCls)), new Class[] { long.class }).invoke(obj, new Object[] { 0 });
                m.invoke(obj, new Object[] { key });
                setPsParams(ps, obj);
                ps.addBatch();
                if ((i % 100) == 0) ps.executeBatch();
                ids[i] = this.id;
            }
            ps.executeBatch();
            ps.close();
            conn.commit();
            this.cls = clses;
            this.id = key;
            bool = true;
        } catch (Exception e) {
            try {
                conn.rollback();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            this.result = e.getMessage();
        } finally {
            this.closeConnectWithTransaction(conn);
        }
        return bool;
    }
","    public void delete(int id) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                stmt.executeUpdate(""delete from WebServices where WebServiceId = "" + id);
                stmt.executeUpdate(""delete from WebServiceParams where WebServiceId = "" + id);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",True
900546,11843018,4511510,"    public RespID(PublicKey key) throws OCSPException {
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA1"");
            ASN1InputStream aIn = new ASN1InputStream(key.getEncoded());
            SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(aIn.readObject());
            digest.update(info.getPublicKeyData().getBytes());
            ASN1OctetString keyHash = new DEROctetString(digest.digest());
            this.id = new ResponderID(keyHash);
        } catch (Exception e) {
            throw new OCSPException(""problem creating ID: "" + e, e);
        }
    }
","    public static String cryptoSHA(String _strSrc) {
        try {
            BASE64Encoder encoder = new BASE64Encoder();
            MessageDigest sha = MessageDigest.getInstance(""SHA"");
            sha.update(_strSrc.getBytes());
            byte[] buffer = sha.digest();
            return encoder.encode(buffer);
        } catch (Exception err) {
            System.out.println(err);
        }
        return """";
    }
",True
900547,15805164,6146146,"    @Override
    public boolean isPasswordValid(String encPass, String rawPass, Object salt) throws DataAccessException {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.reset();
            digest.update(((String) salt).getBytes(""UTF-8""));
            String encodedRawPass = new String(digest.digest(rawPass.getBytes(""UTF-8"")));
            return encodedRawPass.equals(encPass);
        } catch (Throwable e) {
            throw new DataAccessException(""Error al codificar la contrase�a"", e) {

                private static final long serialVersionUID = -302443565702455874L;
            };
        }
    }
","    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",True
900548,1637147,7990229,"    protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) {
        String annotClass = par.annotation.getType().substring(1, par.annotation.getType().length() - 1).replace('/', '.');
        String methodName = getMethodName(par);
        String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName;
        PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey);
        if (gr != null) {
            _sharedAddData.cacheInfo.incCombinePredicateCacheHit();
            return gr;
        } else {
            _sharedAddData.cacheInfo.incCombinePredicateCacheMiss();
        }
        String predicateClass = ((_predicatePackage.length() > 0) ? (_predicatePackage + ""."") : """") + annotClass + ""Pred"";
        ClassFile predicateCF = null;
        File clonedFile = new File(_predicatePackageDir, annotClass.replace('.', '/') + ""Pred.class"");
        if (clonedFile.exists() && clonedFile.isFile() && clonedFile.canRead()) {
            try {
                predicateCF = new ClassFile(new FileInputStream(clonedFile));
            } catch (IOException ioe) {
                throw new ThreadCheckException(""Could not open predicate class file, source="" + clonedFile, ioe);
            }
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                _templatePredicateClassFile.write(baos);
                predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray()));
            } catch (IOException ioe) {
                throw new ThreadCheckException(""Could not open predicate template class file"", ioe);
            }
        }
        clonedFile.getParentFile().mkdirs();
        final ArrayList<String> paramNames = new ArrayList<String>();
        final HashMap<String, String> paramTypes = new HashMap<String, String>();
        performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() {

            public Object apply(String param1, String param2, AAnnotationsAttributeInfo.Annotation.AMemberValue param3) {
                paramNames.add(param1);
                paramTypes.put(param1, param2);
                return null;
            }
        }, """");
        ArrayList<PredicateAnnotationRecord> memberPARs = new ArrayList<PredicateAnnotationRecord>();
        for (String key : par.combinedPredicates.keySet()) {
            for (PredicateAnnotationRecord memberPAR : par.combinedPredicates.get(key)) {
                if ((memberPAR.predicateClass != null) && (memberPAR.predicateMI != null)) {
                    memberPARs.add(memberPAR);
                } else {
                    memberPARs.add(generatePredicateAnnotationRecord(memberPAR, miDescriptor));
                }
            }
        }
        AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool());
        int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassNameItem });
        predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
        ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool());
        l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassItem });
        predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null);
        predicateCF.setThisClass(predicateClassItem);
        StringBuilder sb = new StringBuilder();
        sb.append(""(Ljava/lang/Object;"");
        if (par.passArguments) {
            sb.append(""[Ljava/lang/Object;"");
        }
        for (String key : paramNames) {
            sb.append(paramTypes.get(key));
        }
        sb.append("")Z"");
        String methodDesc = sb.toString();
        MethodInfo templateMI = null;
        MethodInfo predicateMI = null;
        for (MethodInfo mi : predicateCF.getMethods()) {
            if ((mi.getName().toString().equals(methodName)) && (mi.getDescriptor().toString().equals(methodDesc))) {
                predicateMI = mi;
                break;
            } else if ((mi.getName().toString().equals(""template"")) && (mi.getDescriptor().toString().startsWith(""("")) && (mi.getDescriptor().toString().endsWith("")Z""))) {
                templateMI = mi;
            }
        }
        if ((templateMI == null) && (predicateMI == null)) {
            throw new ThreadCheckException(""Could not find template predicate method in class file"");
        }
        if (predicateMI == null) {
            AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { namecpi });
            namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { descpi });
            descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            ArrayList<AAttributeInfo> list = new ArrayList<AAttributeInfo>();
            for (AAttributeInfo a : templateMI.getAttributes()) {
                try {
                    AAttributeInfo clonedA = (AAttributeInfo) a.clone();
                    list.add(clonedA);
                } catch (CloneNotSupportedException e) {
                    throw new InstrumentorException(""Could not clone method attributes"");
                }
            }
            predicateMI = new MethodInfo(templateMI.getAccessFlags(), namecpi, descpi, list.toArray(new AAttributeInfo[] {}));
            predicateCF.getMethods().add(predicateMI);
            CodeAttributeInfo.CodeProperties props = predicateMI.getCodeAttributeInfo().getProperties();
            props.maxLocals += paramTypes.size() + 1 + (par.passArguments ? 1 : 0);
            InstructionList il = new InstructionList(predicateMI.getCodeAttributeInfo().getCode());
            if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
            } else {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
            }
            boolean res;
            res = il.advanceIndex();
            assert res == true;
            int accumVarIndex = props.maxLocals - 1;
            AInstruction loadAccumInstr;
            AInstruction storeAccumInstr;
            if (accumVarIndex < 256) {
                loadAccumInstr = new GenericInstruction(Opcode.ILOAD, (byte) accumVarIndex);
                storeAccumInstr = new GenericInstruction(Opcode.ISTORE, (byte) accumVarIndex);
            } else {
                byte[] bytes = new byte[] { Opcode.ILOAD, 0, 0 };
                Types.bytesFromShort((short) accumVarIndex, bytes, 1);
                loadAccumInstr = new WideInstruction(bytes);
                bytes[0] = Opcode.ISTORE;
                storeAccumInstr = new WideInstruction(bytes);
            }
            il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
            res = il.advanceIndex();
            assert res == true;
            int maxStack = 0;
            int paramIndex = 1;
            int lvIndex = 1;
            if (par.passArguments) {
                lvIndex += 1;
            }
            int memberCount = 0;
            for (PredicateAnnotationRecord memberPAR : memberPARs) {
                ++memberCount;
                il.insertInstr(new GenericInstruction(Opcode.ALOAD_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int curStack = 1;
                if (memberPAR.passArguments) {
                    if (par.passArguments) {
                        il.insertInstr(new GenericInstruction(Opcode.ALOAD_1), predicateMI.getCodeAttributeInfo());
                        res = il.advanceIndex();
                        assert res == true;
                        curStack += 1;
                    }
                }
                for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) {
                    String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex));
                    if (t.length() == 0) {
                        throw new ThreadCheckException(""Length of parameter type no. "" + paramIndex + "" string is 0 in "" + predicateMI.getName() + "" in class "" + predicateCF.getThisClassName());
                    }
                    byte opcode;
                    int nextLVIndex = lvIndex;
                    switch(t.charAt(0)) {
                        case 'I':
                        case 'B':
                        case 'C':
                        case 'S':
                        case 'Z':
                            opcode = Opcode.ILOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'F':
                            opcode = Opcode.FLOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case '[':
                        case 'L':
                            opcode = Opcode.ALOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'J':
                            opcode = Opcode.LLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        case 'D':
                            opcode = Opcode.DLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        default:
                            throw new ThreadCheckException(""Parameter type no. "" + paramIndex + "", "" + t + "", is unknown in "" + predicateMI.getName() + "" in class "" + predicateCF.getThisClassName());
                    }
                    AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex);
                    il.insertInstr(load, predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    ++paramIndex;
                    lvIndex = nextLVIndex;
                }
                if (curStack > maxStack) {
                    maxStack = curStack;
                }
                ReferenceInstruction predicateCallInstr = new ReferenceInstruction(Opcode.INVOKESTATIC, (short) 0);
                int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString());
                predicateCallInstr.setReference(predicateCallIndex);
                il.insertInstr(predicateCallInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) {
                    il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.SWAP), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.ISUB), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                }
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if (par.combineMode == Combine.Mode.OR) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) {
                    il.insertInstr(new GenericInstruction(Opcode.IAND), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.XOR) {
                    il.insertInstr(new GenericInstruction(Opcode.IADD), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.IMPLIES) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else {
                    assert false;
                }
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            if (par.combineMode == Combine.Mode.XOR) {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                WideBranchInstruction br2 = new WideBranchInstruction(Opcode.GOTO_W, il.getIndex() + 1);
                il.insertInstr(br2, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int jumpIndex = il.getIndex();
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                res = il.rewindIndex(3);
                assert res == true;
                BranchInstruction br1 = new BranchInstruction(Opcode.IF_ICMPEQ, jumpIndex);
                il.insertInstr(br1, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex(4);
                assert res == true;
            } else {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            il.deleteInstr(predicateMI.getCodeAttributeInfo());
            predicateMI.getCodeAttributeInfo().setCode(il.getCode());
            props.maxStack = Math.max(maxStack, 2);
            predicateMI.getCodeAttributeInfo().setProperties(props.maxStack, props.maxLocals);
            try {
                FileOutputStream fos = new FileOutputStream(clonedFile);
                predicateCF.write(fos);
                fos.close();
            } catch (IOException e) {
                throw new ThreadCheckException(""Could not write cloned predicate class file, target="" + clonedFile);
            }
        }
        gr = new PredicateAnnotationRecord(par.annotation, predicateClass, predicateMI, paramNames, paramTypes, new ArrayList<AAnnotationsAttributeInfo.Annotation.AMemberValue>(), par.passArguments, null, new HashMap<String, ArrayList<PredicateAnnotationRecord>>());
        _generatedPredicateRecords.put(hashKey, gr);
        return gr;
    }
","    public static InputStream gunzip(final InputStream inputStream) throws IOException {
        Assert.notNull(inputStream, ""inputStream"");
        GZIPInputStream gzipInputStream = new GZIPInputStream(inputStream);
        InputOutputStream inputOutputStream = new InputOutputStream();
        IOUtils.copy(gzipInputStream, inputOutputStream);
        return inputOutputStream.getInputStream();
    }
",True
900549,3768628,13212350,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void copyFile(File source, File dest) {
        try {
            FileChannel in = new FileInputStream(source).getChannel();
            if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();
            FileChannel out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900550,2970674,23531658,"    private void chopFileDisk() throws IOException {
        File tempFile = new File("""" + logFile + "".tmp"");
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        long startCopyPos;
        byte readBuffer[] = new byte[2048];
        int readCount;
        long totalBytesRead = 0;
        if (reductionRatio > 0 && logFile.length() > 0) {
            startCopyPos = logFile.length() / reductionRatio;
        } else {
            startCopyPos = 0;
        }
        try {
            bis = new BufferedInputStream(new FileInputStream(logFile));
            bos = new BufferedOutputStream(new FileOutputStream(tempFile));
            do {
                readCount = bis.read(readBuffer, 0, readBuffer.length);
                if (readCount > 0) {
                    totalBytesRead += readCount;
                    if (totalBytesRead > startCopyPos) {
                        bos.write(readBuffer, 0, readCount);
                    }
                }
            } while (readCount > 0);
        } finally {
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException ex) {
                }
            }
            if (bis != null) {
                try {
                    bis.close();
                } catch (IOException ex) {
                }
            }
        }
        if (tempFile.isFile()) {
            if (!logFile.delete()) {
                throw new IOException(""Error when attempting to delete the "" + logFile + "" file."");
            }
            if (!tempFile.renameTo(logFile)) {
                throw new IOException(""Error when renaming the "" + tempFile + "" to "" + logFile + ""."");
            }
        }
    }
","    public void objectParserAssesmentItem(int file, int currentquestion, Resource resTemp) {
        NodeList nl = null;
        Node n = null;
        NamedNodeMap nnp = null;
        Node nsrc = null;
        URL url = null;
        String sFilename = """";
        String sNewPath = """";
        int indexLastSeparator;
        String sOldPath = """";
        try {
            if (file == 1) {
                nl = doc.getElementsByTagName(""object"");
            } else {
                nl = doc_[currentquestion].getElementsByTagName(""object"");
            }
            for (int i = 0; i < nl.getLength(); i++) {
                n = nl.item(i);
                nnp = n.getAttributes();
                nsrc = nnp.getNamedItem(""data"");
                String sTemp = nsrc.getTextContent();
                url = new URL(""file"", ""localhost"", sTemp);
                sOldPath = url.getFile();
                sOldPath = sOldPath.replace('/', File.separatorChar);
                indexLastSeparator = sOldPath.lastIndexOf(File.separatorChar);
                String sSourcePath = sOldPath;
                sFilename = sOldPath.substring(indexLastSeparator + 1);
                sNewPath = this.sTempLocation + sFilename;
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(sSourcePath).getChannel();
                    out = new FileOutputStream(sNewPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
                if (file == 1) {
                    sXml = sXml.replace(nsrc.getTextContent(), sFilename);
                } else {
                    sXml_[currentquestion] = sXml_[currentquestion].replace(nsrc.getTextContent(), sFilename);
                }
                lsImages.add(sFilename);
                resTemp.addFile(sFilename);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900551,19409751,11981880,"    public static void compress(final File zip, final Map<InputStream, String> entries) throws IOException {
        if (zip == null || entries == null || CollectionUtils.isEmpty(entries.keySet())) throw new IllegalArgumentException(""One ore more parameters are empty!"");
        if (zip.exists()) zip.delete(); else if (!zip.getParentFile().exists()) zip.getParentFile().mkdirs();
        ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)));
        out.setLevel(Deflater.BEST_COMPRESSION);
        InputStream in = null;
        try {
            for (InputStream inputStream : entries.keySet()) {
                in = inputStream;
                ZipEntry zipEntry = new ZipEntry(skipBeginningSlash(entries.get(in)));
                out.putNextEntry(zipEntry);
                IOUtils.copy(in, out);
                out.closeEntry();
                in.close();
            }
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",False
900552,55568,12626918,"    public static void httpOnLoad(String fileName, String urlpath) throws Exception {
        URL url = new URL(urlpath);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        System.err.println(""Code : "" + responseCode);
        System.err.println(""getResponseMessage : "" + conn.getResponseMessage());
        if (responseCode >= 400) {
            return;
        }
        int threadSize = 3;
        int fileLength = conn.getContentLength();
        System.out.println(""fileLength:"" + fileLength);
        int block = fileLength / threadSize;
        int lastBlock = fileLength - (block * (threadSize - 1));
        conn.disconnect();
        File file = new File(fileName);
        RandomAccessFile randomFile = new RandomAccessFile(file, ""rw"");
        randomFile.setLength(fileLength);
        randomFile.close();
        for (int i = 2; i < 3; i++) {
            int startPosition = i * block;
            if (i == threadSize - 1) {
                block = lastBlock;
            }
            RandomAccessFile threadFile = new RandomAccessFile(file, ""rw"");
            threadFile.seek(startPosition);
            new TestDownFile(url, startPosition, threadFile, block).start();
        }
    }
","    public void xtestURL2() throws Exception {
        URL url = new URL(IOTest.URL);
        InputStream inputStream = url.openStream();
        OutputStream outputStream = new FileOutputStream(""C:/Temp/testURL2.mp4"");
        IOUtils.copy(inputStream, outputStream);
        inputStream.close();
        outputStream.close();
    }
",False
900553,6641464,20815980,"    private void SaveLoginInfo() {
        int iSize;
        try {
            if (m_bSavePwd) {
                byte[] MD5PWD = new byte[80];
                java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-1"");
                String szPath = System.getProperty(""user.home"");
                szPath += System.getProperty(""file.separator"") + ""MochaJournal"";
                java.io.File file = new java.io.File(szPath);
                if (!file.exists()) file.mkdirs();
                file = new java.io.File(file, ""user.dat"");
                if (!file.exists()) file.createNewFile();
                java.io.FileOutputStream pw = new java.io.FileOutputStream(file);
                iSize = m_PwdList.size();
                for (int iIndex = 0; iIndex < iSize; iIndex++) {
                    md.reset();
                    md.update(((String) m_UsrList.get(iIndex)).getBytes());
                    byte[] DESUSR = md.digest();
                    byte alpha = 0;
                    for (int i = 0; i < DESUSR.length; i++) alpha += DESUSR[i];
                    String pwd = (String) m_PwdList.get(iIndex);
                    if (pwd.length() > 0) {
                        java.util.Arrays.fill(MD5PWD, (byte) 0);
                        int iLen = pwd.length();
                        pw.write(iLen);
                        for (int i = 0; i < iLen; i++) {
                            int iDiff = (int) pwd.charAt(i) + (int) alpha;
                            int c = iDiff % 256;
                            MD5PWD[i] = (byte) c;
                            pw.write((byte) c);
                        }
                    } else pw.write(0);
                }
                pw.flush();
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.err.println(e);
        } catch (java.io.IOException e3) {
            System.err.println(e3);
        }
    }
","    private void getRandomGUID(boolean secure) throws NoSuchAlgorithmException {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            throw e;
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",True
900554,22765730,17341373,"    public void addUser(String name, String unit, String organizeName, int userId, int orgId, String email) {
        Connection connection = null;
        PreparedStatement ps = null;
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            connection = dbo.getConnection();
            ps = connection.prepareStatement(INSERT_USER);
            ps.setInt(1, AddrslistMainDao.getNewID());
            ps.setInt(2, -100);
            ps.setString(3, name.substring(0, 1));
            ps.setString(4, name.substring(1));
            ps.setString(5, unit);
            ps.setString(6, organizeName);
            ps.setString(7, """");
            ps.setString(8, email);
            ps.setString(9, """");
            ps.setString(10, """");
            ps.setString(11, """");
            ps.setString(12, """");
            ps.setString(13, """");
            ps.setString(14, """");
            ps.setString(15, """");
            ps.setString(16, """");
            ps.setString(17, """");
            ps.setString(18, """");
            ps.setInt(19, userId);
            ps.setInt(20, orgId);
            ps.executeUpdate();
            connection.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException e1) {
            }
        } finally {
            try {
                ps.close();
                connection.close();
                dbo.close();
            } catch (Exception e) {
            }
        }
    }
","    private void handleServerIntroduction(DataPacket serverPacket) {
        DataPacketIterator iter = serverPacket.getDataPacketIterator();
        String version = iter.nextString();
        int serverReportedUDPPort = iter.nextUByte2();
        _authKey = iter.nextUByte4();
        _introKey = iter.nextUByte4();
        _clientKey = makeClientKey(_authKey, _introKey);
        String passwordKey = iter.nextString();
        _logger.log(Level.INFO, ""Connection to version "" + version + "" with udp port "" + serverReportedUDPPort);
        DataPacket packet = null;
        if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) {
            ParameterBuilder builder = new ParameterBuilder();
            builder.appendUByte2(_udpSocket.getLocalPort());
            builder.appendString(_user);
            MessageDigest md5 = null;
            try {
                md5 = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException ignore) {
            }
            md5.update(_serverKey.getBytes());
            md5.update(passwordKey.getBytes());
            md5.update(_password.getBytes());
            for (byte b : md5.digest()) {
                builder.appendByte(b);
            }
            packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter());
        } else {
            packet = new DataPacketImpl(ClientCommandConstants.TCP_ONLY);
        }
        sendTCPPacket(packet);
    }
",False
900555,20929227,10797166,"    private void insertService(String table, int type) {
        Connection con = null;
        log.info("""");
        log.info(""正在生成"" + table + ""的服务。。。。。。。"");
        try {
            con = DODataSource.getDefaultCon();
            con.setAutoCommit(false);
            Statement stmt = con.createStatement();
            Statement stmt2 = con.createStatement();
            String serviceUid = UUIDHex.getInstance().generate();
            DOBO bo = DOBO.getDOBOByName(StringUtil.getDotName(table));
            List props = new ArrayList();
            StringBuffer mainSql = null;
            String name = """";
            String l10n = """";
            String prefix = StringUtil.getDotName(table);
            Boolean isNew = null;
            switch(type) {
                case 1:
                    name = prefix + "".insert"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = getInsertSql(props, table);
                    isNew = Boolean.TRUE;
                    break;
                case 2:
                    name = prefix + "".update"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = this.getModiSql(props, table);
                    isNew = Boolean.FALSE;
                    break;
                case 3:
                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), ""objuid"");
                    System.out.println(""BOBOBO::::::"" + bo);
                    System.out.println(""Property::::::"" + property);
                    if (property == null) {
                        return;
                    }
                    name = prefix + "".delete"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""delete from "").append(table).append("" where objuid = ?"");
                    break;
                case 4:
                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), ""objuid"");
                    if (property == null) {
                        return;
                    }
                    name = prefix + "".browse"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""select * from "").append(table).append("" where objuid = ?"");
                    break;
                case 5:
                    name = prefix + "".list"";
                    l10n = name;
                    mainSql = new StringBuffer(""select * from "").append(table);
            }
            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);
            StringBuffer aSql = new StringBuffer(""insert into DO_Service(objuid,l10n,name,bouid,mainSql) values("").append(""'"").append(serviceUid).append(""','"").append(l10n).append(""','"").append(name).append(""','"").append(this.getDOBOUid(table)).append(""','"").append(mainSql).append(""')"");
            log.info(""Servcice's Sql:"" + aSql.toString());
            stmt.executeUpdate(aSql.toString());
            stmt2.executeBatch();
            con.commit();
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException ex2) {
                ex2.printStackTrace();
            }
            ex.printStackTrace();
        } finally {
            try {
                if (!con.isClosed()) {
                    con.close();
                }
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        }
    }
","    public static String readFromUrl(String url) {
        URL url_ = null;
        URLConnection uc = null;
        BufferedReader in = null;
        StringBuilder str = new StringBuilder();
        try {
            url_ = new URL(url);
            uc = url_.openConnection();
            in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) str.append(inputLine);
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str.toString();
    }
",False
900556,2217508,5832949,"    public static void copyFile(final File sourceFile, final File destFile) throws IOException {
        if (destFile.getParentFile() != null && !destFile.getParentFile().mkdirs()) {
            LOG.error(""GeneralHelper.copyFile(): Cannot create parent directories from "" + destFile);
        }
        FileInputStream fIn = null;
        FileOutputStream fOut = null;
        FileChannel source = null;
        FileChannel destination = null;
        try {
            fIn = new FileInputStream(sourceFile);
            source = fIn.getChannel();
            fOut = new FileOutputStream(destFile);
            destination = fOut.getChannel();
            long transfered = 0;
            final long bytes = source.size();
            while (transfered < bytes) {
                transfered += destination.transferFrom(source, 0, source.size());
                destination.position(transfered);
            }
        } finally {
            if (source != null) {
                source.close();
            } else if (fIn != null) {
                fIn.close();
            }
            if (destination != null) {
                destination.close();
            } else if (fOut != null) {
                fOut.close();
            }
        }
    }
","    private void getImage(String filename) throws MalformedURLException, IOException, SAXException, FileNotFoundException {
        String url = Constants.STRATEGICDOMINATION_URL + ""/images/gameimages/"" + filename;
        WebRequest req = new GetMethodWebRequest(url);
        WebResponse response = wc.getResponse(req);
        File file = new File(""etc/images/"" + filename);
        FileOutputStream outputStream = new FileOutputStream(file);
        IOUtils.copy(response.getInputStream(), outputStream);
    }
",True
900557,7245722,73657,"    private String listaArquivo() {
        String arquivo = """";
        String linha = """";
        try {
            URL url = new URL(this.getCodeBase(), ""./listador?dir="" + ""cenarios"" + ""/"" + user);
            URLConnection con = url.openConnection();
            con.setUseCaches(false);
            InputStream in = con.getInputStream();
            DataInputStream result = new DataInputStream(new BufferedInputStream(in));
            while ((linha = result.readLine()) != null) {
                arquivo += linha + ""\n"";
            }
            return arquivo;
        } catch (Exception e) {
            return null;
        }
    }
","    public static void test(String args[]) {
        int trace;
        int bytes_read = 0;
        int last_contentLenght = 0;
        try {
            BufferedReader reader;
            URL url;
            url = new URL(args[0]);
            URLConnection istream = url.openConnection();
            last_contentLenght = istream.getContentLength();
            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
            System.out.println(url.toString());
            String line;
            trace = t2pNewTrace();
            while ((line = reader.readLine()) != null) {
                bytes_read = bytes_read + line.length() + 1;
                t2pProcessLine(trace, line);
            }
            t2pHandleEventPairs(trace);
            t2pSort(trace, 0);
            t2pExportTrace(trace, new String(""pngtest2.png""), 1000, 700, (float) 0, (float) 33);
            t2pExportTrace(trace, new String(""pngtest3.png""), 1000, 700, (float) 2.3, (float) 2.44);
            System.out.println(""Press any key to contiune read from stream !!!"");
            System.out.println(t2pGetProcessName(trace, 0));
            System.in.read();
            istream = url.openConnection();
            if (last_contentLenght != istream.getContentLength()) {
                istream = url.openConnection();
                istream.setRequestProperty(""Range"", ""bytes="" + Integer.toString(bytes_read) + ""-"");
                System.out.println(Integer.toString(istream.getContentLength()));
                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    t2pProcessLine(trace, line);
                }
            } else System.out.println(""File not changed !"");
            t2pDeleteTrace(trace);
        } catch (MalformedURLException e) {
            System.out.println(""MalformedURLException !!!"");
        } catch (IOException e) {
            System.out.println(""File not found "" + args[0]);
        }
        ;
    }
",True
900558,14800064,20453777,"    protected Set<String> moduleNamesFromReader(URL url) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        Set<String> names = new HashSet<String>();
        String line;
        while ((line = reader.readLine()) != null) {
            line = line.trim();
            Matcher m = nonCommentPattern.matcher(line);
            if (m.find()) {
                names.add(m.group().trim());
            }
        }
        return names;
    }
","    private static List retrieveQuotes(Report report, Symbol symbol, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",True
900559,8708052,13281981,"    public ActionForward dbExecute(ActionMapping pMapping, ActionForm pForm, HttpServletRequest pRequest, HttpServletResponse pResponse) throws DatabaseException {
        Integer key;
        SubmitUserForm form = (SubmitUserForm) pForm;
        if (pRequest.getParameter(""key"") == null) {
            key = form.getPrimaryKey();
        } else {
            key = Integer.parseInt(pRequest.getParameter(""key""));
        }
        User currentUser = (User) (pRequest.getSession().getAttribute(""login""));
        if ((currentUser == null) || (!currentUser.getAdminRights() && (currentUser.getPrimaryKey() != key))) {
            return (pMapping.findForward(""denied""));
        }
        if (currentUser.getAdminRights()) {
            pRequest.setAttribute(""isAdmin"", new Boolean(true));
        }
        if (currentUser.getPDFRights()) {
            pRequest.setAttribute(""pdfRights"", Boolean.TRUE);
        }
        User user = database.acquireUserByPrimaryKey(key);
        if (user.isSuperAdmin() && !currentUser.isSuperAdmin()) {
            return (pMapping.findForward(""denied""));
        }
        pRequest.setAttribute(""user"", user);
        pRequest.setAttribute(""taxonomy"", database.acquireTaxonomy());
        if (form.getAction().equals(""none"")) {
            form.setPrimaryKey(user.getPrimaryKey());
        }
        if (form.getAction().equals(""edit"")) {
            FormError formError = form.validateFields();
            if (formError != null) {
                if (formError.getFormFieldErrors().get(""firstName"") != null) {
                    pRequest.setAttribute(""FirstNameBad"", new Boolean(true));
                }
                if (formError.getFormFieldErrors().get(""lastName"") != null) {
                    pRequest.setAttribute(""LastNameBad"", new Boolean(true));
                }
                if (formError.getFormFieldErrors().get(""emailAddress"") != null) {
                    pRequest.setAttribute(""EmailAddressBad"", new Boolean(true));
                }
                if (formError.getFormFieldErrors().get(""mismatchPassword"") != null) {
                    pRequest.setAttribute(""mismatchPassword"", new Boolean(true));
                }
                if (formError.getFormFieldErrors().get(""shortPassword"") != null) {
                    pRequest.setAttribute(""shortPassword"", new Boolean(true));
                }
                return (pMapping.findForward(""invalid""));
            }
            user.setFirstName(form.getFirstName());
            user.setLastName(form.getLastName());
            user.setEmailAddress(form.getEmailAddress());
            if (!form.getFirstPassword().equals("""")) {
                MessageDigest md;
                try {
                    md = MessageDigest.getInstance(""SHA"");
                } catch (NoSuchAlgorithmException e) {
                    throw new DatabaseException(""Could not hash password for storage: no such algorithm"");
                }
                try {
                    md.update(form.getFirstPassword().getBytes(""UTF-8""));
                } catch (UnsupportedEncodingException e) {
                    throw new DatabaseException(""Could not hash password for storage: no such encoding"");
                }
                user.setPassword((new BASE64Encoder()).encode(md.digest()));
            }
            user.setTitle(form.getTitle());
            user.setDegree(form.getDegree());
            user.setAddress(form.getAddress());
            user.setNationality(form.getNationality());
            user.setLanguages(form.getLanguages());
            user.setHomepage(form.getHomepage());
            user.setInstitution(form.getInstitution());
            if (pRequest.getParameter(""hideEmail"") != null) {
                if (pRequest.getParameter(""hideEmail"").equals(""on"")) {
                    user.setHideEmail(true);
                }
            } else {
                user.setHideEmail(false);
            }
            User storedUser = database.acquireUserByPrimaryKey(user.getPrimaryKey());
            if (currentUser.isSuperAdmin()) {
                if (pRequest.getParameter(""admin"") != null) {
                    user.setAdminRights(true);
                } else {
                    if (!storedUser.isSuperAdmin()) {
                        user.setAdminRights(false);
                    }
                }
            } else {
                user.setAdminRights(storedUser.getAdminRights());
            }
            if (currentUser.isAdmin()) if (pRequest.getParameter(""PDFRights"") != null) user.setPDFRights(true); else user.setPDFRights(false);
            if (currentUser.isAdmin()) {
                if (!storedUser.isAdmin() || !storedUser.isSuperAdmin()) {
                    if (pRequest.getParameter(""active"") != null) {
                        user.setActive(true);
                    } else {
                        user.setActive(false);
                    }
                } else {
                    user.setActive(storedUser.getActive());
                }
            }
            if (currentUser.isAdmin() || currentUser.isSuperAdmin()) {
                String[] categories = pRequest.getParameterValues(""categories"");
                user.setModeratorRights(new Categories());
                if (categories != null) {
                    try {
                        for (int i = 0; i < categories.length; i++) {
                            Integer catkey = Integer.parseInt(categories[i]);
                            Category cat = database.acquireCategoryByPrimaryKey(catkey);
                            user.getModeratorRights().add(cat);
                        }
                    } catch (NumberFormatException nfe) {
                        throw new DatabaseException(""Invalid category key."");
                    }
                }
            }
            if (!currentUser.isAdmin() && !currentUser.isSuperAdmin()) {
                user.setAdminRights(false);
                user.setSuperAdminRights(false);
            }
            database.updateUser(user);
            if (currentUser.getPrimaryKey() == user.getPrimaryKey()) {
                pRequest.getSession().setAttribute(""login"", user);
            }
            pRequest.setAttribute(""helpKey"", key);
            if (currentUser.isAdmin() || currentUser.isSuperAdmin()) {
                return (pMapping.findForward(""adminfinished""));
            }
            return (pMapping.findForward(""finished""));
        }
        return (pMapping.findForward(""success""));
    }
","    private void bokActionPerformed(java.awt.event.ActionEvent evt) {
        Vector vret = this.uniformtitlepanel.getEnteredValuesKeys();
        String[] patlib = newgen.presentation.NewGenMain.getAppletInstance().getPatronLibraryIds();
        String xmlreq = newgen.presentation.administration.AdministrationXMLGenerator.getInstance().saveUniformTitleSH(""2"", vret, patlib);
        System.out.println(xmlreq);
        try {
            java.net.URL url = new java.net.URL(ResourceBundle.getBundle(""Administration"").getString(""ServerURL"") + ResourceBundle.getBundle(""Administration"").getString(""ServletSubPath"") + ""UniformTitleSubjectHeadingServlet"");
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            java.io.OutputStream dos = urlconn.getOutputStream();
            dos.write(xmlreq.getBytes());
            java.io.InputStream ios = urlconn.getInputStream();
            SAXBuilder saxb = new SAXBuilder();
            Document retdoc = saxb.build(ios);
            Element rootelement = retdoc.getRootElement();
            if (rootelement.getChild(""Error"") == null) {
                this.showInformationMessage(ResourceBundle.getBundle(""Administration"").getString(""DataSavedInDatabase""));
            } else {
                this.showErrorMessage(ResourceBundle.getBundle(""Administration"").getString(""ErrorPleaseContactTheVendor""));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
",False
900560,10425169,23465746,"    private void getRandomGUID(boolean secure, Object o) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(o.getClass().getName());
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",True
900561,9312243,3430781,"    void shutdown(final boolean unexpected) {
        if (unexpected) {
            log.warn(""S H U T D O W N   ---   received unexpected shutdown request."");
        } else {
            log.info(""S H U T D O W N   ---   start regular shutdown."");
        }
        if (this.uncaughtException != null) {
            log.warn(""Shutdown probably caused by the following Exception."", this.uncaughtException);
        }
        log.error(""check if we need the controler listener infrastructure"");
        if (this.dumpDataAtEnd) {
            new PopulationWriter(this.population, this.network).write(this.controlerIO.getOutputFilename(FILENAME_POPULATION));
            new NetworkWriter(this.network).write(this.controlerIO.getOutputFilename(FILENAME_NETWORK));
            new ConfigWriter(this.config).write(this.controlerIO.getOutputFilename(FILENAME_CONFIG));
            if (!unexpected && this.getConfig().vspExperimental().isWritingOutputEvents()) {
                File toFile = new File(this.controlerIO.getOutputFilename(""output_events.xml.gz""));
                File fromFile = new File(this.controlerIO.getIterationFilename(this.getLastIteration(), ""events.xml.gz""));
                IOUtils.copyFile(fromFile, toFile);
            }
        }
        if (unexpected) {
            log.info(""S H U T D O W N   ---   unexpected shutdown request completed."");
        } else {
            log.info(""S H U T D O W N   ---   regular shutdown completed."");
        }
        try {
            Runtime.getRuntime().removeShutdownHook(this.shutdownHook);
        } catch (IllegalStateException e) {
            log.info(""Cannot remove shutdown hook. "" + e.getMessage());
        }
        this.shutdownHook = null;
        this.collectLogMessagesAppender = null;
        IOUtils.closeOutputDirLogging();
    }
","    public static String getTextFromPart(Part part) {
        try {
            if (part != null && part.getBody() != null) {
                InputStream in = part.getBody().getInputStream();
                String mimeType = part.getMimeType();
                if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, ""text/*"")) {
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    IOUtils.copy(in, out);
                    in.close();
                    in = null;
                    String charset = getHeaderParameter(part.getContentType(), ""charset"");
                    if (charset != null) {
                        charset = CharsetUtil.toJavaCharset(charset);
                    }
                    if (charset == null) {
                        charset = ""ASCII"";
                    }
                    String result = out.toString(charset);
                    out.close();
                    return result;
                }
            }
        } catch (OutOfMemoryError oom) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + oom.toString());
        } catch (Exception e) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + e.toString());
        }
        return null;
    }
",True
900562,14287646,488614,"    private String getStoreName() {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(protectionDomain.getBytes());
            final byte[] bs = digest.digest();
            final StringBuffer sb = new StringBuffer(bs.length * 2);
            for (int i = 0; i < bs.length; i++) {
                final String s = Integer.toHexString(bs[i] & 0xff);
                if (s.length() < 2) sb.append('0');
                sb.append(s);
            }
            return sb.toString();
        } catch (final NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't save credentials: digest method MD5 unavailable."");
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900563,10142186,10005623,"    public static String getMD5Str(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
","    public synchronized String getSerialNumber() {
        if (serialNum != null) return serialNum;
        final StringBuffer buf = new StringBuffer();
        Iterator it = classpath.iterator();
        while (it.hasNext()) {
            ClassPathEntry entry = (ClassPathEntry) it.next();
            buf.append(entry.getResourceURL().toString());
            buf.append("":"");
        }
        serialNum = (String) AccessController.doPrivileged(new PrivilegedAction() {

            public Object run() {
                try {
                    MessageDigest digest = MessageDigest.getInstance(""SHA"");
                    digest.update(buf.toString().getBytes());
                    byte[] data = digest.digest();
                    serialNum = new BASE64Encoder().encode(data);
                    return serialNum;
                } catch (NoSuchAlgorithmException exp) {
                    BootSecurityManager.securityLogger.log(Level.SEVERE, exp.getMessage(), exp);
                    return buf.toString();
                }
            }
        });
        return serialNum;
    }
",True
900564,16199085,22950125,"    @Override
    public byte[] read(String path) throws PersistenceException {
        path = fmtPath(path);
        try {
            S3Object fileObj = s3Service.getObject(bucketObj, path);
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            IOUtils.copy(fileObj.getDataInputStream(), out);
            return out.toByteArray();
        } catch (Exception e) {
            throw new PersistenceException(""fail to read s3 file - "" + path, e);
        }
    }
","    private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) {
        boolean imported = false;
        KeyStore ks = null;
        try {
            ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray());
        } catch (Exception e) {
            if (this.debugLevel >= SAWSConstant.ErrorInfo) {
                this.sawsDebugLog.write(""Error reading keystore file when exporting PKC: "" + e.getMessage());
            }
            return false;
        }
        Certificate cert = null;
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(pkcFile));
            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            while (bis.available() > 0) {
                cert = cf.generateCertificate(bis);
            }
        } catch (Exception e) {
            if (this.debugLevel >= SAWSConstant.ErrorInfo) {
                this.sawsDebugLog.write(""Error reading certificate from file when importing PKC: "" + e.getMessage());
            }
            return false;
        }
        BufferedOutputStream bos = null;
        try {
            bos = new BufferedOutputStream(new FileOutputStream(new File(keystoreLocation)));
        } catch (FileNotFoundException e) {
            if (this.debugLevel >= SAWSConstant.ErrorInfo) {
                this.sawsDebugLog.write(""Error accessing key store file when importing certificate: "" + e.getMessage());
            }
            return false;
        }
        try {
            if (alias.equals(""rootca"")) {
                ks.setCertificateEntry(alias, cert);
            } else {
                KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()));
                ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] { cert });
            }
            ks.store(bos, pw.toCharArray());
            imported = true;
        } catch (Exception e) {
            e.printStackTrace();
            if (this.debugLevel >= SAWSConstant.ErrorInfo) {
                this.sawsDebugLog.write(""Error writing keystore to file when importing key store: "" + e.getMessage());
            }
            return false;
        }
        return imported;
    }
",True
900565,831650,7960119,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private void getRandomGuid(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        long time = System.currentTimeMillis();
        long rand = 0;
        if (secure) {
            rand = secureRandom.nextLong();
        } else {
            rand = random.nextLong();
        }
        sbValueBeforeMD5.append(id);
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(time));
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(rand));
        String valueBeforeMD5 = sbValueBeforeMD5.toString();
        md5.update(valueBeforeMD5.getBytes());
        byte[] array = md5.digest();
        StringBuffer sb = new StringBuffer();
        for (int j = 0; j < array.length; ++j) {
            int b = array[j] & 0xFF;
            if (b < 0x10) sb.append('0');
            sb.append(Integer.toHexString(b));
        }
        guid = sb.toString();
    }
",False
900566,20508694,17296395,"    private void tar(FileHolder fileHolder, boolean gzipIt) {
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        if (fileHolder.selectedFileList.size() == 0) {
            return;
        }
        File tarDestFile = new File(fileHolder.destFiles[0]);
        try {
            OutputStream outStream = new FileOutputStream(tarDestFile);
            if (gzipIt) {
                outStream = new GZIPOutputStream(outStream);
            }
            TarOutputStream tarOutStream = new TarOutputStream(outStream);
            for (int i = 0; i < fileHolder.selectedFileList.size(); i++) {
                File selectedFile = fileHolder.selectedFileList.get(i);
                super.currentObjBeingProcessed = selectedFile;
                this.inStream = new FileInputStream(selectedFile);
                TarEntry tarEntry = null;
                try {
                    tarEntry = new TarEntry(selectedFile, selectedFile.getName());
                } catch (InvalidHeaderException e) {
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""tar()"");
                    errEntry.setAppMessage(""Error tar'ing: "" + selectedFile);
                    logger.logError(errEntry);
                }
                tarOutStream.putNextEntry(tarEntry);
                while ((bytes_read = inStream.read(buffer)) != -1) {
                    tarOutStream.write(buffer, 0, bytes_read);
                }
                tarOutStream.closeEntry();
                inStream.close();
                super.processorSyncFlag.restartWaitUntilFalse();
            }
            tarOutStream.close();
        } catch (Exception e) {
            errEntry.setThrowable(e);
            errEntry.setAppContext(""tar()"");
            errEntry.setAppMessage(""Error tar'ing: "" + tarDestFile);
            logger.logError(errEntry);
        }
    }
","    public static File copyToLibDirectory(final File file) throws FileNotFoundException, IOException {
        if (file == null || !file.exists()) {
            throw new FileNotFoundException();
        }
        File directory = new File(""lib/"");
        File dest = new File(directory, file.getName());
        File parent = dest.getParentFile();
        while (parent != null && !parent.equals(directory)) {
            parent = parent.getParentFile();
        }
        if (parent.equals(directory)) {
            return file;
        }
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
        return dest;
    }
",True
900567,11656036,21513130,"    @SuppressWarnings(""unchecked"")
    public static void createInstance(ExternProtoDeclare externProtoDeclare) {
        ExternProtoDeclareImport epdi = new ExternProtoDeclareImport();
        HashMap<String, ProtoDeclareImport> protoMap = X3DImport.getTheImport().getCurrentParser().getProtoMap();
        boolean loadedFromWeb = false;
        File f = null;
        URL url = null;
        List<String> urls = externProtoDeclare.getUrl();
        String tmpUrls = urls.toString();
        urls = Util.splitStringToListOfStrings(tmpUrls);
        String protoName = null;
        int urlCount = urls.size();
        for (int urlIndex = 0; urlIndex < urlCount; urlIndex++) {
            try {
                String path = urls.get(urlIndex);
                if (path.startsWith(""\"""") && path.endsWith(""\"""")) path = path.substring(1, path.length() - 1);
                int hashMarkPos = path.indexOf(""#"");
                int urlLength = path.length();
                if (hashMarkPos == -1) path = path.substring(0, urlLength); else {
                    protoName = path.substring(hashMarkPos + 1, urlLength);
                    path = path.substring(0, hashMarkPos);
                }
                if (path.toLowerCase().startsWith(""http://"")) {
                    String filename = path.substring(path.lastIndexOf(""/"") + 1, path.lastIndexOf("".""));
                    String fileext = path.substring(path.lastIndexOf("".""), path.length());
                    f = File.createTempFile(filename, fileext);
                    url = new URL(path);
                    InputStream is = url.openStream();
                    FileOutputStream os = new FileOutputStream(f);
                    byte[] buffer = new byte[0xFFFF];
                    for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
                    is.close();
                    os.close();
                    url = f.toURI().toURL();
                    loadedFromWeb = true;
                } else {
                    if (path.startsWith(""/"") || (path.charAt(1) == ':')) {
                    } else {
                        File x3dfile = X3DImport.getTheImport().getCurrentParser().getFile();
                        path = Util.getRealPath(x3dfile) + path;
                    }
                    f = new File(path);
                    url = f.toURI().toURL();
                    Object testContent = url.getContent();
                    if (testContent == null) continue;
                    loadedFromWeb = false;
                }
                X3DDocument x3dDocument = null;
                try {
                    x3dDocument = X3DDocument.Factory.parse(f);
                } catch (XmlException e) {
                    e.printStackTrace();
                    return;
                } catch (IOException e) {
                    e.printStackTrace();
                    return;
                }
                Scene scene = x3dDocument.getX3D().getScene();
                ProtoDeclare[] protos = scene.getProtoDeclareArray();
                ProtoDeclare protoDeclare = null;
                if (protoName == null) {
                    protoDeclare = protos[0];
                } else {
                    for (ProtoDeclare proto : protos) {
                        if (proto.getName().equals(protoName)) {
                            protoDeclare = proto;
                            break;
                        }
                    }
                }
                if (protoDeclare == null) continue;
                ProtoBody protoBody = protoDeclare.getProtoBody();
                epdi.protoBody = protoBody;
                protoMap.put(externProtoDeclare.getName(), epdi);
                break;
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            } finally {
                if (loadedFromWeb && f != null) {
                    f.delete();
                }
            }
        }
    }
","    public static String hashMD5(String passw) {
        String passwHash = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passw.getBytes());
            byte[] result = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < result.length; i++) {
                String tmpStr = ""0"" + Integer.toHexString((0xff & result[i]));
                sb.append(tmpStr.substring(tmpStr.length() - 2));
            }
            passwHash = sb.toString();
        } catch (NoSuchAlgorithmException ecc) {
            log.error(""Errore algoritmo "" + ecc);
        }
        return passwHash;
    }
",False
900568,14563781,18005008,"    public static void parseString(String str, String name) {
        BufferedReader reader;
        String zeile = null;
        boolean firstL = true;
        int lambda;
        float intens;
        int l_b = 0;
        int l_e = 0;
        HashMap<Integer, Float> curve = new HashMap<Integer, Float>();
        String[] temp;
        try {
            File f = File.createTempFile(""tempFile"", null);
            URL url = new URL(str);
            InputStream is = url.openStream();
            FileOutputStream os = new FileOutputStream(f);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
            is.close();
            os.close();
            reader = new BufferedReader(new FileReader(f));
            zeile = reader.readLine();
            lambda = 0;
            while (zeile != null) {
                if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) {
                    zeile = reader.readLine();
                    break;
                }
                zeile = reader.readLine();
            }
            while (zeile != null) {
                if (zeile.length() > 0) {
                    temp = zeile.split("" "");
                    lambda = Integer.parseInt(temp[0]);
                    intens = Float.parseFloat(temp[1]);
                    if (firstL) {
                        firstL = false;
                        l_b = lambda;
                    }
                    curve.put(lambda, intens);
                }
                zeile = reader.readLine();
            }
            l_e = lambda;
        } catch (IOException e) {
            System.err.println(""Error2 :"" + e);
        }
        try {
            String tempV;
            File file = new File(""C:/spectralColors/"" + name + "".sd"");
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(""# COLOR: "" + name + "" Auto generated File: 02/09/2009; From "" + l_b + "" to "" + l_e);
            bw.newLine();
            bw.write(l_b + """");
            bw.newLine();
            for (int i = l_b; i <= l_e; i++) {
                if (curve.containsKey(i)) {
                    tempV = i + "" "" + curve.get(i);
                    bw.write(tempV);
                    bw.newLine();
                }
            }
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public IUserProfile getUserProfile(String profileID) throws MM4UUserProfileNotFoundException {
        SimpleUserProfile tempProfile = null;
        String tempProfileString = this.profileURI + profileID + FILE_SUFFIX;
        try {
            URL url = new URL(tempProfileString);
            Debug.println(""Retrieve profile with ID: "" + url);
            tempProfile = new SimpleUserProfile();
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String tempLine = null;
            tempProfile.add(""id"", profileID);
            while ((tempLine = input.readLine()) != null) {
                Property tempProperty = PropertyList.splitStringIntoKeyAndValue(tempLine);
                if (tempProperty != null) {
                    tempProfile.addIfNotNull(tempProperty.getKey(), tempProperty.getValue());
                }
            }
            input.close();
        } catch (MalformedURLException exception) {
            throw new MM4UUserProfileNotFoundException(this, ""getProfile"", ""Profile '"" + tempProfileString + ""' not found."");
        } catch (IOException exception) {
            throw new MM4UUserProfileNotFoundException(this, ""getProfile"", ""Profile '"" + tempProfileString + ""' not found."");
        }
        return tempProfile;
    }
",True
900569,18178530,13307307,"    public static void copyFile(File src, File dst) throws IOException {
        LOGGER.info(""Copying file '"" + src.getAbsolutePath() + ""' to '"" + dst.getAbsolutePath() + ""'"");
        FileChannel in = null;
        FileChannel out = null;
        try {
            FileInputStream fis = new FileInputStream(src);
            in = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(dst);
            out = fos.getChannel();
            out.transferFrom(in, 0, in.size());
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException e) {
                LOGGER.log(Level.SEVERE, e.getMessage(), e);
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    LOGGER.log(Level.SEVERE, e.getMessage(), e);
                }
            }
        }
    }
","    private static void doCopyFile(FileInputStream in, FileOutputStream out) {
        FileChannel inChannel = null, outChannel = null;
        try {
            inChannel = in.getChannel();
            outChannel = out.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw ManagedIOException.manage(e);
        } finally {
            if (inChannel != null) {
                close(inChannel);
            }
            if (outChannel != null) {
                close(outChannel);
            }
        }
    }
",True
900570,9952202,3709102,"    public void testIntegrityViolation() throws Exception {
        if (getDialect() instanceof MySQLMyISAMDialect) {
            reportSkip(""MySQL (ISAM) does not support FK violation checking"", ""exception conversion"");
            return;
        }
        SQLExceptionConverter converter = getDialect().buildSQLExceptionConverter();
        Session session = openSession();
        session.beginTransaction();
        Connection connection = session.connection();
        PreparedStatement ps = null;
        try {
            ps = connection.prepareStatement(""INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)"");
            ps.setLong(1, 52134241);
            ps.setLong(2, 5342);
            ps.executeUpdate();
            fail(""INSERT should have failed"");
        } catch (SQLException sqle) {
            JDBCExceptionReporter.logExceptions(sqle, ""Just output!!!!"");
            JDBCException jdbcException = converter.convert(sqle, null, null);
            assertEquals(""Bad conversion ["" + sqle.getMessage() + ""]"", ConstraintViolationException.class, jdbcException.getClass());
            ConstraintViolationException ex = (ConstraintViolationException) jdbcException;
            System.out.println(""Violated constraint name: "" + ex.getConstraintName());
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Throwable ignore) {
                }
            }
        }
        session.getTransaction().rollback();
        session.close();
    }
","    public void removerTopicos(Topicos topicos) throws ClassNotFoundException, SQLException {
        this.criaConexao(false);
        String sql = ""DELETE FROM \""Topicos\""    "" + ""      WHERE \""id_Topicos\"" =  ?"";
        PreparedStatement stmt = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt.setString(1, topicos.getIdTopicos());
            stmt.executeUpdate();
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",True
900571,13616724,22301096,"    public void write(File file) throws Exception {
        if (medooFile != null) {
            if (!medooFile.renameTo(file)) {
                BufferedInputStream in = null;
                BufferedOutputStream out = null;
                try {
                    in = new BufferedInputStream(new FileInputStream(medooFile));
                    out = new BufferedOutputStream(new FileOutputStream(file));
                    IOUtils.copy(in, out);
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                        }
                    }
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                        }
                    }
                }
            }
        } else {
            throw new FileUploadException(""Cannot write uploaded file to disk!"");
        }
    }
","    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            long count = 0;
            long size = source.size();
            while ((count += destination.transferFrom(source, 0, size - count)) < size) ;
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",True
900572,19130322,19538929,"    private String sha1(String s) {
        String encrypt = s;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            sha.update(s.getBytes());
            byte[] digest = sha.digest();
            final StringBuffer buffer = new StringBuffer();
            for (int i = 0; i < digest.length; ++i) {
                final byte b = digest[i];
                final int value = (b & 0x7F) + (b < 0 ? 128 : 0);
                buffer.append(value < 16 ? ""0"" : """");
                buffer.append(Integer.toHexString(value));
            }
            encrypt = buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return encrypt;
    }
","    public void invoke(WorkflowContext arg0, ProgressMonitor arg1, Issues arg2) {
        File inputFile = new File(getInputFile());
        File outputFile = new File(getOutputFile());
        if (!getFileExtension(getInputFile()).equalsIgnoreCase(getFileExtension(getOutputFile())) || !getFileExtension(getInputFile()).equalsIgnoreCase(OO_CALC_EXTENSION)) {
            OpenOfficeConnection connection = new SocketOpenOfficeConnection();
            OpenOfficeDocumentConverter converter = new OpenOfficeDocumentConverter(connection);
            converter.convert(inputFile, outputFile);
            connection.disconnect();
        } else {
            FileChannel inputChannel = null;
            FileChannel outputChannel = null;
            try {
                inputChannel = new FileInputStream(inputFile).getChannel();
                outputChannel = new FileOutputStream(outputFile).getChannel();
                outputChannel.transferFrom(inputChannel, 0, inputChannel.size());
            } catch (FileNotFoundException e) {
                arg2.addError(""File not found: "" + e.getMessage());
            } catch (IOException e) {
                arg2.addError(""Could not copy file: "" + e.getMessage());
            } finally {
                if (inputChannel != null) {
                    try {
                        inputChannel.close();
                    } catch (IOException e) {
                        arg2.addError(""Could not close input channel: "" + e.getMessage());
                    }
                }
                if (outputChannel != null) {
                    try {
                        outputChannel.close();
                    } catch (IOException e) {
                        arg2.addError(""Could not close input channel: "" + e.getMessage());
                    }
                }
            }
        }
    }
",False
900573,20492176,7839474,"    public String postEvent(EventDocument eventDoc, Map attachments) {
        if (eventDoc == null || eventDoc.getEvent() == null) return null;
        if (jmsTemplate == null) {
            sendEvent(eventDoc, attachments);
            return eventDoc.getEvent().getEventId();
        }
        if (attachments != null) {
            Iterator iter = attachments.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                if (entry.getValue() instanceof DataHandler) {
                    File file = new File(attachmentStorge + ""/"" + GuidUtil.generate() + entry.getKey());
                    try {
                        IOUtils.copy(((DataHandler) entry.getValue()).getInputStream(), new FileOutputStream(file));
                        entry.setValue(file);
                    } catch (IOException err) {
                        err.printStackTrace();
                    }
                }
            }
        }
        InternalEventObject eventObj = new InternalEventObject();
        eventObj.setEventDocument(eventDoc);
        eventObj.setAttachments(attachments);
        eventObj.setSessionContext(SessionContextUtil.getCurrentContext());
        eventDoc.getEvent().setEventId(GuidUtil.generate());
        if (destinationName != null) jmsTemplate.convertAndSend(destinationName, eventObj); else jmsTemplate.convertAndSend(eventObj);
        return eventDoc.getEvent().getEventId();
    }
","    private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException {
        final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, ""src"");
        final DomAttr srcAttr = map.get(""src"");
        if (srcAttr == null) {
            return map;
        }
        final Page enclosedPage = frame.getEnclosedPage();
        final String suffix = getFileExtension(enclosedPage);
        final File file = createFile(srcAttr.getValue(), ""."" + suffix);
        if (enclosedPage instanceof HtmlPage) {
            file.delete();
            ((HtmlPage) enclosedPage).save(file);
        } else {
            final InputStream is = enclosedPage.getWebResponse().getContentAsStream();
            final FileOutputStream fos = new FileOutputStream(file);
            IOUtils.copyLarge(is, fos);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(fos);
        }
        srcAttr.setValue(file.getParentFile().getName() + FILE_SEPARATOR + file.getName());
        return map;
    }
",True
900574,3253205,20777139,"    private String generateUniqueIdMD5(Run run, HttpServletRequest request, String groupIdString) {
        String portalUrl = request.getScheme() + ""://"" + request.getServerName() + "":"" + request.getServerPort();
        String uniqueportalUrl = portalUrl + ""run:"" + run.getId().toString() + ""group:"" + groupIdString;
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        m.update(uniqueportalUrl.getBytes(), 0, uniqueportalUrl.length());
        String uniqueIdMD5 = new BigInteger(1, m.digest()).toString(16);
        return uniqueIdMD5;
    }
","    protected static String encodePassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            return HexString.bufferToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",True
900575,3573436,22415294,"    public HttpURLConnection getConnection(String urlString) throws IOException {
        URL url = new URL(urlString);
        HttpURLConnection connection = null;
        if (_proxy == null) {
            connection = (HttpURLConnection) url.openConnection();
        } else {
            URLConnection con = url.openConnection(_proxy);
            String encodedUserPwd = new String(Base64.encodeBase64((_username + "":"" + _password).getBytes()));
            con.setRequestProperty(""Proxy-Authorization"", ""Basic "" + encodedUserPwd);
            connection = (HttpURLConnection) con;
        }
        return connection;
    }
","    private String getRenderedBody(String spec) throws Exception {
        log.entering(Rss2MailTask.class.getName(), ""getRenderedBody"");
        final URL url = new URL(spec);
        final HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.connect();
        final InputStream inputStream = connection.getInputStream();
        final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        String line = """";
        final StringBuffer bf = new StringBuffer();
        while (line != null) {
            line = reader.readLine();
            if (line != null) {
                bf.append(line);
            }
        }
        log.exiting(Rss2MailTask.class.getName(), ""getRenderedBody"");
        return bf.toString();
    }
",False
900576,3636960,13028547,"    public void display(WebPage page, HttpServletRequest req, HttpServletResponse resp) throws DisplayException {
        page.getDisplayInitialiser().initDisplay(new HttpRequestDisplayContext(req), req);
        StreamProvider is = (StreamProvider) req.getAttribute(INPUTSTREAM_KEY);
        if (is == null) {
            throw new IllegalStateException(""No OutputStreamDisplayHandlerXML.InputStream found in request attribute"" + "" OutputStreamDisplayHandlerXML.INPUTSTREAM_KEY"");
        }
        resp.setContentType(is.getMimeType());
        resp.setHeader(""Content-Disposition"", ""attachment;filename="" + is.getName());
        try {
            InputStream in = is.getInputStream();
            OutputStream out = resp.getOutputStream();
            if (in != null) {
                IOUtils.copy(in, out);
            }
            is.write(resp.getOutputStream());
            resp.flushBuffer();
        } catch (IOException e) {
            throw new DisplayException(""Error writing input stream to response"", e);
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900577,73110,20898459,"    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }
","    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",False
900578,13026685,15017482,"    public DoSearch(String searchType, String searchString) {
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerDoSearch"";
        String rvalue = """";
        String filename = dms_home + FS + ""temp"" + FS + username + ""search.xml"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + key + ""&search="" + URLEncoder.encode(searchString, ""UTF-8"") + ""&searchtype="" + URLEncoder.encode(searchType, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""search.xml"";
            ;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""entry"");
            int num = nodelist.getLength();
            searchDocs = new String[num][3];
            searchDocImageName = new String[num];
            searchDocsToolTip = new String[num];
            for (int i = 0; i < num; i++) {
                searchDocs[i][0] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""filename"");
                searchDocs[i][1] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""project"");
                searchDocs[i][2] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""documentid"");
                searchDocImageName[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""imagename"");
                searchDocsToolTip[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""description"");
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (Exception ex) {
            System.out.println(ex);
        }
        System.out.println(rvalue);
        if (rvalue.equalsIgnoreCase(""yes"")) {
        }
    }
","    private static String getSuitableWCSVersion(String host, String _version) throws ConnectException, IOException {
        String request = WCSProtocolHandler.buildCapabilitiesSuitableVersionRequest(host, _version);
        String version = new String();
        StringReader reader = null;
        DataInputStream dis = null;
        try {
            URL url = new URL(request);
            byte[] buffer = new byte[1024];
            dis = new DataInputStream(url.openStream());
            dis.readFully(buffer);
            reader = new StringReader(new String(buffer));
            KXmlParser kxmlParser = null;
            kxmlParser = new KXmlParser();
            kxmlParser.setInput(reader);
            kxmlParser.nextTag();
            if (kxmlParser.getEventType() != KXmlParser.END_DOCUMENT) {
                if ((kxmlParser.getName().compareTo(CapabilitiesTags.WCS_CAPABILITIES_ROOT1_0_0) == 0)) {
                    version = kxmlParser.getAttributeValue("""", CapabilitiesTags.VERSION);
                }
            }
            reader.close();
            dis.close();
            return version;
        } catch (ConnectException conEx) {
            throw new ConnectException(conEx.getMessage());
        } catch (IOException ioEx) {
            throw new IOException(ioEx.getMessage());
        } catch (XmlPullParserException xmlEx) {
            xmlEx.printStackTrace();
            return """";
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            if (dis != null) {
                try {
                    dis.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
",False
900579,12524253,18956180,"    public DialogSongList(JFrame frame) {
        super(frame, ""Menu_SongList"", ""songList"");
        setMinimumSize(new Dimension(400, 200));
        JPanel panel, spanel;
        Container contentPane;
        (contentPane = getContentPane()).add(songSelector = new SongSelector(configKey, null, true));
        songSelector.setSelectionAction(new Runnable() {

            public void run() {
                final Item<URL, MidiFileInfo> item = songSelector.getSelectedInfo();
                if (item != null) {
                    try {
                        selection = new File(item.getKey().toURI());
                        author.setEnabled(true);
                        title.setEnabled(true);
                        difficulty.setEnabled(true);
                        save.setEnabled(true);
                        final MidiFileInfo info = item.getValue();
                        author.setText(info.getAuthor());
                        title.setText(info.getTitle());
                        Util.selectKey(difficulty, info.getDifficulty());
                        return;
                    } catch (Exception e) {
                    }
                }
                selection = null;
                author.setEnabled(false);
                title.setEnabled(false);
                difficulty.setEnabled(false);
                save.setEnabled(false);
            }
        });
        contentPane.add(panel = new JPanel(), BorderLayout.SOUTH);
        panel.setLayout(new BorderLayout());
        JScrollPane scrollPane;
        panel.add(scrollPane = new JScrollPane(spanel = new JPanel()), BorderLayout.NORTH);
        scrollPane.setPreferredSize(new Dimension(0, 60));
        Util.addLabeledComponent(spanel, ""Lbl_Author"", author = new JTextField(10));
        Util.addLabeledComponent(spanel, ""Lbl_Title"", title = new JTextField(14));
        Util.addLabeledComponent(spanel, ""Lbl_Difficulty"", difficulty = new JComboBox());
        difficulty.addItem(new Item<Byte, String>((byte) -1, """"));
        for (Map.Entry<Byte, String> entry : SongSelector.DIFFICULTIES.entrySet()) {
            final String value = entry.getValue();
            difficulty.addItem(new Item<Byte, String>(entry.getKey(), Util.getMsg(value, value), value));
        }
        spanel.add(save = new JButton());
        Util.updateButtonText(save, ""Save"");
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File selected = MidiSong.setMidiFileInfo(selection, author.getText(), title.getText(), getAsByte(difficulty));
                SongSelector.refresh();
                try {
                    songSelector.setSelected(selected == null ? null : selected.toURI().toURL());
                } catch (MalformedURLException ex) {
                }
            }
        });
        author.setEnabled(false);
        title.setEnabled(false);
        difficulty.setEnabled(false);
        save.setEnabled(false);
        JButton button;
        panel.add(spanel = new JPanel(), BorderLayout.WEST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Import"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File inputFile = KeyboardHero.midiFile();
                try {
                    if (inputFile == null) return;
                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));
                    if (dir.exists()) {
                        if (!dir.isDirectory()) {
                            Util.error(Util.getMsg(""Err_MidiFilesDirNotDirectory""), dir.getParent());
                            return;
                        }
                    } else if (!dir.mkdirs()) {
                        Util.error(Util.getMsg(""Err_CouldntMkDir""), dir.getParent());
                        return;
                    }
                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());
                    if (!outputFile.exists() || KeyboardHero.confirm(""Que_FileExistsOverwrite"")) {
                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();
                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());
                    }
                } catch (Exception ex) {
                    Util.getMsg(Util.getMsg(""Err_CouldntImportSong""), ex.toString());
                }
                SongSelector.refresh();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Delete"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (KeyboardHero.confirm(Util.getMsg(""Que_SureToDelete""))) {
                    try {
                        new File(songSelector.getSelectedFile().toURI()).delete();
                    } catch (Exception ex) {
                        Util.error(Util.getMsg(""Err_CouldntDeleteFile""), ex.toString());
                    }
                    SongSelector.refresh();
                }
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.CENTER);
        spanel.setLayout(new FlowLayout());
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Close"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Play"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                Game.newGame(songSelector.getSelectedFile());
                close();
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.EAST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Refresh"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                SongSelector.refresh();
            }
        });
        getRootPane().setDefaultButton(button);
        instance = this;
    }
","    private void copyMerge(Path[] sources, OutputStream out) throws IOException {
        Configuration conf = getConf();
        for (int i = 0; i < sources.length; ++i) {
            FileSystem fs = sources[i].getFileSystem(conf);
            InputStream in = fs.open(sources[i]);
            try {
                IOUtils.copyBytes(in, out, conf, false);
            } finally {
                in.close();
            }
        }
    }
",True
900580,18115173,15571541,"    private void copy(File in, File out) {
        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());
        try {
            FileChannel ic = new FileInputStream(in).getChannel();
            FileChannel oc = new FileOutputStream(out).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
        } catch (IOException ioe) {
            fail(""Failed testing while copying modified file: "" + ioe.getMessage());
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900581,4298180,10634007,"    public static String md5(String texto) {
        String resultado;
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(texto.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            resultado = hash.toString(16);
            if (resultado.length() < 32) {
                char chars[] = new char[32 - resultado.length()];
                Arrays.fill(chars, '0');
                resultado = new String(chars) + resultado;
            }
        } catch (NoSuchAlgorithmException e) {
            resultado = e.toString();
        }
        return resultado;
    }
","    public static EXISchema getEXISchema(String fileName, Class<?> cls, EXISchemaFactoryErrorHandler compilerErrorHandler) throws IOException, ClassNotFoundException, EXISchemaFactoryException {
        EXISchemaFactory schemaCompiler = new EXISchemaFactory();
        schemaCompiler.setCompilerErrorHandler(compilerErrorHandler);
        InputSource inputSource = null;
        if (fileName != null) {
            URL url;
            if ((url = cls.getResource(fileName)) != null) {
                inputSource = new InputSource(url.openStream());
                inputSource.setSystemId(url.toString());
            } else throw new RuntimeException(""File '"" + fileName + ""' not found."");
        }
        EXISchema compiled = schemaCompiler.compile(inputSource);
        InputStream serialized = serializeSchema(compiled);
        return loadSchema(serialized);
    }
",False
900582,13192162,10107377,"    protected List<String> execute(String queryString, String sVar, String filter) throws UnsupportedEncodingException, IOException {
        String query = URLEncoder.encode(queryString, ""UTF-8"");
        String urlString = ""http://sparql.bibleontology.com/sparql.jsp?sparql="" + query + ""&type1=xml"";
        URL url;
        BufferedReader br = null;
        ArrayList<String> values = new ArrayList<String>();
        try {
            url = new URL(urlString);
            URLConnection conn = url.openConnection();
            br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                String sURI = getURI(line);
                if (sURI != null) {
                    sURI = checkURISyntax(sURI);
                    if (filter == null || sURI.startsWith(filter)) {
                        values.add(sURI);
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            br.close();
        }
        return values;
    }
","    @Deprecated
    public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {
        List<SearchKeyResult> outVec = new ArrayList<SearchKeyResult>();
        String uri = iKeyServer + ""/pks/lookup?search="" + URLEncoder.encode(iText, UTF8);
        URL url = new URL(uri);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        Pattern regex = Pattern.compile(""pub.*?<a\\s+href\\s*=\""(.*?)\"".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\"".*?\"".*?>\\s*(.+?)\\s*</a>"", Pattern.CANON_EQ);
        String line;
        while ((line = input.readLine()) != null) {
            Matcher regexMatcher = regex.matcher(line);
            while (regexMatcher.find()) {
                String id = regexMatcher.group(2);
                String downUrl = iKeyServer + regexMatcher.group(1);
                String downDate = regexMatcher.group(3);
                String name = decodeHTML(regexMatcher.group(4));
                outVec.add(new SearchKeyResult(id, name, downDate, downUrl));
            }
        }
        IOUtils.closeQuietly(input);
        return outVec;
    }
",False
900583,20953556,20601756,"    public String loadFileContent(final String _resourceURI) {
        final Lock readLock = this.fileLock.readLock();
        final Lock writeLock = this.fileLock.writeLock();
        boolean hasReadLock = false;
        boolean hasWriteLock = false;
        try {
            readLock.lock();
            hasReadLock = true;
            if (!this.cachedResources.containsKey(_resourceURI)) {
                readLock.unlock();
                hasReadLock = false;
                writeLock.lock();
                hasWriteLock = true;
                if (!this.cachedResources.containsKey(_resourceURI)) {
                    final InputStream resourceAsStream = this.getClass().getResourceAsStream(_resourceURI);
                    final StringWriter writer = new StringWriter();
                    try {
                        IOUtils.copy(resourceAsStream, writer);
                    } catch (final IOException ex) {
                        throw new IllegalStateException(""Resource not read-able"", ex);
                    }
                    final String loadedResource = writer.toString();
                    this.cachedResources.put(_resourceURI, loadedResource);
                }
                writeLock.unlock();
                hasWriteLock = false;
                readLock.lock();
                hasReadLock = true;
            }
            return this.cachedResources.get(_resourceURI);
        } finally {
            if (hasReadLock) {
                readLock.unlock();
            }
            if (hasWriteLock) {
                writeLock.unlock();
            }
        }
    }
","    public static File copyFile(String path) {
        File src = new File(path);
        File dest = new File(src.getName());
        try {
            if (!dest.exists()) {
                dest.createNewFile();
            }
            FileChannel source = new FileInputStream(src).getChannel();
            FileChannel destination = new FileOutputStream(dest).getChannel();
            destination.transferFrom(source, 0, source.size());
            source.close();
            destination.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return dest;
    }
",True
900584,92552,7999742,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    private InputStream urlToInputStream(URL url) throws IOException {
        URLConnection conn = url.openConnection();
        conn.setRequestProperty(""User-Agent"", IE);
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate"");
        conn.connect();
        String encoding = conn.getContentEncoding();
        if ((encoding != null) && encoding.equalsIgnoreCase(""gzip"")) return new GZIPInputStream(conn.getInputStream()); else if ((encoding != null) && encoding.equalsIgnoreCase(""deflate"")) return new InflaterInputStream(conn.getInputStream(), new Inflater(true)); else return conn.getInputStream();
    }
",False
900585,12754270,15031489,"    private void fileUpload() throws IOException {
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        mpEntity.addPart(""Filename"", new StringBody(file.getName()));
        mpEntity.addPart(""Filedata"", new MonitoredFileBody(file, uploadProgress));
        httppost.setEntity(mpEntity);
        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());
        NULogger.getLogger().info(""Now uploading your file into sharesend.com"");
        status = UploadStatus.UPLOADING;
        HttpResponse response = httpclient.execute(httppost);
        status = UploadStatus.GETTINGLINK;
        HttpEntity resEntity = response.getEntity();
        NULogger.getLogger().info(response.getStatusLine().toString());
        if (resEntity != null) {
            uploadresponse = EntityUtils.toString(resEntity);
        }
        NULogger.getLogger().log(Level.INFO, ""Upload Response : {0}"", uploadresponse);
        NULogger.getLogger().log(Level.INFO, ""Download Link : http://sharesend.com/{0}"", uploadresponse);
        downloadlink = ""http://sharesend.com/"" + uploadresponse;
        downURL = downloadlink;
        httpclient.getConnectionManager().shutdown();
        uploadFinished();
    }
","    public Point getCoordinates(String address, String city, String state, String country) {
        StringBuilder queryString = new StringBuilder();
        StringBuilder urlString = new StringBuilder();
        StringBuilder response = new StringBuilder();
        if (address != null) {
            queryString.append(address.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (city != null) {
            queryString.append(city.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (state != null) {
            queryString.append(state.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (country != null) {
            queryString.append(country.replaceAll("" "", ""+""));
        }
        urlString.append(""http://maps.google.com/maps/geo?key="");
        urlString.append(key);
        urlString.append(""&sensor=false&output=json&oe=utf8&q="");
        urlString.append(queryString.toString());
        try {
            URL url = new URL(urlString.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            JSONObject root = (JSONObject) JSONValue.parse(response.toString());
            JSONObject placemark = (JSONObject) ((JSONArray) root.get(""Placemark"")).get(0);
            JSONArray coordinates = (JSONArray) ((JSONObject) placemark.get(""Point"")).get(""coordinates"");
            Point point = new Point();
            point.setLatitude((Double) coordinates.get(1));
            point.setLongitude((Double) coordinates.get(0));
            return point;
        } catch (MalformedURLException ex) {
            return null;
        } catch (NullPointerException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
    }
",False
900586,14832930,10785895,"    private static String format(String check) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        check = check.replaceAll("" "", """");
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(check.getBytes(""ISO-8859-1""));
        byte[] end = md5.digest();
        String digest = """";
        for (int i = 0; i < end.length; i++) {
            digest += ((end[i] & 0xff) < 16 ? ""0"" : """") + Integer.toHexString(end[i] & 0xff);
        }
        return digest;
    }
","    private void createPropertyName(String objectID, String value, String propertyName, Long userID) throws JspTagException {
        rObject object = new rObject(new Long(objectID), userID);
        ClassProperty classProperty = new ClassProperty(propertyName, object.getClassName());
        String newValue = value;
        if (classProperty.getName().equals(""Password"")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""MD5"");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println(""jspShop: Could not get instance of MD5 algorithm. Please fix this!"" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException(""Error crypting password!: "" + e.getMessage());
            }
        }
        Properties properties = new Properties(new Long(objectID), userID);
        try {
            Property property = properties.create(classProperty.getID(), newValue);
            pageContext.setAttribute(getId(), property);
        } catch (CreateException e) {
            throw new JspTagException(""Could not create PropertyValue, CreateException: "" + e.getMessage());
        }
    }
",True
900587,18560649,13279978,"    private static final void addFile(ZipArchiveOutputStream os, File file, String prefix) throws IOException {
        ArchiveEntry entry = os.createArchiveEntry(file, file.getAbsolutePath().substring(prefix.length() + 1));
        os.putArchiveEntry(entry);
        FileInputStream fis = new FileInputStream(file);
        IOUtils.copy(fis, os);
        fis.close();
        os.closeArchiveEntry();
    }
","    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException {
        LOGGER.debug(""DOWNLOAD - Send content: "" + realFile.getAbsolutePath());
        LOGGER.debug(""Output stream: "" + out.toString());
        if (ServerConfiguration.isDynamicSEL()) {
            LOGGER.error(""IS DINAMIC SEL????"");
        } else {
        }
        if ("".tokens"".equals(realFile.getName()) || "".response"".equals(realFile.getName()) || "".request"".equals(realFile.getName()) || isAllowedClient) {
            FileInputStream in = null;
            try {
                in = new FileInputStream(realFile);
                int bytes = IOUtils.copy(in, out);
                LOGGER.debug(""System resource or Allowed Client wrote bytes:  "" + bytes);
                out.flush();
            } catch (Exception e) {
                LOGGER.error(""Error while uploading over encryption system "" + realFile.getName() + "" file"", e);
            } finally {
                IOUtils.closeQuietly(in);
            }
        } else {
            FileInputStream in = null;
            try {
                in = new FileInputStream(realFile);
                int bytes = IOUtils.copy(in, out);
                LOGGER.debug(""System resource or Allowed Client wrote bytes:  "" + bytes);
                out.flush();
            } catch (Exception e) {
                LOGGER.error(""Error while uploading over encryption system "" + realFile.getName() + "" file"", e);
            } finally {
                IOUtils.closeQuietly(in);
            }
        }
    }
",True
900588,22207815,21113767,"    public static Checksum checksum(File file, Checksum checksum) throws IOException {
        if (file.isDirectory()) {
            throw new IllegalArgumentException(""Checksums can't be computed on directories"");
        }
        InputStream in = null;
        try {
            in = new CheckedInputStream(new FileInputStream(file), checksum);
            IOUtils.copy(in, new NullOutputStream());
        } finally {
            IOUtils.closeQuietly(in);
        }
        return checksum;
    }
","    @Override
    public void render(Output output) throws IOException {
        output.setStatus(headersFile.getStatusCode(), headersFile.getStatusMessage());
        for (Entry<String, Set<String>> header : headersFile.getHeadersMap().entrySet()) {
            Set<String> values = header.getValue();
            for (String value : values) {
                output.addHeader(header.getKey(), value);
            }
        }
        if (file != null) {
            InputStream inputStream = new FileInputStream(file);
            try {
                output.open();
                OutputStream out = output.getOutputStream();
                IOUtils.copy(inputStream, out);
            } finally {
                inputStream.close();
                output.close();
            }
        }
    }
",True
900589,7893892,10249398,"    public static String md5EncodeString(String s) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        if (s == null) return null;
        if (StringUtils.isBlank(s)) return """";
        MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
        algorithm.reset();
        algorithm.update(s.getBytes(""UTF-8""));
        byte messageDigest[] = algorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < messageDigest.length; i++) {
            String hex = Integer.toHexString(0xFF & messageDigest[i]);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
","    public String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",True
900590,8364547,1953115,"        @Override
        public void executeInterruptible() {
            encodingTerminated = false;
            File destinationFile = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                IconAndFileListElement element;
                while ((element = getNextFileElement()) != null) {
                    File origFile = element.getFile();
                    destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName());
                    if (!destinationFile.getParentFile().exists()) {
                        destinationFile.getParentFile().mkdirs();
                    }
                    actualFileLabel.setText(origFile.getName());
                    actualFileModel.setMaximum((int) origFile.length());
                    actualFileModel.setValue(0);
                    int bitrate;
                    synchronized (bitratePattern) {
                        Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue());
                        bitrateMatcher.find();
                        bitrate = Integer.parseInt(bitrateMatcher.group(1));
                    }
                    List<String> command = new LinkedList<String>();
                    command.add(encoderFile.getCanonicalPath());
                    command.add(""--mp3input"");
                    command.add(""-m"");
                    command.add(""j"");
                    String sampleFreq = Settings.getSetting(""encode.sample.freq"");
                    if (Util.isNotEmpty(sampleFreq)) {
                        command.add(""--resample"");
                        command.add(sampleFreq);
                    }
                    QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem();
                    command.add(""-q"");
                    command.add(Integer.toString(quality.getValue()));
                    command.add(""-b"");
                    command.add(Integer.toString(bitrate));
                    command.add(""--cbr"");
                    command.add(""-"");
                    command.add(destinationFile.getCanonicalPath());
                    if (LOG.isDebugEnabled()) {
                        StringBuilder commandLine = new StringBuilder();
                        boolean first = true;
                        for (String part : command) {
                            if (!first) commandLine.append("" "");
                            commandLine.append(part);
                            first = false;
                        }
                        LOG.debug(""Command line: "" + commandLine.toString());
                    }
                    encodingProcess = runtime.exec(command.toArray(new String[0]));
                    lastPosition = 0l;
                    InputStream fileStream = null;
                    try {
                        fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this);
                        IOUtils.copy(fileStream, encodingProcess.getOutputStream());
                        encodingProcess.getOutputStream().close();
                    } finally {
                        IOUtils.closeQuietly(fileStream);
                        if (LOG.isDebugEnabled()) {
                            InputStream processOut = null;
                            try {
                                processOut = encodingProcess.getInputStream();
                                StringWriter sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process output stream:\n"" + sw);
                                IOUtils.closeQuietly(processOut);
                                processOut = encodingProcess.getErrorStream();
                                sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process error stream:\n"" + sw);
                            } finally {
                                IOUtils.closeQuietly(processOut);
                            }
                        }
                    }
                    int result = encodingProcess.waitFor();
                    encodingProcess = null;
                    if (result != 0) {
                        LOG.warn(""Encoder process returned error code "" + result);
                    }
                    if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) {
                        MP3File mp3Input = new MP3File(origFile);
                        MP3File mp3Output = new MP3File(destinationFile);
                        boolean write = false;
                        if (mp3Input.hasID3v2tag()) {
                            ID3v2Tag id3v2Tag = new ID3v2Tag();
                            for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) {
                                id3v2Tag.addFrame(frame);
                            }
                            mp3Output.setID3v2tag(id3v2Tag);
                            write = true;
                        }
                        if (mp3Input.hasID3v11tag()) {
                            mp3Output.setID3v11tag(mp3Input.getID3v11tag());
                            write = true;
                        }
                        if (write) mp3Output.write();
                    }
                }
                actualFileLabel.setText(Messages.getString(""operations.file.encode.execute.actualfile.terminated""));
                actualFileModel.setValue(actualFileModel.getMaximum());
            } catch (Exception e) {
                LOG.error(""Cannot encode files"", e);
                if (!(e instanceof IOException && encodingTerminated)) MainWindowInterface.showError(e);
                if (destinationFile != null) destinationFile.delete();
            }
        }
","    protected int doWork() {
        SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT));
        reader.getFileHeader().setSortOrder(SORT_ORDER);
        SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT);
        Iterator<SAMRecord> iterator = reader.iterator();
        while (iterator.hasNext()) writer.addAlignment(iterator.next());
        reader.close();
        writer.close();
        return 0;
    }
",True
900591,8162671,14778878,"    public static String getMD5Hash(String hashthis) throws NoSuchAlgorithmException {
        byte[] key = ""PATIENTISAUTHENTICATION"".getBytes();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(hashthis.getBytes());
        return new String(HashUtility.base64Encode(md5.digest(key)));
    }
","    public void copyFile(String oldPathFile, String newPathFile) {
        try {
            int bytesum = 0;
            int byteread = 0;
            File oldfile = new File(oldPathFile);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(oldPathFile);
                FileOutputStream fs = new FileOutputStream(newPathFile);
                byte[] buffer = new byte[1444];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    System.out.println(bytesum);
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
            }
        } catch (Exception e) {
            message = (""���Ƶ����ļ���������"");
        }
    }
",False
900592,8961871,18741084,"    public Transaction() throws Exception {
        Connection Conn = null;
        Statement Stmt = null;
        try {
            Class.forName(""org.gjt.mm.mysql.Driver"").newInstance();
            Conn = DriverManager.getConnection(DBUrl);
            Conn.setAutoCommit(true);
            Stmt = Conn.createStatement();
            try {
                Stmt.executeUpdate(""DROP TABLE trans_test"");
            } catch (SQLException sqlEx) {
            }
            Stmt.executeUpdate(""CREATE TABLE trans_test (id int not null primary key, decdata double) type=BDB"");
            Conn.setAutoCommit(false);
            Stmt.executeUpdate(""INSERT INTO trans_test (id, decdata) VALUES (1, 21.0)"");
            Stmt.executeUpdate(""INSERT INTO trans_test (id, decdata) VALUES (2, 23.485115)"");
            Conn.rollback();
            System.out.println(""Roll Ok"");
            ResultSet RS = Stmt.executeQuery(""SELECT * from trans_test"");
            if (!RS.next()) {
                System.out.println(""Ok"");
            } else {
                System.out.println(""Rollback failed"");
            }
            Stmt.executeUpdate(""INSERT INTO trans_test (id, decdata) VALUES (2, 23.485115)"");
            Stmt.executeUpdate(""INSERT INTO trans_test (id, decdata) VALUES (1, 21.485115)"");
            Conn.commit();
            RS = Stmt.executeQuery(""SELECT * from trans_test where id=2"");
            if (RS.next()) {
                System.out.println(RS.getDouble(2));
                System.out.println(""Ok"");
            } else {
                System.out.println(""Rollback failed"");
            }
        } catch (Exception ex) {
            throw ex;
        } finally {
            if (Stmt != null) {
                try {
                    Stmt.close();
                } catch (SQLException SQLEx) {
                }
            }
            if (Conn != null) {
                try {
                    Conn.close();
                } catch (SQLException SQLEx) {
                }
            }
        }
    }
","    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",False
900593,14263421,20251886,"    void copyFile(String sInput, String sOutput) throws IOException {
        File inputFile = new File(sInput);
        File outputFile = new File(sOutput);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    private void initJarURL() {
        try {
            URL url = getKwantuJarURLInMavenRepo(artifactId, version);
            File tempJarFile = File.createTempFile(artifactId + ""-"" + version, "".jar"");
            OutputStream out = new FileOutputStream(tempJarFile);
            InputStream in = url.openStream();
            int length = 0;
            byte[] bytes = new byte[2048];
            while ((length = in.read(bytes)) > 0) {
                out.write(bytes, 0, length);
            }
            in.close();
            out.close();
            jarURL = tempJarFile.toURI().toURL();
        } catch (IOException ex) {
            throw new KwantuFaultException(ex);
        }
    }
",False
900594,8364547,1048665,"        @Override
        public void executeInterruptible() {
            encodingTerminated = false;
            File destinationFile = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                IconAndFileListElement element;
                while ((element = getNextFileElement()) != null) {
                    File origFile = element.getFile();
                    destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName());
                    if (!destinationFile.getParentFile().exists()) {
                        destinationFile.getParentFile().mkdirs();
                    }
                    actualFileLabel.setText(origFile.getName());
                    actualFileModel.setMaximum((int) origFile.length());
                    actualFileModel.setValue(0);
                    int bitrate;
                    synchronized (bitratePattern) {
                        Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue());
                        bitrateMatcher.find();
                        bitrate = Integer.parseInt(bitrateMatcher.group(1));
                    }
                    List<String> command = new LinkedList<String>();
                    command.add(encoderFile.getCanonicalPath());
                    command.add(""--mp3input"");
                    command.add(""-m"");
                    command.add(""j"");
                    String sampleFreq = Settings.getSetting(""encode.sample.freq"");
                    if (Util.isNotEmpty(sampleFreq)) {
                        command.add(""--resample"");
                        command.add(sampleFreq);
                    }
                    QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem();
                    command.add(""-q"");
                    command.add(Integer.toString(quality.getValue()));
                    command.add(""-b"");
                    command.add(Integer.toString(bitrate));
                    command.add(""--cbr"");
                    command.add(""-"");
                    command.add(destinationFile.getCanonicalPath());
                    if (LOG.isDebugEnabled()) {
                        StringBuilder commandLine = new StringBuilder();
                        boolean first = true;
                        for (String part : command) {
                            if (!first) commandLine.append("" "");
                            commandLine.append(part);
                            first = false;
                        }
                        LOG.debug(""Command line: "" + commandLine.toString());
                    }
                    encodingProcess = runtime.exec(command.toArray(new String[0]));
                    lastPosition = 0l;
                    InputStream fileStream = null;
                    try {
                        fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this);
                        IOUtils.copy(fileStream, encodingProcess.getOutputStream());
                        encodingProcess.getOutputStream().close();
                    } finally {
                        IOUtils.closeQuietly(fileStream);
                        if (LOG.isDebugEnabled()) {
                            InputStream processOut = null;
                            try {
                                processOut = encodingProcess.getInputStream();
                                StringWriter sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process output stream:\n"" + sw);
                                IOUtils.closeQuietly(processOut);
                                processOut = encodingProcess.getErrorStream();
                                sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process error stream:\n"" + sw);
                            } finally {
                                IOUtils.closeQuietly(processOut);
                            }
                        }
                    }
                    int result = encodingProcess.waitFor();
                    encodingProcess = null;
                    if (result != 0) {
                        LOG.warn(""Encoder process returned error code "" + result);
                    }
                    if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) {
                        MP3File mp3Input = new MP3File(origFile);
                        MP3File mp3Output = new MP3File(destinationFile);
                        boolean write = false;
                        if (mp3Input.hasID3v2tag()) {
                            ID3v2Tag id3v2Tag = new ID3v2Tag();
                            for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) {
                                id3v2Tag.addFrame(frame);
                            }
                            mp3Output.setID3v2tag(id3v2Tag);
                            write = true;
                        }
                        if (mp3Input.hasID3v11tag()) {
                            mp3Output.setID3v11tag(mp3Input.getID3v11tag());
                            write = true;
                        }
                        if (write) mp3Output.write();
                    }
                }
                actualFileLabel.setText(Messages.getString(""operations.file.encode.execute.actualfile.terminated""));
                actualFileModel.setValue(actualFileModel.getMaximum());
            } catch (Exception e) {
                LOG.error(""Cannot encode files"", e);
                if (!(e instanceof IOException && encodingTerminated)) MainWindowInterface.showError(e);
                if (destinationFile != null) destinationFile.delete();
            }
        }
","    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        String parent = to_file.getParent();
        if (parent == null) parent = System.getProperty(""user.dir"");
        File dir = new File(parent);
        if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
        if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
        if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",True
900595,725986,7604737,"    public void writeToFtp(String login, String password, String address, String directory, String filename) {
        String newline = System.getProperty(""line.separator"");
        try {
            URL url = new URL(""ftp://"" + login + "":"" + password + ""@ftp."" + address + directory + filename + "".html"" + "";type=i"");
            URLConnection urlConn = url.openConnection();
            urlConn.setDoOutput(true);
            OutputStreamWriter stream = new OutputStreamWriter(urlConn.getOutputStream());
            stream.write(""<html><title>"" + title + ""</title>"" + newline);
            stream.write(""<h1><b>"" + title + ""</b></h1>"" + newline);
            stream.write(""<h2>Table Of Contents:</h2><ul>"" + newline);
            for (int k = 0; k < rings.size(); k++) {
                stream.write(""<li><i><a href=\""#"");
                stream.write(readNoteTitle(k));
                stream.write(""\"">"");
                stream.write(readNoteTitle(k));
                stream.write(""</a></i></li>"" + newline);
            }
            stream.write(""</ul><hr>"" + newline + newline);
            for (int k = 0; k < rings.size(); k++) {
                stream.write(""<h3><b>"");
                stream.write(""<a name=\"""");
                stream.write(readNoteTitle(k));
                stream.write(""\"">"");
                stream.write(readNoteTitle(k) + ""</a>"");
                stream.write(""</b></h3>"" + newline);
                stream.write(readNoteBody(k) + newline);
            }
            stream.write(newline + ""<br><hr><a>This was created using Scribe, a free crutch editor.</a></html>"");
            stream.close();
        } catch (IOException error) {
            System.out.println(""There was an error: "" + error);
        }
    }
","    public String get(String url) {
        String buf = null;
        StringBuilder resultBuffer = new StringBuilder(512);
        if (debug.DEBUG) debug.logger(""gov.llnl.tox.util.href"", ""get(url)>> "" + url);
        try {
            URL theURL = new URL(url);
            URLConnection urlConn = theURL.openConnection();
            urlConn.setDoOutput(true);
            urlConn.setReadTimeout(timeOut);
            BufferedReader urlReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            do {
                buf = urlReader.readLine();
                if (buf != null) {
                    resultBuffer.append(buf);
                    resultBuffer.append(""\n"");
                }
            } while (buf != null);
            urlReader.close();
            if (debug.DEBUG) debug.logger(""gov.llnl.tox.util.href"", ""get(output)>> "" + resultBuffer.toString());
            int xmlNdx = resultBuffer.lastIndexOf(""?>"");
            if (xmlNdx == -1) result = resultBuffer.toString(); else result = resultBuffer.substring(xmlNdx + 2);
        } catch (Exception e) {
            result = debug.logger(""gov.llnl.tox.util.href"", ""error: get >> "", e);
        }
        return (result);
    }
",False
900596,22242021,2113293,"    public void testSavepoint4() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint4 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        for (int i = 0; i < 3; i++) {
            System.out.println(""iteration: "" + i);
            PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint4 (data) VALUES (?)"");
            pstmt.setInt(1, 1);
            assertTrue(pstmt.executeUpdate() == 1);
            Savepoint savepoint = con.setSavepoint();
            assertNotNull(savepoint);
            assertTrue(savepoint.getSavepointId() == 1);
            try {
                savepoint.getSavepointName();
                assertTrue(false);
            } catch (SQLException e) {
            }
            pstmt.setInt(1, 2);
            assertTrue(pstmt.executeUpdate() == 1);
            pstmt.close();
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            ResultSet rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 3);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback(savepoint);
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 1);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback();
        }
        con.setAutoCommit(true);
    }
","    protected void setUp() throws Exception {
        testOutputDirectory = new File(getClass().getResource(""/"").getPath());
        zipFile = new File(this.testOutputDirectory, ""/plugin.zip"");
        zipOutputDirectory = new File(this.testOutputDirectory, ""zip"");
        zipOutputDirectory.mkdir();
        logger.fine(""zip dir created"");
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
        zos.putNextEntry(new ZipEntry(""css/""));
        zos.putNextEntry(new ZipEntry(""css/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""js/""));
        zos.putNextEntry(new ZipEntry(""js/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/mylib.jar""));
        File jarFile = new File(this.testOutputDirectory.getPath() + ""/mylib.jar"");
        JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile));
        jos.putNextEntry(new ZipEntry(""vqwiki/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/system.properties""));
        System.getProperties().store(jos, null);
        jos.closeEntry();
        jos.close();
        IOUtils.copy(new FileInputStream(jarFile), zos);
        zos.closeEntry();
        zos.close();
        jarFile.delete();
    }
",False
900597,13387011,20493867,"    private void updateViewerContent(ScrollingGraphicalViewer viewer) {
        BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel();
        if (!graph.isMechanistic()) return;
        Map<String, Color> highlightMap = new HashMap<String, Color>();
        for (Object o : graph.getNodes()) {
            IBioPAXNode node = (IBioPAXNode) o;
            if (node.isHighlighted()) {
                highlightMap.put(node.getIDHash(), node.getHighlightColor());
            }
        }
        for (Object o : graph.getEdges()) {
            IBioPAXEdge edge = (IBioPAXEdge) o;
            if (edge.isHighlighted()) {
                highlightMap.put(edge.getIDHash(), edge.getHighlightColor());
            }
        }
        HighlightLayer hLayer = (HighlightLayer) ((ChsScalableRootEditPart) viewer.getRootEditPart()).getLayer(HighlightLayer.HIGHLIGHT_LAYER);
        hLayer.removeAll();
        hLayer.highlighted.clear();
        viewer.deselectAll();
        graph.recordLayout();
        PathwayHolder p = graph.getPathway();
        if (withContent != null) {
            p.updateContentWith(withContent);
        }
        BioPAXGraph newGraph = main.getRootGraph().excise(p);
        newGraph.setAsRoot();
        viewer.setContents(newGraph);
        boolean layedout = newGraph.fetchLayout();
        if (!layedout) {
            new CoSELayoutAction(main).run();
        }
        viewer.deselectAll();
        GraphAnimation.run(viewer);
        for (Object o : newGraph.getNodes()) {
            IBioPAXNode node = (IBioPAXNode) o;
            if (highlightMap.containsKey(node.getIDHash())) {
                node.setHighlightColor(highlightMap.get(node.getIDHash()));
                node.setHighlight(true);
            }
        }
        for (Object o : newGraph.getEdges()) {
            IBioPAXEdge edge = (IBioPAXEdge) o;
            if (highlightMap.containsKey(edge.getIDHash())) {
                edge.setHighlightColor(highlightMap.get(edge.getIDHash()));
                edge.setHighlight(true);
            }
        }
    }
","    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        super.execute(context);
        debug(""Start execute job "" + this.getClass().getName());
        try {
            String name = ""nixspam-ip.dump.gz"";
            String f = this.path_app_root + ""/"" + this.properties.get(""dir"") + ""/"";
            try {
                org.apache.commons.io.FileUtils.forceMkdir(new File(f));
            } catch (IOException ex) {
                fatal(""IOException"", ex);
            }
            f += ""/"" + name;
            String url = ""http://www.dnsbl.manitu.net/download/"" + name;
            debug(""(1) - start download: "" + url);
            com.utils.HttpUtil.downloadData(url, f);
            com.utils.IOUtil.unzip(f, f.replace("".gz"", """"));
            File file_to_read = new File(f.replaceAll("".gz"", """"));
            BigFile lines = null;
            try {
                lines = new BigFile(file_to_read.toString());
            } catch (Exception e) {
                fatal(""Excpetion"", e);
                return;
            }
            try {
                Statement stat = conn_url.createStatement();
                stat.executeUpdate(properties.get(""query_delete""));
                stat.close();
            } catch (SQLException e) {
                fatal(""SQLException"", e);
            }
            try {
                conn_url.setAutoCommit(false);
            } catch (SQLException e) {
                fatal(""SQLException"", e);
            }
            boolean ok = true;
            int i = 0;
            for (String line : lines) {
                if (StringUtil.isEmpty(line) || line.indexOf("" "") == -1) {
                    continue;
                }
                try {
                    line = line.substring(line.indexOf("" ""));
                    line = line.trim();
                    if (getIPException(line)) {
                        continue;
                    }
                    Statement stat = this.conn_url.createStatement();
                    stat.executeUpdate(""insert into blacklist(url) values('"" + line + ""')"");
                    stat.close();
                    i++;
                } catch (SQLException e) {
                    fatal(""SQLException"", e);
                    try {
                        conn_url.rollback();
                    } catch (SQLException ex) {
                        fatal(""SQLException"", ex);
                    }
                    ok = false;
                    break;
                }
            }
            boolean del = file_to_read.delete();
            debug(""File "" + file_to_read + "" del:"" + del);
            name = ""spam-ip.com_"" + DateTimeUtil.getNowWithFormat(""MM-dd-yyyy"") + "".csv"";
            f = this.path_app_root + ""/"" + this.properties.get(""dir"") + ""/"";
            org.apache.commons.io.FileUtils.forceMkdir(new File(f));
            f += ""/"" + name;
            url = ""http://spam-ip.com/csv_dump/"" + name;
            debug(""(2) - start download: "" + url);
            com.utils.HttpUtil.downloadData(url, f);
            file_to_read = new File(f);
            try {
                lines = new BigFile(file_to_read.toString());
            } catch (Exception e) {
                fatal(""Exception"", e);
                return;
            }
            try {
                conn_url.setAutoCommit(false);
            } catch (SQLException e) {
                fatal(""SQLException"", e);
            }
            ok = true;
            for (String line : lines) {
                if (StringUtil.isEmpty(line) || line.indexOf("" "") == -1) {
                    continue;
                }
                try {
                    line = line.split("","")[1];
                    line = line.trim();
                    if (getIPException(line)) {
                        continue;
                    }
                    Statement stat = this.conn_url.createStatement();
                    stat.executeUpdate(""insert into blacklist(url) values('"" + line + ""')"");
                    stat.close();
                    i++;
                } catch (SQLException e) {
                    fatal(""SQLException"", e);
                    try {
                        conn_url.rollback();
                    } catch (SQLException ex) {
                        fatal(""SQLException"", ex);
                    }
                    ok = false;
                    break;
                }
            }
            del = file_to_read.delete();
            debug(""File "" + file_to_read + "" del:"" + del);
            if (ok) {
                debug(""Import della BlackList Concluso tot righe: "" + i);
                try {
                    conn_url.commit();
                } catch (SQLException e) {
                    fatal(""SQLException"", e);
                }
            } else {
                fatal(""Problemi con la Blacklist"");
            }
            try {
                conn_url.setAutoCommit(true);
            } catch (SQLException e) {
                fatal(""SQLException"", e);
            }
            try {
                Statement stat = this.conn_url.createStatement();
                stat.executeUpdate(""VACUUM"");
                stat.close();
            } catch (SQLException e) {
                fatal(""SQLException"", e);
            }
        } catch (IOException ex) {
            fatal(""IOException"", ex);
        }
        debug(""End execute job "" + this.getClass().getName());
    }
",False
900598,4645054,4981909,"        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath, Vector images) {
            int i;
            lengthOfTask = images.size();
            Element dataBaseXML = new Element(""dataBase"");
            for (i = 0; ((i < images.size()) && !stop && !cancel); i++) {
                Vector imagen = new Vector(2);
                imagen = (Vector) images.elementAt(i);
                String element = (String) imagen.elementAt(0);
                current = i;
                String pathSrc = System.getProperty(""user.dir"") + File.separator + ""images"" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(File.separator) + 1, pathSrc.length());
                String pathDst = directoryPath + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector<String> keyWords = new Vector<String>();
                keyWords = TIGDataBase.asociatedConceptSearch(element);
                Element image = new Element(""image"");
                image.setAttribute(""name"", name);
                if (keyWords.size() != 0) {
                    for (int k = 0; k < keyWords.size(); k++) {
                        Element category = new Element(""category"");
                        category.setText(keyWords.get(k).trim());
                        image.addContent(category);
                    }
                }
                dataBaseXML.addContent(image);
            }
            Document doc = new Document(dataBaseXML);
            try {
                XMLOutputter out = new XMLOutputter();
                FileOutputStream f = new FileOutputStream(directoryPath + ""images.xml"");
                out.output(doc, f);
                f.flush();
                f.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            current = lengthOfTask;
        }
","    public static File enregistrerFichier(String fileName, File file, String path, String fileMime) throws Exception {
        if (file != null) {
            try {
                HttpServletRequest request = ServletActionContext.getRequest();
                HttpSession session = request.getSession();
                String pathFile = session.getServletContext().getRealPath(path) + File.separator + fileName;
                File outfile = new File(pathFile);
                String[] nomPhotoTab = fileName.split(""\\."");
                String extension = nomPhotoTab[nomPhotoTab.length - 1];
                StringBuffer pathResBuff = new StringBuffer(nomPhotoTab[0]);
                for (int i = 1; i < nomPhotoTab.length - 1; i++) {
                    pathResBuff.append(""."").append(nomPhotoTab[i]);
                }
                String pathRes = pathResBuff.toString();
                String nomPhoto = fileName;
                for (int i = 0; !outfile.createNewFile(); i++) {
                    nomPhoto = pathRes + ""_"" + +i + ""."" + extension;
                    pathFile = session.getServletContext().getRealPath(path) + File.separator + nomPhoto;
                    outfile = new File(pathFile);
                }
                logger.debug("" enregistrerFichier - Enregistrement du fichier : "" + pathFile);
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(file).getChannel();
                    out = new FileOutputStream(outfile).getChannel();
                    in.transferTo(0, in.size(), out);
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                        }
                    }
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                        }
                    }
                }
                return outfile;
            } catch (IOException e) {
                logger.error(""Erreur lors de l'enregistrement de l'image "", e);
                throw new Exception(""Erreur lors de l'enregistrement de l'image "");
            }
        }
        return null;
    }
",True
900599,6403884,18741084,"    private boolean copyOldSetupClass(File lastVerPath, File destPath) throws java.io.FileNotFoundException, IOException {
        byte[] buf;
        File oldClass = new File(lastVerPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
        if (oldClass.exists()) {
            FileOutputStream out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
            FileInputStream in = new FileInputStream(oldClass);
            buf = new byte[(new Long(oldClass.length())).intValue()];
            int read = in.read(buf, 0, buf.length);
            out.write(buf, 0, read);
            out.close();
            in.close();
            return true;
        }
        return false;
    }
","    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",True
900600,23053699,906241,"    public void copy(File from, String to) throws SystemException {
        assert from != null;
        File dst = new File(folder, to);
        dst.getParentFile().mkdirs();
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!dst.exists()) dst.createNewFile();
            in = new FileInputStream(from).getChannel();
            out = new FileOutputStream(dst).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (IOException e) {
            throw new SystemException(e);
        } finally {
            try {
                if (in != null) in.close();
            } catch (Exception e1) {
            }
            try {
                if (out != null) out.close();
            } catch (Exception e1) {
            }
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900601,7263928,9543284,"    private void copyFile(File src_file, File dest_file) {
        InputStream src_stream = null;
        OutputStream dest_stream = null;
        try {
            int b;
            src_stream = new BufferedInputStream(new FileInputStream(src_file));
            dest_stream = new BufferedOutputStream(new FileOutputStream(dest_file));
            while ((b = src_stream.read()) != -1) dest_stream.write(b);
        } catch (Exception e) {
            XRepository.getLogger().warning(this, ""Error on copying the plugin file!"");
            XRepository.getLogger().warning(this, e);
        } finally {
            try {
                src_stream.close();
                dest_stream.close();
            } catch (Exception ex2) {
            }
        }
    }
","    public static final void copyFile(String srcFilename, String dstFilename) throws IOException {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel ifc = null;
        FileChannel ofc = null;
        Util.copyBuffer.clear();
        try {
            fis = new FileInputStream(srcFilename);
            ifc = fis.getChannel();
            fos = new FileOutputStream(dstFilename);
            ofc = fos.getChannel();
            int sz = (int) ifc.size();
            int n = 0;
            while (n < sz) {
                if (ifc.read(Util.copyBuffer) < 0) {
                    break;
                }
                Util.copyBuffer.flip();
                n += ofc.write(Util.copyBuffer);
                Util.copyBuffer.compact();
            }
        } finally {
            try {
                if (ifc != null) {
                    ifc.close();
                } else if (fis != null) {
                    fis.close();
                }
            } catch (IOException exc) {
            }
            try {
                if (ofc != null) {
                    ofc.close();
                } else if (fos != null) {
                    fos.close();
                }
            } catch (IOException exc) {
            }
        }
    }
",True
900602,21100204,1008324,"    public void greatestIncrease(int maxIterations) {
        double[] increase = new double[numModels];
        int[] id = new int[numModels];
        Model md = new Model();
        double oldPerf = 1;
        for (int i = 0; i < numModels; i++) {
            md.addModel(models[i], false);
            increase[i] = oldPerf - md.getLoss();
            id[i] = i;
            oldPerf = md.getLoss();
        }
        for (int i = 0; i < numModels; i++) {
            for (int j = 0; j < numModels - 1 - i; j++) {
                if (increase[j] < increase[j + 1]) {
                    double increasetemp = increase[j];
                    int temp = id[j];
                    increase[j] = increase[j + 1];
                    id[j] = id[j + 1];
                    increase[j + 1] = increasetemp;
                    id[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < maxIterations; i++) {
            addToEnsemble(models[id[i]]);
            if (report) ensemble.report(models[id[i]].getName(), allSets);
            updateBestModel();
        }
    }
","    public void copyHashAllFilesToDirectory(String baseDirStr, Hashtable newNamesTable, String destDirStr) throws Exception {
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(baseDirStr);
        if (null == newNamesTable) {
            newNamesTable = new Hashtable();
        }
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            if (!newNamesTable.isEmpty()) {
                Enumeration enumFiles = newNamesTable.keys();
                while (enumFiles.hasMoreElements()) {
                    String newName = (String) enumFiles.nextElement();
                    String oldPathName = (String) newNamesTable.get(newName);
                    if ((newName != null) && (!"""".equals(newName)) && (oldPathName != null) && (!"""".equals(oldPathName))) {
                        String newPathFileName = destDirStr + sep + newName;
                        String oldPathFileName = baseDirStr + sep + oldPathName;
                        if (oldPathName.startsWith(sep)) {
                            oldPathFileName = baseDirStr + oldPathName;
                        }
                        File f = new File(oldPathFileName);
                        if ((f.exists()) && (f.isFile())) {
                            in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                            out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                            int readLen;
                            while ((readLen = in.read(dataBuff)) > 0) {
                                out.write(dataBuff, 0, readLen);
                            }
                            out.flush();
                            in.close();
                            out.close();
                        } else {
                        }
                    }
                }
            } else {
            }
        } else {
            throw new Exception(""Base (baseDirStr) dir not exist !"");
        }
    }
",False
900603,19800554,2238217,"    public MemoryTextBody(InputStream is, String mimeCharset) throws IOException {
        this.mimeCharset = mimeCharset;
        TempPath tempPath = TempStorage.getInstance().getRootTempPath();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(is, out);
        out.close();
        tempFile = out.toByteArray();
    }
","    public void includeJs(Group group, Writer out, PageContext pageContext) throws IOException {
        includeResource(pageContext, out, RetentionHelper.buildRootRetentionFilePath(group, "".js""), JS_BEGIN_TAG, JS_END_TAG);
        ByteArrayOutputStream outtmp = new ByteArrayOutputStream();
        if (AbstractGroupBuilder.getInstance().buildGroupJsIfNeeded(group, outtmp, pageContext.getServletContext())) {
            FileOutputStream fileStream = new FileOutputStream(new File(RetentionHelper.buildFullRetentionFilePath(group, "".js"")));
            IOUtils.copy(new ByteArrayInputStream(outtmp.toByteArray()), fileStream);
            fileStream.close();
        }
    }
",True
900604,3287812,8351729,"    private String getResourceAsString(final String name) throws IOException {
        final InputStream is = JiBXTestCase.class.getResourceAsStream(name);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copyAndClose(is, baos);
        return baos.toString();
    }
","    public void submitReport() {
        String subject = m_Subject.getText();
        String description = m_Description.getText();
        String email = m_Email.getText();
        if (subject.length() == 0) {
            Util.flashComponent(m_Subject, Color.RED);
            return;
        }
        if (description.length() == 0) {
            Util.flashComponent(m_Description, Color.RED);
            return;
        }
        DynamicLocalisation loc = m_MainFrame.getLocalisation();
        if (email.length() == 0 || email.indexOf(""@"") == -1 || email.indexOf(""."") == -1 || email.startsWith(""@"")) {
            email = ""anonymous@blaat.com"";
        }
        try {
            String data = URLEncoder.encode(""mode"", ""UTF-8"") + ""="" + URLEncoder.encode(""manual"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""from"", ""UTF-8"") + ""="" + URLEncoder.encode(email, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""subject"", ""UTF-8"") + ""="" + URLEncoder.encode(subject, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""body"", ""UTF-8"") + ""="" + URLEncoder.encode(description, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""jvm"", ""UTF-8"") + ""="" + URLEncoder.encode(System.getProperty(""java.version""), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""ocdsver"", ""UTF-8"") + ""="" + URLEncoder.encode(Constants.OPENCDS_VERSION, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""os"", ""UTF-8"") + ""="" + URLEncoder.encode(Constants.OS_NAME + "" "" + System.getProperty(""os.version"") + "" "" + System.getProperty(""os.arch""), ""UTF-8"");
            URL url = new URL(Constants.BUGREPORT_SCRIPT);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            wr.close();
            rd.close();
            JOptionPane.showMessageDialog(this, loc.getMessage(""ReportBug.SentMessage""));
        } catch (Exception e) {
            Logger.getInstance().logException(e);
        }
        dispose();
    }
",False
900605,11081583,5783518,"    public void rename(String virtualWiki, String oldTopicName, String newTopicName) throws Exception {
        Connection conn = DatabaseConnection.getConnection();
        try {
            boolean commit = false;
            conn.setAutoCommit(false);
            try {
                PreparedStatement pstm = conn.prepareStatement(STATEMENT_RENAME);
                try {
                    pstm.setString(1, newTopicName);
                    pstm.setString(2, oldTopicName);
                    pstm.setString(3, virtualWiki);
                    if (pstm.executeUpdate() == 0) throw new SQLException(""Unable to rename topic "" + oldTopicName + "" on wiki "" + virtualWiki);
                } finally {
                    pstm.close();
                }
                doUnlockTopic(conn, virtualWiki, oldTopicName);
                doRenameAllVersions(conn, virtualWiki, oldTopicName, newTopicName);
                commit = true;
            } finally {
                if (commit) conn.commit(); else conn.rollback();
            }
        } finally {
            conn.close();
        }
    }
","    @Override
    protected boolean sendBytes(byte[] data, int offset, int length) {
        try {
            String hex = toHex(data, offset, length);
            URL url = new URL(this.endpoint, ""?raw="" + hex);
            System.out.println(""Connecting to "" + url);
            URLConnection conn = url.openConnection();
            conn.connect();
            Object content = conn.getContent();
            return true;
        } catch (IOException ex) {
            LOGGER.warning(ex.getMessage());
            return false;
        }
    }
",False
900606,3265819,23634465,"    @Test
    public void testLargePut() throws Throwable {
        int size = CommonParameters.BLOCK_SIZE;
        InputStream is = new FileInputStream(_fileName);
        RepositoryFileOutputStream ostream = new RepositoryFileOutputStream(_nodeName, _putHandle, CommonParameters.local);
        int readLen = 0;
        int writeLen = 0;
        byte[] buffer = new byte[CommonParameters.BLOCK_SIZE];
        while ((readLen = is.read(buffer, 0, size)) != -1) {
            ostream.write(buffer, 0, readLen);
            writeLen += readLen;
        }
        ostream.close();
        CCNStats stats = _putHandle.getNetworkManager().getStats();
        Assert.assertEquals(0, stats.getCounter(""DeliverInterestFailed""));
    }
","    private static void zip(File d) throws FileNotFoundException, IOException {
        String[] entries = d.list();
        byte[] buffer = new byte[4096];
        int bytesRead;
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + ""dist.zip"")));
        for (int i = 0; i < entries.length; i++) {
            File f = new File(d, entries[i]);
            if (f.isDirectory()) continue;
            FileInputStream in = new FileInputStream(f);
            int skipl = d.getCanonicalPath().length();
            ZipEntry entry = new ZipEntry(f.getPath().substring(skipl));
            out.putNextEntry(entry);
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
        }
        out.close();
        FileUtils.moveFile(new File(d.getParent() + File.separator + ""dist.zip""), new File(d + File.separator + ""dist.zip""));
    }
",True
900607,20112083,15328073,"    @Override
    public void connect() throws IOException {
        URL url = getLocator().getURL();
        if (url.getProtocol().equals(""file"")) {
            final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm());
            if (newUrlStr != null) {
                if (!newUrlStr.toString().equals(url.toExternalForm())) {
                    logger.warning(""Changing file URL to absolute for URL.openConnection, from "" + url.toExternalForm() + "" to "" + newUrlStr);
                    url = new URL(newUrlStr);
                }
            }
        }
        conn = url.openConnection();
        if (!url.getProtocol().equals(""ftp"") && conn.getURL().getProtocol().equals(""ftp"")) {
            logger.warning(""URL.openConnection() morphed "" + url + "" to "" + conn.getURL());
            throw new IOException(""URL.openConnection() returned an FTP connection for a non-ftp url: "" + url);
        }
        if (conn instanceof HttpURLConnection) {
            final HttpURLConnection huc = (HttpURLConnection) conn;
            huc.connect();
            final int code = huc.getResponseCode();
            if (!(code >= 200 && code < 300)) {
                huc.disconnect();
                throw new IOException(""HTTP response code: "" + code);
            }
            logger.finer(""URL: "" + url);
            logger.finer(""Response code: "" + code);
            logger.finer(""Full content type: "" + conn.getContentType());
            boolean contentTypeSet = false;
            if (stripTrailer(conn.getContentType()).equals(""text/plain"")) {
                final String ext = PathUtils.extractExtension(url.getPath());
                if (ext != null) {
                    final String result = MimeManager.getMimeType(ext);
                    if (result != null) {
                        contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result);
                        contentTypeSet = true;
                        logger.fine(""Received content type "" + conn.getContentType() + ""; overriding based on extension, to: "" + result);
                    }
                }
            }
            if (!contentTypeSet) contentTypeStr = ContentDescriptor.mimeTypeToPackageName(stripTrailer(conn.getContentType()));
        } else {
            conn.connect();
            contentTypeStr = ContentDescriptor.mimeTypeToPackageName(conn.getContentType());
        }
        contentType = new ContentDescriptor(contentTypeStr);
        sources = new URLSourceStream[1];
        sources[0] = new URLSourceStream();
        connected = true;
    }
","    public static byte[] SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return sha1hash;
    }
",False
900608,3567576,12488277,"    protected static String md5(String s) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(s.getBytes());
        byte digest[] = md.digest();
        StringBuffer result = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            result.append(Integer.toHexString(0xFF & digest[i]));
        }
        return result.toString();
    }
","    public void loginMD5() throws Exception {
        GetMethod get = new GetMethod(""http://login.yahoo.com/config/login?.src=www&.done=http://www.yahoo.com"");
        get.setRequestHeader(""user-agent"", ""Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1"");
        client.executeMethod(get);
        parseResponse(get.getResponseBodyAsStream());
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(password.getBytes(""US-ASCII""));
        String hash1 = new String(digest.digest(), ""US-ASCII"");
        String hash2 = hash1 + challenge;
        digest.update(hash2.getBytes(""US-ASCII""));
        String hash = new String(digest.digest(), ""US-ASCII"");
        NameValuePair[] pairs = { new NameValuePair(""login"", login), new NameValuePair(""password"", hash), new NameValuePair("".save"", ""1""), new NameValuePair("".tries"", ""1""), new NameValuePair("".src"", ""www""), new NameValuePair("".md5"", ""1""), new NameValuePair("".hash"", ""1""), new NameValuePair("".js"", ""1""), new NameValuePair("".last"", """"), new NameValuePair("".promo"", """"), new NameValuePair("".intl"", ""us""), new NameValuePair("".bypass"", """"), new NameValuePair("".u"", u), new NameValuePair("".v"", ""0""), new NameValuePair("".challenge"", challenge), new NameValuePair("".yplus"", """"), new NameValuePair("".emailCode"", """"), new NameValuePair(""pkg"", """"), new NameValuePair(""stepid"", """"), new NameValuePair("".ev"", """"), new NameValuePair(""hasMsgr"", ""0""), new NameValuePair("".chkP"", ""Y""), new NameValuePair("".done"", ""http://www.yahoo.com""), new NameValuePair("".persistent"", ""y"") };
        get = new GetMethod(""http://login.yahoo.com/config/login"");
        get.setRequestHeader(""user-agent"", ""Mozilla/5.0 (Macintosh; U; PPC MacOS X; en-us) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1"");
        get.addRequestHeader(""Accept"", ""*/*"");
        get.addRequestHeader(""Accept-Language"", ""en-us, ja;q=0.21, de-de;q=0.86, de;q=0.79, fr-fr;q=0.71, fr;q=0.64, nl-nl;q=0.57, nl;q=0.50, it-it;q=0.43, it;q=0.36, ja-jp;q=0.29, en;q=0.93, es-es;q=0.14, es;q=0.07"");
        get.setQueryString(pairs);
        client.executeMethod(get);
        get.getResponseBodyAsString();
    }
",True
900609,15571479,12881123,"    private void callbackWS(String xmlControl, String ws_results, long docId) {
        SimpleProvider config;
        Service service;
        Object ret;
        Call call;
        Object[] parameter;
        String method;
        String wsurl;
        URL url;
        NodeList delegateNodes;
        Node actualNode;
        InputSource xmlcontrolstream;
        try {
            xmlcontrolstream = new InputSource(new StringReader(xmlControl));
            delegateNodes = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_CALLBACK);
            actualNode = delegateNodes.item(0);
            wsurl = SimpleXMLParser.findChildEntry(actualNode, AgentBehaviour.XML_URL);
            method = SimpleXMLParser.findChildEntry(actualNode, AgentBehaviour.XML_METHOD);
            if (wsurl == null || method == null) {
                System.out.println(""----- Did not get method or wsurl from the properties! -----"");
                return;
            }
            url = new java.net.URL(wsurl);
            try {
                url.openConnection().connect();
            } catch (IOException ex) {
                System.out.println(""----- Could not connect to the webservice! -----"");
            }
            Vector v_param = new Vector();
            v_param.add(ws_results);
            v_param.add(new Long(docId));
            parameter = v_param.toArray();
            config = new SimpleProvider();
            config.deployTransport(""http"", new HTTPSender());
            service = new Service(config);
            call = (Call) service.createCall();
            call.setTargetEndpointAddress(url);
            call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));
            try {
                ret = call.invoke(parameter);
                if (ret == null) {
                    ret = new String(""No response from callback function!"");
                }
                System.out.println(""Callback function returned: "" + ret);
            } catch (RemoteException ex) {
                System.out.println(""----- Could not invoke the method! -----"");
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }
","    ServerInfo getServerInfo(String key, String protocol) throws InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, IOException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException {
        DESedeKeySpec ks = new DESedeKeySpec(Base64.decode(key));
        SecretKeyFactory skf = SecretKeyFactory.getInstance(""DESede"");
        SecretKey sk = skf.generateSecret(ks);
        Cipher cipher = Cipher.getInstance(""DESede"");
        cipher.init(Cipher.DECRYPT_MODE, sk);
        ClassLoader cl = this.getClass().getClassLoader();
        URL url = cl.getResource(protocol + "".sobj"");
        JarURLConnection jc = (JarURLConnection) url.openConnection();
        ObjectInputStream os = new ObjectInputStream(jc.getInputStream());
        SealedObject so = (SealedObject) os.readObject();
        return (ServerInfo) so.getObject(cipher);
    }
",False
900610,3078767,11213172,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public static void copyFile(File src, File dest) throws IOException {
        log.debug(""Copying file: '"" + src + ""' to '"" + dest + ""'"");
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",True
900611,17456566,20601756,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static File copyFile(String path) {
        File src = new File(path);
        File dest = new File(src.getName());
        try {
            if (!dest.exists()) {
                dest.createNewFile();
            }
            FileChannel source = new FileInputStream(src).getChannel();
            FileChannel destination = new FileOutputStream(dest).getChannel();
            destination.transferFrom(source, 0, source.size());
            source.close();
            destination.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return dest;
    }
",True
900612,10330323,19565149,"    public void getFile(String url, String filepath) throws BggException {
        System.out.println(url);
        int retry = retryCount + 1;
        lastURL = url;
        for (retriedCount = 0; retriedCount < retry; retriedCount++) {
            int responseCode = -1;
            try {
                HttpURLConnection con = null;
                BufferedInputStream bis = null;
                OutputStream osw = null;
                try {
                    con = (HttpURLConnection) new URL(url).openConnection();
                    con.setDoInput(true);
                    setHeaders(con);
                    con.setRequestMethod(""GET"");
                    responseCode = con.getResponseCode();
                    bis = new BufferedInputStream(con.getInputStream());
                    int data;
                    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filepath));
                    while ((data = bis.read()) != -1) bos.write(data);
                    bos.flush();
                    bos.close();
                    break;
                } finally {
                    try {
                        bis.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        osw.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        con.disconnect();
                    } catch (Exception ignore) {
                    }
                }
            } catch (IOException ioe) {
                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
                if (retriedCount == retryCount) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
            }
            try {
                Thread.sleep(retryIntervalMillis);
            } catch (InterruptedException ignore) {
            }
        }
    }
","    private long generateUnixInstallShell(File unixShellFile, String instTemplate, File instClassFile) throws IOException {
        FileOutputStream byteWriter = new FileOutputStream(unixShellFile);
        InputStream is = getClass().getResourceAsStream(""/"" + instTemplate);
        InputStreamReader isr = new InputStreamReader(is);
        LineNumberReader reader = new LineNumberReader(isr);
        String content = """";
        String installClassStartStr = ""000000000000"";
        NumberFormat nf = NumberFormat.getInstance(Locale.US);
        nf.setGroupingUsed(false);
        nf.setMinimumIntegerDigits(installClassStartStr.length());
        int installClassStartPos = 0;
        long installClassOffset = 0;
        System.out.println(VAGlobals.i18n(""VAArchiver_GenerateInstallShell""));
        String line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassStart""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += ""InstallClassStart="" + installClassStartStr + ""\n"";
        installClassStartPos = content.length() - 1 - 1 - installClassStartStr.length();
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassSize""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += new String(""InstallClassSize="" + instClassFile.length() + ""\n"");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# InstallClassName""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        content += new String(""InstallClassName="" + instClassName_ + ""\n"");
        line = reader.readLine();
        while ((line != null) && (!line.startsWith(""# Install class""))) {
            content += line + ""\n"";
            line = reader.readLine();
        }
        if (line != null) content += line + ""\n"";
        byteWriter.write(content.substring(0, installClassStartPos + 1).getBytes());
        byteWriter.write(nf.format(content.length()).getBytes());
        byteWriter.write(content.substring(installClassStartPos + 1 + installClassStartStr.length()).getBytes());
        installClassOffset = content.length();
        content = null;
        FileInputStream classStream = new FileInputStream(instClassFile);
        byte[] buf = new byte[2048];
        int read = classStream.read(buf);
        while (read > 0) {
            byteWriter.write(buf, 0, read);
            read = classStream.read(buf);
        }
        classStream.close();
        reader.close();
        byteWriter.close();
        return installClassOffset;
    }
",False
900613,18629449,10271558,"    private InputStream getSearchInputStream(String name) {
        URL url = null;
        try {
            url = new URL(TheMovieDBXmlPullFeedParser.SEARCH_FEED_URL + URLEncoder.encode(name));
            Log.d(Constants.LOG_TAG, ""Movie search URL: "" + url);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
        try {
            return url.openConnection().getInputStream();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
","    private void processBasicContent() {
        String[] packageNames = sourceCollector.getPackageNames();
        for (int i = 0; i < packageNames.length; i++) {
            XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i]);
            File dir = new File(outputDir, packageNames[i]);
            dir.mkdirs();
            Set pkgDirs = new HashSet();
            for (int j = 0; j < sources.length; j++) {
                XdcSource source = sources[j];
                Properties patterns = source.getPatterns();
                if (patterns != null) {
                    tables.put(""patterns"", patterns);
                }
                pkgDirs.add(source.getFile().getParentFile());
                DialectHandler dialectHandler = source.getDialectHandler();
                Writer out = null;
                try {
                    String sourceFilePath = source.getFile().getAbsolutePath();
                    source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null);
                    String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + ""/source-header.xsl"", tables);
                    source.setRootComment(rootComment);
                    Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables);
                    if (LOG.isInfoEnabled()) {
                        LOG.info(""Processing source file "" + sourceFilePath);
                    }
                    out = IOUtils.getWriter(new File(dir, source.getFile().getName() + "".html""), docencoding);
                    XmlUtils.printHtml(out, htmlDoc);
                    if (sourceProcessor != null) {
                        sourceProcessor.processSource(source, encoding, docencoding);
                    }
                    XdcSource.clearProcessingProperties(baseProperties);
                } catch (XmlException e) {
                    LOG.error(e.getMessage(), e);
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                } finally {
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            LOG.error(e.getMessage(), e);
                        }
                    }
                }
            }
            for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) {
                File docFilesDir = new File((File) iter.next(), ""xdc-doc-files"");
                if (docFilesDir.exists() && docFilesDir.isDirectory()) {
                    File targetDir = new File(dir, ""xdc-doc-files"");
                    targetDir.mkdirs();
                    try {
                        IOUtils.copyTree(docFilesDir, targetDir);
                    } catch (IOException e) {
                        LOG.error(e.getMessage(), e);
                    }
                }
            }
        }
    }
",False
900614,23241194,12214889,"    private void publishZip(LWMap map) {
        try {
            if (map.getFile() == null) {
                VueUtil.alert(VueResources.getString(""dialog.mapsave.message""), VueResources.getString(""dialog.mapsave.title""));
                return;
            }
            File savedCMap = PublishUtil.createZip(map, Publisher.resourceVector);
            InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));
            OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile(""Export to Zip File"", ""zip"")));
            int fileLength = (int) savedCMap.length();
            byte bytes[] = new byte[fileLength];
            while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
            istream.close();
            ostream.close();
        } catch (Exception ex) {
            System.out.println(ex);
            VueUtil.alert(VUE.getDialogParent(), VueResources.getString(""dialog.export.message"") + ex.getMessage(), VueResources.getString(""dialog.export.title""), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
","    public static boolean copyFile(String source, String destination, boolean replace) {
        File sourceFile = new File(source);
        File destinationFile = new File(destination);
        if (sourceFile.isDirectory() || destinationFile.isDirectory()) return false;
        if (destinationFile.isFile() && !replace) return false;
        if (!sourceFile.isFile()) return false;
        if (replace) destinationFile.delete();
        try {
            File dir = destinationFile.getParentFile();
            while (dir != null && !dir.exists()) {
                dir.mkdir();
            }
            DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile), 10240));
            DataInputStream inStream = new DataInputStream(new BufferedInputStream(new FileInputStream(sourceFile), 10240));
            try {
                while (inStream.available() > 0) {
                    outStream.write(inStream.readUnsignedByte());
                }
            } catch (EOFException eof) {
            }
            inStream.close();
            outStream.close();
        } catch (IOException ex) {
            throw new FailedException(""Failed to copy file "" + sourceFile.getAbsolutePath() + "" to "" + destinationFile.getAbsolutePath(), ex).setFile(destinationFile.getAbsolutePath());
        }
        return true;
    }
",True
900615,1914865,2915107,"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.update(plainTextPassword.getBytes(charset));
            byte[] rawHash = digest.digest();
            return new String(Hex.encodeHex(rawHash));
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
","    public static void unZip(String unZipfileName, String outputDirectory) throws IOException, FileNotFoundException {
        FileOutputStream fileOut;
        File file;
        ZipEntry zipEntry;
        ZipInputStream zipIn = new ZipInputStream(new BufferedInputStream(new FileInputStream(unZipfileName)), encoder);
        while ((zipEntry = zipIn.getNextEntry()) != null) {
            file = new File(outputDirectory + File.separator + zipEntry.getName());
            if (zipEntry.isDirectory()) {
                createDirectory(file.getPath(), """");
            } else {
                File parent = file.getParentFile();
                if (!parent.exists()) {
                    createDirectory(parent.getPath(), """");
                }
                fileOut = new FileOutputStream(file);
                int readedBytes;
                while ((readedBytes = zipIn.read(buf)) > 0) {
                    fileOut.write(buf, 0, readedBytes);
                }
                fileOut.close();
            }
            zipIn.closeEntry();
        }
    }
",False
900616,7110836,19130322,"    private void copyFile(File dir, File fileToAdd) {
        try {
            byte[] readBuffer = new byte[1024];
            File file = new File(dir.getCanonicalPath() + File.separatorChar + fileToAdd.getName());
            if (file.createNewFile()) {
                FileInputStream fis = new FileInputStream(fileToAdd);
                FileOutputStream fos = new FileOutputStream(file);
                int bytesRead;
                do {
                    bytesRead = fis.read(readBuffer);
                    fos.write(readBuffer, 0, bytesRead);
                } while (bytesRead == 0);
                fos.flush();
                fos.close();
                fis.close();
            } else {
                logger.severe(""unable to create file:"" + file.getAbsolutePath());
            }
        } catch (IOException ioe) {
            logger.severe(""unable to create file:"" + ioe);
        }
    }
","    private String sha1(String s) {
        String encrypt = s;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            sha.update(s.getBytes());
            byte[] digest = sha.digest();
            final StringBuffer buffer = new StringBuffer();
            for (int i = 0; i < digest.length; ++i) {
                final byte b = digest[i];
                final int value = (b & 0x7F) + (b < 0 ? 128 : 0);
                buffer.append(value < 16 ? ""0"" : """");
                buffer.append(Integer.toHexString(value));
            }
            encrypt = buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return encrypt;
    }
",False
900617,8644603,10912340,"    public static void main(String args[]) {
        org.apache.xml.security.Init.init();
        String signatureFileName = args[0];
        javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        dbf.setAttribute(""http://xml.org/sax/features/namespaces"", Boolean.TRUE);
        try {
            long start = System.currentTimeMillis();
            org.apache.xml.security.Init.init();
            File f = new File(signatureFileName);
            System.out.println(""Verifying "" + signatureFileName);
            javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder();
            org.w3c.dom.Document doc = db.parse(new java.io.FileInputStream(f));
            VerifyExampleTest vf = new VerifyExampleTest();
            vf.verify(doc);
            Constants.setSignatureSpecNSprefix(""dsig"");
            Element sigElement = null;
            NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, ""Signature"");
            if (nodes.getLength() != 0) {
                System.out.println(""Found "" + nodes.getLength() + "" Signature  elements."");
                for (int i = 0; i < nodes.getLength(); i++) {
                    sigElement = (Element) nodes.item(i);
                    XMLSignature signature = new XMLSignature(sigElement, """");
                    KeyInfo ki = signature.getKeyInfo();
                    signature.addResourceResolver(new OfflineResolver());
                    if (ki != null) {
                        if (ki.containsX509Data()) {
                            System.out.println(""Could find a X509Data element in the  KeyInfo"");
                        }
                        KeyInfo kinfo = signature.getKeyInfo();
                        X509Certificate cert = null;
                        if (kinfo.containsRetrievalMethod()) {
                            RetrievalMethod m = kinfo.itemRetrievalMethod(0);
                            URL url = new URL(m.getURI());
                            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                            cert = (X509Certificate) cf.generateCertificate(url.openStream());
                        } else {
                            cert = signature.getKeyInfo().getX509Certificate();
                        }
                        if (cert != null) {
                            System.out.println(""The XML signature is "" + (signature.checkSignatureValue(cert) ? ""valid (good)"" : ""invalid !!!!! (bad)""));
                        } else {
                            System.out.println(""Did not find a Certificate"");
                            PublicKey pk = signature.getKeyInfo().getPublicKey();
                            if (pk != null) {
                                System.out.println(""The XML signatur is "" + (signature.checkSignatureValue(pk) ? ""valid (good)"" : ""invalid !!!!! (bad)""));
                            } else {
                                System.out.println(""Did not find a public key, so I can't check the signature"");
                            }
                        }
                    } else {
                        System.out.println(""Did not find a KeyInfo"");
                    }
                }
            }
            long end = System.currentTimeMillis();
            double elapsed = end - start;
            System.out.println(""verified:"" + elapsed);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public boolean chequearMarca(int a, int m, int d) {
        boolean existe = false;
        try {
            cantidadArchivos = obtenerCantidad() + 1;
            String filenametxt = """";
            String filenamezip = """";
            int dia = 0;
            int mes = 0;
            int ano = 0;
            for (int i = 1; i < cantidadArchivos; i++) {
                filenamezip = ""recordatorio"" + i + "".zip"";
                filenametxt = ""recordatorio"" + i + "".txt"";
                BufferedOutputStream dest = null;
                BufferedInputStream is = null;
                ZipEntry entry;
                ZipFile zipfile = new ZipFile(filenamezip);
                Enumeration e = zipfile.entries();
                while (e.hasMoreElements()) {
                    entry = (ZipEntry) e.nextElement();
                    is = new BufferedInputStream(zipfile.getInputStream(entry));
                    int count;
                    byte data[] = new byte[buffer];
                    FileOutputStream fos = new FileOutputStream(entry.getName());
                    dest = new BufferedOutputStream(fos, buffer);
                    while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                    dest.flush();
                    dest.close();
                    is.close();
                }
                DataInputStream input = new DataInputStream(new FileInputStream(filenametxt));
                dia = Integer.parseInt(input.readLine());
                mes = Integer.parseInt(input.readLine());
                ano = Integer.parseInt(input.readLine());
                if (ano == a && mes == m && dia == d) existe = true;
                input.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, ""Error en: "" + e.toString(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
        return (existe);
    }
",False
900618,21089172,18318816,"    private File Gzip(File f) throws IOException {
        if (f == null || !f.exists()) return null;
        File dest_dir = f.getParentFile();
        String dest_filename = f.getName() + "".gz"";
        File zipfile = new File(dest_dir, dest_filename);
        GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(zipfile));
        FileInputStream in = new FileInputStream(f);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        out.finish();
        try {
            in.close();
        } catch (Exception e) {
        }
        try {
            out.close();
        } catch (Exception e) {
        }
        try {
            f.delete();
        } catch (Exception e) {
        }
        return zipfile;
    }
","    public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException {
        final Properties properties = new Properties();
        properties.put(""archetypeGroupId"", ""org.nexopenframework.plugins"");
        properties.put(""archetypeArtifactId"", ""openfrwk-archetype-webmodule"");
        final String version = org.maven.ide.eclipse.ext.Maven2Plugin.getArchetypeVersion();
        properties.put(""archetypeVersion"", version);
        properties.put(""artifactId"", moduleExtension.getArtifact());
        properties.put(""groupId"", moduleExtension.getGroup());
        properties.put(""version"", moduleExtension.getVersion());
        final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager();
        final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID);
        final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, ""Creating WEB module using Apache Maven archetype"");
        File archetypePomDirectory = getDefaultArchetypePomDirectory();
        try {
            final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact());
            final ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes());
            final File f = new File(archetypePomDirectory, ""pom.xml"");
            OutputStream fous = null;
            try {
                fous = new FileOutputStream(f);
                IOUtils.copy(bais, fous);
            } finally {
                try {
                    if (fous != null) {
                        fous.close();
                    }
                    if (bais != null) {
                        bais.close();
                    }
                } catch (final IOException e) {
                }
            }
            String goalName = ""archetype:create"";
            boolean offline = false;
            try {
                final Class clazz = Thread.currentThread().getContextClassLoader().loadClass(""org.maven.ide.eclipse.Maven2Plugin"");
                final Maven2Plugin plugin = (Maven2Plugin) clazz.getMethod(""getDefault"", new Class[0]).invoke(null, new Object[0]);
                offline = plugin.getPreferenceStore().getBoolean(""eclipse.m2.offline"");
            } catch (final ClassNotFoundException e) {
                Logger.logException(""No class [org.maven.ide.eclipse.ext.Maven2Plugin] in classpath"", e);
            } catch (final NoSuchMethodException e) {
                Logger.logException(""No method getDefault"", e);
            } catch (final Throwable e) {
                Logger.logException(e);
            }
            if (offline) {
                goalName = new StringBuffer(goalName).append("" -o"").toString();
            }
            if (!offline) {
                final IPreferenceStore ps = Maven2Plugin.getDefault().getPreferenceStore();
                final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES);
                final String[] repos = repositories.split(org.maven.ide.eclipse.ext.Maven2Plugin.REPO_SEPARATOR);
                final StringBuffer sbRepos = new StringBuffer();
                for (int k = 0; k < repos.length; k++) {
                    sbRepos.append(repos[k]);
                    if (k != repos.length - 1) {
                        sbRepos.append("","");
                    }
                }
                properties.put(""remoteRepositories"", sbRepos.toString());
            }
            workingCopy.setAttribute(ATTR_GOALS, goalName);
            workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath());
            workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties));
            final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout();
            TimeoutLaunchConfiguration.launchWithTimeout(new NullProgressMonitor(), workingCopy, project, timeout);
            FileUtils.copyDirectoryStructure(new File(archetypePomDirectory, project.getName()), new File(location));
            FileUtils.deleteDirectory(new File(location + ""/src""));
            FileUtils.forceDelete(new File(location, ""pom.xml""));
            project.refreshLocal(IResource.DEPTH_INFINITE, null);
        } finally {
            FileUtils.deleteDirectory(archetypePomDirectory);
            Logger.log(Logger.INFO, ""Invoked removing of archetype POM directory"");
        }
    }
",True
900619,18048836,19576367,"    public void modify(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, LDAPConstraints constraints) throws LDAPException {
        Connection con = (Connection) chain.getRequest().get(JdbcInsert.MYVD_DB_CON + this.dbInsertName);
        if (con == null) {
            throw new LDAPException(""Operations Error"", LDAPException.OPERATIONS_ERROR, ""No Database Connection"");
        }
        try {
            con.setAutoCommit(false);
            HashMap<String, String> ldap2db = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_LDAP2DB + this.dbInsertName);
            Iterator<LDAPModification> it = mods.iterator();
            String sql = ""UPDATE "" + this.tableName + "" SET "";
            while (it.hasNext()) {
                LDAPModification mod = it.next();
                if (mod.getOp() != LDAPModification.REPLACE) {
                    throw new LDAPException(""Only modify replace allowed"", LDAPException.OBJECT_CLASS_VIOLATION, """");
                }
                sql += ldap2db.get(mod.getAttribute().getName()) + ""=? "";
            }
            sql += "" WHERE "" + this.rdnField + ""=?"";
            PreparedStatement ps = con.prepareStatement(sql);
            it = mods.iterator();
            int i = 1;
            while (it.hasNext()) {
                LDAPModification mod = it.next();
                ps.setString(i, mod.getAttribute().getStringValue());
                i++;
            }
            String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue();
            ps.setString(i, uid);
            ps.executeUpdate();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                throw new LDAPException(""Could not delete entry or rollback transaction"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
            throw new LDAPException(""Could not delete entry"", LDAPException.OPERATIONS_ERROR, e.toString(), e);
        }
    }
","    public String getContent(URL url) {
        Logger.getLogger(this.getClass().getName()).log(Level.INFO, ""getting content from "" + url.toString());
        String content = """";
        try {
            URLConnection httpc;
            httpc = url.openConnection();
            httpc.setDoInput(true);
            httpc.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(httpc.getInputStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                content = content + line;
            }
            in.close();
        } catch (IOException e) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, ""Problem writing to "" + url, e);
        }
        return content;
    }
",False
900620,6198171,7802218,"    public static JSONObject doJSONQuery(String urlstr) throws IOException, MalformedURLException, JSONException, SolrException {
        URL url = new URL(urlstr);
        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuffer buffer = new StringBuffer();
            String str;
            while ((str = in.readLine()) != null) {
                buffer.append(str + ""\n"");
            }
            in.close();
            JSONObject response = new JSONObject(buffer.toString());
            return response;
        } catch (IOException e) {
            if (con != null) {
                try {
                    int statusCode = con.getResponseCode();
                    if (statusCode >= 400) {
                        throw (new SolrSelectUtils()).new SolrException(statusCode);
                    }
                } catch (IOException exc) {
                }
            }
            throw (e);
        }
    }
","    private static List retrieveQuotes(Report report, Symbol symbol, String suffix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, suffix, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",True
900621,18178530,4937926,"    public static void copyFile(File src, File dst) throws IOException {
        LOGGER.info(""Copying file '"" + src.getAbsolutePath() + ""' to '"" + dst.getAbsolutePath() + ""'"");
        FileChannel in = null;
        FileChannel out = null;
        try {
            FileInputStream fis = new FileInputStream(src);
            in = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(dst);
            out = fos.getChannel();
            out.transferFrom(in, 0, in.size());
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException e) {
                LOGGER.log(Level.SEVERE, e.getMessage(), e);
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    LOGGER.log(Level.SEVERE, e.getMessage(), e);
                }
            }
        }
    }
","    @Override
    public RServiceResponse execute(final NexusServiceRequest inData) throws NexusServiceException {
        final RServiceRequest data = (RServiceRequest) inData;
        final RServiceResponse retval = new RServiceResponse();
        final StringBuilder result = new StringBuilder(""R service call results:\n"");
        RSession session;
        RConnection connection = null;
        try {
            result.append(""Session Attachment: \n"");
            final byte[] sessionBytes = data.getSession();
            if (sessionBytes != null && sessionBytes.length > 0) {
                session = RUtils.getInstance().bytesToSession(sessionBytes);
                result.append(""  attaching to "" + session + ""\n"");
                connection = session.attach();
            } else {
                result.append(""  creating new session\n"");
                connection = new RConnection(data.getServerAddress());
            }
            result.append(""Input Parameters: \n"");
            for (String attributeName : data.getInputVariables().keySet()) {
                final Object parameter = data.getInputVariables().get(attributeName);
                if (parameter instanceof URI) {
                    final FileObject file = VFS.getManager().resolveFile(((URI) parameter).toString());
                    final RFileOutputStream ros = connection.createFile(file.getName().getBaseName());
                    IOUtils.copy(file.getContent().getInputStream(), ros);
                    connection.assign(attributeName, file.getName().getBaseName());
                } else {
                    connection.assign(attributeName, RUtils.getInstance().convertToREXP(parameter));
                }
                result.append(""  "" + parameter.getClass().getSimpleName() + "" "" + attributeName + ""="" + parameter + ""\n"");
            }
            final REXP rExpression = connection.eval(RUtils.getInstance().wrapCode(data.getCode().replace('\r', '\n')));
            result.append(""Execution results:\n"" + rExpression.asString() + ""\n"");
            if (rExpression.isNull() || rExpression.asString().startsWith(""Error"")) {
                retval.setErr(rExpression.asString());
                throw new NexusServiceException(""R error: "" + rExpression.asString());
            }
            result.append(""Output Parameters:\n"");
            final String[] rVariables = connection.eval(""ls();"").asStrings();
            for (String varname : rVariables) {
                final String[] rVariable = connection.eval(""class("" + varname + "")"").asStrings();
                if (rVariable.length == 2 && ""file"".equals(rVariable[0]) && ""connection"".equals(rVariable[1])) {
                    final String rFileName = connection.eval(""showConnections(TRUE)["" + varname + ""]"").asString();
                    result.append(""  R File "").append(varname).append('=').append(rFileName).append('\n');
                    final RFileInputStream rInputStream = connection.openFile(rFileName);
                    final File file = File.createTempFile(""nexus-"" + data.getRequestId(), "".dat"");
                    IOUtils.copy(rInputStream, new FileOutputStream(file));
                    retval.getOutputVariables().put(varname, file.getCanonicalFile().toURI());
                } else {
                    final Object varvalue = RUtils.getInstance().convertREXP(connection.eval(varname));
                    retval.getOutputVariables().put(varname, varvalue);
                    final String printValue = varvalue == null ? ""null"" : varvalue.getClass().isArray() ? Arrays.asList(varvalue).toString() : varvalue.toString();
                    result.append(""  "").append(varvalue == null ? """" : varvalue.getClass().getSimpleName()).append(' ').append(varname).append('=').append(printValue).append('\n');
                }
            }
        } catch (ClassNotFoundException cnfe) {
            retval.setErr(cnfe.getMessage());
            LOGGER.error(""Rserve Exception"", cnfe);
        } catch (RserveException rse) {
            retval.setErr(rse.getMessage());
            LOGGER.error(""Rserve Exception"", rse);
        } catch (REXPMismatchException rme) {
            retval.setErr(rme.getMessage());
            LOGGER.error(""REXP Mismatch Exception"", rme);
        } catch (IOException rme) {
            retval.setErr(rme.getMessage());
            LOGGER.error(""IO Exception copying file "", rme);
        } finally {
            result.append(""Session Detachment:\n"");
            if (connection != null) {
                RSession outSession;
                if (retval.isKeepSession()) {
                    try {
                        outSession = connection.detach();
                    } catch (RserveException e) {
                        LOGGER.debug(""Error detaching R session"", e);
                        outSession = null;
                    }
                } else {
                    outSession = null;
                }
                final boolean close = outSession == null;
                if (!close) {
                    retval.setSession(RUtils.getInstance().sessionToBytes(outSession));
                    result.append(""  suspended session for later use\n"");
                }
                connection.close();
                retval.setSession(null);
                result.append(""  session closed.\n"");
            }
        }
        retval.setOut(result.toString());
        return retval;
    }
",True
900622,3246556,15072228,"    public static void copyFile(File source, String target) throws FileNotFoundException, IOException {
        File fout = new File(target);
        fout.mkdirs();
        fout.delete();
        fout = new File(target);
        FileChannel in = new FileInputStream(source).getChannel();
        FileChannel out = new FileOutputStream(target).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
","    protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException {
        File currentSrcDir = sourceActionDirectory;
        File currentDestDir = destinationActionDirectory;
        String segment = """";
        for (int i = 0; i < segments.size() - 1; i++) {
            segment = segments.get(i);
            currentSrcDir = new File(currentSrcDir, segment);
            currentDestDir = new File(currentDestDir, segment);
        }
        if (currentSrcDir != null && currentDestDir != null) {
            File srcFile = new File(currentSrcDir, segments.getLast());
            if (srcFile.exists()) {
                File destFile = new File(currentDestDir, segments.getLast());
                if (destFile.exists()) {
                    throw new DuplicateActionFileException(srcFile.toURI().toASCIIString());
                }
                try {
                    FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
                    FileChannel destChannel = new FileOutputStream(destFile).getChannel();
                    ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size());
                    while (srcChannel.position() < srcChannel.size()) {
                        srcChannel.read(buffer);
                    }
                    srcChannel.close();
                    buffer.rewind();
                    destChannel.write(buffer);
                    destChannel.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
",True
900623,21605296,22438051,"    public void transport(File file) throws TransportException {
        FTPClient client = new FTPClient();
        try {
            client.connect(getOption(""host""));
            client.login(getOption(""username""), getOption(""password""));
            client.changeWorkingDirectory(getOption(""remotePath""));
            transportRecursive(client, file);
            client.disconnect();
        } catch (Exception e) {
            throw new TransportException(e);
        }
    }
","    public static String hashValue(String password, String salt) throws TeqloException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes(""UTF-8""));
            md.update(salt.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            char[] encoded = (new BASE64Encoder()).encode(raw).toCharArray();
            int length = encoded.length;
            while (length > 0 && encoded[length - 1] == '=') length--;
            for (int i = 0; i < length; i++) {
                if (encoded[i] == '+') encoded[i] = '*'; else if (encoded[i] == '/') encoded[i] = '-';
            }
            return new String(encoded, 0, length);
        } catch (Exception e) {
            throw new TeqloException(""Security"", ""password"", e, ""Could not process password"");
        }
    }
",False
900624,10086563,18935118,"    public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
        if (Val.chkStr(profileTag).equals("""")) {
            profileTag = ""Profile"";
        }
        String configuration_folder_path = this.getConfigurationFolderPath();
        if (configuration_folder_path == null || configuration_folder_path.length() == 0) {
            Properties properties = new Properties();
            final URL url = CswProfiles.class.getResource(""CswCommon.properties"");
            properties.load(url.openStream());
            configuration_folder_path = properties.getProperty(""DEFAULT_CONFIGURATION_FOLDER_PATH"");
        }
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        ResourcePath rscPath = new ResourcePath();
        InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename);
        if (configFile == null) {
            configFile = rscPath.makeInputSource(""/"" + configuration_folder_path + filename);
        }
        Document doc = builder.parse(configFile);
        NodeList profileNodes = doc.getElementsByTagName(profileTag);
        for (int i = 0; i < profileNodes.getLength(); i++) {
            Node currProfile = profileNodes.item(i);
            XPath xpath = XPathFactory.newInstance().newXPath();
            String id = Val.chkStr(xpath.evaluate(""ID"", currProfile));
            String name = Val.chkStr(xpath.evaluate(""Name"", currProfile));
            String description = Val.chkStr(xpath.evaluate(""Description"", currProfile));
            String requestXslt = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Request"", currProfile));
            String expectedGptXmlOutput = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Request/@expectedGptXmlOutput"", currProfile));
            if (expectedGptXmlOutput.equals("""")) {
                expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString();
            }
            String responseXslt = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Response"", currProfile));
            String requestKVPs = Val.chkStr(xpath.evaluate(""GetRecordByID/RequestKVPs"", currProfile));
            String metadataXslt = Val.chkStr(xpath.evaluate(""GetRecordByID/XSLTransformations/Response"", currProfile));
            boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportSpatialQuery"", currProfile)));
            boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportContentTypeQuery"", currProfile)));
            boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportSpatialBoundary"", currProfile)));
            boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""Harvestable"", currProfile)));
            requestXslt = configuration_folder_path + requestXslt;
            responseXslt = configuration_folder_path + responseXslt;
            metadataXslt = configuration_folder_path + metadataXslt;
            SearchXslProfile profile = null;
            try {
                profile = xslProfileClass.getClass().newInstance();
                profile.setId(id);
                profile.setName(name);
                profile.setDescription(description);
                profile.setRequestxslt(requestXslt);
                profile.setResponsexslt(responseXslt);
                profile.setMetadataxslt(metadataXslt);
                profile.setSupportsContentTypeQuery(liveDataMaps);
                profile.setSupportsSpatialBoundary(extentDisplay);
                profile.setSupportsSpatialQuery(extentSearch);
                profile.setKvp(requestKVPs);
                profile.setHarvestable(harvestable);
                profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput));
                profile.setFilter_extentsearch(extentSearch);
                profile.setFilter_livedatamap(liveDataMaps);
                addProfile((P) profile);
            } catch (InstantiationException e) {
                throw new IOException(""Could not instantiate profile class"" + e.getMessage());
            } catch (IllegalAccessException e) {
                throw new IOException(""Could not instantiate profile class"" + e.getMessage());
            }
        }
    }
","    public boolean backupFile(File oldFile, File newFile) {
        boolean isBkupFileOK = false;
        FileChannel sourceChannel = null;
        FileChannel targetChannel = null;
        try {
            sourceChannel = new FileInputStream(oldFile).getChannel();
            targetChannel = new FileOutputStream(newFile).getChannel();
            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""IO exception occurred while copying config file"", e);
        } finally {
            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {
                isBkupFileOK = true;
            }
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
                if (targetChannel != null) {
                    targetChannel.close();
                }
            } catch (IOException e) {
                logger.log(Level.INFO, ""closing channels failed"");
            }
        }
        return isBkupFileOK;
    }
",False
900625,13026685,1446728,"    public DoSearch(String searchType, String searchString) {
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerDoSearch"";
        String rvalue = """";
        String filename = dms_home + FS + ""temp"" + FS + username + ""search.xml"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + key + ""&search="" + URLEncoder.encode(searchString, ""UTF-8"") + ""&searchtype="" + URLEncoder.encode(searchType, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""search.xml"";
            ;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""entry"");
            int num = nodelist.getLength();
            searchDocs = new String[num][3];
            searchDocImageName = new String[num];
            searchDocsToolTip = new String[num];
            for (int i = 0; i < num; i++) {
                searchDocs[i][0] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""filename"");
                searchDocs[i][1] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""project"");
                searchDocs[i][2] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""documentid"");
                searchDocImageName[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""imagename"");
                searchDocsToolTip[i] = DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""description"");
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (Exception ex) {
            System.out.println(ex);
        }
        System.out.println(rvalue);
        if (rvalue.equalsIgnoreCase(""yes"")) {
        }
    }
","    private void backupFile(ZipOutputStream out, String base, String fn) throws IOException {
        String f = FileUtils.getAbsolutePath(fn);
        base = FileUtils.getAbsolutePath(base);
        if (!f.startsWith(base)) {
            Message.throwInternalError(f + "" does not start with "" + base);
        }
        f = f.substring(base.length());
        f = correctFileName(f);
        out.putNextEntry(new ZipEntry(f));
        InputStream in = FileUtils.openFileInputStream(fn);
        IOUtils.copyAndCloseInput(in, out);
        out.closeEntry();
    }
",True
900626,2941028,10254165,"    private static void insertModuleInEar(File fromEar, File toEar, String moduleType, String moduleName, String contextRoot) throws Exception {
        ZipInputStream earFile = new ZipInputStream(new FileInputStream(fromEar));
        FileOutputStream fos = new FileOutputStream(toEar);
        ZipOutputStream tempZip = new ZipOutputStream(fos);
        ZipEntry next = earFile.getNextEntry();
        while (next != null) {
            ByteArrayOutputStream content = new ByteArrayOutputStream();
            byte[] data = new byte[30000];
            int numberread;
            while ((numberread = earFile.read(data)) != -1) {
                content.write(data, 0, numberread);
            }
            if (next.getName().equals(""META-INF/application.xml"")) {
                content = insertModule(earFile, next, content, moduleType, moduleName, contextRoot);
                next = new ZipEntry(""META-INF/application.xml"");
            }
            tempZip.putNextEntry(next);
            tempZip.write(content.toByteArray());
            next = earFile.getNextEntry();
        }
        earFile.close();
        tempZip.close();
        fos.close();
    }
","    public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception {
        List fileList = getSubFiles(new File(baseDir));
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + "".temp""));
        ZipEntry ze = null;
        byte[] buf = new byte[BUFFER];
        byte[] encrypByte = new byte[encrypLength];
        int readLen = 0;
        for (int i = 0; i < fileList.size(); i++) {
            if (stopZipFile) {
                zos.close();
                File zipFile = new File(fileName + "".temp"");
                if (zipFile.exists()) zipFile.delete();
                break;
            }
            File f = (File) fileList.get(i);
            if (f.getAbsoluteFile().equals(fileName + "".temp"")) continue;
            ze = new ZipEntry(getAbsFileName(baseDir, f));
            ze.setSize(f.length());
            ze.setTime(f.lastModified());
            zos.putNextEntry(ze);
            InputStream is = new BufferedInputStream(new FileInputStream(f));
            readLen = is.read(buf, 0, BUFFER);
            if (encrypt) {
                if (readLen >= encrypLength) {
                    System.arraycopy(buf, 0, encrypByte, 0, encrypLength);
                } else if (readLen > 0) {
                    Arrays.fill(encrypByte, (byte) 0);
                    System.arraycopy(buf, 0, encrypByte, 0, readLen);
                    readLen = encrypLength;
                }
                byte[] temp = CryptionControl.getInstance().encryptoECB(encrypByte, rootKey);
                System.arraycopy(temp, 0, buf, 0, encrypLength);
            }
            while (readLen != -1) {
                zos.write(buf, 0, readLen);
                readLen = is.read(buf, 0, BUFFER);
            }
            is.close();
        }
        zos.close();
        File zipFile = new File(fileName + "".temp"");
        if (zipFile.exists()) zipFile.renameTo(new File(fileName + "".zip""));
    }
",True
900627,13904781,7093300,"    public void run() {
        if (software == null) return;
        Jvm.hashtable(HKEY).put(software, this);
        try {
            software.setException(null);
            software.setDownloaded(false);
            software.setDownloadStartTime(System.currentTimeMillis());
            try {
                software.downloadStarted();
            } catch (Exception dsx) {
            }
            if (software.getDownloadDir() == null) {
                software.setException(new Exception(""The DownloadDir is null.""));
                software.setDownloadStartTime(0);
                software.setDownloaded(false);
                throw software.getException();
            }
            URL url = new URL(software.getURL());
            URLConnection con = url.openConnection();
            software.setDownloadLength(con.getContentLength());
            inputStream = con.getInputStream();
            File file = new File(software.getDownloadDir(), software.getURLFilename());
            outputStream = new FileOutputStream(file);
            int totalBytes = 0;
            byte[] buffer = new byte[8192];
            while (!cancelled) {
                int bytesRead = Jvm.copyPartialStream(inputStream, outputStream, buffer);
                if (bytesRead == -1) break;
                totalBytes += bytesRead;
                try {
                    software.downloadProgress(totalBytes);
                } catch (Exception dx) {
                }
            }
            if (!cancelled) software.setDownloaded(true);
        } catch (Exception x) {
            software.setException(x);
            software.setDownloadStartTime(0);
            software.setDownloaded(false);
        }
        try {
            software.downloadComplete();
        } catch (Exception dcx) {
        }
        Jvm.hashtable(HKEY).remove(software);
        closeStreams();
    }
","	public static InputStream getRequest(String path) throws Exception {
		HttpGet httpGet = new HttpGet(path);
		HttpResponse httpResponse = sClient.execute(httpGet);
		if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
			BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(httpResponse.getEntity());
			return bufHttpEntity.getContent();
		} else {
			return null;
		}
	}
",False
900628,2145966,22247688,"    private static Long getNextPkValueForEntityIncreaseBy(String ename, int count, int increaseBy) {
        if (increaseBy < 1) increaseBy = 1;
        String where = ""where eoentity_name = '"" + ename + ""'"";
        ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(ename);
        Connection con = broker.getConnection();
        try {
            try {
                con.setAutoCommit(false);
                con.setReadOnly(false);
            } catch (SQLException e) {
                log.error(e, e);
            }
            for (int tries = 0; tries < count; tries++) {
                try {
                    ResultSet resultSet = con.createStatement().executeQuery(""select pk_value from pk_table "" + where);
                    con.commit();
                    boolean hasNext = resultSet.next();
                    long pk = 1;
                    if (hasNext) {
                        pk = resultSet.getLong(""pk_value"");
                        con.createStatement().executeUpdate(""update pk_table set pk_value = "" + (pk + increaseBy) + "" "" + where);
                    } else {
                        pk = maxIdFromTable(ename);
                        con.createStatement().executeUpdate(""insert into pk_table (eoentity_name, pk_value) values ('"" + ename + ""', "" + (pk + increaseBy) + "")"");
                    }
                    con.commit();
                    return new Long(pk);
                } catch (SQLException ex) {
                    String s = ex.getMessage().toLowerCase();
                    boolean creationError = (s.indexOf(""error code 116"") != -1);
                    creationError |= (s.indexOf(""pk_table"") != -1 && s.indexOf(""does not exist"") != -1);
                    creationError |= s.indexOf(""ora-00942"") != -1;
                    if (creationError) {
                        try {
                            con.rollback();
                            log.info(""creating pk table"");
                            con.createStatement().executeUpdate(""create table pk_table (eoentity_name varchar(100) not null, pk_value integer)"");
                            con.createStatement().executeUpdate(""alter table pk_table add primary key (eoentity_name)"");
                            con.commit();
                        } catch (SQLException ee) {
                            throw new NSForwardException(ee, ""could not create pk table"");
                        }
                    } else {
                        throw new NSForwardException(ex, ""Error fetching PK"");
                    }
                }
            }
        } finally {
            broker.freeConnection(con);
        }
        throw new IllegalStateException(""Couldn't get PK"");
    }
","    public void testPreparedStatementRollback1() throws Exception {
        Connection localCon = getConnection();
        Statement stmt = localCon.createStatement();
        stmt.execute(""CREATE TABLE #psr1 (data BIT)"");
        localCon.setAutoCommit(false);
        PreparedStatement pstmt = localCon.prepareStatement(""INSERT INTO #psr1 (data) VALUES (?)"");
        pstmt.setBoolean(1, true);
        assertEquals(1, pstmt.executeUpdate());
        pstmt.close();
        localCon.rollback();
        ResultSet rs = stmt.executeQuery(""SELECT data FROM #psr1"");
        assertFalse(rs.next());
        rs.close();
        stmt.close();
        localCon.close();
        try {
            localCon.commit();
            fail(""Expecting commit to fail, connection was closed"");
        } catch (SQLException ex) {
            assertEquals(""HY010"", ex.getSQLState());
        }
        try {
            localCon.rollback();
            fail(""Expecting rollback to fail, connection was closed"");
        } catch (SQLException ex) {
            assertEquals(""HY010"", ex.getSQLState());
        }
    }
",True
900629,19557480,7505934,"    public static URLConnection openRemoteDescriptionFile(String urlstr) throws MalformedURLException {
        URL url = new URL(urlstr);
        try {
            URLConnection conn = url.openConnection();
            conn.connect();
            return conn;
        } catch (Exception e) {
            Config conf = Config.loadConfig();
            SimpleSocketAddress localServAddr = conf.getLocalProxyServerAddress();
            Proxy proxy = new Proxy(Type.HTTP, new InetSocketAddress(localServAddr.host, localServAddr.port));
            URLConnection conn;
            try {
                conn = url.openConnection(proxy);
                conn.connect();
                return conn;
            } catch (IOException e1) {
                logger.error(""Failed to retrive desc file:"" + url, e1);
            }
        }
        return null;
    }
","    public static byte[] generateAuthId(String userName, String password) {
        byte[] ret = new byte[16];
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            String str = userName + password;
            messageDigest.update(str.getBytes());
            ret = messageDigest.digest();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return ret;
    }
",False
900630,6387775,3660402,"    public static String hashSHA1(String value) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
            digest.update(value.getBytes());
            BigInteger hash = new BigInteger(1, digest.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
        }
        return null;
    }
","    public void importCertFile(File file) throws IOException {
        File kd;
        File cd;
        synchronized (this) {
            kd = keysDir;
            cd = certsDir;
        }
        if (!cd.isDirectory()) {
            kd.mkdirs();
            cd.mkdirs();
        }
        String newName = file.getName();
        File dest = new File(cd, newName);
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(file).getChannel();
            destinationChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) {
                try {
                    sourceChannel.close();
                } catch (IOException e) {
                }
            }
            if (destinationChannel != null) {
                try {
                    destinationChannel.close();
                } catch (IOException e) {
                }
            }
        }
    }
",False
900631,5505336,4615986,"    public void aprovarCandidato(Atividade atividade) throws SQLException {
        Connection conn = null;
        String insert = ""update Atividade_has_recurso_humano set ativo='true' "" + ""where atividade_idatividade="" + atividade.getIdAtividade() + "" and "" + "" usuario_idusuario="" + atividade.getRecursoHumano().getIdUsuario();
        try {
            conn = connectionFactory.getConnection(true);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            Integer result = stmt.executeUpdate(insert);
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
    }
","    public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception {
        PreparedStatement ps = null;
        try {
            if (log.isDebugEnabled()) log.debug(""db connect - "" + db_.getClass().getName());
            String seqName = DefinitionService.getString(parameters, ""sequence_name"", null);
            if (seqName == null) {
                String errorString = ""Name of sequnce not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String tableName = DefinitionService.getString(parameters, ""name_table"", null);
            if (tableName == null) {
                String errorString = ""Name of table not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String columnName = DefinitionService.getString(parameters, ""name_pk_field"", null);
            if (columnName == null) {
                String errorString = ""Name of column not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            CustomSequenceType seqSite = new CustomSequenceType();
            seqSite.setSequenceName(seqName);
            seqSite.setTableName(tableName);
            seqSite.setColumnName(columnName);
            long seqValue = db_.getSequenceNextValue(seqSite);
            String valueColumnName = DefinitionService.getString(parameters, ""name_value_field"", null);
            if (columnName == null) {
                String errorString = ""Name of valueColumnName not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String insertValue = DefinitionService.getString(parameters, ""insert_value"", null);
            if (columnName == null) {
                String errorString = ""Name of insertValue not found"";
                log.error(errorString);
                throw new Exception(errorString);
            }
            String sql = ""insert into "" + tableName + "" "" + ""("" + columnName + "","" + valueColumnName + "")"" + ""values"" + ""(?,?)"";
            if (log.isDebugEnabled()) {
                log.debug(sql);
                log.debug(""pk "" + seqValue);
                log.debug(""value "" + insertValue);
            }
            ps = db_.prepareStatement(sql);
            ps.setLong(1, seqValue);
            ps.setString(2, insertValue);
            ps.executeUpdate();
            db_.commit();
        } catch (Exception e) {
            try {
                db_.rollback();
            } catch (Exception e1) {
            }
            log.error(""Error insert value"", e);
            throw e;
        } finally {
            org.riverock.generic.db.DatabaseManager.close(ps);
            ps = null;
        }
    }
",True
900632,18115314,13669410,"    public static final String md5(final String s) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String h = Integer.toHexString(0xFF & messageDigest[i]);
                while (h.length() < 2) h = ""0"" + h;
                hexString.append(h);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
        }
        return """";
    }
","    protected void runTests(URL pBaseURL, String pName, String pHref) throws Exception {
        URL url = new URL(pBaseURL, pHref);
        InputSource isource = new InputSource(url.openStream());
        isource.setSystemId(url.toString());
        Document document = getDocumentBuilder().parse(isource);
        NodeList schemas = document.getElementsByTagNameNS(null, ""Schema"");
        for (int i = 0; i < schemas.getLength(); i++) {
            Element schema = (Element) schemas.item(i);
            runTest(url, schema.getAttribute(""name""), schema.getAttribute(""href""));
        }
    }
",False
900633,11838691,11261168,"    private void externalizeFiles(Document doc, File out) throws IOException {
        File[] files = doc.getImages();
        if (files.length > 0) {
            File dir = new File(out.getParentFile(), out.getName() + "".images"");
            if (!dir.mkdirs()) throw new IOException(""cannot create directory "" + dir);
            if (dir.exists()) {
                for (int i = 0; i < files.length; i++) {
                    File file = files[i];
                    File copy = new File(dir, file.getName());
                    FileChannel from = null, to = null;
                    long count = -1;
                    try {
                        from = new FileInputStream(file).getChannel();
                        count = from.size();
                        to = new FileOutputStream(copy).getChannel();
                        from.transferTo(0, count, to);
                        doc.setImage(file, dir.getName() + ""/"" + copy.getName());
                    } catch (Throwable t) {
                        LOG.log(Level.WARNING, ""Copying '"" + file + ""' to '"" + copy + ""' failed (size="" + count + "")"", t);
                    } finally {
                        try {
                            to.close();
                        } catch (Throwable t) {
                        }
                        try {
                            from.close();
                        } catch (Throwable t) {
                        }
                    }
                }
            }
        }
    }
","    public static String encryptPassword(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digester = MessageDigest.getInstance(""sha-256"");
        digester.reset();
        digester.update(""Carmen Sandiago"".getBytes());
        return asHex(digester.digest(password.getBytes(""UTF-8"")));
    }
",False
900634,8407905,241286,"    private void copyResources(File oggDecDir, String[] resources, String resPrefix) throws FileNotFoundException, IOException {
        for (int i = 0; i < resources.length; i++) {
            String res = resPrefix + resources[i];
            InputStream is = this.getClass().getResourceAsStream(res);
            if (is == null) throw new IllegalArgumentException(""cannot find resource '"" + res + ""'"");
            File file = new File(oggDecDir, resources[i]);
            if (!file.exists() || file.length() == 0) {
                FileOutputStream fos = new FileOutputStream(file);
                try {
                    IOUtils.copyStreams(is, fos);
                } finally {
                    fos.close();
                }
            }
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900635,20953665,23071780,"    private void packageDestZip(File tmpFile) throws FileNotFoundException, IOException {
        log(""Creating launch profile package "" + destfile);
        ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(destfile)));
        ZipEntry e = new ZipEntry(RESOURCE_JAR_FILENAME);
        e.setMethod(ZipEntry.STORED);
        e.setSize(tmpFile.length());
        e.setCompressedSize(tmpFile.length());
        e.setCrc(calcChecksum(tmpFile, new CRC32()));
        out.putNextEntry(e);
        InputStream in = new BufferedInputStream(new FileInputStream(tmpFile));
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.closeEntry();
        out.finish();
        out.close();
    }
","    public boolean copyFile(File source, File dest) {
        try {
            FileReader in = new FileReader(source);
            FileWriter out = new FileWriter(dest);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",True
900636,12863885,3408151,"    private static String md5(String input) {
        String res = """";
        try {
            MessageDigest cript = MessageDigest.getInstance(""MD5"");
            cript.reset();
            cript.update(input.getBytes());
            byte[] md5 = cript.digest();
            String tmp = """";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += ""0"" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Log4k.error(pdfPrinter.class.getName(), ex.getMessage());
        }
        return res;
    }
","    public static String crypt(String password, String salt) {
        if (salt.startsWith(magic)) {
            salt = salt.substring(magic.length());
        }
        int saltEnd = salt.indexOf('$');
        if (saltEnd != -1) {
            salt = salt.substring(0, saltEnd);
        }
        if (salt.length() > 8) {
            salt = salt.substring(0, 8);
        }
        MessageDigest md5_1, md5_2;
        try {
            md5_1 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
        md5_1.update(password.getBytes());
        md5_1.update(magic.getBytes());
        md5_1.update(salt.getBytes());
        try {
            md5_2 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
        md5_2.update(password.getBytes());
        md5_2.update(salt.getBytes());
        md5_2.update(password.getBytes());
        byte[] md5_2_digest = md5_2.digest();
        int md5Size = md5_2_digest.length;
        int pwLength = password.length();
        for (int i = pwLength; i > 0; i -= md5Size) {
            md5_1.update(md5_2_digest, 0, i > md5Size ? md5Size : i);
        }
        md5_2.reset();
        byte[] pwBytes = password.getBytes();
        for (int i = pwLength; i > 0; i >>= 1) {
            if ((i & 1) == 1) {
                md5_1.update((byte) 0);
            } else {
                md5_1.update(pwBytes[0]);
            }
        }
        StringBuffer output = new StringBuffer(magic);
        output.append(salt);
        output.append(""$"");
        byte[] md5_1_digest = md5_1.digest();
        byte[] saltBytes = salt.getBytes();
        for (int i = 0; i < 1000; i++) {
            md5_2.reset();
            if ((i & 1) == 1) {
                md5_2.update(pwBytes);
            } else {
                md5_2.update(md5_1_digest);
            }
            if (i % 3 != 0) {
                md5_2.update(saltBytes);
            }
            if (i % 7 != 0) {
                md5_2.update(pwBytes);
            }
            if ((i & 1) != 0) {
                md5_2.update(md5_1_digest);
            } else {
                md5_2.update(pwBytes);
            }
            md5_1_digest = md5_2.digest();
        }
        int value;
        value = ((md5_1_digest[0] & 0xff) << 16) | ((md5_1_digest[6] & 0xff) << 8) | (md5_1_digest[12] & 0xff);
        output.append(cryptTo64(value, 4));
        value = ((md5_1_digest[1] & 0xff) << 16) | ((md5_1_digest[7] & 0xff) << 8) | (md5_1_digest[13] & 0xff);
        output.append(cryptTo64(value, 4));
        value = ((md5_1_digest[2] & 0xff) << 16) | ((md5_1_digest[8] & 0xff) << 8) | (md5_1_digest[14] & 0xff);
        output.append(cryptTo64(value, 4));
        value = ((md5_1_digest[3] & 0xff) << 16) | ((md5_1_digest[9] & 0xff) << 8) | (md5_1_digest[15] & 0xff);
        output.append(cryptTo64(value, 4));
        value = ((md5_1_digest[4] & 0xff) << 16) | ((md5_1_digest[10] & 0xff) << 8) | (md5_1_digest[5] & 0xff);
        output.append(cryptTo64(value, 4));
        value = md5_1_digest[11] & 0xff;
        output.append(cryptTo64(value, 2));
        md5_1 = null;
        md5_2 = null;
        md5_1_digest = null;
        md5_2_digest = null;
        pwBytes = null;
        saltBytes = null;
        password = salt = null;
        return output.toString();
    }
",True
900637,7034888,13329811,"    public void put(IMetaCollection aCollection) throws TransducerException {
        if (null != ioTransducer) {
            try {
                URL urlObj = new URL(url);
                URLConnection urlConn = urlObj.openConnection();
                OutputStreamWriter sw = new OutputStreamWriter(urlConn.getOutputStream());
                ioTransducer.setWriter(new BufferedWriter(sw));
                ioTransducer.put(aCollection);
            } catch (Exception e) {
                throw new TransducerException(e);
            }
        } else {
            throw new TransducerException(""An IIOTransducer instance must first be set on the URLTransducerAdapter."");
        }
    }
","    @Deprecated
    public void test() {
        try {
            String query = ""* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>"" + ""* <http://xmlns.com/foaf/0.1/knows> *"";
            String url = ""http://sindice.com/api/v2/search?qt=advanced&q="" + URLEncoder.encode(query, ""utf-8"") + ""&qt=advanced"";
            URL urlObj = new URL(url);
            URLConnection con = urlObj.openConnection();
            if (con != null) {
                Model model = ModelFactory.createDefaultModel();
                model.read(con.getInputStream(), null);
            }
            System.out.println(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",False
900638,20343439,912634,"        public void run() {
            URLConnection con = null;
            try {
                con = url.openConnection();
                if (""HTTPS"".equalsIgnoreCase(url.getProtocol())) {
                    HttpsURLConnection scon = (HttpsURLConnection) con;
                    try {
                        scon.setSSLSocketFactory(SSLUtil.getSSLSocketFactory(clientCertAlias));
                        HostnameVerifier hv = SSLUtil.getHostnameVerifier(hostCertLevel);
                        if (hv != null) {
                            scon.setHostnameVerifier(hv);
                        }
                    } catch (GeneralSecurityException e) {
                        Debug.logError(e, module);
                    } catch (GenericConfigException e) {
                        Debug.logError(e, module);
                    }
                }
            } catch (IOException e) {
                Debug.logError(e, module);
            }
            synchronized (URLConnector.this) {
                if (timedOut && con != null) {
                    close(con);
                } else {
                    connection = con;
                    URLConnector.this.notify();
                }
            }
        }
","    String fetch_m3u(String m3u) {
        InputStream pstream = null;
        if (m3u.startsWith(""http://"")) {
            try {
                URL url = null;
                if (running_as_applet) url = new URL(getCodeBase(), m3u); else url = new URL(m3u);
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) break;
            return line;
        }
        return null;
    }
",False
900639,18972686,2638907,"    public void jsFunction_addFile(ScriptableFile infile) throws IOException {
        if (!infile.jsFunction_exists()) throw new IllegalArgumentException(""Cannot add a file that doesn't exists to an archive"");
        ZipArchiveEntry entry = new ZipArchiveEntry(infile.getName());
        entry.setSize(infile.jsFunction_getSize());
        out.putArchiveEntry(entry);
        try {
            InputStream inStream = infile.jsFunction_createInputStream();
            IOUtils.copy(inStream, out);
            inStream.close();
        } finally {
            out.closeArchiveEntry();
        }
    }
","    public void run() {
        LOG.debug(this);
        String[] parts = createCmdArray(getCommand());
        Runtime runtime = Runtime.getRuntime();
        try {
            Process process = runtime.exec(parts);
            if (isBlocking()) {
                process.waitFor();
                StringWriter out = new StringWriter();
                IOUtils.copy(process.getInputStream(), out);
                String stdout = out.toString().replaceFirst(""\\s+$"", """");
                if (StringUtils.isNotBlank(stdout)) {
                    LOG.info(""Process stdout:\n"" + stdout);
                }
                StringWriter err = new StringWriter();
                IOUtils.copy(process.getErrorStream(), err);
                String stderr = err.toString().replaceFirst(""\\s+$"", """");
                if (StringUtils.isNotBlank(stderr)) {
                    LOG.error(""Process stderr:\n"" + stderr);
                }
            }
        } catch (IOException ioe) {
            LOG.error(String.format(""Could not exec [%s]"", getCommand()), ioe);
        } catch (InterruptedException ie) {
            LOG.error(String.format(""Interrupted [%s]"", getCommand()), ie);
        }
    }
",True
900640,7872663,19850714,"    private static boolean prepareQualifyingFile(String completePath, String outputFile) {
        try {
            File inFile = new File(completePath + fSep + ""qualifying.txt"");
            FileChannel inC = new FileInputStream(inFile).getChannel();
            BufferedReader br = new BufferedReader(new FileReader(inFile));
            File outFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + outputFile);
            FileChannel outC = new FileOutputStream(outFile, true).getChannel();
            boolean endOfFile = true;
            short movieName = 0;
            int customer = 0;
            while (endOfFile) {
                String line = br.readLine();
                if (line != null) {
                    if (line.indexOf("":"") >= 0) {
                        movieName = new Short(line.substring(0, line.length() - 1)).shortValue();
                    } else {
                        customer = new Integer(line.substring(0, line.indexOf("",""))).intValue();
                        ByteBuffer outBuf = ByteBuffer.allocate(6);
                        outBuf.putShort(movieName);
                        outBuf.putInt(customer);
                        outBuf.flip();
                        outC.write(outBuf);
                    }
                } else endOfFile = false;
            }
            br.close();
            outC.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
","    public HttpClient(String urlString, String jsonMessage) throws Exception {
        this.jsonMessage = jsonMessage;
        connection = (HttpURLConnection) (new URL(urlString)).openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestMethod(""POST"");
        connection.setRequestProperty(""Content-type"", ""text/plain"");
    }
",False
900641,19247466,22985809,"    public void copyFile(File sourceFile, File destFile) throws IOException {
        Log.level3(""Copying "" + sourceFile.getPath() + "" to "" + destFile.getPath());
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
        }
        if (destination != null) {
            destination.close();
        }
    }
","    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
",True
900642,14757689,20325581,"    protected Collection<BibtexEntry> getBibtexEntries(String ticket, String citations) throws IOException {
        try {
            URL url = new URL(URL_BIBTEX);
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""Cookie"", ticket + ""; "" + citations);
            conn.connect();
            BibtexParser parser = new BibtexParser(new BufferedReader(new InputStreamReader(conn.getInputStream())));
            return parser.parse().getDatabase().getEntries();
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }
","    public static byte[] generateHash(String strPassword, byte[] salt) {
        try {
            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);
            md.update(strPassword.getBytes(CHAR_ENCODING));
            md.update(salt);
            return md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",False
900643,10076077,17373549,"    @Override
    public void save(String arxivId, InputStream inputStream, String encoding) {
        String filename = StringUtil.arxivid2filename(arxivId, ""tex"");
        try {
            Writer writer = new OutputStreamWriter(new FileOutputStream(String.format(""%s/%s"", LATEX_DOCUMENT_DIR, filename)), encoding);
            IOUtils.copy(inputStream, writer, encoding);
            writer.flush();
            writer.close();
            inputStream.close();
        } catch (IOException e) {
            logger.error(""Failed to save the Latex source with id='{}'"", arxivId, e);
            throw new RuntimeException(e);
        }
    }
","    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        FileInputStream input = new FileInputStream(srcFile);
        try {
            FileOutputStream output = new FileOutputStream(destFile);
            try {
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(output);
            }
        } finally {
            IOUtils.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        if (preserveFileDate) destFile.setLastModified(srcFile.lastModified());
    }
",True
900644,2533570,4317626,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    public static synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the SHA-1 MessageDigest. "" + ""Jive will be unable to function normally."");
            }
        }
        try {
            digest.update(data.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            System.err.println(e);
        }
        return encodeHex(digest.digest());
    }
",True
900645,20987825,4254750,"    public void run() {
        try {
            URL read = null;
            if (_readURL.indexOf(""?"") >= 0) {
                read = new URL(_readURL + ""&id="" + _id);
            } else {
                read = new URL(_readURL + ""?id="" + _id);
            }
            while (_keepGoing) {
                String line;
                while ((line = _in.readLine()) != null) {
                    ConnectionHandlerLocal.DEBUG(""< "" + line);
                    _linesRead++;
                    _listener.incomingMessage(line);
                }
                if (_linesRead == 0) {
                    shutdown(true);
                    return;
                }
                if (_keepGoing) {
                    URLConnection urlConn = read.openConnection();
                    urlConn.setUseCaches(false);
                    _in = new DataInputStream(urlConn.getInputStream());
                    _linesRead = 0;
                }
            }
            System.err.println(""HttpReaderThread: stopping gracefully."");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            shutdown(true);
        }
    }
","    protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException {
        if (url == null) {
            throw new IllegalArgumentException(""URL must not be null."");
        }
        if (LOCAL_LOGV) {
            Log.v(TAG, ""httpConnection: params list"");
            Log.v(TAG, ""\ttoken\t\t= "" + token);
            Log.v(TAG, ""\turl\t\t= "" + url);
            Log.v(TAG, ""\tUser-Agent\t\t="" + mUserAgent);
            Log.v(TAG, ""\tmethod\t\t= "" + ((method == HTTP_POST_METHOD) ? ""POST"" : ((method == HTTP_GET_METHOD) ? ""GET"" : ""UNKNOWN"")));
            Log.v(TAG, ""\tisProxySet\t= "" + isProxySet);
            Log.v(TAG, ""\tproxyHost\t= "" + proxyHost);
            Log.v(TAG, ""\tproxyPort\t= "" + proxyPort);
        }
        AndroidHttpClient client = null;
        try {
            URI hostUrl = new URI(url);
            HttpHost target = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), HttpHost.DEFAULT_SCHEME_NAME);
            client = createHttpClient(context);
            HttpRequest req = null;
            switch(method) {
                case HTTP_POST_METHOD:
                    ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu);
                    entity.setContentType(""application/vnd.wap.mms-message"");
                    HttpPost post = new HttpPost(url);
                    post.setEntity(entity);
                    req = post;
                    break;
                case HTTP_GET_METHOD:
                    req = new HttpGet(url);
                    break;
                default:
                    Log.e(TAG, ""Unknown HTTP method: "" + method + "". Must be one of POST["" + HTTP_POST_METHOD + ""] or GET["" + HTTP_GET_METHOD + ""]."");
                    return null;
            }
            HttpParams params = client.getParams();
            if (isProxySet) {
                ConnRouteParams.setDefaultProxy(params, new HttpHost(proxyHost, proxyPort));
            }
            req.setParams(params);
            req.addHeader(HDR_KEY_ACCEPT, HDR_VALUE_ACCEPT);
            {
                String xWapProfileTagName = MmsConfig.getUaProfTagName();
                String xWapProfileUrl = MmsConfig.getUaProfUrl();
                if (xWapProfileUrl != null) {
                    if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
                        Log.d(LogTag.TRANSACTION, ""[HttpUtils] httpConn: xWapProfUrl="" + xWapProfileUrl);
                    }
                    req.addHeader(xWapProfileTagName, xWapProfileUrl);
                }
            }
            String extraHttpParams = MmsConfig.getHttpParams();
            if (extraHttpParams != null) {
                String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number();
                String line1Key = MmsConfig.getHttpParamsLine1Key();
                String paramList[] = extraHttpParams.split(""\\|"");
                for (String paramPair : paramList) {
                    String splitPair[] = paramPair.split("":"", 2);
                    if (splitPair.length == 2) {
                        String name = splitPair[0].trim();
                        String value = splitPair[1].trim();
                        if (line1Key != null) {
                            value = value.replace(line1Key, line1Number);
                        }
                        if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) {
                            req.addHeader(name, value);
                        }
                    }
                }
            }
            req.addHeader(HDR_KEY_ACCEPT_LANGUAGE, HDR_VALUE_ACCEPT_LANGUAGE);
            HttpResponse response = client.execute(target, req);
            StatusLine status = response.getStatusLine();
            if (status.getStatusCode() != 200) {
                throw new IOException(""HTTP error: "" + status.getReasonPhrase());
            }
            HttpEntity entity = response.getEntity();
            byte[] body = null;
            if (entity != null) {
                try {
                    if (entity.getContentLength() > 0) {
                        body = new byte[(int) entity.getContentLength()];
                        DataInputStream dis = new DataInputStream(entity.getContent());
                        try {
                            dis.readFully(body);
                        } finally {
                            try {
                                dis.close();
                            } catch (IOException e) {
                                Log.e(TAG, ""Error closing input stream: "" + e.getMessage());
                            }
                        }
                    }
                } finally {
                    if (entity != null) {
                        entity.consumeContent();
                    }
                }
            }
            return body;
        } catch (URISyntaxException e) {
            handleHttpConnectionException(e, url);
        } catch (IllegalStateException e) {
            handleHttpConnectionException(e, url);
        } catch (IllegalArgumentException e) {
            handleHttpConnectionException(e, url);
        } catch (SocketException e) {
            handleHttpConnectionException(e, url);
        } catch (Exception e) {
            handleHttpConnectionException(e, url);
        } finally {
            if (client != null) {
                client.close();
            }
        }
        return null;
    }
",False
900646,17068622,21601084,"    public static void main(String args[]) throws Exception {
        File file = new File(""D:/work/love.txt"");
        @SuppressWarnings(""unused"") ZipFile zipFile = new ZipFile(""D:/work/test1.zip"");
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""D:/work/test1.zip""));
        zos.setEncoding(""GBK"");
        ZipEntry entry = null;
        if (file.isDirectory()) {
            entry = new ZipEntry(getAbsFileName(source, file) + ""/"");
        } else {
            entry = new ZipEntry(getAbsFileName(source, file));
        }
        entry.setSize(file.length());
        entry.setTime(file.lastModified());
        zos.putNextEntry(entry);
        int readLen = 0;
        byte[] buf = new byte[2048];
        if (file.isFile()) {
            InputStream in = new BufferedInputStream(new FileInputStream(file));
            while ((readLen = in.read(buf, 0, 2048)) != -1) {
                zos.write(buf, 0, readLen);
            }
            in.close();
        }
        zos.close();
    }
","    public static void main(String[] args) throws Exception {
        HttpClient httpclient = new DefaultHttpClient();
        InputStream is = CheckAvailability.class.getResourceAsStream(""/isbns.txt"");
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String isbn = null;
        HttpGet get = null;
        while ((isbn = br.readLine().split("" "")[0]) != null) {
            System.out.println(""Target url: \n\t"" + String.format(isbnSearchUrl, isbn));
            get = new HttpGet(String.format(isbnSearchUrl, isbn));
            HttpResponse resp = httpclient.execute(get);
            Scanner s = new Scanner(resp.getEntity().getContent());
            String pattern = s.findWithinHorizon(""((\\d*) hold[s]? on first copy returned of (\\d*) )?[cC]opies"", 0);
            if (pattern != null) {
                MatchResult match = s.match();
                if (match.groupCount() == 3) {
                    if (match.group(2) == null) {
                        System.out.println(isbn + "": copies available"");
                    } else {
                        System.out.println(isbn + "": "" + match.group(2) + "" holds on "" + match.group(3) + "" copies"");
                    }
                }
            } else {
                System.out.println(isbn + "": no match"");
            }
            get.abort();
        }
    }
",False
900647,15169806,15372362,"    public void run() {
        try {
            URL url = new URL(UPDATE_URL);
            URLConnection urlc = url.openConnection();
            BufferedReader br = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String versionString = br.readLine();
            if (versionString != null && !versionString.equals(PinEmUp.VERSION)) {
                StringBuilder changelogString = new StringBuilder();
                changelogString.append(""<html>"");
                changelogString.append(""<p>"" + I18N.getInstance().getString(""info.updateavailable.part1"") + ""</p>"");
                changelogString.append(""<p>"" + I18N.getInstance().getString(""info.updateavailable.part2"") + "" "" + PinEmUp.VERSION + ""<br />"");
                changelogString.append(I18N.getInstance().getString(""info.updateavailable.part3"") + "" "" + versionString + ""</p>"");
                changelogString.append(""<p>"" + I18N.getInstance().getString(""info.updateavailable.part4"") + "" <a href=\""http://pinemup.sourceforge.net\"">http://pinemup.sourceforge.net</a></p>"");
                changelogString.append(""<p>&nbsp;</p>"");
                changelogString.append(""<p>Changelog:<br />"");
                changelogString.append(""--------------------------------</p><p>"");
                boolean firstList = true;
                String nextLine;
                do {
                    nextLine = br.readLine();
                    if (nextLine != null) {
                        if (nextLine.startsWith(""-"")) {
                            changelogString.append(""<li>"" + nextLine.substring(2) + ""</li>"");
                        } else {
                            if (!firstList) {
                                changelogString.append(""</ul>"");
                            } else {
                                firstList = false;
                            }
                            changelogString.append(nextLine + ""<ul>"");
                        }
                    }
                } while (nextLine != null);
                changelogString.append(""</p></html>"");
                new UpdateDialog(changelogString.toString());
            } else if (showUpToDateMessage) {
                JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""info.versionuptodate""), I18N.getInstance().getString(""info.title""), JOptionPane.INFORMATION_MESSAGE);
            }
            br.close();
        } catch (IOException e) {
        }
    }
","    public List<String> loadList(String name) {
        List<String> ret = new ArrayList<String>();
        try {
            URL url = getClass().getClassLoader().getResource(""lists/"" + name + "".utf-8"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            String line;
            while ((line = reader.readLine()) != null) {
                ret.add(line);
            }
            reader.close();
        } catch (IOException e) {
            showError(""No se puede cargar la lista de valores: "" + name, e);
        }
        return ret;
    }
",False
900648,17447923,2432640,"    private Metadata readMetadataIndexFileFromNetwork(String mediaMetadataURI) throws IOException {
        Metadata tempMetadata = new Metadata();
        URL url = new URL(mediaMetadataURI);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        String tempLine = null;
        while ((tempLine = input.readLine()) != null) {
            Property tempProperty = PropertyList.splitStringIntoKeyAndValue(tempLine);
            if (tempProperty != null) {
                tempMetadata.addIfNotNull(tempProperty.getKey(), tempProperty.getValue());
            }
        }
        input.close();
        return tempMetadata;
    }
","    public static String getSHA1(String data) throws NoSuchAlgorithmException {
        String addr;
        data = data.toLowerCase(Locale.getDefault());
        if (data.startsWith(""mailto:"")) {
            addr = data.substring(7);
        } else {
            addr = data;
        }
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        StringBuffer sb = new StringBuffer();
        md.update(addr.getBytes());
        byte[] digest = md.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(digest[i]);
            if (hex.length() == 1) {
                hex = ""0"" + hex;
            }
            hex = hex.substring(hex.length() - 2);
            sb.append(hex);
        }
        return sb.toString();
    }
",False
900649,3024973,2086684,"    @Test
    public void testCopy_inputStreamToOutputStream_IO84() throws Exception {
        long size = (long) Integer.MAX_VALUE + (long) 1;
        InputStream in = new NullInputStreamTest(size);
        OutputStream out = new OutputStream() {

            @Override
            public void write(int b) throws IOException {
            }

            @Override
            public void write(byte[] b) throws IOException {
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
            }
        };
        assertEquals(-1, IOUtils.copy(in, out));
        in.close();
        assertEquals(""copyLarge()"", size, IOUtils.copyLarge(in, out));
    }
","    private BoardPattern[] getBoardPatterns() {
        Resource[] resources = boardManager.getResources(""boards"");
        BoardPattern[] boardPatterns = new BoardPattern[resources.length];
        for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i];
        for (int i = 0; i < resources.length; i++) {
            for (int j = 0; j < resources.length - (i + 1); j++) {
                String name1 = boardPatterns[j].getName();
                String name2 = boardPatterns[j + 1].getName();
                if (name1.compareTo(name2) > 0) {
                    BoardPattern tmp = boardPatterns[j];
                    boardPatterns[j] = boardPatterns[j + 1];
                    boardPatterns[j + 1] = tmp;
                }
            }
        }
        return boardPatterns;
    }
",False
900650,8912107,7237429,"    private static void salvarObra(Artista artista, Obra obra) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        int categoria;
        System.out.println(""Migracao.salvarObra() obra: "" + obra.toString2());
        if (obra.getCategoria() != null) {
            categoria = getCategoria(obra.getCategoria().getNome()).getCodigo();
        } else {
            categoria = getCategoria(""Sem Categoria"").getCodigo();
        }
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into obra VALUES (?,?,?,?,?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, obra.getTitulo());
            ps.setInt(3, obra.getSelec());
            ps.setInt(4, categoria);
            ps.setInt(5, artista.getNumeroInscricao());
            ps.setInt(6, obra.getCodigo());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
","    public void readContents() throws IOException {
        fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_START, 0.0f, ""loading file""));
        URLConnection conn = url.openConnection();
        conn.connect();
        filesize = conn.getContentLength();
        logger.finest(""filesize: "" + filesize);
        InputStreamReader in = new InputStreamReader(conn.getInputStream());
        readFirstLine(in);
        readHeaderLines(in);
        readData(in);
        fireProgressEvent(new ProgressEvent(this, ProgressEvent.PROGRESS_FINISH, 1.0f, ""loading file""));
    }
",False
900651,3362080,4309920,"    public synchronized String encrypt(String plaintext) throws ServiceRuntimeException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new ServiceRuntimeException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new ServiceRuntimeException(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    public InputStream doRemoteCall(NamedList<String> params) throws IOException {
        String protocol = ""http"";
        String host = getHost();
        int port = Integer.parseInt(getPort());
        StringBuilder sb = new StringBuilder();
        for (Map.Entry entry : params) {
            Object key = entry.getKey();
            Object value = entry.getValue();
            sb.append(key).append(""="").append(value).append(""&"");
        }
        sb.setLength(sb.length() - 1);
        String file = ""/"" + getUrl() + ""/?"" + sb.toString();
        URL url = new URL(protocol, host, port, file);
        logger.debug(url.toString());
        InputStream stream;
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        try {
            stream = conn.getInputStream();
        } catch (IOException ioe) {
            InputStream is = conn.getErrorStream();
            if (is != null) {
                String msg = getStringFromInputStream(conn.getErrorStream());
                throw new IOException(msg);
            } else {
                throw ioe;
            }
        }
        return stream;
    }
",False
900652,13604491,5471672,"    public static int executeUpdate(EOAdaptorChannel channel, String sql, boolean autoCommit) throws SQLException {
        int rowsUpdated;
        boolean wasOpen = channel.isOpen();
        if (!wasOpen) {
            channel.openChannel();
        }
        Connection conn = ((JDBCContext) channel.adaptorContext()).connection();
        try {
            Statement stmt = conn.createStatement();
            try {
                rowsUpdated = stmt.executeUpdate(sql);
                if (autoCommit) {
                    conn.commit();
                }
            } catch (SQLException ex) {
                if (autoCommit) {
                    conn.rollback();
                }
                throw new RuntimeException(""Failed to execute the statement '"" + sql + ""'."", ex);
            } finally {
                stmt.close();
            }
        } finally {
            if (!wasOpen) {
                channel.closeChannel();
            }
        }
        return rowsUpdated;
    }
","    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            if (i < SCHEMA_VERSION) {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""CREATE TABLE log (id INTEGER PRIMARY KEY, context VARCHAR(16) NOT NULL, level VARCHAR(16) NOT NULL, time LONG INT NOT NULL, msg LONG VARCHAR NOT NULL, parent INT)"";
                            stmt.executeUpdate(qry);
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                        case 2:
                            qry = ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status INTEGER NOT NULL)"";
                            stmt.executeUpdate(qry);
                            qry = ""UPDATE settings SET val = '3' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                        case 3:
                            qry = ""CREATE TABLE favs (id INTEGER PRIMARY KEY NOT NULL)"";
                            stmt.executeUpdate(qry);
                            qry = ""UPDATE settings SET val = '4' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                        case 4:
                            qry = ""DROP TABLE log"";
                            stmt.executeUpdate(qry);
                            qry = ""UPDATE settings SET val = '5' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                        case 5:
                            qry = ""UPDATE settings SET val = '120000' WHERE var = 'SleepTime'"";
                            stmt.executeUpdate(qry);
                            qry = ""UPDATE settings set val = '6' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.trace(SQL_ERROR, e2);
                LOG.error(e2);
            }
            LOG.trace(SQL_ERROR, e);
            LOG.fatal(e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.trace(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",True
900653,8680491,1544996,"    public static final boolean compressToZip(final String sSource, final String sDest, final boolean bDeleteSourceOnSuccess) {
        ZipOutputStream os = null;
        InputStream is = null;
        try {
            os = new ZipOutputStream(new FileOutputStream(sDest));
            is = new FileInputStream(sSource);
            final byte[] buff = new byte[1024];
            int r;
            String sFileName = sSource;
            if (sFileName.indexOf('/') >= 0) sFileName = sFileName.substring(sFileName.lastIndexOf('/') + 1);
            os.putNextEntry(new ZipEntry(sFileName));
            while ((r = is.read(buff)) > 0) os.write(buff, 0, r);
            is.close();
            os.flush();
            os.closeEntry();
            os.close();
        } catch (Throwable e) {
            Log.log(Log.WARNING, ""lazyj.Utils"", ""compressToZip : cannot compress '"" + sSource + ""' to '"" + sDest + ""' because"", e);
            return false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException ioe) {
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException ioe) {
                }
            }
        }
        if (bDeleteSourceOnSuccess) try {
            if (!(new File(sSource)).delete()) Log.log(Log.WARNING, ""lazyj.Utils"", ""compressToZip: could not delete original file ("" + sSource + "")"");
        } catch (SecurityException se) {
            Log.log(Log.ERROR, ""lazyj.Utils"", ""compressToZip: security constraints prevents file deletion"");
        }
        return true;
    }
","    public static void transfer(FileInputStream fileInStream, FileOutputStream fileOutStream) throws IOException {
        FileChannel fileInChannel = fileInStream.getChannel();
        FileChannel fileOutChannel = fileOutStream.getChannel();
        long fileInSize = fileInChannel.size();
        try {
            long transferred = fileInChannel.transferTo(0, fileInSize, fileOutChannel);
            if (transferred != fileInSize) {
                throw new IOException(""transfer() did not complete"");
            }
        } finally {
            ensureClose(fileInChannel, fileOutChannel);
        }
    }
",True
900654,5981201,3260787,"    public static void copyFile(File src, File dst) throws IOException {
        if (T.t) T.info(""Copying "" + src + "" -> "" + dst + ""..."");
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dst);
        byte buf[] = new byte[40 * KB];
        int read;
        while ((read = in.read(buf)) != -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        out.close();
        in.close();
        if (T.t) T.info(""File copied."");
    }
","    public CopyAllDataToOtherFolderResponse CopyAllDataToOtherFolder(DPWSContext context, CopyAllDataToOtherFolder CopyAllDataInps) throws DPWSException {
        CopyAllDataToOtherFolderResponse cpyRp = new CopyAllDataToOtherFolderResponseImpl();
        int hany = 0;
        String errorMsg = null;
        try {
            if ((rootDir == null) || (rootDir.length() == (-1))) {
                errorMsg = LocalStorVerify.ISNT_ROOTFLD;
            } else {
                String sourceN = CopyAllDataInps.getSourceName();
                String targetN = CopyAllDataInps.getTargetName();
                if (LocalStorVerify.isValid(sourceN) && LocalStorVerify.isValid(targetN)) {
                    String srcDir = rootDir + File.separator + sourceN;
                    String trgDir = rootDir + File.separator + targetN;
                    if (LocalStorVerify.isLength(srcDir) && LocalStorVerify.isLength(trgDir)) {
                        for (File fs : new File(srcDir).listFiles()) {
                            File ft = new File(trgDir + '\\' + fs.getName());
                            FileChannel in = null, out = null;
                            try {
                                in = new FileInputStream(fs).getChannel();
                                out = new FileOutputStream(ft).getChannel();
                                long size = in.size();
                                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                                out.write(buf);
                            } finally {
                                if (in != null) in.close();
                                if (out != null) out.close();
                                hany++;
                            }
                        }
                    } else {
                        errorMsg = LocalStorVerify.FLD_TOOLNG;
                    }
                } else {
                    errorMsg = LocalStorVerify.ISNT_VALID;
                }
            }
        } catch (Throwable tr) {
            tr.printStackTrace();
            errorMsg = tr.getMessage();
            hany = (-1);
        }
        if (errorMsg != null) {
        }
        cpyRp.setNum(hany);
        return cpyRp;
    }
",True
900655,372172,23247146,"    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
","    @Override
    public synchronized HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        HttpURLConnection conn = null;
        try {
            String url = getTileUrl(zoom, tilex, tiley);
            conn = (HttpURLConnection) new URL(url).openConnection();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            log.error("""", e);
            throw new IOException(e);
        }
        try {
            i.set(""conn"", conn);
            i.eval(""addHeaders(conn);"");
        } catch (EvalError e) {
            String msg = e.getMessage();
            if (!AH_ERROR.equals(msg)) {
                log.error(e.getClass() + "": "" + e.getMessage(), e);
                throw new IOException(e);
            }
        }
        return conn;
    }
",False
900656,184741,14257554,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    @Override
    public synchronized File download_dictionary(Dictionary dict, String localfpath) {
        abort = false;
        try {
            URL dictionary_location = new URL(dict.getLocation());
            InputStream in = dictionary_location.openStream();
            FileOutputStream w = new FileOutputStream(local_cache, false);
            int b = 0;
            while ((b = in.read()) != -1) {
                w.write(b);
                if (abort) throw new Exception(""Download Aborted"");
            }
            in.close();
            w.close();
            File lf = new File(localfpath);
            FileInputStream r = new FileInputStream(local_cache);
            FileOutputStream fw = new FileOutputStream(lf);
            int c;
            while ((c = r.read()) != -1) fw.write(c);
            r.close();
            fw.close();
            clearCache();
            return lf;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InvalidTupleOperationException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        clearCache();
        return null;
    }
",True
900657,8801744,22177057,"    public static void copyFile(File src, File dest, boolean force) throws IOException {
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest);
            }
        }
        byte[] buffer = new byte[1];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
    }
","    private void saveFile(File destination) {
        InputStream in = null;
        OutputStream out = null;
        try {
            if (fileScheme) in = new BufferedInputStream(new FileInputStream(source.getPath())); else in = new BufferedInputStream(getContentResolver().openInputStream(source));
            out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[1024];
            while (in.read(buffer) != -1) out.write(buffer);
            Toast.makeText(this, R.string.saveas_file_saved, Toast.LENGTH_SHORT).show();
        } catch (FileNotFoundException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(this, R.string.saveas_error, Toast.LENGTH_SHORT).show();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900658,9106740,7872660,"    public String sendXml(URL url, String xmlMessage, boolean isResponseExpected) throws IOException {
        if (url == null) {
            throw new IllegalArgumentException(""url == null"");
        }
        if (xmlMessage == null) {
            throw new IllegalArgumentException(""xmlMessage == null"");
        }
        LOGGER.finer(""url = "" + url);
        LOGGER.finer(""xmlMessage = :"" + xmlMessage + "":"");
        LOGGER.finer(""isResponseExpected = "" + isResponseExpected);
        String answer = null;
        try {
            URLConnection urlConnection = url.openConnection();
            urlConnection.setRequestProperty(""Content-type"", ""text/xml"");
            urlConnection.setDoOutput(true);
            urlConnection.setUseCaches(false);
            Writer writer = null;
            try {
                writer = new OutputStreamWriter(urlConnection.getOutputStream());
                writer.write(xmlMessage);
                writer.flush();
            } finally {
                if (writer != null) {
                    writer.close();
                }
            }
            LOGGER.finer(""message written"");
            StringBuilder sb = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                if (isResponseExpected) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        sb.append(inputLine).append(""\n"");
                    }
                    answer = sb.toString();
                    LOGGER.finer(""response read"");
                }
            } catch (FileNotFoundException e) {
                LOGGER.log(Level.SEVERE, ""No response"", e);
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (ConnectException e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
        }
        LOGGER.finer(""answer = :"" + answer + "":"");
        return answer;
    }
","    private static boolean genCustomerLocationsFileAndCustomerIndexFile(String completePath, String masterFile, String CustLocationsFileName, String CustIndexFileName) {
        try {
            TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1);
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustLocationsFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            for (int i = 1; i <= totalNoDataRows; i++) {
                ByteBuffer mappedBuffer = ByteBuffer.allocate(7);
                inC.read(mappedBuffer);
                mappedBuffer.position(0);
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                mappedBuffer.clear();
                if (CustInfoHash.containsKey(customer)) {
                    TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer);
                    locations.add(i);
                    CustInfoHash.put(customer, locations);
                } else {
                    TIntArrayList locations = new TIntArrayList();
                    locations.add(i);
                    CustInfoHash.put(customer, locations);
                }
            }
            int[] customers = CustInfoHash.keys();
            Arrays.sort(customers);
            int count = 1;
            for (int i = 0; i < customers.length; i++) {
                int customer = customers[i];
                TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer);
                int noRatingsForCust = locations.size();
                ByteBuffer outBuf1 = ByteBuffer.allocate(12);
                outBuf1.putInt(customer);
                outBuf1.putInt(count);
                outBuf1.putInt(count + noRatingsForCust - 1);
                outBuf1.flip();
                outC1.write(outBuf1);
                count += noRatingsForCust;
                for (int j = 0; j < locations.size(); j++) {
                    ByteBuffer outBuf2 = ByteBuffer.allocate(4);
                    outBuf2.putInt(locations.get(j));
                    outBuf2.flip();
                    outC2.write(outBuf2);
                }
            }
            inC.close();
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",False
900659,15168184,11322573,"    public void copyServer(int id) throws Exception {
        File in = new File(""servers"" + File.separatorChar + ""server_"" + id);
        File serversDir = new File(""servers"" + File.separatorChar);
        int newNumber = serversDir.listFiles().length + 1;
        System.out.println(""New File Number: "" + newNumber);
        File out = new File(""servers"" + File.separatorChar + ""server_"" + newNumber);
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
        getServer(newNumber - 1);
    }
","    private void preprocessObjects(GeoObject[] objects) throws IOException {
        System.out.println(""objects.length "" + objects.length);
        for (int i = 0; i < objects.length; i++) {
            String fileName = objects[i].getPath();
            int dotindex = fileName.lastIndexOf(""."");
            dotindex = dotindex < 0 ? 0 : dotindex;
            String tmp = dotindex < 1 ? fileName : fileName.substring(0, dotindex + 3) + ""w"";
            System.out.println(""i: "" + "" world filename "" + tmp);
            File worldFile = new File(tmp);
            if (worldFile.exists()) {
                BufferedReader worldFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(worldFile)));
                if (staticDebugOn) debug(""b4nextline: "");
                line = worldFileReader.readLine();
                if (staticDebugOn) debug(""line: "" + line);
                if (line != null) {
                    line = worldFileReader.readLine();
                    if (staticDebugOn) debug(""line: "" + line);
                    tokenizer = new StringTokenizer(line, "" \n\t\r\"""", false);
                    objects[i].setLon(Double.valueOf(tokenizer.nextToken()).doubleValue());
                    line = worldFileReader.readLine();
                    if (staticDebugOn) debug(""line: "" + line);
                    tokenizer = new StringTokenizer(line, "" \n\t\r\"""", false);
                    objects[i].setLat(Double.valueOf(tokenizer.nextToken()).doubleValue());
                }
            }
            File file = new File(objects[i].getPath());
            if (file.exists()) {
                System.out.println(""object src file found "");
                int slashindex = fileName.lastIndexOf(java.io.File.separator);
                slashindex = slashindex < 0 ? 0 : slashindex;
                if (slashindex == 0) {
                    slashindex = fileName.lastIndexOf(""/"");
                    slashindex = slashindex < 0 ? 0 : slashindex;
                }
                tmp = slashindex < 1 ? fileName : fileName.substring(slashindex + 1, fileName.length());
                System.out.println(""filename "" + destinationDirectory + XPlat.fileSep + tmp);
                objects[i].setPath(tmp);
                file = new File(fileName);
                if (file.exists()) {
                    DataInputStream dataIn = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));
                    DataOutputStream dataOut = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationDirectory + XPlat.fileSep + tmp)));
                    System.out.println(""copying to "" + destinationDirectory + XPlat.fileSep + tmp);
                    for (; ; ) {
                        try {
                            dataOut.writeShort(dataIn.readShort());
                        } catch (EOFException e) {
                            break;
                        } catch (IOException e) {
                            break;
                        }
                    }
                    dataOut.close();
                }
            }
        }
    }
",True
900660,2691849,861011,"    public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException {
        if (zip == null || entries == null || CollectionUtils.isEmpty(entries.keySet())) throw new IllegalArgumentException(""One ore more parameters are empty!"");
        if (zip.exists()) zip.delete(); else if (!zip.getParentFile().exists()) zip.getParentFile().mkdirs();
        ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)));
        out.setLevel(Deflater.BEST_COMPRESSION);
        try {
            for (InputStream inputStream : entries.keySet()) {
                ZipEntry zipEntry = new ZipEntry(skipBeginningSlash(entries.get(inputStream)));
                out.putNextEntry(zipEntry);
                IOUtils.copy(inputStream, out);
                out.closeEntry();
                inputStream.close();
                if (monitor != null) monitor.worked(1);
            }
        } finally {
            IOUtils.closeQuietly(out);
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900661,101811,15453012,"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }
","    public ArrayList parseFile(File newfile) throws IOException {
        String s;
        String firstName;
        String header;
        String name = null;
        Integer PVLoggerID = new Integer(0);
        String[] tokens;
        int nvalues = 0;
        double num1, num2, num3;
        double xoffset = 1.0;
        double xdelta = 1.0;
        double yoffset = 1.0;
        double ydelta = 1.0;
        double zoffset = 1.0;
        double zdelta = 1.0;
        boolean readfit = false;
        boolean readraw = false;
        boolean zerodata = false;
        boolean baddata = false;
        boolean harpdata = false;
        ArrayList fitparams = new ArrayList();
        ArrayList xraw = new ArrayList();
        ArrayList yraw = new ArrayList();
        ArrayList zraw = new ArrayList();
        ArrayList sraw = new ArrayList();
        ArrayList sxraw = new ArrayList();
        ArrayList syraw = new ArrayList();
        ArrayList szraw = new ArrayList();
        URL url = newfile.toURI().toURL();
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        while ((s = br.readLine()) != null) {
            tokens = s.split(""\\s+"");
            nvalues = tokens.length;
            firstName = (String) tokens[0];
            if (((String) tokens[0]).length() == 0) {
                readraw = false;
                readfit = false;
                continue;
            }
            if ((nvalues == 4) && (!firstName.startsWith(""---""))) {
                if ((Double.parseDouble(tokens[1]) == 0.) && (Double.parseDouble(tokens[2]) == 0.) && (Double.parseDouble(tokens[3]) == 0.)) {
                    zerodata = true;
                } else {
                    zerodata = false;
                }
                if (tokens[1].equals(""NaN"") || tokens[2].equals(""NaN"") || tokens[3].equals(""NaN"")) {
                    baddata = true;
                } else {
                    baddata = false;
                }
            }
            if (firstName.startsWith(""start"")) {
                header = s;
            }
            if (firstName.indexOf(""WS"") > 0) {
                if (name != null) {
                    dumpData(name, fitparams, sraw, sxraw, syraw, szraw, yraw, zraw, xraw);
                }
                name = tokens[0];
                readraw = false;
                readfit = false;
                zerodata = false;
                baddata = false;
                harpdata = false;
                fitparams.clear();
                xraw.clear();
                yraw.clear();
                zraw.clear();
                sraw.clear();
                sxraw.clear();
                syraw.clear();
                szraw.clear();
            }
            if (firstName.startsWith(""Area"")) ;
            if (firstName.startsWith(""Ampl"")) ;
            if (firstName.startsWith(""Mean"")) ;
            if (firstName.startsWith(""Sigma"")) {
                fitparams.add(new Double(Double.parseDouble(tokens[3])));
                fitparams.add(new Double(Double.parseDouble(tokens[1])));
                fitparams.add(new Double(Double.parseDouble(tokens[5])));
            }
            if (firstName.startsWith(""Offset"")) ;
            if (firstName.startsWith(""Slope"")) ;
            if ((firstName.equals(""Position"")) && (((String) tokens[2]).equals(""Raw""))) {
                readraw = true;
                continue;
            }
            if ((firstName.equals(""Position"")) && (((String) tokens[2]).equals(""Fit""))) {
                readfit = true;
                continue;
            }
            if ((firstName.contains(""Harp""))) {
                xraw.clear();
                yraw.clear();
                zraw.clear();
                sraw.clear();
                sxraw.clear();
                syraw.clear();
                szraw.clear();
                harpdata = true;
                readraw = true;
                name = tokens[0];
                continue;
            }
            if (firstName.startsWith(""---"")) continue;
            if (harpdata == true) {
                if (((String) tokens[0]).length() != 0) {
                    if (firstName.startsWith(""PVLogger"")) {
                        try {
                            PVLoggerID = new Integer(Integer.parseInt(tokens[2]));
                        } catch (NumberFormatException e) {
                        }
                    } else {
                        sxraw.add(new Double(Double.parseDouble(tokens[0])));
                        xraw.add(new Double(Double.parseDouble(tokens[1])));
                        syraw.add(new Double(Double.parseDouble(tokens[2])));
                        yraw.add(new Double(Double.parseDouble(tokens[3])));
                        szraw.add(new Double(Double.parseDouble(tokens[4])));
                        zraw.add(new Double(Double.parseDouble(tokens[5])));
                    }
                }
                continue;
            }
            if (readraw && (!zerodata) && (!baddata)) {
                sraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                sxraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                syraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                szraw.add(new Double(Double.parseDouble(tokens[0])));
                yraw.add(new Double(Double.parseDouble(tokens[1])));
                zraw.add(new Double(Double.parseDouble(tokens[2])));
                xraw.add(new Double(Double.parseDouble(tokens[3])));
            }
            if (firstName.startsWith(""PVLogger"")) {
                try {
                    PVLoggerID = new Integer(Integer.parseInt(tokens[2]));
                } catch (NumberFormatException e) {
                }
            }
        }
        dumpData(name, fitparams, sraw, sxraw, syraw, szraw, yraw, zraw, xraw);
        wiredata.add((Integer) PVLoggerID);
        return wiredata;
    }
",False
900662,18880062,9499457,"    public static boolean compress(ArrayList sources, File target, Manifest manifest) {
        try {
            if (sources == null || sources.size() == 0) return false;
            if (target.exists()) target.delete();
            ZipOutputStream output = null;
            boolean isJar = target.getName().toLowerCase().endsWith("".jar"");
            if (isJar) {
                if (manifest != null) output = new JarOutputStream(new FileOutputStream(target), manifest); else output = new JarOutputStream(new FileOutputStream(target));
            } else output = new ZipOutputStream(new FileOutputStream(target));
            String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/');
            if (!baseDir.endsWith(""/"")) baseDir = baseDir + ""/"";
            int baseDirLength = baseDir.length();
            ArrayList list = new ArrayList();
            for (Iterator it = sources.iterator(); it.hasNext(); ) {
                File fileOrDir = (File) it.next();
                if (isJar && (manifest != null) && fileOrDir.getName().equals(""META-INF"")) continue;
                if (fileOrDir.isDirectory()) list.addAll(getContents(fileOrDir)); else list.add(fileOrDir);
            }
            byte[] buffer = new byte[1024];
            int bytesRead;
            for (int i = 0, n = list.size(); i < n; i++) {
                File file = (File) list.get(i);
                FileInputStream f_in = new FileInputStream(file);
                String filename = file.getAbsolutePath().replace('\\', '/');
                if (filename.startsWith(baseDir)) filename = filename.substring(baseDirLength);
                if (isJar) output.putNextEntry(new JarEntry(filename)); else output.putNextEntry(new ZipEntry(filename));
                while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead);
                f_in.close();
                output.closeEntry();
            }
            output.close();
        } catch (Exception exc) {
            exc.printStackTrace();
            return false;
        }
        return true;
    }
","    private static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",True
900663,3760798,23021618,"    public void setNewPassword(String password) {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            final String encrypted = ""{MD5}"" + new String(Base64Encoder.encode(digest.digest()));
            setUserPassword(encrypted.getBytes());
            this.newPassword = password;
            firePropertyChange(""newPassword"", """", password);
            firePropertyChange(""password"", new byte[0], getUserPassword());
        } catch (final NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't encrypt user's password"", e);
        }
    }
","    public boolean WriteFile(java.io.Serializable inObj, String fileName) throws Exception {
        FileOutputStream out;
        try {
            SecretKey skey = null;
            AlgorithmParameterSpec aps;
            out = new FileOutputStream(fileName);
            cipher = Cipher.getInstance(algorithm);
            KeySpec kspec = new PBEKeySpec(filePasswd.toCharArray());
            SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm);
            skey = skf.generateSecret(kspec);
            MessageDigest md = MessageDigest.getInstance(res.getString(""MD5""));
            md.update(filePasswd.getBytes());
            byte[] digest = md.digest();
            System.arraycopy(digest, 0, salt, 0, 8);
            aps = new PBEParameterSpec(salt, iterations);
            out.write(salt);
            ObjectOutputStream s = new ObjectOutputStream(out);
            cipher.init(Cipher.ENCRYPT_MODE, skey, aps);
            SealedObject so = new SealedObject(inObj, cipher);
            s.writeObject(so);
            s.flush();
            out.close();
        } catch (Exception e) {
            Log.out(""fileName="" + fileName);
            Log.out(""algorithm="" + algorithm);
            Log.out(e);
            throw e;
        }
        return true;
    }
",True
900664,19366418,10565544,"    public static Photo createPhoto(String title, String userLogin, String pathToPhoto, String basePathImage) throws NoSuchAlgorithmException, IOException {
        String id = CryptSHA1.genPhotoID(userLogin, title);
        String extension = pathToPhoto.substring(pathToPhoto.lastIndexOf("".""));
        String destination = basePathImage + id + extension;
        FileInputStream fis = new FileInputStream(pathToPhoto);
        FileOutputStream fos = new FileOutputStream(destination);
        FileChannel fci = fis.getChannel();
        FileChannel fco = fos.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(1024);
        while (true) {
            int read = fci.read(buffer);
            if (read == -1) break;
            buffer.flip();
            fco.write(buffer);
            buffer.clear();
        }
        fci.close();
        fco.close();
        fos.close();
        fis.close();
        ImageIcon image;
        ImageIcon thumb;
        String destinationThumb = basePathImage + ""thumb/"" + id + extension;
        image = new ImageIcon(destination);
        int maxSize = 150;
        int origWidth = image.getIconWidth();
        int origHeight = image.getIconHeight();
        if (origWidth > origHeight) {
            thumb = new ImageIcon(image.getImage().getScaledInstance(maxSize, -1, Image.SCALE_SMOOTH));
        } else {
            thumb = new ImageIcon(image.getImage().getScaledInstance(-1, maxSize, Image.SCALE_SMOOTH));
        }
        BufferedImage bi = new BufferedImage(thumb.getIconWidth(), thumb.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.getGraphics();
        g.drawImage(thumb.getImage(), 0, 0, null);
        try {
            ImageIO.write(bi, ""JPG"", new File(destinationThumb));
        } catch (IOException ioe) {
            System.out.println(""Error occured saving thumbnail"");
        }
        Photo photo = new Photo(id);
        photo.setTitle(title);
        photo.basePathImage = basePathImage;
        return photo;
    }
","    public static void copyToFileAndCloseStreams(InputStream istr, File destFile) throws IOException {
        OutputStream ostr = null;
        try {
            ostr = new FileOutputStream(destFile);
            IOUtils.copy(istr, ostr);
        } finally {
            if (ostr != null) ostr.close();
            if (istr != null) istr.close();
        }
    }
",True
900665,5066508,19710228,"    public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException {
        if (key == null || fields == null) throw new VetoException(""MD5Filter not configured"");
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(getKey());
            int[] f = getFields(m);
            for (int i = 0; i < f.length; i++) {
                int fld = f[i];
                if (m.hasField(fld)) {
                    ISOComponent c = m.getComponent(fld);
                    if (c instanceof ISOBinaryField) md.update((byte[]) c.getValue()); else md.update(((String) c.getValue()).getBytes());
                }
            }
            byte[] digest = md.digest();
            if (m.getDirection() == ISOMsg.OUTGOING) {
                m.set(new ISOBinaryField(64, digest, 0, 8));
                m.set(new ISOBinaryField(128, digest, 8, 8));
            } else {
                byte[] rxDigest = new byte[16];
                if (m.hasField(64)) System.arraycopy((byte[]) m.getValue(64), 0, rxDigest, 0, 8);
                if (m.hasField(128)) System.arraycopy((byte[]) m.getValue(128), 0, rxDigest, 8, 8);
                if (!Arrays.equals(digest, rxDigest)) {
                    evt.addMessage(m);
                    evt.addMessage(""MAC expected: "" + ISOUtil.hexString(digest));
                    evt.addMessage(""MAC received: "" + ISOUtil.hexString(rxDigest));
                    throw new VetoException(""invalid MAC"");
                }
                m.unset(64);
                m.unset(128);
            }
        } catch (NoSuchAlgorithmException e) {
            throw new VetoException(e);
        } catch (ISOException e) {
            throw new VetoException(e);
        }
        return m;
    }
","    public void init(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""), 0, password.length());
            byte[] rawKey = md.digest();
            skeySpec = new SecretKeySpec(rawKey, ""AES"");
            ivSpec = new IvParameterSpec(rawKey);
            cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
",True
900666,5981201,3096692,"    public static void copyFile(File src, File dst) throws IOException {
        if (T.t) T.info(""Copying "" + src + "" -> "" + dst + ""..."");
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dst);
        byte buf[] = new byte[40 * KB];
        int read;
        while ((read = in.read(buf)) != -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        out.close();
        in.close();
        if (T.t) T.info(""File copied."");
    }
","    public static void perform(ChangeSet changes, ArchiveInputStream in, ArchiveOutputStream out) throws IOException {
        ArchiveEntry entry = null;
        while ((entry = in.getNextEntry()) != null) {
            System.out.println(entry.getName());
            boolean copy = true;
            for (Iterator it = changes.asSet().iterator(); it.hasNext(); ) {
                Change change = (Change) it.next();
                if (change.type() == ChangeSet.CHANGE_TYPE_DELETE) {
                    DeleteChange delete = ((DeleteChange) change);
                    if (entry.getName() != null && entry.getName().equals(delete.targetFile())) {
                        copy = false;
                    }
                }
            }
            if (copy) {
                System.out.println(""Copy: "" + entry.getName());
                long size = entry.getSize();
                out.putArchiveEntry(entry);
                IOUtils.copy((InputStream) in, out, (int) size);
                out.closeArchiveEntry();
            }
            System.out.println(""---"");
        }
        out.close();
    }
",True
900667,3533703,20858247,"    private void _connect() throws SocketException, IOException {
        try {
            ftpClient.disconnect();
        } catch (Exception ex) {
        }
        ftpClient.connect(host, port);
        ftpClient.login(""anonymous"", """");
        ftpClient.enterLocalActiveMode();
    }
","        public TextureData newTextureData(URL url, int internalFormat, int pixelFormat, boolean mipmap, String fileSuffix) throws IOException {
            InputStream stream = new BufferedInputStream(url.openStream());
            try {
                return newTextureData(stream, internalFormat, pixelFormat, mipmap, fileSuffix);
            } finally {
                stream.close();
            }
        }
",False
900668,1508164,21262909,"    public boolean delMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_DEL + mail.getId());
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                HTTPUtil.consume(response.getEntity());
                return true;
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
","    public static void find(String pckgname, Class<?> tosubclass) {
        String name = new String(pckgname);
        if (!name.startsWith(""/"")) {
            name = ""/"" + name;
        }
        name = name.replace('.', '/');
        URL url = tosubclass.getResource(name);
        System.out.println(name + ""->"" + url);
        if (url == null) return;
        File directory = new File(url.getFile());
        if (directory.exists()) {
            String[] files = directory.list();
            for (int i = 0; i < files.length; i++) {
                if (files[i].endsWith("".class"")) {
                    String classname = files[i].substring(0, files[i].length() - 6);
                    try {
                        Object o = Class.forName(pckgname + ""."" + classname).newInstance();
                        if (tosubclass.isInstance(o)) {
                            System.out.println(classname);
                        }
                    } catch (ClassNotFoundException cnfex) {
                        System.err.println(cnfex);
                    } catch (InstantiationException iex) {
                    } catch (IllegalAccessException iaex) {
                    }
                }
            }
        } else {
            try {
                JarURLConnection conn = (JarURLConnection) url.openConnection();
                String starts = conn.getEntryName();
                JarFile jfile = conn.getJarFile();
                Enumeration<JarEntry> e = jfile.entries();
                while (e.hasMoreElements()) {
                    ZipEntry entry = e.nextElement();
                    String entryname = entry.getName();
                    if (entryname.startsWith(starts) && (entryname.lastIndexOf('/') <= starts.length()) && entryname.endsWith("".class"")) {
                        String classname = entryname.substring(0, entryname.length() - 6);
                        if (classname.startsWith(""/"")) classname = classname.substring(1);
                        classname = classname.replace('/', '.');
                        try {
                            Object o = Class.forName(classname).newInstance();
                            if (tosubclass.isInstance(o)) {
                                System.out.println(classname.substring(classname.lastIndexOf('.') + 1));
                            }
                        } catch (ClassNotFoundException cnfex) {
                            System.err.println(cnfex);
                        } catch (InstantiationException iex) {
                        } catch (IllegalAccessException iaex) {
                        }
                    }
                }
            } catch (IOException ioex) {
                System.err.println(ioex);
            }
        }
    }
",False
900669,3942117,653541,"    private MimeTypesProvider() {
        File mimeTypesFile = new File(XPontusConstantsIF.XPONTUS_HOME_DIR, ""mimes.properties"");
        try {
            if (!mimeTypesFile.exists()) {
                OutputStream os = null;
                InputStream is = getClass().getResourceAsStream(""/net/sf/xpontus/configuration/mimetypes.properties"");
                os = FileUtils.openOutputStream(mimeTypesFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(is);
                IOUtils.closeQuietly(os);
            }
            provider = new XPontusMimetypesFileTypeMap(mimeTypesFile.getAbsolutePath());
            MimetypesFileTypeMap.setDefaultFileTypeMap(provider);
        } catch (Exception err) {
            err.printStackTrace();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900670,3338750,19722336,"    public void sortPlayersTurn() {
        Token tempT = new Token();
        Player tempP = new Player(""test name"", tempT);
        int tempN = 0;
        boolean exchangeMade = true;
        for (int i = 0; i < playerNum - 1 && exchangeMade; i++) {
            exchangeMade = false;
            for (int j = 0; j < playerNum - 1 - i; j++) {
                if (diceSum[j] < diceSum[j + 1]) {
                    tempP = players[j];
                    tempN = diceSum[j];
                    players[j] = players[j + 1];
                    diceSum[j] = diceSum[j + 1];
                    players[j + 1] = tempP;
                    diceSum[j + 1] = tempN;
                    exchangeMade = true;
                }
            }
        }
    }
","        @Override
        public String entryToObject(TupleInput input) {
            boolean zipped = input.readBoolean();
            if (!zipped) {
                return input.readString();
            }
            int len = input.readInt();
            try {
                byte array[] = new byte[len];
                input.read(array);
                GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(array));
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                IOUtils.copyTo(in, out);
                in.close();
                out.close();
                return new String(out.toByteArray());
            } catch (IOException err) {
                throw new RuntimeException(err);
            }
        }
",False
900671,15461843,13812091,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {
        File fromFile = fromFileName.toFile();
        File toFile = toFileName.toFile();
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        InputStream from = null;
        OutputStream to = null;
        try {
            from = new BufferedInputStream(new FileInputStream(fromFile));
            to = new BufferedOutputStream(new FileOutputStream(toFile));
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",True
900672,23595064,16287151,"    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.closeQuietly(fis);
            }
        }
    }
","    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println(""opening socket to "" + address + "" on "" + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println(""header: "" + header);
                List<String> parts = header.getFilename().getSegments();
                String filename;
                if (parts.size() > 0) filename = ""dl-"" + parts.get(parts.size() - 1); else filename = ""dl-"" + session.getScreenname();
                System.out.println(""writing to file "" + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println(""sending header: "" + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println(""transferred "" + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println(""finished transfer!"");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
",True
900673,2190568,14263421,"    public static void fileCopy(final File src, final File dest, final boolean overwrite) throws IOException {
        if (!dest.exists() || (dest.exists() && overwrite)) {
            final FileChannel srcChannel = new FileInputStream(src).getChannel();
            final FileChannel dstChannel = new FileOutputStream(dest).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        }
    }
","    void copyFile(String sInput, String sOutput) throws IOException {
        File inputFile = new File(sInput);
        File outputFile = new File(sOutput);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",True
900674,13521323,4761833,"    public static void copyFile(final String inFile, final String outFile) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(inFile).getChannel();
            out = new FileOutputStream(outFile).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (final Exception e) {
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (final Exception e) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (final Exception e) {
                }
            }
        }
    }
","    private void copyFileToDir(MyFile file, MyFile to, wlPanel panel) throws IOException {
        Utilities.print(""started copying "" + file.getAbsolutePath() + ""\n"");
        FileOutputStream fos = new FileOutputStream(new File(to.getAbsolutePath()));
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(new File(file.getAbsolutePath()));
        FileChannel fic = fis.getChannel();
        Date d1 = new Date();
        long amount = foc.transferFrom(fic, rest, fic.size() - rest);
        fic.close();
        foc.force(false);
        foc.close();
        Date d2 = new Date();
        long time = d2.getTime() - d1.getTime();
        double secs = time / 1000.0;
        double rate = amount / secs;
        frame.getStatusArea().append(secs + ""s "" + ""amount: "" + Utilities.humanReadable(amount) + "" rate: "" + Utilities.humanReadable(rate) + ""/s\n"", ""black"");
        panel.updateView();
    }
",True
900675,9665214,254039,"    public void testConvert() throws IOException, ConverterException {
        InputStreamReader reader = new InputStreamReader(new FileInputStream(""test"" + File.separator + ""input"" + File.separator + ""A0851ohneex.dat""), CharsetUtil.forName(""x-PICA""));
        FileWriter writer = new FileWriter(""test"" + File.separator + ""output"" + File.separator + ""ddbInterToMarcxmlTest.out"");
        Converter c = context.getConverter(""ddb-intern"", ""MARC21-xml"", ""x-PICA"", ""UTF-8"");
        ConversionParameters params = new ConversionParameters();
        params.setSourceCharset(""x-PICA"");
        params.setTargetCharset(""UTF-8"");
        params.setAddCollectionHeader(true);
        params.setAddCollectionFooter(true);
        c.convert(reader, writer, params);
    }
","    protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception {
        String key = s3object.getKey();
        key = trimPrefix(key);
        String[] path = key.split(""/"");
        String fileName = path[path.length - 1];
        String dirPath = """";
        for (int i = 0; i < path.length - 1; i++) {
            dirPath += path[i] + ""/"";
        }
        File outputDir = new File(downloadFileOutputDir + ""/"" + dirPath);
        if (outputDir.exists() == false) {
            outputDir.mkdirs();
        }
        File outputFile = new File(outputDir, fileName);
        long size = s3object.getContentLength();
        if (outputFile.exists() && outputFile.length() == size) {
            return;
        }
        long startTime = System.currentTimeMillis();
        log.info(""Download start.S3 file="" + s3object.getKey() + "" local file="" + outputFile.getAbsolutePath());
        FileOutputStream fout = null;
        S3Object dataObject = null;
        try {
            fout = new FileOutputStream(outputFile);
            dataObject = s3.getObject(bucket, s3object.getKey());
            InputStream is = dataObject.getDataInputStream();
            IOUtils.copyStream(is, fout);
            downloadedFileList.add(key);
            long downloadTime = System.currentTimeMillis() - startTime;
            log.info(""Download complete.Estimete time="" + downloadTime + ""ms "" + IOUtils.toBPSText(downloadTime, size));
        } catch (Exception e) {
            log.error(""Download fail. s3 file="" + key, e);
            outputFile.delete();
            throw e;
        } finally {
            IOUtils.closeNoException(fout);
            if (dataObject != null) {
                dataObject.closeDataInputStream();
            }
        }
    }
",True
900676,12104132,16900369,"    @Override
    public void render(Output output) throws IOException {
        output.setStatus(statusCode, statusMessage);
        if (headersMap != null) {
            Iterator<Entry<String, String>> iterator = headersMap.entrySet().iterator();
            while (iterator.hasNext()) {
                Entry<String, String> header = iterator.next();
                output.addHeader(header.getKey(), header.getValue());
            }
        }
        if (file != null) {
            InputStream inputStream = new FileInputStream(file);
            try {
                output.open();
                OutputStream out = output.getOutputStream();
                IOUtils.copy(inputStream, out);
            } finally {
                inputStream.close();
                output.close();
            }
        }
    }
","    private void addAllSpecialPages(Environment env, ZipOutputStream zipout, int progressStart, int progressLength) throws Exception, IOException {
        ResourceBundle messages = ResourceBundle.getBundle(""ApplicationResources"", locale);
        String tpl;
        int count = 0;
        int numberOfSpecialPages = 7;
        progress = Math.min(progressStart + (int) ((double) count * (double) progressLength / numberOfSpecialPages), 99);
        count++;
        String cssContent = wb.readRaw(virtualWiki, ""StyleSheet"");
        addZipEntry(zipout, ""css/vqwiki.css"", cssContent);
        progress = Math.min(progressStart + (int) ((double) count * (double) progressLength / numberOfSpecialPages), 99);
        count++;
        tpl = getTemplateFilledWithContent(""search"");
        addTopicEntry(zipout, tpl, ""WikiSearch"", ""WikiSearch.html"");
        progress = Math.min(progressStart + (int) ((double) count * (double) progressLength / numberOfSpecialPages), 99);
        count++;
        zipout.putNextEntry(new ZipEntry(""applets/export2html-applet.jar""));
        IOUtils.copy(new FileInputStream(ctx.getRealPath(""/WEB-INF/classes/export2html/export2html-applet.jar"")), zipout);
        zipout.closeEntry();
        zipout.flush();
        try {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            JarOutputStream indexjar = new JarOutputStream(bos);
            JarEntry jarEntry;
            File searchDir = new File(wb.getSearchEngine().getSearchIndexPath(virtualWiki));
            String files[] = searchDir.list();
            StringBuffer listOfAllFiles = new StringBuffer();
            for (int i = 0; i < files.length; i++) {
                if (listOfAllFiles.length() > 0) {
                    listOfAllFiles.append("","");
                }
                listOfAllFiles.append(files[i]);
                jarEntry = new JarEntry(""lucene/index/"" + files[i]);
                indexjar.putNextEntry(jarEntry);
                IOUtils.copy(new FileInputStream(new File(searchDir, files[i])), indexjar);
                indexjar.closeEntry();
            }
            indexjar.flush();
            indexjar.putNextEntry(new JarEntry(""lucene/index.dir""));
            IOUtils.copy(new StringReader(listOfAllFiles.toString()), indexjar);
            indexjar.closeEntry();
            indexjar.flush();
            indexjar.close();
            zipout.putNextEntry(new ZipEntry(""applets/index.jar""));
            zipout.write(bos.toByteArray());
            zipout.closeEntry();
            zipout.flush();
            bos.reset();
        } catch (Exception e) {
            logger.log(Level.FINE, ""Exception while adding lucene index: "", e);
        }
        progress = Math.min(progressStart + (int) ((double) count * (double) progressLength / numberOfSpecialPages), 99);
        count++;
        StringBuffer content = new StringBuffer();
        content.append(""<table><tr><th>"" + messages.getString(""common.date"") + ""</th><th>"" + messages.getString(""common.topic"") + ""</th><th>"" + messages.getString(""common.user"") + ""</th></tr>"" + IOUtils.LINE_SEPARATOR);
        Collection all = null;
        try {
            Calendar cal = Calendar.getInstance();
            ChangeLog cl = wb.getChangeLog();
            int n = env.getIntSetting(Environment.PROPERTY_RECENT_CHANGES_DAYS);
            if (n == 0) {
                n = 5;
            }
            all = new ArrayList();
            for (int i = 0; i < n; i++) {
                Collection col = cl.getChanges(virtualWiki, cal.getTime());
                if (col != null) {
                    all.addAll(col);
                }
                cal.add(Calendar.DATE, -1);
            }
        } catch (Exception e) {
        }
        DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);
        for (Iterator iter = all.iterator(); iter.hasNext(); ) {
            Change change = (Change) iter.next();
            content.append(""<tr><td class=\""recent\"">"" + df.format(change.getTime()) + ""</td><td class=\""recent\""><a href=\"""" + safename(change.getTopic()) + "".html\"">"" + change.getTopic() + ""</a></td><td class=\""recent\"">"" + change.getUser() + ""</td></tr>"");
        }
        content.append(""</table>"" + IOUtils.LINE_SEPARATOR);
        tpl = getTemplateFilledWithContent(null);
        tpl = tpl.replaceAll(""@@CONTENTS@@"", content.toString());
        addTopicEntry(zipout, tpl, ""RecentChanges"", ""RecentChanges.html"");
        logger.fine(""Done adding all special topics."");
    }
",True
900677,16733950,18464490,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) destFile.createNewFile();
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) source.close();
            if (destination != null) destination.close();
        }
    }
","        @Override
        public void actionPerformed(ActionEvent e) {
            if (copiedFiles_ != null) {
                File[] tmpFiles = new File[copiedFiles_.length];
                File tmpDir = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp/"");
                tmpDir.mkdirs();
                for (int i = copiedFiles_.length - 1; i >= 0; i--) {
                    Frame f = FrameManager.getInstance().getFrameAtIndex(i);
                    try {
                        File in = f.getFile();
                        File out = new File(tmpDir, f.getFile().getName());
                        FileChannel inChannel = new FileInputStream(in).getChannel();
                        FileChannel outChannel = new FileOutputStream(out).getChannel();
                        inChannel.transferTo(0, inChannel.size(), outChannel);
                        if (inChannel != null) inChannel.close();
                        if (outChannel != null) outChannel.close();
                        tmpFiles[i] = out;
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
                try {
                    FrameManager.getInstance().insertFrames(getTable().getSelectedRow(), FrameManager.INSERT_TYPE.MOVE, tmpFiles);
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
",True
900678,606859,20089257,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public void store(String path, InputStream stream) throws IOException {
        toIgnore.add(normalizePath(path));
        ZipEntry entry = new ZipEntry(path);
        zipOutput.putNextEntry(entry);
        IOUtils.copy(stream, zipOutput);
        zipOutput.closeEntry();
    }
",True
900679,3822426,16085716,"    public int addPermissionsForUserAndAgenda(Integer userId, Integer agendaId, String permissions) throws TechnicalException {
        if (permissions == null) {
            throw new TechnicalException(new Exception(new Exception(""Column 'permissions' cannot be null"")));
        }
        Session session = null;
        Transaction transaction = null;
        try {
            session = HibernateUtil.getCurrentSession();
            transaction = session.beginTransaction();
            String query = ""INSERT INTO j_user_agenda (userId, agendaId, permissions) VALUES("" + userId + "","" + agendaId + "",\"""" + permissions + ""\"")"";
            Statement statement = session.connection().createStatement();
            int rowsUpdated = statement.executeUpdate(query);
            transaction.commit();
            return rowsUpdated;
        } catch (HibernateException ex) {
            if (transaction != null) transaction.rollback();
            throw new TechnicalException(ex);
        } catch (SQLException e) {
            if (transaction != null) transaction.rollback();
            throw new TechnicalException(e);
        }
    }
","    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Currency curr = (Currency) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CURRENCY""));
            pst.setString(1, curr.getName());
            pst.setInt(2, curr.getIdBase());
            pst.setDouble(3, curr.getValue());
            pst.setInt(4, curr.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
",True
900680,7126817,13744886,"    private static String getRegistrationClasses() {
        CentralRegistrationClass c = new CentralRegistrationClass();
        String name = c.getClass().getCanonicalName().replace('.', '/').concat("".class"");
        try {
            Enumeration<URL> urlEnum = c.getClass().getClassLoader().getResources(""META-INF/MANIFEST.MF"");
            while (urlEnum.hasMoreElements()) {
                URL url = urlEnum.nextElement();
                String file = url.getFile();
                JarURLConnection jarConnection = (JarURLConnection) url.openConnection();
                Manifest mf = jarConnection.getManifest();
                Attributes attrs = (Attributes) mf.getAttributes(name);
                if (attrs != null) {
                    String classes = attrs.getValue(""RegistrationClasses"");
                    return classes;
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return """";
    }
","    @Override
    public void run() {
        try {
            FileChannel in = new FileInputStream(inputfile).getChannel();
            long pos = 0;
            for (int i = 1; i <= noofparts; i++) {
                FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + ""."" + ""v"" + i).getChannel();
                status.setText(""Rozdělovač: Rozděluji část "" + i + "".."");
                if (remainingsize >= splitsize) {
                    in.transferTo(pos, splitsize, out);
                    pos += splitsize;
                    remainingsize -= splitsize;
                } else {
                    in.transferTo(pos, remainingsize, out);
                }
                pb.setValue(100 * i / noofparts);
                out.close();
            }
            in.close();
            if (deleteOnFinish) new File(inputfile + """").delete();
            status.setText(""Rozdělovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Rozděleno!"", ""Rozdělovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
        }
    }
",False
900681,12816795,14843540,"    public static FileChannel getFileChannel(Object o) throws IOException {
        Class c = o.getClass();
        try {
            Method m = c.getMethod(""getChannel"", null);
            return (FileChannel) m.invoke(o, null);
        } catch (IllegalAccessException x) {
        } catch (NoSuchMethodException x) {
        } catch (InvocationTargetException x) {
            if (x.getTargetException() instanceof IOException) throw (IOException) x.getTargetException();
        }
        if (o instanceof FileInputStream) return new MyFileChannelImpl((FileInputStream) o);
        if (o instanceof FileOutputStream) return new MyFileChannelImpl((FileOutputStream) o);
        if (o instanceof RandomAccessFile) return new MyFileChannelImpl((RandomAccessFile) o);
        Assert.UNREACHABLE(o.getClass().toString());
        return null;
    }
","    @Test
    public void shouldDownloadFileUsingPublicLink() throws Exception {
        String bucketName = ""test-"" + UUID.randomUUID();
        Service service = new WebClientService(credentials);
        service.createBucket(bucketName);
        File file = folder.newFile(""foo.txt"");
        FileUtils.writeStringToFile(file, UUID.randomUUID().toString());
        service.createObject(bucketName, file.getName(), file, new NullProgressListener());
        String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5));
        File saved = folder.newFile(""saved.txt"");
        InputStream input = new URL(publicUrl).openConnection().getInputStream();
        FileOutputStream output = new FileOutputStream(saved);
        IOUtils.copy(input, output);
        output.close();
        assertThat(""Corrupted download"", Files.computeMD5(saved), equalTo(Files.computeMD5(file)));
        service.deleteObject(bucketName, file.getName());
        service.deleteBucket(bucketName);
    }
",True
900682,3430781,18084457,"    public static String getTextFromPart(Part part) {
        try {
            if (part != null && part.getBody() != null) {
                InputStream in = part.getBody().getInputStream();
                String mimeType = part.getMimeType();
                if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, ""text/*"")) {
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    IOUtils.copy(in, out);
                    in.close();
                    in = null;
                    String charset = getHeaderParameter(part.getContentType(), ""charset"");
                    if (charset != null) {
                        charset = CharsetUtil.toJavaCharset(charset);
                    }
                    if (charset == null) {
                        charset = ""ASCII"";
                    }
                    String result = out.toString(charset);
                    out.close();
                    return result;
                }
            }
        } catch (OutOfMemoryError oom) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + oom.toString());
        } catch (Exception e) {
            Log.e(Email.LOG_TAG, ""Unable to getTextFromPart "" + e.toString());
        }
        return null;
    }
","    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println(""opening socket to "" + address + "" on "" + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println(""header: "" + header);
                String[] parts = header.getFilename().getSegments();
                String filename;
                if (parts.length > 0) filename = ""dl-"" + parts[parts.length - 1]; else filename = ""dl-"" + session.getScreenname();
                System.out.println(""writing to file "" + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println(""sending header: "" + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println(""transferred "" + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println(""finished transfer!"");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
",True
900683,2113293,590175,"    protected void setUp() throws Exception {
        testOutputDirectory = new File(getClass().getResource(""/"").getPath());
        zipFile = new File(this.testOutputDirectory, ""/plugin.zip"");
        zipOutputDirectory = new File(this.testOutputDirectory, ""zip"");
        zipOutputDirectory.mkdir();
        logger.fine(""zip dir created"");
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
        zos.putNextEntry(new ZipEntry(""css/""));
        zos.putNextEntry(new ZipEntry(""css/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""js/""));
        zos.putNextEntry(new ZipEntry(""js/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/classes/system.properties""));
        System.getProperties().store(zos, null);
        zos.closeEntry();
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/""));
        zos.putNextEntry(new ZipEntry(""WEB-INF/lib/mylib.jar""));
        File jarFile = new File(this.testOutputDirectory.getPath() + ""/mylib.jar"");
        JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile));
        jos.putNextEntry(new ZipEntry(""vqwiki/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/""));
        jos.putNextEntry(new ZipEntry(""vqwiki/plugins/system.properties""));
        System.getProperties().store(jos, null);
        jos.closeEntry();
        jos.close();
        IOUtils.copy(new FileInputStream(jarFile), zos);
        zos.closeEntry();
        zos.close();
        jarFile.delete();
    }
","    private static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) {
            throw new IllegalArgumentException(""Keystore url may not be null"");
        }
        LOG.debug(""Initializing key store"");
        KeyStore keystore = KeyStore.getInstance(""jks"");
        InputStream is = null;
        try {
            is = url.openStream();
            keystore.load(is, password != null ? password.toCharArray() : null);
        } finally {
            if (is != null) is.close();
        }
        return keystore;
    }
",False
900684,20662462,709584,"    @Override
    public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException {
        boolean firstIteration = true;
        Iterator<PlaylistEntry> entries = playlist.getEntries().iterator();
        DownloadingItem prevItem = null;
        File[] previousDownloadedFiles = new File[0];
        while (entries.hasNext()) {
            PlaylistEntry entry = entries.next();
            DownloadingItem item = null;
            LOGGER.info(""Downloading from '"" + entry.getTitle() + ""'"");
            InputStream is = RESTHelper.inputStream(entry.getUrl());
            boolean stopped = false;
            File nfile = null;
            try {
                nfile = createFileStream(folder, entry);
                item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition);
                if (previousDownloadedFiles.length > 0) {
                    item.setPreviousFiles(previousDownloadedFiles);
                }
                addItem(item);
                if (prevItem != null) deletePrevItem(prevItem);
                prevItem = item;
                stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition);
            } catch (IOException e) {
                LOGGER.log(Level.SEVERE, e.getMessage(), e);
                radioScheduler.fireException(e);
                if (!condition.isStopped()) {
                    File[] nfiles = new File[previousDownloadedFiles.length + 1];
                    System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length);
                    nfiles[nfiles.length - 1] = item.getFile();
                    previousDownloadedFiles = nfiles;
                    if ((!entries.hasNext()) && (firstIteration)) {
                        firstIteration = false;
                        entries = playlist.getEntries().iterator();
                    }
                    continue;
                }
            }
            if (stopped) {
                item.setState(ProcessStates.STOPPED);
                this.radioScheduler.fireStopDownloading(item);
                return item;
            }
        }
        return null;
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900685,2731569,19946541,"    @Override
    public byte[] getAvatar() throws IOException {
        HttpUriRequest request;
        try {
            request = new HttpGet(mUrl);
        } catch (IllegalArgumentException e) {
            IOException ioe = new IOException(""Invalid url "" + mUrl);
            ioe.initCause(e);
            throw ioe;
        }
        HttpResponse response = mClient.execute(request);
        HttpEntity entity = response.getEntity();
        InputStream in = entity.getContent();
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            byte[] data = new byte[1024];
            int nbread;
            while ((nbread = in.read(data)) != -1) {
                os.write(data, 0, nbread);
            }
        } finally {
            in.close();
            os.close();
        }
        return os.toByteArray();
    }
","    public int commit() throws TransactionException, SQLException, ConnectionFactoryException {
        Connection conn = ConnectionFactoryProxy.getInstance().getConnection(_poolName);
        conn.setAutoCommit(false);
        int numRowsUpdated = 0;
        try {
            Iterator statements = _statements.iterator();
            while (statements.hasNext()) {
                StatementData sd = (StatementData) statements.next();
                PreparedStatement ps = conn.prepareStatement(sd.statement);
                Iterator params = sd.params.iterator();
                int index = 1;
                while (params.hasNext()) {
                    ps.setString(index++, (String) params.next());
                }
                numRowsUpdated += ps.executeUpdate();
            }
            conn.commit();
        } catch (SQLException ex) {
            System.err.println(""com.zenark.zsql.TransactionImpl.commit() failed: Queued Statements follow"");
            Iterator statements = _statements.iterator();
            while (statements.hasNext()) {
                StatementData sd = (StatementData) statements.next();
                System.err.println(""+--Statement: "" + sd.statement + "" with "" + sd.params.size() + "" parameters"");
                for (int loop = 0; loop < sd.params.size(); loop++) {
                    System.err.println(""+--Param    : "" + (String) sd.params.get(loop));
                }
            }
            throw ex;
        } finally {
            _statements.clear();
            conn.rollback();
            conn.clearWarnings();
            ConnectionFactoryProxy.getInstance().releaseConnection(conn);
        }
        return numRowsUpdated;
    }
",False
900686,8956542,20506425,"    public static InputStream retrievePricesHTML(String username, String password) throws IOException, SAXException {
        List<String> cookies = new ArrayList<String>();
        URL url = new URL(""http://motormouth.com.au/default_fl.aspx"");
        HttpURLConnection loginConnection = (HttpURLConnection) url.openConnection();
        String viewStateValue = HTMLParser.parseHTMLInputTagValue(new InputStreamReader(loginConnection.getInputStream()), ""__VIEWSTATE"");
        setCookies(cookies, loginConnection);
        HttpURLConnection postCredsConnection = (HttpURLConnection) url.openConnection();
        postCredsConnection.setDoOutput(true);
        postCredsConnection.setRequestMethod(""POST"");
        postCredsConnection.setInstanceFollowRedirects(false);
        postCredsConnection.setRequestProperty(""Cookie"", buildCookieString(cookies));
        OutputStreamWriter postCredsWriter = new OutputStreamWriter(postCredsConnection.getOutputStream());
        postCredsWriter.append(""__VIEWSTATE="").append(URLEncoder.encode(viewStateValue, ""UTF-8"")).append('&');
        postCredsWriter.append(""Login_Module1%3Ausername="").append(URLEncoder.encode(username, ""UTF-8"")).append('&');
        postCredsWriter.append(""Login_Module1%3Apassword="").append(URLEncoder.encode(password, ""UTF-8"")).append('&');
        postCredsWriter.append(""Login_Module1%3AButtonLogin.x=0"").append('&');
        postCredsWriter.append(""Login_Module1%3AButtonLogin.y=0"");
        postCredsWriter.flush();
        postCredsWriter.close();
        int postResponseCode = postCredsConnection.getResponseCode();
        if (postResponseCode == 302) {
            setCookies(cookies, postCredsConnection);
            URL dataUrl = new URL(url, postCredsConnection.getHeaderField(""Location""));
            HttpURLConnection dataConnection = (HttpURLConnection) dataUrl.openConnection();
            dataConnection.setRequestProperty(""Cookie"", buildCookieString(cookies));
            InputStream dataInputStream = dataConnection.getInputStream();
            return dataInputStream;
        } else if (postResponseCode == 200) {
            URL dataUrl = new URL(url, ""/secure/mymotormouth.aspx"");
            HttpURLConnection dataConnection = (HttpURLConnection) dataUrl.openConnection();
            dataConnection.setRequestProperty(""Cookie"", buildCookieString(cookies));
            InputStream dataInputStream = dataConnection.getInputStream();
            return dataInputStream;
        } else {
            return null;
        }
    }
","    private void handleXInclude(final String localName, final Attributes atts) {
        if (""include"".equals(localName)) {
            this.inXInclude++;
            String href = atts.getValue(""href"");
            if ((href == null) || """".equals(href.trim())) {
                href = null;
            }
            String parse = atts.getValue(""parse"");
            if ((parse == null) || """".equals(parse.trim())) {
                parse = ""xml"";
            }
            String xpointer = atts.getValue(""xpointer"");
            if ((xpointer == null) || """".equals(xpointer.trim())) {
                xpointer = null;
            }
            String encoding = atts.getValue(""encoding"");
            if ((encoding == null) || """".equals(encoding.trim())) {
                encoding = null;
            }
            String accept = atts.getValue(""accept"");
            if ((accept == null) || """".equals(accept.trim())) {
                accept = null;
            }
            String accept_language = atts.getValue(""accept-language"");
            if ((accept_language == null) || """".equals(accept_language.trim())) {
                accept_language = null;
            }
            if (href != null) {
                if (href.indexOf("":/"") == -1) {
                    if (href.startsWith(""/"")) {
                        href = href.substring(1);
                    }
                    href = this.documentURI + href;
                }
                if (this.localParser.get() == null) {
                    this.localParser.set(new CShaniDomParser());
                }
                CShaniDomParser p = (CShaniDomParser) this.localParser.get();
                InputStream in = null;
                try {
                    URL url = new URL(href);
                    URLConnection connection = url.openConnection();
                    if (accept != null) {
                        connection.addRequestProperty(""Accept"", accept);
                    }
                    if (accept_language != null) {
                        connection.addRequestProperty(""Accept-Language"", accept_language);
                    }
                    in = connection.getInputStream();
                    ADocument doc = null;
                    if (encoding != null) {
                        doc = (ADocument) p.parse(new InputStreamReader(in, encoding));
                    } else {
                        doc = (ADocument) p.parse(in);
                    }
                    if (xpointer == null) {
                        CDOM2SAX converter = new CDOM2SAX(doc.getDocumentElement());
                        converter.setProperty(""http://xml.org/sax/properties/lexical-handler"", this.lHandler);
                        converter.setContentHandler(this.cHandler);
                        converter.setDocumentHandler(this.dHandler);
                        converter.setDTDHandler(this.dtdHandler);
                        converter.serialize();
                    } else {
                        XPath xpath = new DOMXPath(xpointer);
                        for (Iterator it = doc.getNamespaceList().iterator(); it.hasNext(); ) {
                            CNamespace ns = (CNamespace) it.next();
                            xpath.addNamespace(ns.getPrefix() == null ? """" : ns.getPrefix(), ns.getNamespaceURI());
                        }
                        List result = xpath.selectNodes(doc.getDocumentElement());
                        for (final Iterator it = result.iterator(); it.hasNext(); ) {
                            final Node node = (Node) it.next();
                            CDOM2SAX converter = new CDOM2SAX(node);
                            converter.setProperty(""http://xml.org/sax/properties/lexical-handler"", this.lHandler);
                            converter.setContentHandler(this.cHandler);
                            converter.setDocumentHandler(this.dHandler);
                            converter.setDTDHandler(this.dtdHandler);
                            converter.serialize();
                        }
                    }
                } catch (final Exception e) {
                    this.xiFallbackFlag++;
                } finally {
                    try {
                        in.close();
                        in = null;
                    } catch (final Exception ignore) {
                    }
                }
            }
        }
    }
",False
900687,18731109,9563,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900688,19090289,18284812,"    public static Channel getChannelFromSite(String siteURL) throws LinkNotFoundException, MalformedURLException, SAXException, IOException {
        String channelURL = """";
        siteURL = siteURL.trim();
        if (!siteURL.startsWith(""http://"")) {
            siteURL = ""http://"" + siteURL;
        }
        URL url = new URL(siteURL);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String[] lines = new String[3];
        for (int i = 0; i < lines.length; i++) {
            if ((lines[i] = in.readLine()) == null) {
                lines[i] = """";
                break;
            }
        }
        if (lines[0].contains(""xml version"")) {
            if (lines[0].contains(""rss"") || lines[1].contains(""rss"")) {
                channelURL = siteURL;
            }
            if (lines[0].contains(""Atom"") || lines[1].contains(""Atom"") || lines[2].contains(""Atom"")) {
                channelURL = siteURL;
            }
        }
        in.close();
        in = new BufferedReader(new InputStreamReader(url.openStream()));
        String iconURL = null;
        String inputLine;
        if ("""".equals(channelURL)) {
            boolean isIconURLFound = false;
            boolean isChannelURLFound = false;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""type=\""image/x-icon\"""") || inputLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                    String tmp = new String(inputLine);
                    String[] smallLines = inputLine.replace("">"", "">\n"").split(""\n"");
                    for (String smallLine : smallLines) {
                        if (smallLine.contains(""type=\""image/x-icon\"""") || smallLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                            tmp = smallLine;
                            break;
                        }
                    }
                    isIconURLFound = true;
                    iconURL = tmp.replaceAll(""^.*href=\"""", """");
                    iconURL = iconURL.replaceAll(""\"".*"", """");
                    tmp = null;
                    String originalSiteURL = new String(siteURL);
                    siteURL = getHome(siteURL);
                    if (iconURL.charAt(0) == '/') {
                        if (siteURL.charAt(siteURL.length() - 1) == '/') {
                            iconURL = siteURL + iconURL.substring(1);
                        } else {
                            iconURL = siteURL + iconURL;
                        }
                    } else if (!iconURL.startsWith(""http://"")) {
                        if (siteURL.charAt(siteURL.length() - 1) == '/') {
                            iconURL = siteURL + iconURL;
                        } else {
                            iconURL = siteURL + ""/"" + iconURL;
                        }
                    }
                    siteURL = originalSiteURL;
                    if (isChannelURLFound && isIconURLFound) {
                        break;
                    }
                }
                if ((inputLine.contains(""type=\""application/rss+xml\"""") || inputLine.contains(""type=\""application/atom+xml\"""")) && !isChannelURLFound) {
                    if (!inputLine.contains(""href="")) {
                        while ((inputLine = in.readLine()) != null) {
                            if (inputLine.contains(""href="")) {
                                break;
                            }
                        }
                    }
                    inputLine = inputLine.replace("">"", "">\n"");
                    String[] smallLines = inputLine.split(""\n"");
                    for (String smallLine : smallLines) {
                        if (smallLine.contains(""type=\""application/rss+xml\"""") || smallLine.contains(""type=\""application/atom+xml\"""")) {
                            inputLine = smallLine;
                            break;
                        }
                    }
                    channelURL = inputLine.replaceAll(""^.*href=\"""", """");
                    channelURL = channelURL.replaceAll(""\"".*"", """");
                    if (channelURL.charAt(0) == '/') {
                        if (siteURL.charAt(siteURL.length() - 1) == '/') {
                            channelURL = siteURL + channelURL.substring(1);
                        } else {
                            channelURL = siteURL + channelURL;
                        }
                    } else if (!channelURL.startsWith(""http://"")) {
                        if (siteURL.charAt(siteURL.length() - 1) == '/') {
                            channelURL = siteURL + channelURL;
                        } else {
                            channelURL = siteURL + ""/"" + channelURL;
                        }
                    }
                    isChannelURLFound = true;
                    if (isChannelURLFound && isIconURLFound) {
                        break;
                    }
                }
                if (inputLine.contains(""</head>"".toLowerCase())) {
                    break;
                }
            }
            in.close();
            if ("""".equals(channelURL)) {
                throw new LinkNotFoundException();
            }
        }
        channel = getChannelFromXML(channelURL.trim());
        if (iconURL == null || """".equals(iconURL.trim())) {
            iconURL = ""favicon.ico"";
            if (siteURL.equalsIgnoreCase(channel.getChannelURL())) {
                siteURL = channel.getLink();
            }
            siteURL = getHome(siteURL);
            if (siteURL.charAt(siteURL.length() - 1) == '/') {
                iconURL = siteURL + iconURL;
            } else {
                iconURL = siteURL + ""/"" + iconURL;
            }
        }
        try {
            String iconFileName = getHome(channel.getLink());
            if (iconFileName.startsWith(""http://"")) {
                iconFileName = iconFileName.substring(7);
            }
            iconFileName = iconFileName.replaceAll(""\\W"", "" "").trim().replace("" "", ""_"").concat("".ico"");
            String iconPath = JReader.getConfig().getShortcutIconsDir() + File.separator + iconFileName;
            InputStream inIcon = new URL(iconURL).openStream();
            OutputStream outIcon = new FileOutputStream(iconPath);
            byte[] buf = new byte[1024];
            int len;
            while ((len = inIcon.read(buf)) > 0) {
                outIcon.write(buf, 0, len);
            }
            inIcon.close();
            outIcon.close();
            channel.setIconPath(iconPath);
        } catch (Exception e) {
        }
        return channel;
    }
","    protected void discoverRegistryEntries() {
        DataSourceRegistry registry = this;
        try {
            ClassLoader loader = DataSetURI.class.getClassLoader();
            Enumeration<URL> urls;
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFactory.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerExtension(ss[0], ss[i], null);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerMimeType(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormat.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatter(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900689,21276480,22347366,"    public static String getUserPass(String user) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(user.getBytes());
        byte[] hash = digest.digest();
        System.out.println(""Returning user pass:"" + hash);
        return hash.toString();
    }
","    private static BufferedReader createReaderConnection(String urlString) throws SiteNotFoundException {
        BufferedReader reader = null;
        try {
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty(""User-agent"", ""Mozilla/4.5"");
            if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
                Logger.logln(""Response code for url ["" + urlString + ""] was "" + conn.getResponseCode() + "" ["" + conn.getResponseMessage() + ""]"");
                throw new SiteNotFoundException(urlString);
            }
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } catch (IOException ex) {
            Logger.logln("""" + ex);
        }
        return reader;
    }
",False
900690,17557354,9593609,"    public void copyFile2(String src, String dest) throws IOException {
        FileWriter fw = null;
        FileReader fr = null;
        BufferedReader br = null;
        BufferedWriter bw = null;
        File source = null;
        try {
            fr = new FileReader(src);
            fw = new FileWriter(dest);
            br = new BufferedReader(fr);
            bw = new BufferedWriter(fw);
            source = new File(src);
            int fileLength = (int) source.length();
            char charBuff[] = new char[fileLength];
            while (br.read(charBuff, 0, fileLength) != -1) bw.write(charBuff, 0, fileLength);
        } catch (FileNotFoundException fnfe) {
            throw new FileCopyException(src + "" "" + MM.PHRASES.getPhrase(""35""));
        } catch (IOException ioe) {
            throw new FileCopyException(MM.PHRASES.getPhrase(""36""));
        } finally {
            try {
                if (br != null) br.close();
                if (bw != null) bw.close();
            } catch (IOException ioe) {
            }
        }
    }
","    public static void main(String[] args) throws Exception {
        File rootDir = new File(""C:\\dev\\workspace_fgd\\gouvqc_crggid\\WebContent\\WEB-INF\\upload"");
        File storeDir = new File(rootDir, ""storeDir"");
        File workDir = new File(rootDir, ""workDir"");
        LoggerFacade loggerFacade = new CommonsLoggingLogger(logger);
        final FileResourceManager frm = new SmbFileResourceManager(storeDir.getPath(), workDir.getPath(), true, loggerFacade);
        frm.start();
        final String resourceId = ""811375c8-7cae-4429-9a0e-9222f47dab45"";
        {
            if (!frm.resourceExists(resourceId)) {
                String txId = frm.generatedUniqueTxId();
                frm.startTransaction(txId);
                FileInputStream inputStream = new FileInputStream(resourceId);
                frm.createResource(txId, resourceId);
                OutputStream outputStream = frm.writeResource(txId, resourceId);
                IOUtils.copy(inputStream, outputStream);
                IOUtils.closeQuietly(inputStream);
                IOUtils.closeQuietly(outputStream);
                frm.prepareTransaction(txId);
                frm.commitTransaction(txId);
            }
        }
        for (int i = 0; i < 30; i++) {
            final int index = i;
            new Thread() {

                @Override
                public void run() {
                    try {
                        String txId = frm.generatedUniqueTxId();
                        frm.startTransaction(txId);
                        InputStream inputStream = frm.readResource(resourceId);
                        frm.prepareTransaction(txId);
                        frm.commitTransaction(txId);
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (début)"");
                        }
                        String contenu = TikaUtils.getParsedContent(inputStream, ""file.pdf"");
                        synchronized (System.out) {
                            System.out.println(index + "" ***********************"" + txId + "" (fin)"");
                        }
                    } catch (ResourceManagerSystemException e) {
                        throw new RuntimeException(e);
                    } catch (ResourceManagerException e) {
                        throw new RuntimeException(e);
                    } catch (TikaException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }.start();
        }
        Thread.sleep(60000);
        frm.stop(FileResourceManager.SHUTDOWN_MODE_NORMAL);
    }
",True
900691,6908540,1142777,"    public void create_list() {
        try {
            String data = URLEncoder.encode(""PHPSESSID"", ""UTF-8"") + ""="" + URLEncoder.encode(this.get_session(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_CREATE_LIST);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            line = rd.readLine();
            wr.close();
            rd.close();
            System.out.println(""Gene list saved in LOLA"");
        } catch (Exception e) {
            System.out.println(""error in createList()"");
            e.printStackTrace();
        }
    }
","    public LinkedList<NameValuePair> getQuestion() {
        InputStream is = null;
        String result = """";
        LinkedList<NameValuePair> question = new LinkedList<NameValuePair>();
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(domain);
            httppost.setEntity(new UrlEncodedFormEntity(library));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error in http connection "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
            is.close();
            result = sb.toString();
            if (result.equals(""null,"")) {
                return null;
            }
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error converting result "" + e.toString());
        }
        try {
            JSONObject json = new JSONObject(result);
            JSONArray data = json.getJSONArray(""data"");
            JSONObject quest = data.getJSONObject(0);
            question.add(new BasicNameValuePair(""q"", quest.getString(""q"")));
            question.add(new BasicNameValuePair(""a"", quest.getString(""a"")));
            question.add(new BasicNameValuePair(""b"", quest.getString(""b"")));
            question.add(new BasicNameValuePair(""c"", quest.getString(""c"")));
            question.add(new BasicNameValuePair(""d"", quest.getString(""d"")));
            question.add(new BasicNameValuePair(""correct"", quest.getString(""correct"")));
            return question;
        } catch (JSONException e) {
            Log.e(""log_tag"", ""Error parsing data "" + e.toString());
        }
        return null;
    }
",True
900692,13351233,19875183,"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    private void copy(File inputFile, File outputFile) {
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), ""UTF-8""));
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), ""UTF-8""));
            while (reader.ready()) {
                writer.write(reader.readLine());
                writer.write(System.getProperty(""line.separator""));
            }
        } catch (IOException e) {
        } finally {
            try {
                if (reader != null) reader.close();
                if (writer != null) writer.close();
            } catch (IOException e1) {
            }
        }
    }
",True
900693,2012592,2532321,"    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        IOUtils.copy(inputStream, outputStream);
        outputStream.close();
        inputStream.close();
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900694,12787570,21057438,"    private static void copyContent(final File srcFile, final File dstFile, final boolean gzipContent) throws IOException {
        final File dstFolder = dstFile.getParentFile();
        dstFolder.mkdirs();
        if (!dstFolder.exists()) {
            throw new RuntimeException(""Unable to create the folder "" + dstFolder.getAbsolutePath());
        }
        final InputStream in = new FileInputStream(srcFile);
        OutputStream out = new FileOutputStream(dstFile);
        if (gzipContent) {
            out = new GZIPOutputStream(out);
        }
        try {
            final byte[] buffer = new byte[1024];
            int read;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
        } finally {
            in.close();
            out.close();
        }
    }
","    public void run() {
        try {
            Socket socket = getSocket();
            System.out.println(""opening socket to "" + address + "" on "" + port);
            InputStream in = socket.getInputStream();
            for (; ; ) {
                FileTransferHeader header = FileTransferHeader.readHeader(in);
                if (header == null) break;
                System.out.println(""header: "" + header);
                String[] parts = header.getFilename().getSegments();
                String filename;
                if (parts.length > 0) filename = ""dl-"" + parts[parts.length - 1]; else filename = ""dl-"" + session.getScreenname();
                System.out.println(""writing to file "" + filename);
                long sum = 0;
                if (new File(filename).exists()) {
                    FileInputStream fis = new FileInputStream(filename);
                    byte[] block = new byte[10];
                    for (int i = 0; i < block.length; ) {
                        int count = fis.read(block);
                        if (count == -1) break;
                        i += count;
                    }
                    FileTransferChecksum summer = new FileTransferChecksum();
                    summer.update(block, 0, 10);
                    sum = summer.getValue();
                }
                FileChannel fileChannel = new FileOutputStream(filename).getChannel();
                FileTransferHeader outHeader = new FileTransferHeader(header);
                outHeader.setHeaderType(FileTransferHeader.HEADERTYPE_ACK);
                outHeader.setIcbmMessageId(cookie);
                outHeader.setBytesReceived(0);
                outHeader.setReceivedChecksum(sum);
                OutputStream socketOut = socket.getOutputStream();
                System.out.println(""sending header: "" + outHeader);
                outHeader.write(socketOut);
                for (int i = 0; i < header.getFileSize(); ) {
                    long transferred = fileChannel.transferFrom(Channels.newChannel(in), 0, header.getFileSize() - i);
                    System.out.println(""transferred "" + transferred);
                    if (transferred == -1) return;
                    i += transferred;
                }
                System.out.println(""finished transfer!"");
                fileChannel.close();
                FileTransferHeader doneHeader = new FileTransferHeader(header);
                doneHeader.setHeaderType(FileTransferHeader.HEADERTYPE_RECEIVED);
                doneHeader.setFlags(doneHeader.getFlags() | FileTransferHeader.FLAG_DONE);
                doneHeader.setBytesReceived(doneHeader.getBytesReceived() + 1);
                doneHeader.setIcbmMessageId(cookie);
                doneHeader.setFilesLeft(doneHeader.getFilesLeft() - 1);
                doneHeader.write(socketOut);
                if (doneHeader.getFilesLeft() - 1 <= 0) {
                    socket.close();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }
    }
",True
900695,7825860,13433127,"    public static void testAutoIncrement() {
        final int count = 3;
        final Object lock = new Object();
        for (int i = 0; i < count; i++) {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    while (true) {
                        StringBuilder buffer = new StringBuilder(128);
                        buffer.append(""insert into DOMAIN (                         "").append(LS);
                        buffer.append(""    DOMAIN_ID, TOP_DOMAIN_ID, DOMAIN_HREF,   "").append(LS);
                        buffer.append(""    DOMAIN_RANK, DOMAIN_TYPE, DOMAIN_STATUS, "").append(LS);
                        buffer.append(""    DOMAIN_ICO_CREATED, DOMAIN_CDATE         "").append(LS);
                        buffer.append("") values (                   "").append(LS);
                        buffer.append(""    null ,null, ?,"").append(LS);
                        buffer.append(""    1, 2, 1,                 "").append(LS);
                        buffer.append(""    0, now()                 "").append(LS);
                        buffer.append("")                            "").append(LS);
                        String sqlInsert = buffer.toString();
                        boolean isAutoCommit = false;
                        int i = 0;
                        Connection conn = null;
                        PreparedStatement pstmt = null;
                        ResultSet rs = null;
                        try {
                            conn = ConnHelper.getConnection();
                            conn.setAutoCommit(isAutoCommit);
                            pstmt = conn.prepareStatement(sqlInsert);
                            for (i = 0; i < 10; i++) {
                                String lock = """" + ((int) (Math.random() * 100000000)) % 100;
                                pstmt.setString(1, lock);
                                pstmt.executeUpdate();
                            }
                            if (!isAutoCommit) conn.commit();
                            rs = pstmt.executeQuery(""select max(DOMAIN_ID) from DOMAIN"");
                            if (rs.next()) {
                                String str = System.currentTimeMillis() + "" "" + rs.getLong(1);
                            }
                        } catch (Exception e) {
                            try {
                                if (!isAutoCommit) conn.rollback();
                            } catch (SQLException ex) {
                                ex.printStackTrace(System.out);
                            }
                            String msg = System.currentTimeMillis() + "" "" + Thread.currentThread().getName() + "" - "" + i + "" "" + e.getMessage() + LS;
                            FileIO.writeToFile(""D:/DEAD_LOCK.txt"", msg, true, ""GBK"");
                        } finally {
                            ConnHelper.close(conn, pstmt, rs);
                        }
                    }
                }
            }).start();
        }
    }
","    public void save(File selectedFile) throws IOException {
        if (storeEntriesInFiles) {
            boolean moved = false;
            for (int i = 0; i < tempFiles.size(); i++) {
                File newFile = new File(selectedFile.getAbsolutePath() + ""_"" + Integer.toString(i) + "".zettmp"");
                moved = tempFiles.get(i).renameTo(newFile);
                if (!moved) {
                    BufferedReader read = new BufferedReader(new FileReader(tempFiles.get(i)));
                    PrintWriter write = new PrintWriter(newFile);
                    String s;
                    while ((s = read.readLine()) != null) write.print(s);
                    read.close();
                    write.flush();
                    write.close();
                    tempFiles.get(i).delete();
                }
                tempFiles.set(i, newFile);
            }
        }
        GZIPOutputStream output = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(selectedFile)));
        XStream xml_convert = new XStream();
        xml_convert.setMode(XStream.ID_REFERENCES);
        xml_convert.toXML(this, output);
        output.flush();
        output.close();
    }
",False
900696,970144,4114529,"    public Logging() throws Exception {
        File home = new File(System.getProperty(""user.home""), "".jorgan"");
        if (!home.exists()) {
            home.mkdirs();
        }
        File logging = new File(home, ""logging.properties"");
        if (!logging.exists()) {
            InputStream input = getClass().getResourceAsStream(""logging.properties"");
            OutputStream output = null;
            try {
                output = new FileOutputStream(logging);
                IOUtils.copy(input, output);
            } finally {
                IOUtils.closeQuietly(input);
                IOUtils.closeQuietly(output);
            }
        }
        FileInputStream input = null;
        try {
            input = new FileInputStream(logging);
            LogManager.getLogManager().readConfiguration(input);
        } finally {
            IOUtils.closeQuietly(input);
        }
    }
","    @Override
    public void save(File folder) {
        actInstance = instance;
        this.setProperty(EsomMapper.PROPERTY_INSTANCE, String.valueOf(actInstance));
        log.debug(""instance: "" + this.getProperty(EsomMapper.PROPERTY_INSTANCE));
        if (this.getProperty(EsomMapper.PROPERTY_LRN_RADIO_SELECTED) == EsomMapper.RADIO_LOAD_SELECTED) {
            File src = new File(this.getProperty(EsomMapper.PROPERTY_LRN_FILE));
            if (src.getParent() != folder.getPath()) {
                log.debug(""saving lrn file in save folder "" + folder.getPath());
                File dst = new File(folder.getAbsolutePath() + File.separator + src.getName() + String.valueOf(actInstance));
                try {
                    FileReader fr = new FileReader(src);
                    BufferedReader br = new BufferedReader(fr);
                    dst.createNewFile();
                    FileWriter fw = new FileWriter(dst);
                    BufferedWriter bw = new BufferedWriter(fw);
                    int i = 0;
                    while ((i = br.read()) != -1) bw.write(i);
                    bw.flush();
                    bw.close();
                    br.close();
                    fr.close();
                } catch (FileNotFoundException e) {
                    log.error(""Error while opening lrn sourcefile! Saving wasn't possible!!!"");
                    e.printStackTrace();
                } catch (IOException e) {
                    log.error(""Error while creating lrn destfile! Creating wasn't possible!!!"");
                    e.printStackTrace();
                }
                this.setProperty(EsomMapper.PROPERTY_LRN_FILE, dst.getName());
                log.debug(""done saving lrn file"");
            }
        }
        if (this.getProperty(EsomMapper.PROPERTY_WTS_RADIO_SELECTED) == EsomMapper.RADIO_LOAD_SELECTED) {
            File src = new File(this.getProperty(EsomMapper.PROPERTY_WTS_FILE));
            if (src.getParent() != folder.getPath()) {
                log.debug(""saving wts file in save folder "" + folder.getPath());
                File dst = new File(folder.getAbsolutePath() + File.separator + src.getName() + String.valueOf(actInstance));
                try {
                    FileReader fr = new FileReader(src);
                    BufferedReader br = new BufferedReader(fr);
                    dst.createNewFile();
                    FileWriter fw = new FileWriter(dst);
                    BufferedWriter bw = new BufferedWriter(fw);
                    int i = 0;
                    while ((i = br.read()) != -1) bw.write(i);
                    bw.flush();
                    bw.close();
                    br.close();
                    fr.close();
                } catch (FileNotFoundException e) {
                    log.error(""Error while opening wts sourcefile! Saving wasn't possible!!!"");
                    e.printStackTrace();
                } catch (IOException e) {
                    log.error(""Error while creating wts destfile! Creating wasn't possible!!!"");
                    e.printStackTrace();
                }
                this.setProperty(EsomMapper.PROPERTY_WTS_FILE, dst.getName());
                log.debug(""done saving wts file"");
            }
        }
        if (this.getProperty(EsomMapper.PROPERTY_LRN_RADIO_SELECTED) == EsomMapper.RADIO_SELECT_FROM_DATANAV_SELECTED) {
            this.setProperty(EsomMapper.PROPERTY_LRN_FILE, ""EsomMapper"" + this.actInstance + "".lrn"");
            File dst = new File(folder + File.separator + this.getProperty(EsomMapper.PROPERTY_LRN_FILE));
            try {
                FileWriter fw = new FileWriter(dst);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(""# EsomMapper LRN save file\n"");
                bw.write(""% "" + this.inputVectors.getNumRows() + ""\n"");
                bw.write(""% "" + this.inputVectors.getNumCols() + ""\n"");
                bw.write(""% 9"");
                for (IColumn col : this.inputVectors.getColumns()) {
                    if (col.getType() == IClusterNumber.class) bw.write(""\t2""); else if (col.getType() == String.class) bw.write(""\t8""); else bw.write(""\t1"");
                }
                bw.write(""\n% Key"");
                for (IColumn col : this.inputVectors.getColumns()) {
                    bw.write(""\t"" + col.getLabel());
                }
                bw.write(""\n"");
                int keyIterator = 0;
                for (Vector<Object> row : this.inputVectors.getGrid()) {
                    bw.write(this.inputVectors.getKey(keyIterator++).toString());
                    for (Object point : row) bw.write(""\t"" + point.toString());
                    bw.write(""\n"");
                }
                bw.flush();
                fw.flush();
                bw.close();
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            this.setProperty(EsomMapper.PROPERTY_LRN_RADIO_SELECTED, EsomMapper.RADIO_LOAD_SELECTED);
        }
        if (this.getProperty(EsomMapper.PROPERTY_WTS_RADIO_SELECTED) == EsomMapper.RADIO_SELECT_FROM_DATANAV_SELECTED) {
            this.setProperty(EsomMapper.PROPERTY_WTS_FILE, ""EsomMapper"" + this.actInstance + "".wts"");
            MyRetina tempRetina = new MyRetina(this.outputRetina.getNumRows(), this.outputRetina.getNumCols(), this.outputRetina.getDim(), this.outputRetina.getDistanceFunction(), this.outputRetina.isToroid());
            for (int row = 0; row < this.outputRetina.getNumRows(); row++) {
                for (int col = 0; col < this.outputRetina.getNumCols(); col++) {
                    for (int dim = 0; dim < this.outputRetina.getDim(); dim++) {
                        tempRetina.setNeuron(row, col, dim, this.outputRetina.getPointasDoubleArray(row, col)[dim]);
                    }
                }
            }
            EsomIO.writeWTSFile(folder + File.separator + this.getProperty(EsomMapper.PROPERTY_WTS_FILE), tempRetina);
            this.setProperty(EsomMapper.PROPERTY_WTS_RADIO_SELECTED, EsomMapper.RADIO_LOAD_SELECTED);
        }
        EsomMapper.instance++;
    }
",True
900697,1115931,17226920,"    public void testSetRequestProperty() throws Exception {
        MockHTTPServer httpServer = new MockHTTPServer(""HTTP Server for User-Specified Request Property"", 2);
        httpServer.start();
        synchronized (bound) {
            if (!httpServer.started) {
                bound.wait(5000);
            }
        }
        HttpURLConnection urlConnection = (HttpURLConnection) new URL(""http://localhost:"" + httpServer.port()).openConnection();
        assertEquals(0, urlConnection.getRequestProperties().size());
        final String PROPERTY1 = ""Accept"";
        final String PROPERTY2 = ""Connection"";
        urlConnection.setRequestProperty(PROPERTY1, null);
        urlConnection.setRequestProperty(PROPERTY1, null);
        urlConnection.setRequestProperty(PROPERTY2, ""keep-alive"");
        assertEquals(2, urlConnection.getRequestProperties().size());
        assertNull(urlConnection.getRequestProperty(PROPERTY1));
        assertEquals(""keep-alive"", urlConnection.getRequestProperty(PROPERTY2));
        urlConnection.setRequestProperty(PROPERTY1, ""/"");
        urlConnection.setRequestProperty(PROPERTY2, null);
        assertEquals(""/"", urlConnection.getRequestProperty(PROPERTY1));
        assertNull(urlConnection.getRequestProperty(PROPERTY2));
    }
","    public void setUrl(URL url) throws PDFException, PDFSecurityException, IOException {
        InputStream in = null;
        try {
            URLConnection urlConnection = url.openConnection();
            in = urlConnection.getInputStream();
            String pathOrURL = url.toString();
            setInputStream(in, pathOrURL);
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
",False
900698,9195362,18054947,"    public static long copy(File src, File dest) throws UtilException {
        FileChannel srcFc = null;
        FileChannel destFc = null;
        try {
            srcFc = new FileInputStream(src).getChannel();
            destFc = new FileOutputStream(dest).getChannel();
            long srcLength = srcFc.size();
            srcFc.transferTo(0, srcLength, destFc);
            return srcLength;
        } catch (IOException e) {
            throw new UtilException(e);
        } finally {
            try {
                if (srcFc != null) srcFc.close();
                srcFc = null;
            } catch (IOException e) {
            }
            try {
                if (destFc != null) destFc.close();
                destFc = null;
            } catch (IOException e) {
            }
        }
    }
","    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        Reader source = null;
        Writer destination = null;
        char[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""FileCopy: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""file is unwriteable: "" + dest_name);
                } else {
                    throw new FileCopyException(""FileCopy: destination "" + ""is not a file: "" + dest_name);
                }
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new BufferedReader(new FileReader(source_file));
            destination = new BufferedWriter(new FileWriter(destination_file));
            buffer = new char[1024];
            while (true) {
                bytes_read = source.read(buffer, 0, 1024);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) {
                try {
                    source.close();
                } catch (IOException e) {
                    ;
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                    ;
                }
            }
        }
    }
",True
900699,15347323,16367499,"    public static String hash(String in, String algorithm) {
        if (StringUtils.isBlank(algorithm)) algorithm = DEFAULT_ALGORITHM;
        try {
            md = MessageDigest.getInstance(algorithm);
        } catch (NoSuchAlgorithmException nsae) {
            logger.error(""No such algorithm exception"", nsae);
        }
        md.reset();
        md.update(in.getBytes());
        String out = null;
        try {
            out = Base64Encoder.encode(md.digest());
        } catch (IOException e) {
            logger.error(""Error converting to Base64 "", e);
        }
        if (out.endsWith(""\n"")) out = out.substring(0, out.length() - 1);
        return out;
    }
","    public static String md5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",True
900700,5450104,16891145,"    private static void grab(String urlString) throws MalformedURLException, IOException {
        URL url = new URL(urlString);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.connect();
        BufferedReader in = null;
        StringBuffer sb = new StringBuffer();
        in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String inputLine;
        boolean f = false;
        while ((inputLine = in.readLine()) != null) {
            inputLine = inputLine.trim();
            if (inputLine.startsWith(""<tbody>"")) {
                f = true;
                continue;
            }
            if (inputLine.startsWith(""</table>"")) {
                f = false;
                continue;
            }
            if (f) {
                sb.append(inputLine);
                sb.append(""\n"");
            }
        }
        process(sb.toString());
    }
","    public static byte[] expandPasswordToKeySSHCom(String password, int keyLen) {
        try {
            if (password == null) {
                password = """";
            }
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            int digLen = md5.getDigestLength();
            byte[] buf = new byte[((keyLen + digLen) / digLen) * digLen];
            int cnt = 0;
            while (cnt < keyLen) {
                md5.update(password.getBytes());
                if (cnt > 0) {
                    md5.update(buf, 0, cnt);
                }
                md5.digest(buf, cnt, digLen);
                cnt += digLen;
            }
            byte[] key = new byte[keyLen];
            System.arraycopy(buf, 0, key, 0, keyLen);
            return key;
        } catch (Exception e) {
            throw new Error(""Error in SSH2KeyPairFile.expandPasswordToKeySSHCom: "" + e);
        }
    }
",False
900701,3229361,6751999,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(QZ.PHRASES.getPhrase(""25"") + "" "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(QZ.PHRASES.getPhrase(""26"") + "" "" + QZ.PHRASES.getPhrase(""27"") + "": "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""29"") + "": "" + dest_name);
                    System.out.print(QZ.PHRASES.getPhrase(""19"") + dest_name + QZ.PHRASES.getPhrase(""30"") + "": "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(QZ.PHRASES.getPhrase(""31""));
                } else throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""32"") + "": "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""33"") + "": "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""34"") + "": "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            while (true) {
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
                ;
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public static void main(String[] args) throws Exception {
        TripleDES tdes = new TripleDES();
        StreamBlockReader reader = new StreamBlockReader(new FileInputStream(""D:\\test.txt""));
        StreamBlockWriter writer = new StreamBlockWriter(new FileOutputStream(""D:\\testTDESENC.txt""));
        SingleKey key = new SingleKey(new Block(128), """");
        key = new SingleKey(new Block(""01011101110000101001100111001011101000001110111101001001101101101101100000011101100100110000101100001110000001111101001101001101""), """");
        Mode mode = new ECBTripleDESMode(tdes);
        tdes.encrypt(reader, writer, key, mode);
    }
",True
900702,16294877,20696811,"    public static void copierFichier(URL url, File destination) throws CopieException, IOException {
        if (destination.exists()) {
            throw new CopieException(""ERREUR : Copie du fichier '"" + url.getPath() + ""' vers '"" + destination.getPath() + ""' impossible!\n"" + ""CAUSE  : Le fichier destination existe d�j�."");
        }
        URLConnection urlConnection = url.openConnection();
        InputStream httpStream = urlConnection.getInputStream();
        FileOutputStream destinationFile = new FileOutputStream(destination);
        byte buffer[] = new byte[512 * 1024];
        int nbLecture;
        while ((nbLecture = httpStream.read(buffer)) != -1) {
            destinationFile.write(buffer, 0, nbLecture);
        }
        log.debug(""(COPIE) Copie du fichier : "" + url.getPath() + "" --> "" + destination.getPath());
        httpStream.close();
        destinationFile.close();
    }
","    private static boolean insereTutorial(final Connection con, final Tutorial tut, final Autor aut, final Descricao desc) {
        try {
            con.setAutoCommit(false);
            Statement smt = con.createStatement();
            if (aut.getCodAutor() == 0) {
                GeraID.gerarCodAutor(con, aut);
                smt.executeUpdate(""INSERT INTO autor VALUES("" + aut.getCodAutor() + "",'"" + aut.getNome() + ""','"" + aut.getEmail() + ""')"");
            }
            GeraID.gerarCodDescricao(con, desc);
            GeraID.gerarCodTutorial(con, tut);
            String titulo = tut.getTitulo().replaceAll(""['\""]"", """");
            String coment = tut.getComentario().replaceAll(""[']"", ""\"""");
            String texto = desc.getTexto().replaceAll(""[']"", ""\"""");
            smt.executeUpdate(""INSERT INTO descricao VALUES("" + desc.getCodDesc() + "",'"" + texto + ""')"");
            smt.executeUpdate(""INSERT INTO tutorial VALUES("" + tut.getCodigo() + "",'"" + titulo + ""','"" + coment + ""',"" + desc.getCodDesc() + "")"");
            smt.executeUpdate(""INSERT INTO tut_aut VALUES("" + tut.getCodigo() + "","" + aut.getCodAutor() + "")"");
            con.commit();
            return (true);
        } catch (SQLException e) {
            try {
                JOptionPane.showMessageDialog(null, ""Rolling back transaction"", ""TUTORIAL: Database error"", JOptionPane.ERROR_MESSAGE);
                System.out.print(e.getMessage());
                con.rollback();
            } catch (SQLException e1) {
                System.err.print(e1.getSQLState());
            }
            return (false);
        } finally {
            try {
                con.setAutoCommit(true);
            } catch (SQLException e2) {
                System.err.print(e2.getSQLState());
            }
        }
    }
",False
900703,1854053,2285646,"            @Override
            public void handle(String s, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, int i) throws IOException, ServletException {
                expected = new StringBuilder();
                System.out.println(""uri: "" + httpServletRequest.getRequestURI());
                System.out.println(""queryString: "" + (queryString = httpServletRequest.getQueryString()));
                System.out.println(""method: "" + httpServletRequest.getMethod());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(httpServletRequest.getInputStream(), baos);
                System.out.println(""body: "" + (body = baos.toString()));
                PrintWriter writer = httpServletResponse.getWriter();
                writer.append(""testsvar"");
                expected.append(""testsvar"");
                Random r = new Random();
                for (int j = 0; j < 10; j++) {
                    int value = r.nextInt(Integer.MAX_VALUE);
                    writer.append(value + """");
                    expected.append(value);
                }
                System.out.println();
                writer.close();
                httpServletResponse.setStatus(HttpServletResponse.SC_OK);
            }
","    protected void sendDoc(File indir, File outdir, File orig, Document doc, ServiceEndpoint ep) {
        ep.setMethod(""simpleDocumentTransfer"");
        Document response = null;
        try {
            response = protocolHandler.sendMessage(ep, doc);
        } catch (TransportException e) {
            logger.warn(""Message was not accepted, will try again later"");
            return;
        }
        String serial = String.valueOf(System.currentTimeMillis());
        File origCopy = new File(outdir, orig.getName() + ""."" + serial);
        File respDrop = new File(outdir, orig.getName() + ""."" + serial + "".resp"");
        FileOutputStream respos = null;
        try {
            respos = new FileOutputStream(respDrop);
            serializeDocument(respos, response);
        } catch (IOException e) {
            logger.warn(""Failed to dump response"");
            return;
        } finally {
            try {
                respos.close();
            } catch (IOException ignored) {
            }
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        byte[] buffer = new byte[2048];
        try {
            in = new FileInputStream(orig);
            out = new FileOutputStream(origCopy);
            int bytesread = 0;
            while ((bytesread = in.read(buffer)) > 0) {
                out.write(buffer, 0, bytesread);
            }
        } catch (IOException e) {
            logger.warn(""Failed to copy original"");
            return;
        } finally {
            try {
                in.close();
                out.close();
            } catch (IOException ignored) {
            }
        }
        orig.delete();
        logger.info(""File processed: "" + orig.getName());
    }
",True
900704,1775942,1563482,"    @Override
    public void run() {
        HttpGet httpGet = null;
        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();
            DataModel model = DataModel.getInstance();
            for (City city : citiesToBeUpdated) {
                String preferredUnitType = PreferenceManager.getDefaultSharedPreferences(context).getString(context.getString(R.string.settings_units_key), context.getString(R.string.settings_units_default_value));
                String codePrefix = city.getCountryName().startsWith(""United States"") ? GET_PARAM_ZIP_PREFIX : GET_PARAM_CITY_CODE_PREFIX;
                String requestUri = new String(GET_URL + ""?"" + GET_PARAM_ACODE_PREFIX + ""="" + GET_PARAM_ACODE + ""&"" + codePrefix + ""="" + city.getId() + ""&"" + GET_PARAM_UNIT_PREFIX + ""="" + preferredUnitType);
                httpGet = new HttpGet(requestUri);
                HttpResponse response = httpClient.execute(httpGet);
                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    processXML(response.getEntity().getContent());
                    for (ForecastedDay day : forecast) {
                        int pos = day.getImageURL().lastIndexOf('/');
                        if (pos < 0 || pos + 1 == day.getImageURL().length()) throw new Exception(""Invalid image URL"");
                        final String imageFilename = day.getImageURL().substring(pos + 1);
                        File downloadDir = context.getDir(ForecastedDay.DOWNLOAD_DIR, Context.MODE_PRIVATE);
                        File[] imagesFilteredByName = downloadDir.listFiles(new FilenameFilter() {

                            @Override
                            public boolean accept(File dir, String filename) {
                                if (filename.equals(imageFilename)) return true; else return false;
                            }
                        });
                        if (imagesFilteredByName.length == 0) {
                            httpGet = new HttpGet(day.getImageURL());
                            response = httpClient.execute(httpGet);
                            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                                BufferedOutputStream bus = null;
                                try {
                                    bus = new BufferedOutputStream(new FileOutputStream(downloadDir.getAbsolutePath() + ""/"" + imageFilename));
                                    response.getEntity().writeTo(bus);
                                } finally {
                                    bus.close();
                                }
                            }
                        }
                    }
                    city.setDays(forecast);
                    city.setLastUpdated(Calendar.getInstance().getTime());
                    model.saveCity(city);
                }
            }
        } catch (Exception e) {
            httpGet.abort();
            e.printStackTrace();
        } finally {
            handler.sendEmptyMessage(1);
        }
    }
","    public StringBuffer get(URL url) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer page = new StringBuffer();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            String utf = new String(line.getBytes(""UTF-8""), ""UTF-8"");
            page.append(utf);
        }
        bufferedReader.close();
        return page;
    }
",False
900705,8174539,12908232,"    public static void invokeServlet(String op, String user) throws Exception {
        boolean isSayHi = true;
        try {
            if (!""sayHi"".equals(op)) {
                isSayHi = false;
            }
            URL url = new URL(""http://localhost:9080/helloworld/*.do"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            out.write(""Operation="" + op);
            if (!isSayHi) {
                out.write(""&User="" + user);
            }
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            boolean correctReturn = false;
            String response;
            if (isSayHi) {
                while ((response = in.readLine()) != null) {
                    if (response.contains(""Bonjour"")) {
                        System.out.println("" sayHi server return: Bonjour"");
                        correctReturn = true;
                        break;
                    }
                }
            } else {
                while ((response = in.readLine()) != null) {
                    if (response.contains(""Hello CXF"")) {
                        System.out.println("" greetMe server return: Hello CXF"");
                        correctReturn = true;
                        break;
                    }
                }
            }
            if (!correctReturn) {
                System.out.println(""Can't got correct return from server."");
            }
            in.close();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    private void readFromObjectInput(String filename) {
        try {
            URL url = new URL(getCodeBase(), filename);
            InputStream stream = url.openStream();
            ObjectInput input = new ObjectInputStream(stream);
            fDrawing.release();
            fDrawing = (Drawing) input.readObject();
            view().setDrawing(fDrawing);
        } catch (IOException e) {
            initDrawing();
            showStatus(""Error: "" + e);
        } catch (ClassNotFoundException e) {
            initDrawing();
            showStatus(""Class not found: "" + e);
        }
    }
",False
900706,19292974,1889366,"    public void write(PDDocument doc) throws COSVisitorException {
        document = doc;
        SecurityHandler securityHandler = document.getSecurityHandler();
        if (securityHandler != null) {
            try {
                securityHandler.prepareDocumentForEncryption(document);
                this.willEncrypt = true;
            } catch (IOException e) {
                throw new COSVisitorException(e);
            } catch (CryptographyException e) {
                throw new COSVisitorException(e);
            }
        } else {
            this.willEncrypt = false;
        }
        COSDocument cosDoc = document.getDocument();
        COSDictionary trailer = cosDoc.getTrailer();
        COSArray idArray = (COSArray) trailer.getDictionaryObject(""ID"");
        if (idArray == null) {
            try {
                MessageDigest md = MessageDigest.getInstance(""MD5"");
                md.update(Long.toString(System.currentTimeMillis()).getBytes());
                COSDictionary info = (COSDictionary) trailer.getDictionaryObject(""Info"");
                if (info != null) {
                    Iterator values = info.getValues().iterator();
                    while (values.hasNext()) {
                        md.update(values.next().toString().getBytes());
                    }
                }
                idArray = new COSArray();
                COSString id = new COSString(md.digest());
                idArray.add(id);
                idArray.add(id);
                trailer.setItem(""ID"", idArray);
            } catch (NoSuchAlgorithmException e) {
                throw new COSVisitorException(e);
            }
        }
        cosDoc.accept(this);
    }
","    public String hash(String password) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException ex) {
            log.info(""No sha-256 available"");
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                log.fatal(""sha-1 is not available"", e);
                throw new RuntimeException(""Couldn't get a hash algorithm from Java"");
            }
        }
        try {
            digest.reset();
            digest.update((salt + password).getBytes(""UTF-8""));
            byte hash[] = digest.digest();
            return new String(Base64.encodeBase64(hash, false));
        } catch (Throwable t) {
            throw new RuntimeException(""Couldn't hash password"");
        }
    }
",True
900707,3636960,12883277,"    public void display(WebPage page, HttpServletRequest req, HttpServletResponse resp) throws DisplayException {
        page.getDisplayInitialiser().initDisplay(new HttpRequestDisplayContext(req), req);
        StreamProvider is = (StreamProvider) req.getAttribute(INPUTSTREAM_KEY);
        if (is == null) {
            throw new IllegalStateException(""No OutputStreamDisplayHandlerXML.InputStream found in request attribute"" + "" OutputStreamDisplayHandlerXML.INPUTSTREAM_KEY"");
        }
        resp.setContentType(is.getMimeType());
        resp.setHeader(""Content-Disposition"", ""attachment;filename="" + is.getName());
        try {
            InputStream in = is.getInputStream();
            OutputStream out = resp.getOutputStream();
            if (in != null) {
                IOUtils.copy(in, out);
            }
            is.write(resp.getOutputStream());
            resp.flushBuffer();
        } catch (IOException e) {
            throw new DisplayException(""Error writing input stream to response"", e);
        }
    }
","    private void createWikiPages(WikiContext context) throws PluginException {
        OntologyWikiPageName owpn = new OntologyWikiPageName(omemo.getFormDataAlias().toUpperCase(), omemo.getFormDataVersionDate());
        String wikiPageFullFileName = WikiPageName2FullFileName(context, owpn.toString());
        String rdfFileNameWithPath = getWorkDir(context) + File.separator + owpn.toFileName();
        FileOutputStream fos = null;
        FileInputStream fis = null;
        try {
            fos = new FileOutputStream(wikiPageFullFileName);
            fis = new FileInputStream(rdfFileNameWithPath);
            InfoExtractor infoe = new InfoExtractor(fis, omemo.getFormDataNS(), omemo.getFormDataOntLang());
            infoe.writePage(getWorkDir(context), owpn, Omemo.checksWikiPageName);
            fis.close();
            fos.close();
        } catch (Exception e) {
            log.error(""Can not read local rdf file or can not write wiki page"");
            throw new PluginException(""Error creating wiki pages. See logs"");
        }
    }
",True
900708,3461227,4005293,"    private void calculateCoverageAndSpecificity(String mainCat) throws IOException, JSONException {
        for (String cat : Rules.categoryTree.get(mainCat)) {
            for (String queryString : Rules.queries.get(cat)) {
                String urlEncodedQueryString = URLEncoder.encode(queryString, ""UTF-8"");
                URL url = new URL(""http://boss.yahooapis.com/ysearch/web/v1/"" + urlEncodedQueryString + ""?appid="" + yahoo_ap_id + ""&count=4&format=json&sites="" + site);
                URLConnection con = url.openConnection();
                String line;
                StringBuilder builder = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
                String response = builder.toString();
                JSONObject json = new JSONObject(response);
                JSONObject jsonObject = json.getJSONObject(""ysearchresponse"");
                String totalhits = jsonObject.getString(""totalhits"");
                long totalhitsLong = Long.parseLong(totalhits);
                QueryInfo qinfo = new QueryInfo(queryString, totalhitsLong);
                queryInfoMap.put(queryString, qinfo);
                cov.put(cat, cov.get(cat) + totalhitsLong);
                if (totalhitsLong == 0) {
                    continue;
                }
                ja = jsonObject.getJSONArray(""resultset_web"");
                for (int j = 0; j < ja.length(); j++) {
                    JSONObject k = ja.getJSONObject(j);
                    String dispurl = filterBold(k.getString(""url""));
                    qinfo.addUrl(dispurl);
                }
            }
        }
        calculateSpecificity(mainCat);
    }
","    public static String translate(String s, String type) {
        try {
            String result = null;
            URL url = new URL(""http://www.excite.co.jp/world/english/"");
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""before="" + URLEncoder.encode(s, ""SJIS"") + ""&wb_lp="");
            out.print(type);
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""SJIS""));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int textPos = inputLine.indexOf(""name=\""after\"""");
                if (textPos >= 0) {
                    int ltrPos = inputLine.indexOf("">"", textPos + 11);
                    if (ltrPos >= 0) {
                        int closePos = inputLine.indexOf(""<"", ltrPos + 1);
                        if (closePos >= 0) {
                            result = inputLine.substring(ltrPos + 1, closePos);
                            break;
                        } else {
                            result = inputLine.substring(ltrPos + 1);
                            break;
                        }
                    }
                }
            }
            in.close();
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",True
900709,901348,22165218,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private String readHtmlFile(String htmlFileName) {
        StringBuffer buffer = new StringBuffer();
        java.net.URL url = getClass().getClassLoader().getResource(""freestyleLearning/homeCore/help/"" + htmlFileName);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String string = "" "";
            while (string != null) {
                string = reader.readLine();
                if (string != null) buffer.append(string);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
        return new String(buffer);
    }
",True
900710,3732741,13988822,"    private String digest(String message) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(message.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            String hpassword = hash.toString(16);
            return hpassword;
        } catch (Exception e) {
        }
        return null;
    }
","    private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception {
        Pattern pattern = Pattern.compile(""(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\""http\\:\\/\\/www\\.ivoa\\.net\\/.*"" + service + ""[^\\\""]*\\\"").*)"");
        pattern = Pattern.compile("".*xmlns(?::\\w+)?=(\""[^\""]*(?i)(?:"" + service + "")[^\""]*\"").*"");
        logger.debug(""read "" + this.url + service);
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(this.url + service)).openStream()));
        String inputLine;
        BufferedWriter bfw = new BufferedWriter(new FileWriter(this.baseDirectory + service + "".xml""));
        boolean found = false;
        while ((inputLine = in.readLine()) != null) {
            if (!found) {
                Matcher m = pattern.matcher(inputLine);
                if (m.matches()) {
                    nsDefinition.init(""xmlns:vosi="" + m.group(1));
                    found = true;
                }
            }
            bfw.write(inputLine + ""\n"");
        }
        in.close();
        bfw.close();
    }
",False
900711,2962800,3766029,"    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
","    public String uploadZtree(ArrayList c) {
        try {
            String id = generateRandomId();
            Iterator iter = c.iterator();
            URL url = new URL(ZorobotSystem.props.getProperty(""zoro.url"") + ""auplo1.jsp"");
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""id="" + id + ""&"");
            StringBuffer sb = new StringBuffer();
            int gg = 0;
            while (iter.hasNext()) {
                if (gg++ >= 500) break;
                String st = (String) iter.next();
                sb.append(""a="");
                sb.append(URLEncoder.encode(st, ""UTF-8""));
                if (iter.hasNext() && gg < 500) sb.append(""&"");
            }
            out.println(sb.toString());
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            if ((inputLine = in.readLine()) != null) {
                if (!inputLine.equals(""OK!"") && inputLine.length() > 3) {
                    System.out.println(""Not OK: "" + inputLine);
                    return ""xxxxxxxxxx"";
                }
            }
            in.close();
            return id;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",False
900712,12909291,621362,"    public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.setContentType(s_contentType);
        response.setHeader(""Cache-control"", ""no-cache"");
        InputStream graphStream = getGraphStream(request);
        OutputStream out = getOutputStream(response);
        IOUtils.copy(graphStream, out);
        out.flush();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900713,13845913,10271560,"    public synchronized boolean copyTmpDataFile(String fpath) throws IOException {
        if (tmpDataOutput != null) tmpDataOutput.close();
        tmpDataOutput = null;
        if (tmpDataFile == null) return false;
        File nfp = new File(fpath);
        if (nfp.exists()) nfp.delete();
        FileInputStream src = new FileInputStream(tmpDataFile);
        FileOutputStream dst = new FileOutputStream(nfp);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = src.read(buffer)) != -1) dst.write(buffer, 0, bytesRead);
        src.close();
        dst.close();
        return true;
    }
","    private void processStylesheetFile() {
        InputStream in = null;
        OutputStream out = null;
        try {
            String filename;
            if (line.hasOption(""stylesheetfile"")) {
                filename = line.getOptionValue(""stylesheetfile"");
                in = new FileInputStream(filename);
                filename = filename.replace('\\', '/');
                filename = filename.substring(filename.lastIndexOf('/') + 1);
            } else {
                ClassLoader cl = this.getClass().getClassLoader();
                filename = ""stylesheet.css"";
                in = cl.getResourceAsStream(RESOURCE_PKG + ""/stylesheet.css"");
            }
            baseProperties.setProperty(""stylesheetfilename"", filename);
            File outFile = new File(outputDir, filename);
            if (LOG.isInfoEnabled()) {
                LOG.info(""Processing generated file "" + outFile.getAbsolutePath());
            }
            out = new FileOutputStream(outFile);
            IOUtils.copy(in, out);
        } catch (FileNotFoundException e) {
            LOG.error(e.getMessage(), e);
        } catch (IOException e) {
            LOG.error(e.getMessage(), e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                }
            }
        }
    }
",True
900714,658771,16851954,"    public static void main(String[] args) throws Exception {
        String codecClassname = args[0];
        Class<?> codecClass = Class.forName(codecClassname);
        Configuration conf = new Configuration();
        CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);
        CompressionOutputStream out = codec.createOutputStream(System.out);
        IOUtils.copyBytes(System.in, out, 4096, false);
        out.finish();
    }
","    @Test
    public void testTrainingQuickprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_QUICKPROP);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
",True
900715,22423727,19002330,"    public void copyFile(String source_file_path, String destination_file_path) {
        FileWriter fw = null;
        FileReader fr = null;
        BufferedReader br = null;
        BufferedWriter bw = null;
        File source = null;
        try {
            fr = new FileReader(source_file_path);
            fw = new FileWriter(destination_file_path);
            br = new BufferedReader(fr);
            bw = new BufferedWriter(fw);
            source = new File(source_file_path);
            int fileLength = (int) source.length();
            char charBuff[] = new char[fileLength];
            while (br.read(charBuff, 0, fileLength) != -1) bw.write(charBuff, 0, fileLength);
        } catch (FileNotFoundException fnfe) {
            System.out.println(source_file_path + "" does not exist!"");
        } catch (IOException ioe) {
            System.out.println(""Error reading/writing files!"");
        } finally {
            try {
                if (br != null) br.close();
                if (bw != null) bw.close();
            } catch (IOException ioe) {
            }
        }
    }
","    public static void copyFile(File src, File dst) throws ResourceNotFoundException, ParseErrorException, Exception {
        if (src.getAbsolutePath().endsWith("".vm"")) {
            copyVMFile(src, dst.getAbsolutePath().substring(0, dst.getAbsolutePath().lastIndexOf("".vm"")));
        } else {
            FileInputStream fIn;
            FileOutputStream fOut;
            FileChannel fIChan, fOChan;
            long fSize;
            MappedByteBuffer mBuf;
            fIn = new FileInputStream(src);
            fOut = new FileOutputStream(dst);
            fIChan = fIn.getChannel();
            fOChan = fOut.getChannel();
            fSize = fIChan.size();
            mBuf = fIChan.map(FileChannel.MapMode.READ_ONLY, 0, fSize);
            fOChan.write(mBuf);
            fIChan.close();
            fIn.close();
            fOChan.close();
            fOut.close();
        }
    }
",True
900716,13883878,10806987,"        PathElement(String path) throws MaxError {
            this.path = path;
            if (path.startsWith(""http:"")) {
                try {
                    url = new URL(path);
                    HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    con.setRequestMethod(""HEAD"");
                    valid = (con.getResponseCode() == HttpURLConnection.HTTP_OK);
                } catch (Exception e) {
                    valid = false;
                }
            } else {
                if (path.startsWith(""jmax:"")) file = new File(Registry.resolveJMaxURI(path)); else file = new File(path);
                valid = file.exists();
            }
        }
","    public final Matrix3D<E> read(final URL url) throws IOException {
        if (url == null) {
            throw new IllegalArgumentException(""url must not be null"");
        }
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
            return read(inputStream);
        } catch (IOException e) {
            throw e;
        } finally {
            MatrixIOUtils.closeQuietly(inputStream);
        }
    }
",False
900717,10178931,13999345,"    public String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    private void writeFile(String name, URL url) throws IOException {
        Location location = resourcesHome.resolve(name);
        InputStream input = url.openStream();
        OutputStream output = location.getOutputStream();
        try {
            byte buf[] = new byte[1024];
            int read;
            while (true) {
                read = input.read(buf);
                if (read == -1) break;
                output.write(buf, 0, read);
            }
        } finally {
            try {
                input.close();
            } finally {
                output.close();
            }
        }
    }
",False
900718,18349315,14075761,"    public static boolean copyFile(File from, File to, byte[] buf) {
        if (buf == null) buf = new byte[BUFFER_SIZE];
        FileInputStream from_s = null;
        FileOutputStream to_s = null;
        try {
            from_s = new FileInputStream(from);
            to_s = new FileOutputStream(to);
            for (int bytesRead = from_s.read(buf); bytesRead != -1; bytesRead = from_s.read(buf)) to_s.write(buf, 0, bytesRead);
            from_s.close();
            from_s = null;
            to_s.getFD().sync();
            to_s.close();
            to_s = null;
        } catch (IOException ioe) {
            return false;
        } finally {
            if (from_s != null) {
                try {
                    from_s.close();
                } catch (IOException ioe) {
                }
            }
            if (to_s != null) {
                try {
                    to_s.close();
                } catch (IOException ioe) {
                }
            }
        }
        return true;
    }
","    private static String md5(String digest, String data) throws IOException {
        MessageDigest messagedigest;
        try {
            messagedigest = MessageDigest.getInstance(digest);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        messagedigest.update(data.getBytes(""ISO-8859-1""));
        byte[] bytes = messagedigest.digest();
        StringBuilder stringbuffer = new StringBuilder(bytes.length * 2);
        for (int j = 0; j < bytes.length; j++) {
            int k = bytes[j] >>> 4 & 0x0f;
            stringbuffer.append(hexChars[k]);
            k = bytes[j] & 0x0f;
            stringbuffer.append(hexChars[k]);
        }
        return stringbuffer.toString();
    }
",False
900719,480017,14899566,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public void createZip(File zipFileName, Vector<File> selected) {
        try {
            byte[] buffer = new byte[4096];
            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096));
            out.setLevel(Deflater.BEST_COMPRESSION);
            out.setMethod(ZipOutputStream.DEFLATED);
            for (int i = 0; i < selected.size(); i++) {
                FileInputStream in = new FileInputStream(selected.get(i));
                String file = selected.get(i).getPath();
                if (file.indexOf(""\\"") != -1) file = file.substring(file.lastIndexOf(fs) + 1, file.length());
                ZipEntry ze = new ZipEntry(file);
                out.putNextEntry(ze);
                int len;
                while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len);
                out.closeEntry();
                in.close();
                selected.get(i).delete();
            }
            out.close();
        } catch (IllegalArgumentException iae) {
            iae.printStackTrace();
        } catch (FileNotFoundException fnfe) {
            fnfe.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",True
900720,967161,2324866,"    private static FacesBean.Type _createType() {
        try {
            ClassLoader cl = _getClassLoader();
            URL url = cl.getResource(""META-INF/faces-bean-type.properties"");
            if (url != null) {
                Properties properties = new Properties();
                InputStream is = url.openStream();
                try {
                    properties.load(is);
                    String className = (String) properties.get(UIXComponentBase.class.getName());
                    return (FacesBean.Type) cl.loadClass(className).newInstance();
                } finally {
                    is.close();
                }
            }
        } catch (Exception e) {
            _LOG.severe(""CANNOT_LOAD_TYPE_PROPERTIES"", e);
        }
        return new FacesBean.Type();
    }
","    public SpreadSheetFrame(FileManager owner, File file, Delimiter delim) {
        super(owner, file.getPath());
        JPanel pane = new JPanel(new BorderLayout());
        super.contentPane.add(pane);
        this.tableModel = new BigTableModel(file, delim);
        this.table = new JTable(tableModel);
        this.table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.tableModel.setTable(this.table);
        pane.add(new JScrollPane(this.table));
        addInternalFrameListener(new InternalFrameAdapter() {

            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                tableModel.close();
            }
        });
        JMenu menu = new JMenu(""Tools"");
        getJMenuBar().add(menu);
        menu.add(new AbstractAction(""NCBI"") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile(""[ ]"");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(""/home/lindenb/jeter.txt.gz""))));
                    String line = null;
                    URL url = new URL(""http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(""db=snp&retmode=xml"");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith(""rs"")) continue;
                        wr.write(""&id="" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
        });
    }
",False
900721,19279420,21337941,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        final FileManager fmanager = FileManager.getFileManager(request, leechget);
        ServletFileUpload upload = new ServletFileUpload();
        FileItemIterator iter;
        try {
            iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                InputStream stream = item.openStream();
                if (!item.isFormField()) {
                    final FileObject file = fmanager.getFile(name);
                    if (!file.exists()) {
                        IOUtils.copyLarge(stream, file.getContent().getOutputStream());
                    }
                }
            }
        } catch (FileUploadException e1) {
            e1.printStackTrace();
        }
    }
","    public static void main(String[] argv) throws IOException {
        int i;
        for (i = 0; i < argv.length; i++) {
            if (argv[i].charAt(0) != '-') break;
            ++i;
            switch(argv[i - 1].charAt(1)) {
                case 'b':
                    try {
                        flag_predict_probability = (atoi(argv[i]) != 0);
                    } catch (NumberFormatException e) {
                        exit_with_help();
                    }
                    break;
                default:
                    System.err.printf(""unknown option: -%d%n"", argv[i - 1].charAt(1));
                    exit_with_help();
                    break;
            }
        }
        if (i >= argv.length || argv.length <= i + 2) {
            exit_with_help();
        }
        BufferedReader reader = null;
        Writer writer = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET));
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET));
            Model model = Linear.loadModel(new File(argv[i + 1]));
            doPredict(reader, writer, model);
        } finally {
            closeQuietly(reader);
            closeQuietly(writer);
        }
    }
",True
900722,23537682,10923940,"    public static byte[] readResource(Class owningClass, String resourceName) {
        final URL url = getResourceUrl(owningClass, resourceName);
        if (null == url) {
            throw new MissingResourceException(owningClass.toString() + "" key '"" + resourceName + ""'"", owningClass.toString(), resourceName);
        }
        LOG.info(""Loading resource '"" + url.toExternalForm() + ""' "" + ""from "" + owningClass);
        final InputStream inputStream;
        try {
            inputStream = url.openStream();
        } catch (IOException e) {
            throw new RuntimeException(""Should not happpen"", e);
        }
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            IOUtils.copy(inputStream, outputStream);
        } catch (IOException e) {
            throw new RuntimeException(""Should not happpen"", e);
        }
        return outputStream.toByteArray();
    }
","    private void request() {
        try {
            connection = (HttpURLConnection) new URL(url).openConnection();
            if (isCometConnection) {
                connection.setReadTimeout(0);
            } else {
                connection.setReadTimeout(30000);
            }
            connection.setInstanceFollowRedirects(false);
            connection.setDoInput(true);
            connection.setRequestMethod(method);
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 GTB5"");
            if (""post"".equalsIgnoreCase(method)) {
                connection.setDoOutput(true);
                connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            }
            if (user != null) {
                String auth = user + "":"" + (password != null ? password : """");
                String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes());
                connection.setRequestProperty(""Authorization"", ""Basic "" + base64Auth);
            }
            for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) {
                String key = (String) iter.next();
                connection.setRequestProperty(key, (String) headers.get(key));
            }
            connection.setUseCaches(false);
            if (checkAbort()) return;
            if (""post"".equalsIgnoreCase(method)) {
                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());
                activeOS = dos;
                if (content != null) {
                    dos.writeBytes(content);
                }
                if (checkAbort()) return;
                dos.flush();
                dos.close();
                activeOS = null;
            }
            if (checkAbort()) return;
            InputStream is = null;
            try {
                is = connection.getInputStream();
            } catch (IOException e) {
                if (checkAbort()) return;
                readyState = 4;
                if (onreadystatechange != null) {
                    onreadystatechange.onLoaded();
                }
                connection = null;
                readyState = 0;
                return;
            }
            activeIS = is;
            if (readyState < 2) {
                readyState = 2;
                status = connection.getResponseCode();
                statusText = connection.getResponseMessage();
                if (onreadystatechange != null) {
                    onreadystatechange.onSent();
                }
            }
            receiving = initializeReceivingMonitor();
            ByteArrayOutputStream baos = new ByteArrayOutputStream(10240);
            byte[] buffer = new byte[10240];
            int read;
            while (!toAbort && (read = is.read(buffer)) != -1) {
                if (checkAbort()) return;
                if (readyState != 3) {
                    readyState = 3;
                    if (onreadystatechange != null) {
                        onreadystatechange.onReceiving();
                    }
                }
                boolean received = false;
                if (receiving != null) {
                    received = receiving.receiving(baos, buffer, 0, read);
                }
                if (!received) {
                    baos.write(buffer, 0, read);
                }
            }
            if (checkAbort()) return;
            is.close();
            activeIS = null;
            responseText = null;
            String type = connection.getHeaderField(""Content-Type"");
            if (type != null) {
                String charset = null;
                String lowerType = type.toLowerCase();
                int idx = lowerType.indexOf(""charset="");
                if (idx != -1) {
                    charset = type.substring(idx + 8);
                } else {
                    idx = lowerType.indexOf(""/xml"");
                    if (idx != -1) {
                        String tmp = baos.toString();
                        Matcher matcher = Pattern.compile(""<\\?.*encoding\\s*=\\s*[\'\""]([^'\""]*)[\'\""].*\\?>"", Pattern.MULTILINE).matcher(tmp);
                        if (matcher.find()) {
                            charset = matcher.group(1);
                        } else {
                            responseText = tmp;
                        }
                    } else {
                        idx = lowerType.indexOf(""html"");
                        if (idx != -1) {
                            String tmp = baos.toString();
                            Matcher matcher = Pattern.compile(""<meta.*content\\s*=\\s*[\'\""][^'\""]*charset\\s*=\\s*([^'\""]*)\\s*[\'\""].*>"", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE).matcher(tmp);
                            if (matcher.find()) {
                                charset = matcher.group(1);
                            } else {
                                responseText = tmp;
                            }
                        }
                    }
                }
                if (charset != null) {
                    try {
                        responseText = baos.toString(charset);
                    } catch (UnsupportedEncodingException e) {
                    }
                }
            }
            if (responseText == null) {
                try {
                    responseText = baos.toString(""iso-8859-1"");
                } catch (UnsupportedEncodingException e) {
                    responseText = baos.toString();
                }
            }
            readyState = 4;
            if (onreadystatechange != null) {
                onreadystatechange.onLoaded();
            }
            connection.disconnect();
            readyState = 0;
        } catch (Exception e) {
            if (checkAbort()) return;
            e.printStackTrace();
            readyState = 4;
            if (onreadystatechange != null) {
                onreadystatechange.onLoaded();
            }
            connection = null;
            readyState = 0;
        }
    }
",False
900723,16586894,5428177,"    public void test3() throws FileNotFoundException, IOException {
        Decoder decoder1 = new MP3Decoder(new FileInputStream(""/home/marc/tmp/test1.mp3""));
        Decoder decoder2 = new OggDecoder(new FileInputStream(""/home/marc/tmp/test1.ogg""));
        FileOutputStream out = new FileOutputStream(""/home/marc/tmp/test.pipe"");
        IOUtils.copy(decoder1, out);
        IOUtils.copy(decoder2, out);
    }
","    public void invoke() throws IOException {
        String[] command = new String[files.length + options.length + 2];
        command[0] = chmod;
        System.arraycopy(options, 0, command, 1, options.length);
        command[1 + options.length] = perms;
        for (int i = 0; i < files.length; i++) {
            File file = files[i];
            command[2 + options.length + i] = file.getAbsolutePath();
        }
        Process p = Runtime.getRuntime().exec(command);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        if (p.exitValue() != 0) {
            StringWriter writer = new StringWriter();
            IOUtils.copy(p.getErrorStream(), writer);
            throw new IOException(""Unable to chmod files: "" + writer.toString());
        }
    }
",True
900724,13514558,854534,"    public void load(String filename) throws VisbardException {
        String defaultFilename = VisbardMain.getSettingsDir() + File.separator + DEFAULT_SETTINGS_FILE;
        File defaultFile = new File(defaultFilename);
        InputStream settingsInStreamFromFile = null;
        try {
            sLogger.info(""Loading settings from : "" + defaultFilename);
            settingsInStreamFromFile = new FileInputStream(defaultFile);
        } catch (FileNotFoundException fnf) {
            sLogger.info(""Unable to load custom settings from user's settings directory ("" + fnf.getMessage() + ""); reverting to default settings"");
            try {
                InputStream settingsInStreamFromJar = VisbardMain.class.getClassLoader().getResourceAsStream(filename);
                FileOutputStream settingsOutStream = new FileOutputStream(defaultFile);
                int c;
                while ((c = settingsInStreamFromJar.read()) != -1) settingsOutStream.write(c);
                settingsInStreamFromJar.close();
                settingsOutStream.close();
                settingsInStreamFromFile = new FileInputStream(defaultFile);
            } catch (IOException ioe) {
                sLogger.warn(""Unable to copy default settings to user's settings directory ("" + ioe.getMessage() + ""); using default settings from ViSBARD distribution package"");
                settingsInStreamFromFile = VisbardMain.class.getClassLoader().getResourceAsStream(filename);
            }
        }
        this.processSettingsFile(settingsInStreamFromFile, filename);
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",False
900725,14152188,12909291,"    public static boolean filecopy(final File source, final File target) {
        boolean out = false;
        if (source.isDirectory() || !source.exists() || target.isDirectory() || source.equals(target)) return false;
        try {
            target.getParentFile().mkdirs();
            target.createNewFile();
            FileChannel sourceChannel = new FileInputStream(source).getChannel();
            try {
                FileChannel targetChannel = new FileOutputStream(target).getChannel();
                try {
                    targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
                    out = true;
                } finally {
                    targetChannel.close();
                }
            } finally {
                sourceChannel.close();
            }
        } catch (IOException e) {
            out = false;
        }
        return out;
    }
","    public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.setContentType(s_contentType);
        response.setHeader(""Cache-control"", ""no-cache"");
        InputStream graphStream = getGraphStream(request);
        OutputStream out = getOutputStream(response);
        IOUtils.copy(graphStream, out);
        out.flush();
    }
",True
900726,16289496,384844,"    public static void reset() throws Exception {
        Session session = DataStaticService.getHibernateSessionFactory().openSession();
        try {
            Connection connection = session.connection();
            try {
                Statement statement = connection.createStatement();
                try {
                    statement.executeUpdate(""delete from Post"");
                    connection.commit();
                } finally {
                    statement.close();
                }
            } catch (HibernateException e) {
                connection.rollback();
                throw new Exception(e);
            } catch (SQLException e) {
                connection.rollback();
                throw new Exception(e);
            }
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            session.close();
        }
    }
","    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente = '"" + id + ""'"";
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }
",True
900727,3236017,15571542,"    public static void copyFile(String source, String dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(new File(source)).getChannel();
            out = new FileOutputStream(new File(dest)).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900728,5951609,11650020,"    public void testCryptHash() {
        Log.v(""Test"", ""[*] testCryptHash()"");
        String testStr = ""Hash me"";
        byte messageDigest[];
        MessageDigest digest = null;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest.digest(testStr.getBytes());
            digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(testStr.getBytes());
            messageDigest = digest.digest();
            digest = null;
            digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(imei.getBytes());
            messageDigest = digest.digest();
            hashedImei = this.toHex(messageDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
","    public static String encrypt(String message) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(message.getBytes());
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(digest.digest());
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return null;
        }
    }
",True
900729,19549575,9068428,"    protected InputStream callApiGet(String apiUrl, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
","    public static String getTextFileFromURL(String urlName) {
        try {
            StringBuffer textFile = new StringBuffer("""");
            String line = null;
            URL url = new URL(urlName);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) textFile = textFile.append(line + ""\n"");
            reader.close();
            return textFile.toString();
        } catch (Exception e) {
            Debug.signal(Debug.ERROR, null, ""Failed to open "" + urlName + "", exception "" + e);
            return null;
        }
    }
",True
900730,13098121,11018792,"    private URLConnection openConnection(final URL url) throws IOException {
        try {
            return (URLConnection) AccessController.doPrivileged(new PrivilegedExceptionAction() {

                public Object run() throws IOException {
                    return url.openConnection();
                }
            });
        } catch (PrivilegedActionException e) {
            throw (IOException) e.getException();
        }
    }
","    public static String encryptePassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(Constants.ALGORITHM);
        switch(passwdenc) {
            case 1:
                md.update((md5key + encryptedPassword).getBytes(""8859_1""));
                break;
            case 2:
                md.update((encryptedPassword + md5key).getBytes(""8859_1""));
                break;
            default:
                return null;
        }
        return new String(md.digest());
    }
",False
900731,16588230,22447616,"    public static void main(String[] args) throws IOException {
        MSPack pack = new MSPack(new FileInputStream(args[0]));
        String[] files = pack.getFileNames();
        for (int i = 0; i < files.length; i++) System.out.println(i + "": "" + files[i] + "": "" + pack.getLengths()[i]);
        System.out.println(""Writing "" + files[files.length - 1]);
        InputStream is = pack.getInputStream(files.length - 1);
        OutputStream os = new FileOutputStream(files[files.length - 1]);
        int n;
        byte[] buf = new byte[4096];
        while ((n = is.read(buf)) != -1) os.write(buf, 0, n);
        os.close();
        is.close();
    }
","    public Usuario insertUsuario(IUsuario usuario) throws SQLException {
        Connection conn = null;
        String insert = ""insert into Usuario (idusuario, nome, email, telefone, cpf, login, senha) "" + ""values "" + ""(nextval('seq_usuario'), '"" + usuario.getNome() + ""', '"" + usuario.getEmail() + ""', "" + ""'"" + usuario.getTelefone() + ""', '"" + usuario.getCpf() + ""', '"" + usuario.getLogin() + ""', '"" + usuario.getSenha() + ""')"";
        try {
            conn = connectionFactory.getConnection(true);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            Integer result = stmt.executeUpdate(insert);
            if (result == 1) {
                String sqlSelect = ""select last_value from seq_usuario"";
                ResultSet rs = stmt.executeQuery(sqlSelect);
                while (rs.next()) {
                    usuario.setIdUsuario(rs.getInt(""last_value""));
                }
                if (usuario instanceof Requerente) {
                    RequerenteDAO requerenteDAO = new RequerenteDAO();
                    requerenteDAO.insertRequerente((Requerente) usuario, conn);
                } else if (usuario instanceof RecursoHumano) {
                    RecursoHumanoDAO recursoHumanoDAO = new RecursoHumanoDAO();
                    recursoHumanoDAO.insertRecursoHumano((RecursoHumano) usuario, conn);
                }
            }
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
        return null;
    }
",False
900732,12048547,916271,"    public static void importDB(String input, String output) {
        try {
            Class.forName(""org.sqlite.JDBC"");
            String fileName = output + File.separator + G.databaseName;
            File dataBase = new File(fileName);
            if (!dataBase.exists()) {
                G.conn = DriverManager.getConnection(""jdbc:sqlite:"" + fileName);
                createTablesDB();
            } else G.conn = DriverManager.getConnection(""jdbc:sqlite:"" + fileName);
            long tiempoInicio = System.currentTimeMillis();
            String directoryPath = input + File.separator;
            File myDirectory = new File(directoryPath);
            String[] list = myDirectory.list();
            File fileXML = new File(input + File.separator + G.imagesName);
            if (!fileXML.exists()) {
                JOptionPane.showMessageDialog(null, ""No se encuentra el fichero XML"", ""Error"", JOptionPane.ERROR_MESSAGE);
            } else {
                SAXBuilder builder = new SAXBuilder(false);
                Document docXML = builder.build(fileXML);
                Element root = docXML.getRootElement();
                List images = root.getChildren(""image"");
                Iterator j = images.iterator();
                List<Element> globalLanguages = root.getChild(""languages"").getChildren(""language"");
                Iterator<Element> langsI = globalLanguages.iterator();
                HashMap<String, Integer> languageIDs = new HashMap<String, Integer>();
                HashMap<String, Integer> typeIDs = new HashMap<String, Integer>();
                Element e;
                int i = 0;
                int contTypes = 0;
                int contImages = 0;
                while (langsI.hasNext()) {
                    e = langsI.next();
                    languageIDs.put(e.getText(), i);
                    PreparedStatement stmt = G.conn.prepareStatement(""INSERT OR IGNORE INTO language (id,name) VALUES (?,?)"");
                    stmt.setInt(1, i);
                    stmt.setString(2, e.getText());
                    stmt.executeUpdate();
                    stmt.close();
                    i++;
                }
                G.conn.setAutoCommit(false);
                while (j.hasNext()) {
                    Element image = (Element) j.next();
                    String id = image.getAttributeValue(""id"");
                    List languages = image.getChildren(""language"");
                    Iterator k = languages.iterator();
                    if (exists(list, id)) {
                        String pathSrc = directoryPath.concat(id);
                        String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator;
                        String folder = output + File.separator + id.substring(0, 1).toUpperCase();
                        String pathDstTmp = pathDst.concat(id);
                        String idTmp = id;
                        File testFile = new File(pathDstTmp);
                        int cont = 1;
                        while (testFile.exists()) {
                            idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length());
                            pathDstTmp = pathDst + idTmp;
                            testFile = new File(pathDstTmp);
                            cont++;
                        }
                        pathDst = pathDstTmp;
                        id = idTmp;
                        File newDirectoryFolder = new File(folder);
                        if (!newDirectoryFolder.exists()) {
                            newDirectoryFolder.mkdirs();
                        }
                        try {
                            FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                            FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                            srcChannel.close();
                            dstChannel.close();
                        } catch (IOException exc) {
                            System.out.println(exc.toString());
                        }
                        while (k.hasNext()) {
                            Element languageElement = (Element) k.next();
                            String language = languageElement.getAttributeValue(""id"");
                            List words = languageElement.getChildren(""word"");
                            Iterator l = words.iterator();
                            while (l.hasNext()) {
                                Element wordElement = (Element) l.next();
                                String type = wordElement.getAttributeValue(""type"");
                                if (!typeIDs.containsKey(type)) {
                                    typeIDs.put(type, contTypes);
                                    PreparedStatement stmt = G.conn.prepareStatement(""INSERT OR IGNORE INTO type (id,name) VALUES (?,?)"");
                                    stmt.setInt(1, contTypes);
                                    stmt.setString(2, type);
                                    stmt.executeUpdate();
                                    stmt.close();
                                    contTypes++;
                                }
                                PreparedStatement stmt = G.conn.prepareStatement(""INSERT OR IGNORE INTO main (word, idL, idT, name, nameNN) VALUES (?,?,?,?,?)"");
                                stmt.setString(1, wordElement.getText().toLowerCase());
                                stmt.setInt(2, languageIDs.get(language));
                                stmt.setInt(3, typeIDs.get(type));
                                stmt.setString(4, id);
                                stmt.setString(5, id);
                                stmt.executeUpdate();
                                stmt.close();
                                if (contImages == 5000) {
                                    G.conn.commit();
                                    contImages = 0;
                                } else contImages++;
                            }
                        }
                    } else {
                    }
                }
                G.conn.setAutoCommit(true);
                G.conn.close();
                long totalTiempo = System.currentTimeMillis() - tiempoInicio;
                System.out.println(""El tiempo total es :"" + totalTiempo / 1000 + "" segundos"");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900733,18960732,19394412,"    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
","    public static long checksum(IFile file) throws IOException {
        InputStream contents;
        try {
            contents = file.getContents();
        } catch (CoreException e) {
            throw new CausedIOException(""Failed to calculate checksum."", e);
        }
        CheckedInputStream in = new CheckedInputStream(contents, new Adler32());
        try {
            IOUtils.copy(in, new NullOutputStream());
        } catch (IOException e) {
            throw new CausedIOException(""Failed to calculate checksum."", e);
        } finally {
            IOUtils.closeQuietly(in);
        }
        return in.getChecksum().getValue();
    }
",True
900734,12524253,7119938,"    public DialogSongList(JFrame frame) {
        super(frame, ""Menu_SongList"", ""songList"");
        setMinimumSize(new Dimension(400, 200));
        JPanel panel, spanel;
        Container contentPane;
        (contentPane = getContentPane()).add(songSelector = new SongSelector(configKey, null, true));
        songSelector.setSelectionAction(new Runnable() {

            public void run() {
                final Item<URL, MidiFileInfo> item = songSelector.getSelectedInfo();
                if (item != null) {
                    try {
                        selection = new File(item.getKey().toURI());
                        author.setEnabled(true);
                        title.setEnabled(true);
                        difficulty.setEnabled(true);
                        save.setEnabled(true);
                        final MidiFileInfo info = item.getValue();
                        author.setText(info.getAuthor());
                        title.setText(info.getTitle());
                        Util.selectKey(difficulty, info.getDifficulty());
                        return;
                    } catch (Exception e) {
                    }
                }
                selection = null;
                author.setEnabled(false);
                title.setEnabled(false);
                difficulty.setEnabled(false);
                save.setEnabled(false);
            }
        });
        contentPane.add(panel = new JPanel(), BorderLayout.SOUTH);
        panel.setLayout(new BorderLayout());
        JScrollPane scrollPane;
        panel.add(scrollPane = new JScrollPane(spanel = new JPanel()), BorderLayout.NORTH);
        scrollPane.setPreferredSize(new Dimension(0, 60));
        Util.addLabeledComponent(spanel, ""Lbl_Author"", author = new JTextField(10));
        Util.addLabeledComponent(spanel, ""Lbl_Title"", title = new JTextField(14));
        Util.addLabeledComponent(spanel, ""Lbl_Difficulty"", difficulty = new JComboBox());
        difficulty.addItem(new Item<Byte, String>((byte) -1, """"));
        for (Map.Entry<Byte, String> entry : SongSelector.DIFFICULTIES.entrySet()) {
            final String value = entry.getValue();
            difficulty.addItem(new Item<Byte, String>(entry.getKey(), Util.getMsg(value, value), value));
        }
        spanel.add(save = new JButton());
        Util.updateButtonText(save, ""Save"");
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File selected = MidiSong.setMidiFileInfo(selection, author.getText(), title.getText(), getAsByte(difficulty));
                SongSelector.refresh();
                try {
                    songSelector.setSelected(selected == null ? null : selected.toURI().toURL());
                } catch (MalformedURLException ex) {
                }
            }
        });
        author.setEnabled(false);
        title.setEnabled(false);
        difficulty.setEnabled(false);
        save.setEnabled(false);
        JButton button;
        panel.add(spanel = new JPanel(), BorderLayout.WEST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Import"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File inputFile = KeyboardHero.midiFile();
                try {
                    if (inputFile == null) return;
                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));
                    if (dir.exists()) {
                        if (!dir.isDirectory()) {
                            Util.error(Util.getMsg(""Err_MidiFilesDirNotDirectory""), dir.getParent());
                            return;
                        }
                    } else if (!dir.mkdirs()) {
                        Util.error(Util.getMsg(""Err_CouldntMkDir""), dir.getParent());
                        return;
                    }
                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());
                    if (!outputFile.exists() || KeyboardHero.confirm(""Que_FileExistsOverwrite"")) {
                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();
                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());
                    }
                } catch (Exception ex) {
                    Util.getMsg(Util.getMsg(""Err_CouldntImportSong""), ex.toString());
                }
                SongSelector.refresh();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Delete"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (KeyboardHero.confirm(Util.getMsg(""Que_SureToDelete""))) {
                    try {
                        new File(songSelector.getSelectedFile().toURI()).delete();
                    } catch (Exception ex) {
                        Util.error(Util.getMsg(""Err_CouldntDeleteFile""), ex.toString());
                    }
                    SongSelector.refresh();
                }
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.CENTER);
        spanel.setLayout(new FlowLayout());
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Close"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Play"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                Game.newGame(songSelector.getSelectedFile());
                close();
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.EAST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Refresh"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                SongSelector.refresh();
            }
        });
        getRootPane().setDefaultButton(button);
        instance = this;
    }
","    public void putFile(CompoundName file, FileInputStream fileInput) throws IOException {
        File fullDir = new File(REMOTE_BASE_DIR.getCanonicalPath());
        for (int i = 0; i < file.size() - 1; i++) fullDir = new File(fullDir, file.get(i));
        fullDir.mkdirs();
        File outputFile = new File(fullDir, file.get(file.size() - 1));
        FileOutputStream outStream = new FileOutputStream(outputFile);
        for (int byteIn = fileInput.read(); byteIn != -1; byteIn = fileInput.read()) outStream.write(byteIn);
        fileInput.close();
        outStream.close();
    }
",True
900735,17386977,21273059,"    private void checkUrl(URL url) throws IOException {
        File urlFile = new File(url.getFile());
        assertEquals(file.getCanonicalPath(), urlFile.getCanonicalPath());
        System.out.println(""Using url "" + url);
        InputStream openStream = url.openStream();
        assertNotNull(openStream);
    }
","    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }
",False
900736,17944691,7872660,"    public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) {
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                    final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                    final HttpClient httpClient = new DefaultHttpClient();
                    final HttpPost request = new HttpPost(UPLOADSCRIPT_URL);
                    final MultipartEntity requestEntity = new MultipartEntity();
                    requestEntity.addPart(""gpxfile"", new InputStreamBody(gpxInputStream, """" + System.currentTimeMillis() + "".gpx""));
                    httpClient.getParams().setBooleanParameter(""http.protocol.expect-continue"", false);
                    request.setEntity(requestEntity);
                    final HttpResponse response = httpClient.execute(request);
                    final int status = response.getStatusLine().getStatusCode();
                    if (status != HttpStatus.SC_OK) {
                        logger.error(""GPXUploader"", ""status != HttpStatus.SC_OK"");
                    } else {
                        final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()));
                        final char[] buf = new char[8 * 1024];
                        int read;
                        final StringBuilder sb = new StringBuilder();
                        while ((read = r.read(buf)) != -1) sb.append(buf, 0, read);
                        logger.debug(""GPXUploader"", ""Response: "" + sb.toString());
                    }
                } catch (final Exception e) {
                }
            }
        }).start();
    }
","    private static boolean genCustomerLocationsFileAndCustomerIndexFile(String completePath, String masterFile, String CustLocationsFileName, String CustIndexFileName) {
        try {
            TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1);
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustLocationsFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            for (int i = 1; i <= totalNoDataRows; i++) {
                ByteBuffer mappedBuffer = ByteBuffer.allocate(7);
                inC.read(mappedBuffer);
                mappedBuffer.position(0);
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                mappedBuffer.clear();
                if (CustInfoHash.containsKey(customer)) {
                    TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer);
                    locations.add(i);
                    CustInfoHash.put(customer, locations);
                } else {
                    TIntArrayList locations = new TIntArrayList();
                    locations.add(i);
                    CustInfoHash.put(customer, locations);
                }
            }
            int[] customers = CustInfoHash.keys();
            Arrays.sort(customers);
            int count = 1;
            for (int i = 0; i < customers.length; i++) {
                int customer = customers[i];
                TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer);
                int noRatingsForCust = locations.size();
                ByteBuffer outBuf1 = ByteBuffer.allocate(12);
                outBuf1.putInt(customer);
                outBuf1.putInt(count);
                outBuf1.putInt(count + noRatingsForCust - 1);
                outBuf1.flip();
                outC1.write(outBuf1);
                count += noRatingsForCust;
                for (int j = 0; j < locations.size(); j++) {
                    ByteBuffer outBuf2 = ByteBuffer.allocate(4);
                    outBuf2.putInt(locations.get(j));
                    outBuf2.flip();
                    outC2.write(outBuf2);
                }
            }
            inC.close();
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",False
900737,1008324,653395,"    public void copyHashAllFilesToDirectory(String baseDirStr, Hashtable newNamesTable, String destDirStr) throws Exception {
        if (baseDirStr.endsWith(sep)) {
            baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1);
        }
        if (destDirStr.endsWith(sep)) {
            destDirStr = destDirStr.substring(0, destDirStr.length() - 1);
        }
        FileUtils.getInstance().createDirectory(baseDirStr);
        if (null == newNamesTable) {
            newNamesTable = new Hashtable();
        }
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File baseDir = new File(baseDirStr);
        baseDir.mkdirs();
        if ((baseDir.exists()) && (baseDir.isDirectory())) {
            if (!newNamesTable.isEmpty()) {
                Enumeration enumFiles = newNamesTable.keys();
                while (enumFiles.hasMoreElements()) {
                    String newName = (String) enumFiles.nextElement();
                    String oldPathName = (String) newNamesTable.get(newName);
                    if ((newName != null) && (!"""".equals(newName)) && (oldPathName != null) && (!"""".equals(oldPathName))) {
                        String newPathFileName = destDirStr + sep + newName;
                        String oldPathFileName = baseDirStr + sep + oldPathName;
                        if (oldPathName.startsWith(sep)) {
                            oldPathFileName = baseDirStr + oldPathName;
                        }
                        File f = new File(oldPathFileName);
                        if ((f.exists()) && (f.isFile())) {
                            in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize);
                            out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize);
                            int readLen;
                            while ((readLen = in.read(dataBuff)) > 0) {
                                out.write(dataBuff, 0, readLen);
                            }
                            out.flush();
                            in.close();
                            out.close();
                        } else {
                        }
                    }
                }
            } else {
            }
        } else {
            throw new Exception(""Base (baseDirStr) dir not exist !"");
        }
    }
","    public static boolean downloadFile(String url, String destination) throws Exception {
        BufferedInputStream bi = null;
        BufferedOutputStream bo = null;
        File destfile;
        java.net.URL fileurl;
        fileurl = new java.net.URL(url);
        bi = new BufferedInputStream(fileurl.openStream());
        destfile = new File(destination);
        if (!destfile.createNewFile()) {
            destfile.delete();
            destfile.createNewFile();
        }
        bo = new BufferedOutputStream(new FileOutputStream(destfile));
        int readedbyte;
        while ((readedbyte = bi.read()) != -1) {
            bo.write(readedbyte);
        }
        bi.close();
        bo.close();
        return true;
    }
",False
900738,7663603,18488106,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new MyException(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException {
        InputSource source = new InputSource(inputUrl.openStream());
        Document logDoc = DomUtil.getNewDom();
        XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs);
        reader.parse(source);
        InputStream logStream = DomUtil.serializeToInputStream(logDoc, ""utf-8"");
        System.out.println(""Creating message file \"""" + messageFile.getAbsolutePath() + ""\""..."");
        OutputStream fos = new FileOutputStream(messageFile);
        IOUtils.copy(logStream, fos);
        return logDoc;
    }
",False
900739,19483244,16485992,"    public static void copyFile(String original, String destination) throws Exception {
        File original_file = new File(original);
        File destination_file = new File(destination);
        if (!original_file.exists()) throw new Exception(""File with path "" + original + "" does not exist."");
        if (destination_file.exists()) throw new Exception(""File with path "" + destination + "" already exists."");
        FileReader in = new FileReader(original_file);
        FileWriter out = new FileWriter(destination_file);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    private void sendBinaryFile(File file) throws IOException, CVSException {
        BufferedInputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            if (m_bCompressFiles) {
                GZIPOutputStream gzipOut = null;
                InputStream gzipIn = null;
                File gzipFile = null;
                try {
                    gzipFile = File.createTempFile(""javacvs"", ""tmp"");
                    gzipOut = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(gzipFile)));
                    int b;
                    while ((b = in.read()) != -1) gzipOut.write((byte) b);
                    gzipOut.close();
                    long gzipLength = gzipFile.length();
                    sendLine(""z"" + Long.toString(gzipLength));
                    gzipIn = new BufferedInputStream(new FileInputStream(gzipFile));
                    for (long i = 0; i < gzipLength; i++) {
                        b = gzipIn.read();
                        if (b == -1) throw new EOFException();
                        m_Out.write((byte) b);
                    }
                } finally {
                    if (gzipOut != null) gzipOut.close();
                    if (gzipIn != null) gzipIn.close();
                    if (gzipFile != null) gzipFile.delete();
                }
            } else {
                long nLength = file.length();
                sendLine(Long.toString(nLength));
                for (long i = 0; i < nLength; i++) {
                    int b = in.read();
                    if (b == -1) throw new EOFException();
                    m_Out.write((byte) b);
                }
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900740,3253024,10337387,"    private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, taos, absolute);
            }
        } else if ((!file.getName().endsWith("".tar"")) && (!file.getName().endsWith("".TAR""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            TarArchiveEntry tae = new TarArchiveEntry(filename);
            tae.setSize(file.length());
            taos.putArchiveEntry(tae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, taos);
            taos.closeArchiveEntry();
        }
    }
","    protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException {
        if (!dir.isDirectory()) throw new IllegalArgumentException(""Compress: not a directory:  "" + dir);
        String[] entries = dir.list();
        byte[] buffer = new byte[4096];
        int bytes_read;
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile));
        for (int i = 0; i < entries.length; i++) {
            File f = new File(dir, entries[i]);
            if (f.isDirectory()) continue;
            FileInputStream in = new FileInputStream(f);
            ZipEntry entry = new ZipEntry(f.getPath());
            out.putNextEntry(entry);
            while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
            in.close();
        }
        out.close();
    }
",True
900741,13964423,22186637,"    private String signMethod() {
        String str = API.SHARED_SECRET;
        Vector<String> v = new Vector<String>(parameters.keySet());
        Collections.sort(v);
        for (String key : v) {
            str += key + parameters.get(key);
        }
        MessageDigest m = null;
        try {
            m = MessageDigest.getInstance(""MD5"");
            m.update(str.getBytes(), 0, str.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    public static boolean processUrl(String urlPath, UrlLineHandler handler) {
        boolean ret = true;
        URL url;
        InputStream in = null;
        BufferedReader bin = null;
        try {
            url = new URL(urlPath);
            in = url.openStream();
            bin = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = bin.readLine()) != null) {
                if (!handler.process(line)) break;
            }
        } catch (IOException e) {
            ret = false;
        } finally {
            safelyClose(bin, in);
        }
        return ret;
    }
",False
900742,21456509,10934628,"    private HashMap<String, GCVote> getVotes(ArrayList<String> waypoints, boolean blnSleepBeforeDownload) {
        if (blnSleepBeforeDownload) {
            try {
                Thread.sleep(PACKET_SLEEP_TIME);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        final String strWaypoints = this.join(waypoints, "","");
        try {
            String strParameters = URLEncoder.encode(""waypoints"", ""UTF-8"") + ""="" + URLEncoder.encode(strWaypoints, ""UTF-8"");
            if (this.mstrUsername.length() > 0) {
                strParameters += ""&"" + URLEncoder.encode(""userName"", ""UTF-8"") + ""="" + URLEncoder.encode(this.mstrUsername, ""UTF-8"");
                if (this.mstrPassword.length() > 0) {
                    strParameters += ""&"" + URLEncoder.encode(""password"", ""UTF-8"") + ""="" + URLEncoder.encode(this.mstrPassword, ""UTF-8"");
                }
            }
            final URL url = new URL(BASE_URL_GET_VOTE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            final OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream());
            osw.write(strParameters);
            osw.flush();
            final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
            saxParserFactory.setValidating(false);
            saxParserFactory.setNamespaceAware(true);
            final SAXParser saxParser = saxParserFactory.newSAXParser();
            final XMLReader xmlReader = saxParser.getXMLReader();
            final GCVoteHandler gcVoteHandler = new GCVoteHandler();
            xmlReader.setContentHandler(gcVoteHandler);
            xmlReader.parse(new InputSource(new InputStreamReader(conn.getInputStream())));
            return gcVoteHandler.getVotes();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
","    public static void main(String[] args) {
        try {
            {
                byte[] bytes1 = { (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                byte[] bytes2 = { (byte) 99, (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                System.out.println(""Bytes 2,2,3,0,9 as Base64: "" + encodeBytes(bytes1));
                System.out.println(""Bytes 2,2,3,0,9 w/ offset: "" + encodeBytes(bytes2, 1, bytes2.length - 1));
                byte[] dbytes = decode(encodeBytes(bytes1));
                System.out.print(encodeBytes(bytes1) + "" decoded: "");
                for (int i = 0; i < dbytes.length; i++) System.out.print(dbytes[i] + (i < dbytes.length - 1 ? "","" : ""\n""));
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""test.gif.b64"");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                byte[] bytes = new byte[0];
                int b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[bytes.length + 1];
                    System.arraycopy(bytes, 0, temp, 0, bytes.length);
                    temp[bytes.length] = (byte) b;
                    bytes = temp;
                }
                b64is.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(bytes);
                javax.swing.JLabel jlabel = new javax.swing.JLabel(""Read from test.gif.b64"", iicon, 0);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""test.gif_out"");
                fos.write(bytes);
                fos.close();
                fis = new java.io.FileInputStream(""test.gif_out"");
                b64is = new Base64.InputStream(fis, ENCODE);
                byte[] ebytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[ebytes.length + 1];
                    System.arraycopy(ebytes, 0, temp, 0, ebytes.length);
                    temp[ebytes.length] = (byte) b;
                    ebytes = temp;
                }
                b64is.close();
                String s = new String(ebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                jframe = new javax.swing.JFrame();
                jframe.setTitle(""Read from test.gif_out"");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream(""test.gif.b64_out"");
                fos.write(ebytes);
                fis = new java.io.FileInputStream(""test.gif.b64_out"");
                b64is = new Base64.InputStream(fis, DECODE);
                byte[] edbytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[edbytes.length + 1];
                    System.arraycopy(edbytes, 0, temp, 0, edbytes.length);
                    temp[edbytes.length] = (byte) b;
                    edbytes = temp;
                }
                b64is.close();
                iicon = new javax.swing.ImageIcon(edbytes);
                jlabel = new javax.swing.JLabel(""Read from test.gif.b64_out"", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""test.gif_out"");
                byte[] rbytes = new byte[0];
                int b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rbytes.length + 1];
                    System.arraycopy(rbytes, 0, temp, 0, rbytes.length);
                    temp[rbytes.length] = (byte) b;
                    rbytes = temp;
                }
                fis.close();
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""test.gif.b64_out2"");
                Base64.OutputStream b64os = new Base64.OutputStream(fos, ENCODE);
                b64os.write(rbytes);
                b64os.close();
                fis = new java.io.FileInputStream(""test.gif.b64_out2"");
                byte[] rebytes = new byte[0];
                b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rebytes.length + 1];
                    System.arraycopy(rebytes, 0, temp, 0, rebytes.length);
                    temp[rebytes.length] = (byte) b;
                    rebytes = temp;
                }
                fis.close();
                String s = new String(rebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.setTitle(""Read from test.gif.b64_out2"");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream(""test.gif_out2"");
                b64os = new Base64.OutputStream(fos, DECODE);
                b64os.write(rebytes);
                b64os.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(""test.gif_out2"");
                javax.swing.JLabel jlabel = new javax.swing.JLabel(""Read from test.gif_out2"", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""D:\\temp\\testencoding.txt"");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""D:\\temp\\file.zip"");
                int b;
                while ((b = b64is.read()) >= 0) fos.write(b);
                fos.close();
                b64is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900743,16687411,18921331,"    private ByteBuffer readProgram(URL url) throws IOException {
        StringBuilder program = new StringBuilder();
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                program.append(line).append(""\n"");
            }
        } finally {
            if (in != null) in.close();
        }
        ByteBuffer buffer = BufferUtils.createByteBuffer(program.length());
        for (int i = 0; i < program.length(); i++) {
            buffer.put((byte) (program.charAt(i) & 0xFF));
        }
        buffer.flip();
        return buffer;
    }
","    public void init() {
        this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_ALWAYS);
        try {
            if (memeId < 0) {
            } else {
                conurl = new URL(ServerURL + ""?meme_id="" + memeId);
                java.io.InputStream xmlstr = conurl.openStream();
                this.removeAllWorkSheets();
                this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_EXPLICIT);
                this.setStringEncodingMode(WorkBookHandle.STRING_ENCODING_UNICODE);
                this.setDupeStringMode(WorkBookHandle.SHAREDUPES);
                ExtenXLS.parseNBind(this, xmlstr);
                this.setFormulaCalculationMode(WorkBookHandle.CALCULATE_ALWAYS);
            }
        } catch (Exception ex) {
            throw new WorkBookException(""Error while connecting to: "" + ServerURL + "":"" + ex.toString(), WorkBookException.RUNTIME_ERROR);
        }
    }
",False
900744,4822222,1849897,"    public static void copy(String srcFileName, String destFileName) throws IOException {
        if (srcFileName == null) {
            throw new IllegalArgumentException(""srcFileName is null"");
        }
        if (destFileName == null) {
            throw new IllegalArgumentException(""destFileName is null"");
        }
        FileChannel src = null;
        FileChannel dest = null;
        try {
            src = new FileInputStream(srcFileName).getChannel();
            dest = new FileOutputStream(destFileName).getChannel();
            long n = src.size();
            MappedByteBuffer buf = src.map(FileChannel.MapMode.READ_ONLY, 0, n);
            dest.write(buf);
        } finally {
            if (dest != null) {
                try {
                    dest.close();
                } catch (IOException e1) {
                }
            }
            if (src != null) {
                try {
                    src.close();
                } catch (IOException e1) {
                }
            }
        }
    }
","    public String parseInOneLine() throws Exception {
        BufferedReader br = null;
        InputStream httpStream = null;
        if (url.startsWith(""http"")) {
            URL fileURL = new URL(url);
            URLConnection urlConnection = fileURL.openConnection();
            httpStream = urlConnection.getInputStream();
            br = new BufferedReader(new InputStreamReader(httpStream, ""ISO-8859-1""));
        } else {
            br = new BufferedReader(new FileReader(url));
        }
        StringBuffer sb = new StringBuffer();
        StringBuffer sbAllDoc = new StringBuffer();
        String ligne = null;
        boolean get = false;
        while ((ligne = br.readLine()) != null) {
            log.debug(ligne);
            sbAllDoc.append(ligne + "" "");
            if (ligne.indexOf(""<table"") != -1) {
                get = true;
            }
            if (get) {
                sb.append(ligne + "" "");
            }
            if (ligne.indexOf(""</table"") != -1 || ligne.indexOf(""</tr></font><center><a href='affichaire.php"") != -1 || ligne.indexOf(""</font><center><a href='afficheregion.php"") != -1) {
                get = false;
                break;
            }
        }
        oneLine = sb.toString();
        allDocInOneLine = sbAllDoc.toString();
        if (oneLine.indexOf(""</table"") != -1) {
            tableTab = new TableTag(oneLine.substring(oneLine.indexOf("">"") + 1, oneLine.indexOf(""</table"")));
        } else if (oneLine.indexOf(""</font><center><a href='affichaire"") != -1) {
            tableTab = new TableTag(oneLine.substring(oneLine.indexOf("">"") + 1, oneLine.indexOf(""</font><center><a href='affichaire"")));
        } else if (oneLine.indexOf(""</font><center><a href='afficheregion.php"") != -1) {
            tableTab = new TableTag(oneLine.substring(oneLine.indexOf("">"") + 1, oneLine.indexOf(""</font><center><a href='afficheregion.php"")));
        } else {
            log.error(""La fin du fichier HTML n'a pas ete trouvee, ca va merder..."");
        }
        br.close();
        if (httpStream != null) {
            httpStream.close();
        }
        return allDocInOneLine;
    }
",False
900745,19922657,783717,"    protected static boolean copyFile(File src, File dest) {
        try {
            if (!dest.exists()) {
                dest.createNewFile();
            }
            FileInputStream fis = new FileInputStream(src);
            FileOutputStream fos = new FileOutputStream(dest);
            byte[] temp = new byte[1024 * 8];
            int readSize = 0;
            do {
                readSize = fis.read(temp);
                fos.write(temp, 0, readSize);
            } while (readSize == temp.length);
            temp = null;
            fis.close();
            fos.flush();
            fos.close();
        } catch (Exception e) {
            return false;
        }
        return true;
    }
","    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        FSDataInputStream in = null;
        try {
            in = fs.open(new Path(uri));
            IOUtils.copyBytes(in, System.out, 4096, false);
            in.seek(0);
            IOUtils.copyBytes(in, System.out, 4096, false);
        } finally {
            IOUtils.closeStream(in);
        }
    }
",True
900746,15102903,2109483,"    public static void translateTableAttributes(String baseDir, String tableName, NameSpaceDefinition nsDefinition) throws Exception {
        setVosiNS(baseDir, ""table_att"", nsDefinition);
        String filename = baseDir + ""table_att.xsl"";
        Scanner s = new Scanner(new File(filename));
        PrintWriter fw = new PrintWriter(new File(baseDir + tableName + ""_att.xsl""));
        while (s.hasNextLine()) {
            fw.println(s.nextLine().replaceAll(""TABLENAME"", tableName));
        }
        s.close();
        fw.close();
        applyStyle(baseDir + ""tables.xml"", baseDir + tableName + ""_att.json"", baseDir + tableName + ""_att.xsl"");
    }
","    @Override
    public LispObject execute(LispObject first, LispObject second) throws ConditionThrowable {
        Pathname zipfilePathname = coerceToPathname(first);
        byte[] buffer = new byte[4096];
        try {
            String zipfileNamestring = zipfilePathname.getNamestring();
            if (zipfileNamestring == null) return error(new SimpleError(""Pathname has no namestring: "" + zipfilePathname.writeToString()));
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfileNamestring));
            LispObject list = second;
            while (list != NIL) {
                Pathname pathname = coerceToPathname(list.CAR());
                String namestring = pathname.getNamestring();
                if (namestring == null) {
                    out.close();
                    File zipfile = new File(zipfileNamestring);
                    zipfile.delete();
                    return error(new SimpleError(""Pathname has no namestring: "" + pathname.writeToString()));
                }
                File file = new File(namestring);
                FileInputStream in = new FileInputStream(file);
                ZipEntry entry = new ZipEntry(file.getName());
                out.putNextEntry(entry);
                int n;
                while ((n = in.read(buffer)) > 0) out.write(buffer, 0, n);
                out.closeEntry();
                in.close();
                list = list.CDR();
            }
            out.close();
        } catch (IOException e) {
            return error(new LispError(e.getMessage()));
        }
        return zipfilePathname;
    }
",True
900747,2930278,22704165,"    public static void connectServer() {
        if (ftpClient == null) {
            int reply;
            try {
                setArg(configFile);
                ftpClient = new FTPClient();
                ftpClient.setDefaultPort(port);
                ftpClient.configure(getFtpConfig());
                ftpClient.connect(ip);
                ftpClient.login(username, password);
                ftpClient.setDefaultPort(port);
                System.out.print(ftpClient.getReplyString());
                reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    System.err.println(""FTP server refused connection."");
                }
            } catch (Exception e) {
                System.err.println(""��¼ftp��������"" + ip + ""��ʧ��"");
                e.printStackTrace();
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        try {
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            sourceChannel.close();
            destinationChannel.close();
        }
    }
",False
900748,23585932,21900384,"    public static void concatenateOutput(File[] inputFiles, File outputFile) {
        int numberOfInputFiles = inputFiles.length;
        byte lf = (byte) '\n';
        try {
            FileOutputStream fos = new FileOutputStream(outputFile);
            FileChannel outfc = fos.getChannel();
            System.out.println(""Processing "" + inputFiles[0].getPath());
            FileInputStream fis = new FileInputStream(inputFiles[0]);
            FileChannel infc = fis.getChannel();
            int bufferCapacity = 100000;
            ByteBuffer bb = ByteBuffer.allocate(bufferCapacity);
            bb.clear();
            while (infc.read(bb) > 0) {
                bb.flip();
                outfc.write(bb);
                bb.clear();
            }
            infc.close();
            for (int f = 1; f < numberOfInputFiles; f++) {
                System.out.println(""Processing "" + inputFiles[f].getPath());
                fis = new FileInputStream(inputFiles[f]);
                infc = fis.getChannel();
                bb.clear();
                int bytesread = infc.read(bb);
                bb.flip();
                byte b = bb.get();
                while (b != lf) {
                    b = bb.get();
                }
                outfc.write(bb);
                bb.clear();
                while (infc.read(bb) > 0) {
                    bb.flip();
                    outfc.write(bb);
                    bb.clear();
                }
                infc.close();
            }
            outfc.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }
","    @Override
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, User user, HttpServletRequest request, HttpServletResponse response) throws Exception {
        long resourceId = ServletRequestUtils.getLongParameter(request, ""resourceId"", 0L);
        String attributeIdentifier = request.getParameter(""identifier"");
        if (resourceId != 0L && StringUtils.hasText(attributeIdentifier)) {
            try {
                BinaryAttribute binaryAttribute = resourceManager.readAttribute(resourceId, attributeIdentifier, user);
                response.addHeader(""Content-Disposition"", ""attachment; filename=\"""" + binaryAttribute.getName() + '""');
                String contentType = binaryAttribute.getContentType();
                if (contentType != null) {
                    if (""application/x-zip-compressed"".equalsIgnoreCase(contentType)) {
                        response.setContentType(""application/octet-stream"");
                    } else {
                        response.setContentType(contentType);
                    }
                } else {
                    response.setContentType(""application/octet-stream"");
                }
                IOUtils.copy(binaryAttribute.getInputStream(), response.getOutputStream());
                return null;
            } catch (DataRetrievalFailureException e) {
                addGlobalError(request, ""errors.notFound"");
            } catch (Exception e) {
                addGlobalError(request, e);
            }
        }
        return mapping.getInputForward();
    }
",True
900749,5590065,11343453,"    protected String readFileUsingHttp(String fileUrlName) {
        String response = """";
        try {
            URL url = new URL(fileUrlName);
            URLConnection connection = url.openConnection();
            HttpURLConnection httpConn = (HttpURLConnection) connection;
            httpConn.setRequestProperty(""Content-Type"", ""text/html"");
            httpConn.setRequestProperty(""Content-Length"", ""0"");
            httpConn.setRequestMethod(""GET"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            httpConn.setAllowUserInteraction(false);
            InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
            BufferedReader in = new BufferedReader(isr);
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                response += inputLine + ""\n"";
            }
            if (response.endsWith(""\n"")) {
                response = response.substring(0, response.length() - 1);
            }
            in.close();
        } catch (Exception x) {
            x.printStackTrace();
        }
        return response;
    }
","    public static String getWebpage(String url) {
        String content = """";
        if (!url.trim().toLowerCase().startsWith(""http://"")) {
            url = ""http://"" + url;
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                content += line + ""\n"";
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return content;
    }
",True
900750,21092152,22382481,"    public static boolean update(ItemNotaFiscal objINF) {
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        int result;
        CelulaFinanceira objCF = null;
        if (c == null) {
            return false;
        }
        if (objINF == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            String sql = """";
            sql = ""update item_nota_fiscal "" + ""set id_item_pedido = ? "" + ""where id_item_nota_fiscal = ?"";
            pst = c.prepareStatement(sql);
            pst.setInt(1, objINF.getItemPedido().getCodigo());
            pst.setInt(2, objINF.getCodigo());
            result = pst.executeUpdate();
            if (result > 0) {
                if (objINF.getItemPedido().getCelulaFinanceira() != null) {
                    objCF = objINF.getItemPedido().getCelulaFinanceira();
                    objCF.atualizaGastoReal(objINF.getSubtotal());
                    if (CelulaFinanceiraDAO.update(objCF)) {
                    }
                }
            }
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final Exception e1) {
                System.out.println(""[ItemNotaFiscalDAO.update.rollback] Erro ao inserir -> "" + e1.getMessage());
            }
            System.out.println(""[ItemNotaFiscalDAO.update.insert] Erro ao inserir -> "" + e.getMessage());
            result = 0;
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
","    public boolean ReadFile() {
        boolean ret = false;
        FilenameFilter FileFilter = null;
        File dir = new File(fDir);
        String[] FeeFiles;
        int Lines = 0;
        BufferedReader FeeFile = null;
        PreparedStatement DelSt = null, InsSt = null;
        String Line = null, Term = null, CurTerm = null, TermType = null, Code = null;
        double[] Fee = new double[US_D + 1];
        double FeeAm = 0;
        String UpdateSt = ""INSERT INTO reporter.term_fee (TERM, TERM_TYPE, THEM_VC,	THEM_VE, THEM_EC, THEM_EE, THEM_D,"" + ""BA_VC, BA_VE, BA_EC, BA_EE, BA_D,"" + ""US_VC, US_VE, US_EC, US_EE, US_D)"" + ""values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"";
        try {
            FileFilter = new FilenameFilter() {

                public boolean accept(File dir, String name) {
                    if ((new File(dir, name)).isDirectory()) return false; else return (name.matches(fFileMask));
                }
            };
            FeeFiles = dir.list(FileFilter);
            java.util.Arrays.sort(FeeFiles);
            System.out.println(FeeFiles[FeeFiles.length - 1] + "" "" + (new SimpleDateFormat(""dd.MM.yy HH:mm:ss"")).format(new Date()));
            Log.info(String.format(""Load = %1s"", fDir + FeeFiles[FeeFiles.length - 1]));
            FeeFile = new BufferedReader(new FileReader(fDir + FeeFiles[FeeFiles.length - 1]));
            FeeZero(Fee);
            DelSt = cnProd.prepareStatement(""delete from reporter.term_fee"");
            DelSt.executeUpdate();
            InsSt = cnProd.prepareStatement(UpdateSt);
            WriteTerm(FeeFiles[FeeFiles.length - 1] + "" "" + (new SimpleDateFormat(""dd.MM.yy HH:mm:ss"")).format(new Date()), ""XXX"", Fee, InsSt);
            while ((Line = FeeFile.readLine()) != null) {
                Lines++;
                if (!Line.matches(""\\d{15}\\s+��������.+"")) continue;
                Term = Line.substring(7, 15);
                if ((CurTerm == null) || !Term.equals(CurTerm)) {
                    if (CurTerm != null) {
                        WriteTerm(CurTerm, TermType, Fee, InsSt);
                    }
                    CurTerm = Term;
                    if (Line.indexOf(""���"") > 0) TermType = ""���""; else TermType = ""���"";
                    FeeZero(Fee);
                }
                Code = Line.substring(64, 68).trim().toUpperCase();
                if (Code.equals(""ST"") || Code.equals(""AC"") || Code.equals(""8110"") || Code.equals(""8160"")) continue;
                FeeAm = new Double(Line.substring(140, 160)).doubleValue();
                if (Line.indexOf(""�� ����� ������"") > 0) SetFee(Fee, CARD_THEM, Code, FeeAm); else if (Line.indexOf(""�� ������ �����"") > 0) SetFee(Fee, CARD_BA, Code, FeeAm); else if (Line.indexOf(""�� ������ ��"") > 0) SetFee(Fee, CARD_US, Code, FeeAm); else throw new Exception(""������ ���� ����.:"" + Line);
            }
            WriteTerm(CurTerm, TermType, Fee, InsSt);
            cnProd.commit();
            ret = true;
        } catch (Exception e) {
            System.out.printf(""Err = %1s\r\n"", e.getMessage());
            Log.error(String.format(""Err = %1s"", e.getMessage()));
            Log.error(String.format(""Line = %1s"", Line));
            try {
                cnProd.rollback();
            } catch (Exception ee) {
            }
            ;
        } finally {
            try {
                if (FeeFile != null) FeeFile.close();
            } catch (Exception ee) {
            }
        }
        try {
            if (DelSt != null) DelSt.close();
            if (InsSt != null) InsSt.close();
            cnProd.setAutoCommit(true);
        } catch (Exception ee) {
        }
        Log.info(String.format(""Lines = %1d"", Lines));
        return (ret);
    }
",True
900751,12104132,17267601,"    @Override
    public void render(Output output) throws IOException {
        output.setStatus(statusCode, statusMessage);
        if (headersMap != null) {
            Iterator<Entry<String, String>> iterator = headersMap.entrySet().iterator();
            while (iterator.hasNext()) {
                Entry<String, String> header = iterator.next();
                output.addHeader(header.getKey(), header.getValue());
            }
        }
        if (file != null) {
            InputStream inputStream = new FileInputStream(file);
            try {
                output.open();
                OutputStream out = output.getOutputStream();
                IOUtils.copy(inputStream, out);
            } finally {
                inputStream.close();
                output.close();
            }
        }
    }
","    public void setBckImg(String newPath) {
        try {
            File inputFile = new File(getPath());
            File outputFile = new File(newPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(outputFile);
                } catch (FileNotFoundException ex1) {
                    ex1.printStackTrace();
                    JOptionPane.showMessageDialog(null, ex1.getMessage().substring(0, Math.min(ex1.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
                }
                int c;
                if (out != null) {
                    while ((c = in.read()) != -1) out.write(c);
                    out.close();
                }
                in.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
            JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), drawPanel.MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set Bck Img"", JOptionPane.ERROR_MESSAGE);
        }
        setPath(newPath);
        bckImg = new ImageIcon(getPath());
    }
",True
900752,8086217,12544033,"    public void write(OutputStream out, String className, InputStream classDefStream) throws IOException {
        ByteArrayOutputStream a = new ByteArrayOutputStream();
        IOUtils.copy(classDefStream, a);
        a.close();
        DataOutputStream da = new DataOutputStream(out);
        da.writeUTF(className);
        da.writeUTF(new String(base64.cipher(a.toByteArray())));
    }
","    private File Gzip(File f) throws IOException {
        if (f == null || !f.exists()) return null;
        File dest_dir = f.getParentFile();
        String dest_filename = f.getName() + "".gz"";
        File zipfile = new File(dest_dir, dest_filename);
        GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(zipfile));
        FileInputStream in = new FileInputStream(f);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        out.finish();
        try {
            in.close();
        } catch (Exception e) {
        }
        try {
            out.close();
        } catch (Exception e) {
        }
        try {
            f.delete();
        } catch (Exception e) {
        }
        return zipfile;
    }
",True
900753,21752108,4660318,"    private void copy(File from, File to) {
        if (from.isDirectory()) {
            File[] files = from.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    File newTo = new File(to.getPath() + File.separator + files[i].getName());
                    newTo.mkdirs();
                    copy(files[i], newTo);
                } else {
                    copy(files[i], to);
                }
            }
        } else {
            try {
                to = new File(to.getPath() + File.separator + from.getName());
                to.createNewFile();
                FileChannel src = new FileInputStream(from).getChannel();
                FileChannel dest = new FileOutputStream(to).getChannel();
                dest.transferFrom(src, 0, src.size());
                dest.close();
                src.close();
            } catch (FileNotFoundException e) {
                errorLog(e.toString());
                e.printStackTrace();
            } catch (IOException e) {
                errorLog(e.toString());
                e.printStackTrace();
            }
        }
    }
","    public static void main(String argv[]) {
        Matrix A, B, C, Z, O, I, R, S, X, SUB, M, T, SQ, DEF, SOL;
        int errorCount = 0;
        int warningCount = 0;
        double tmp, s;
        double[] columnwise = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12. };
        double[] rowwise = { 1., 4., 7., 10., 2., 5., 8., 11., 3., 6., 9., 12. };
        double[][] avals = { { 1., 4., 7., 10. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] rankdef = avals;
        double[][] tvals = { { 1., 2., 3. }, { 4., 5., 6. }, { 7., 8., 9. }, { 10., 11., 12. } };
        double[][] subavals = { { 5., 8., 11. }, { 6., 9., 12. } };
        double[][] rvals = { { 1., 4., 7. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] pvals = { { 1., 1., 1. }, { 1., 2., 3. }, { 1., 3., 6. } };
        double[][] ivals = { { 1., 0., 0., 0. }, { 0., 1., 0., 0. }, { 0., 0., 1., 0. } };
        double[][] evals = { { 0., 1., 0., 0. }, { 1., 0., 2.e-7, 0. }, { 0., -2.e-7, 0., 1. }, { 0., 0., 1., 0. } };
        double[][] square = { { 166., 188., 210. }, { 188., 214., 240. }, { 210., 240., 270. } };
        double[][] sqSolution = { { 13. }, { 15. } };
        double[][] condmat = { { 1., 3. }, { 7., 9. } };
        int rows = 3, cols = 4;
        int invalidld = 5;
        int raggedr = 0;
        int raggedc = 4;
        int validld = 3;
        int nonconformld = 4;
        int ib = 1, ie = 2, jb = 1, je = 3;
        int[] rowindexset = { 1, 2 };
        int[] badrowindexset = { 1, 3 };
        int[] columnindexset = { 1, 2, 3 };
        int[] badcolumnindexset = { 1, 2, 4 };
        double columnsummax = 33.;
        double rowsummax = 30.;
        double sumofdiagonals = 15;
        double sumofsquares = 650;
        print(""\nTesting constructors and constructor-like methods...\n"");
        try {
            A = new Matrix(columnwise, invalidld);
            errorCount = try_failure(errorCount, ""Catch invalid length in packed constructor... "", ""exception not thrown for invalid input"");
        } catch (IllegalArgumentException e) {
            try_success(""Catch invalid length in packed constructor... "", e.getMessage());
        }
        try {
            A = new Matrix(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to default constructor... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructor... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        try {
            A = Matrix.constructWithCopy(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to constructWithCopy... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructWithCopy... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        A = new Matrix(columnwise, validld);
        B = new Matrix(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        C = B.minus(A);
        avals[0][0] = tmp;
        B = Matrix.constructWithCopy(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        if ((tmp - B.get(0, 0)) != 0.0) {
            errorCount = try_failure(errorCount, ""constructWithCopy... "", ""copy not effected... data visible outside"");
        } else {
            try_success(""constructWithCopy... "", """");
        }
        avals[0][0] = columnwise[0];
        I = new Matrix(ivals);
        try {
            check(I, Matrix.identity(3, 4));
            try_success(""identity... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""identity... "", ""identity Matrix not successfully created"");
        }
        print(""\nTesting access methods...\n"");
        B = new Matrix(avals);
        if (B.getRowDimension() != rows) {
            errorCount = try_failure(errorCount, ""getRowDimension... "", """");
        } else {
            try_success(""getRowDimension... "", """");
        }
        if (B.getColumnDimension() != cols) {
            errorCount = try_failure(errorCount, ""getColumnDimension... "", """");
        } else {
            try_success(""getColumnDimension... "", """");
        }
        B = new Matrix(avals);
        double[][] barray = B.getArray();
        if (barray != avals) {
            errorCount = try_failure(errorCount, ""getArray... "", """");
        } else {
            try_success(""getArray... "", """");
        }
        barray = B.getArrayCopy();
        if (barray == avals) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not (deep) copied"");
        }
        try {
            check(barray, avals);
            try_success(""getArrayCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not successfully (deep) copied"");
        }
        double[] bpacked = B.getColumnPackedCopy();
        try {
            check(bpacked, columnwise);
            try_success(""getColumnPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getColumnPackedCopy... "", ""data not successfully (deep) copied by columns"");
        }
        bpacked = B.getRowPackedCopy();
        try {
            check(bpacked, rowwise);
            try_success(""getRowPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getRowPackedCopy... "", ""data not successfully (deep) copied by rows"");
        }
        try {
            tmp = B.get(B.getRowDimension(), B.getColumnDimension() - 1);
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                tmp = B.get(B.getRowDimension() - 1, B.getColumnDimension());
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""get(int,int)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            if (B.get(B.getRowDimension() - 1, B.getColumnDimension() - 1) != avals[B.getRowDimension() - 1][B.getColumnDimension() - 1]) {
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""Matrix entry (i,j) not successfully retreived"");
            } else {
                try_success(""get(int,int)... "", """");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        SUB = new Matrix(subavals);
        try {
            M = B.getMatrix(ib, ie + B.getRowDimension() + 1, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(ib, ie, badcolumnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie + B.getRowDimension() + 1, columnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, columnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, badcolumnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.set(B.getRowDimension(), B.getColumnDimension() - 1, 0.);
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.set(B.getRowDimension() - 1, B.getColumnDimension(), 0.);
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""set(int,int,double)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            B.set(ib, jb, 0.);
            tmp = B.get(ib, jb);
            try {
                check(tmp, 0.);
                try_success(""set(int,int,double)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Matrix element not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        M = new Matrix(2, 3, 0.);
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, jb, je, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, jb, je + B.getColumnDimension() + 1, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, jb, je, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, jb, je)), M);
                try_success(""setMatrix(int,int,int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, columnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, badcolumnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, columnindexset)), M);
                try_success(""setMatrix(int,int,int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, jb, je + B.getColumnDimension() + 1, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, jb, je, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, jb, je, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, jb, je)), M);
                try_success(""setMatrix(int[],int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, badcolumnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, columnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, columnindexset)), M);
                try_success(""setMatrix(int[],int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""submatrix not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        print(""\nTesting array-like methods...\n"");
        S = new Matrix(columnwise, nonconformld);
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        A = R;
        try {
            S = A.minus(S);
            errorCount = try_failure(errorCount, ""minus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minus conformance check... "", """");
        }
        if (A.minus(R).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minus... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minus... "", """");
        }
        A = R.copy();
        A.minusEquals(R);
        Z = new Matrix(A.getRowDimension(), A.getColumnDimension());
        try {
            A.minusEquals(S);
            errorCount = try_failure(errorCount, ""minusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minusEquals conformance check... "", """");
        }
        if (A.minus(Z).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minusEquals... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minusEquals... "", """");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        C = A.minus(B);
        try {
            S = A.plus(S);
            errorCount = try_failure(errorCount, ""plus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plus conformance check... "", """");
        }
        try {
            check(C.plus(B), A);
            try_success(""plus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plus... "", ""(C = A - B, but C + B != A)"");
        }
        C = A.minus(B);
        C.plusEquals(B);
        try {
            A.plusEquals(S);
            errorCount = try_failure(errorCount, ""plusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plusEquals conformance check... "", """");
        }
        try {
            check(C, A);
            try_success(""plusEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plusEquals... "", ""(C = A - B, but C = C + B != A)"");
        }
        A = R.uminus();
        try {
            check(A.plus(R), Z);
            try_success(""uminus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""uminus... "", ""(-A + A != zeros)"");
        }
        A = R.copy();
        O = new Matrix(A.getRowDimension(), A.getColumnDimension(), 1.0);
        C = A.arrayLeftDivide(R);
        try {
            S = A.arrayLeftDivide(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivide conformance check... "", """");
        }
        try {
            check(C, O);
            try_success(""arrayLeftDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivide... "", ""(M.\\M != ones)"");
        }
        try {
            A.arrayLeftDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivideEquals conformance check... "", """");
        }
        A.arrayLeftDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayLeftDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals... "", ""(M.\\M != ones)"");
        }
        A = R.copy();
        try {
            A.arrayRightDivide(S);
            errorCount = try_failure(errorCount, ""arrayRightDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivide conformance check... "", """");
        }
        C = A.arrayRightDivide(R);
        try {
            check(C, O);
            try_success(""arrayRightDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivide... "", ""(M./M != ones)"");
        }
        try {
            A.arrayRightDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivideEquals conformance check... "", """");
        }
        A.arrayRightDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayRightDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals... "", ""(M./M != ones)"");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        try {
            S = A.arrayTimes(S);
            errorCount = try_failure(errorCount, ""arrayTimes conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimes conformance check... "", """");
        }
        C = A.arrayTimes(B);
        try {
            check(C.arrayRightDivideEquals(B), A);
            try_success(""arrayTimes... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimes... "", ""(A = R, C = A.*B, but C./B != A)"");
        }
        try {
            A.arrayTimesEquals(S);
            errorCount = try_failure(errorCount, ""arrayTimesEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimesEquals conformance check... "", """");
        }
        A.arrayTimesEquals(B);
        try {
            check(A.arrayRightDivideEquals(B), R);
            try_success(""arrayTimesEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimesEquals... "", ""(A = R, A = A.*B, but A./B != R)"");
        }
        print(""\nTesting I/O methods...\n"");
        try {
            DecimalFormat fmt = new DecimalFormat(""0.0000E00"");
            fmt.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
            PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
            A.print(FILE, fmt, 10);
            FILE.close();
            R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
            if (A.minus(R).norm1() < .001) {
                try_success(""print()/read()..."", """");
            } else {
                errorCount = try_failure(errorCount, ""print()/read()..."", ""Matrix read from file does not match Matrix printed to file"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            try {
                e.printStackTrace(System.out);
                warningCount = try_warning(warningCount, ""print()/read()..."", ""Formatting error... will try JDK1.1 reformulation..."");
                DecimalFormat fmt = new DecimalFormat(""0.0000"");
                PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
                A.print(FILE, fmt, 10);
                FILE.close();
                R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
                if (A.minus(R).norm1() < .001) {
                    try_success(""print()/read()..."", """");
                } else {
                    errorCount = try_failure(errorCount, ""print()/read() (2nd attempt) ..."", ""Matrix read from file does not match Matrix printed to file"");
                }
            } catch (java.io.IOException ioe) {
                warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
            }
        }
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        String tmpname = ""TMPMATRIX.serial"";
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(tmpname));
            out.writeObject(R);
            ObjectInputStream sin = new ObjectInputStream(new FileInputStream(tmpname));
            A = (Matrix) sin.readObject();
            try {
                check(A, R);
                try_success(""writeObject(Matrix)/readObject(Matrix)..."", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""Matrix not serialized correctly"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""writeObject()/readObject()..."", ""unexpected I/O error, unable to run serialization test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""unexpected error in serialization test"");
        }
        print(""\nTesting linear algebra methods...\n"");
        A = new Matrix(columnwise, 3);
        T = new Matrix(tvals);
        T = A.transpose();
        try {
            check(A.transpose(), T);
            try_success(""transpose..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""transpose()..."", ""transpose unsuccessful"");
        }
        A.transpose();
        try {
            check(A.norm1(), columnsummax);
            try_success(""norm1..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""norm1()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normInf(), rowsummax);
            try_success(""normInf()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normInf()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normF(), Math.sqrt(sumofsquares));
            try_success(""normF..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normF()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.trace(), sumofdiagonals);
            try_success(""trace()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""trace()..."", ""incorrect trace calculation"");
        }
        try {
            check(A.getMatrix(0, A.getRowDimension() - 1, 0, A.getRowDimension() - 1).det(), 0.);
            try_success(""det()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""det()..."", ""incorrect determinant calculation"");
        }
        SQ = new Matrix(square);
        try {
            check(A.times(A.transpose()), SQ);
            try_success(""times(Matrix)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(Matrix)..."", ""incorrect Matrix-Matrix product calculation"");
        }
        try {
            check(A.times(0.), Z);
            try_success(""times(double)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(double)..."", ""incorrect Matrix-scalar product calculation"");
        }
        A = new Matrix(columnwise, 4);
        QRDecomposition QR = A.qr();
        R = QR.getR();
        try {
            check(A, QR.getQ().times(R));
            try_success(""QRDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""QRDecomposition..."", ""incorrect QR decomposition calculation"");
        }
        SingularValueDecomposition SVD = A.svd();
        try {
            check(A, SVD.getU().times(SVD.getS().times(SVD.getV().transpose())));
            try_success(""SingularValueDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""SingularValueDecomposition..."", ""incorrect singular value decomposition calculation"");
        }
        DEF = new Matrix(rankdef);
        try {
            check(DEF.rank(), Math.min(DEF.getRowDimension(), DEF.getColumnDimension()) - 1);
            try_success(""rank()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""rank()..."", ""incorrect rank calculation"");
        }
        B = new Matrix(condmat);
        SVD = B.svd();
        double[] singularvalues = SVD.getSingularValues();
        try {
            check(B.cond(), singularvalues[0] / singularvalues[Math.min(B.getRowDimension(), B.getColumnDimension()) - 1]);
            try_success(""cond()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""cond()..."", ""incorrect condition number calculation"");
        }
        int n = A.getColumnDimension();
        A = A.getMatrix(0, n - 1, 0, n - 1);
        A.set(0, 0, 0.);
        LUDecomposition LU = A.lu();
        try {
            check(A.getMatrix(LU.getPivot(), 0, n - 1), LU.getL().times(LU.getU()));
            try_success(""LUDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""LUDecomposition..."", ""incorrect LU decomposition calculation"");
        }
        X = A.inverse();
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""inverse()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""inverse()..."", ""incorrect inverse calculation"");
        }
        O = new Matrix(SUB.getRowDimension(), 1, 1.0);
        SOL = new Matrix(sqSolution);
        SQ = SUB.getMatrix(0, SUB.getRowDimension() - 1, 0, SUB.getRowDimension() - 1);
        try {
            check(SQ.solve(SOL), O);
            try_success(""solve()..."", """");
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""solve()..."", e1.getMessage());
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""solve()..."", e.getMessage());
        }
        A = new Matrix(pvals);
        CholeskyDecomposition Chol = A.chol();
        Matrix L = Chol.getL();
        try {
            check(A, L.times(L.transpose()));
            try_success(""CholeskyDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition..."", ""incorrect Cholesky decomposition calculation"");
        }
        X = Chol.solve(Matrix.identity(3, 3));
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""CholeskyDecomposition solve()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition solve()..."", ""incorrect Choleskydecomposition solve calculation"");
        }
        EigenvalueDecomposition Eig = A.eig();
        Matrix D = Eig.getD();
        Matrix V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (symmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (symmetric)..."", ""incorrect symmetric Eigenvalue decomposition calculation"");
        }
        A = new Matrix(evals);
        Eig = A.eig();
        D = Eig.getD();
        V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (nonsymmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (nonsymmetric)..."", ""incorrect nonsymmetric Eigenvalue decomposition calculation"");
        }
        print(""\nTestMatrix completed.\n"");
        print(""Total errors reported: "" + Integer.toString(errorCount) + ""\n"");
        print(""Total warnings reported: "" + Integer.toString(warningCount) + ""\n"");
    }
",True
900754,22416749,2520215,"    private int getRootNodeId(DataSource dataSource) throws SQLException {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        String query = null;
        try {
            conn = dataSource.getConnection();
            st = conn.createStatement();
            query = ""select "" + col.id + "" from "" + DB.Tbl.tree + "" where "" + col.parentId + "" is null"";
            rs = st.executeQuery(query);
            while (rs.next()) {
                return rs.getInt(col.id);
            }
            query = ""insert into "" + DB.Tbl.tree + ""("" + col.lKey + "", "" + col.rKey + "", "" + col.level + "") values(1,2,0)"";
            st.executeUpdate(query, new String[] { col.id });
            rs = st.getGeneratedKeys();
            while (rs.next()) {
                int genId = rs.getInt(1);
                rs.close();
                conn.commit();
                return genId;
            }
            throw new SQLException(""Не удается создать корневой элемент для дерева."");
        } finally {
            try {
                rs.close();
            } catch (Exception e) {
            }
            try {
                st.close();
            } catch (Exception e) {
            }
            try {
                conn.rollback();
            } catch (Exception e) {
            }
            try {
                conn.close();
            } catch (Exception e) {
            }
        }
    }
","    public synchronized String encrypt(String plaintext) {
        if (plaintext == null) plaintext = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return null;
        }
        byte raw[] = md.digest();
        String hash = """";
        try {
            hash = Base64Encoder.encode(raw);
        } catch (IOException e1) {
            System.err.println(""Error encoding password using Jboss Base64Encoder"");
            e1.printStackTrace();
        }
        return hash;
    }
",False
900755,12798072,15826300,"    public static String encrypt(String txt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        md.update(txt.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    public static Map<String, List<String>> getResponseHeader(String address) {
        System.out.println(address);
        URLConnection conn = null;
        Map<String, List<String>> responseHeader = null;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            responseHeader = conn.getHeaderFields();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return responseHeader;
    }
",False
900756,14090536,18488919,"    private String[] read(String path) throws Exception {
        final String[] names = { ""index.txt"", """", ""index.html"", ""index.htm"" };
        String[] list = null;
        for (int i = 0; i < names.length; i++) {
            URL url = new URL(path + names[i]);
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuffer sb = new StringBuffer();
                String s = null;
                while ((s = in.readLine()) != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        sb.append(s + ""\n"");
                    }
                }
                in.close();
                if (sb.indexOf(""<"") != -1 && sb.indexOf("">"") != -1) {
                    List links = LinkExtractor.scan(url, sb.toString());
                    HashSet set = new HashSet();
                    int prefixLen = path.length();
                    for (Iterator it = links.iterator(); it.hasNext(); ) {
                        String link = it.next().toString();
                        if (!link.startsWith(path)) {
                            continue;
                        }
                        link = link.substring(prefixLen);
                        int idx = link.indexOf(""/"");
                        int idxq = link.indexOf(""?"");
                        if (idx > 0 && (idxq == -1 || idx < idxq)) {
                            set.add(link.substring(0, idx + 1));
                        } else {
                            set.add(link);
                        }
                    }
                    list = (String[]) set.toArray(new String[0]);
                } else {
                    list = sb.toString().split(""\n"");
                }
                return list;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                continue;
            }
        }
        return new String[0];
    }
","    private void insert(Connection c) throws SQLException {
        if (m_fromDb) throw new IllegalStateException(""The record already exists in the database"");
        StringBuffer names = new StringBuffer(""INSERT INTO ifServices (nodeID,ipAddr,serviceID"");
        StringBuffer values = new StringBuffer(""?,?,?"");
        if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
            values.append("",?"");
            names.append("",ifIndex"");
        }
        if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
            values.append("",?"");
            names.append("",status"");
        }
        if ((m_changed & CHANGED_LASTGOOD) == CHANGED_LASTGOOD) {
            values.append("",?"");
            names.append("",lastGood"");
        }
        if ((m_changed & CHANGED_LASTFAIL) == CHANGED_LASTFAIL) {
            values.append("",?"");
            names.append("",lastFail"");
        }
        if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) {
            values.append("",?"");
            names.append("",source"");
        }
        if ((m_changed & CHANGED_NOTIFY) == CHANGED_NOTIFY) {
            values.append("",?"");
            names.append("",notify"");
        }
        if ((m_changed & CHANGED_QUALIFIER) == CHANGED_QUALIFIER) {
            values.append("",?"");
            names.append("",qualifier"");
        }
        names.append("") VALUES ("").append(values).append(')');
        if (log().isDebugEnabled()) log().debug(""DbIfServiceEntry.insert: SQL insert statment = "" + names.toString());
        PreparedStatement stmt = null;
        PreparedStatement delStmt = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            stmt = c.prepareStatement(names.toString());
            d.watch(stmt);
            names = null;
            int ndx = 1;
            stmt.setInt(ndx++, m_nodeId);
            stmt.setString(ndx++, m_ipAddr.getHostAddress());
            stmt.setInt(ndx++, m_serviceId);
            if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) stmt.setInt(ndx++, m_ifIndex);
            if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) stmt.setString(ndx++, new String(new char[] { m_status }));
            if ((m_changed & CHANGED_LASTGOOD) == CHANGED_LASTGOOD) {
                stmt.setTimestamp(ndx++, m_lastGood);
            }
            if ((m_changed & CHANGED_LASTFAIL) == CHANGED_LASTFAIL) {
                stmt.setTimestamp(ndx++, m_lastFail);
            }
            if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) stmt.setString(ndx++, new String(new char[] { m_source }));
            if ((m_changed & CHANGED_NOTIFY) == CHANGED_NOTIFY) stmt.setString(ndx++, new String(new char[] { m_notify }));
            if ((m_changed & CHANGED_QUALIFIER) == CHANGED_QUALIFIER) stmt.setString(ndx++, m_qualifier);
            int rc;
            try {
                rc = stmt.executeUpdate();
            } catch (SQLException e) {
                log().warn(""ifServices DB insert got exception; will retry after "" + ""deletion of any existing records for this ifService "" + ""that are marked for deletion."", e);
                c.rollback();
                String delCmd = ""DELETE FROM ifServices WHERE status = 'D' "" + ""AND nodeid = ? AND ipAddr = ? AND serviceID = ?"";
                delStmt = c.prepareStatement(delCmd);
                d.watch(delStmt);
                delStmt.setInt(1, m_nodeId);
                delStmt.setString(2, m_ipAddr.getHostAddress());
                delStmt.setInt(3, m_serviceId);
                rc = delStmt.executeUpdate();
                rc = stmt.executeUpdate();
            }
            log().debug(""insert(): SQL update result = "" + rc);
        } finally {
            d.cleanUp();
        }
        m_fromDb = true;
        m_changed = 0;
    }
",False
900757,7174662,9830269,"    private void loadInitialDbState() throws IOException {
        InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName);
        StringWriter writer = new StringWriter();
        IOUtils.copy(in, writer);
        for (String statement : writer.toString().split(SQL_STATEMENT_DELIMITER)) {
            logger.info(""Executing SQL Statement {}"", statement);
            template.execute(statement);
        }
    }
","                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
",True
900758,6190160,840277,"    public void xtest1() throws Exception {
        InputStream input = new FileInputStream(""C:/Documentos/j931_01.pdf"");
        InputStream tmp = new ITextManager().cut(input, 3, 8);
        FileOutputStream output = new FileOutputStream(""C:/temp/split.pdf"");
        IOUtils.copy(tmp, output);
        input.close();
        tmp.close();
        output.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900759,2373293,10480050,"    public static void copyFile(final File in, final File out) throws IOException {
        final FileChannel sourceChannel = new FileInputStream(in).getChannel();
        final FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
","    public static SearchItem loadRecord(String id, boolean isContact) {
        String line = null;
        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(isContact ? URL_RECORD_CONTACT : URL_RECORD_COMPANY);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(6);
            nameValuePairs.add(new BasicNameValuePair(""format"", ""xml""));
            nameValuePairs.add(new BasicNameValuePair(""token"", Common.token));
            nameValuePairs.add(new BasicNameValuePair(""id"", id));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = httpClient.execute(httpPost);
            line = EntityUtils.toString(response.getEntity());
            Document document = XMLfunctions.XMLfromString(line);
            NodeList nodes = document.getElementsByTagName(""response"");
            Element e = (Element) nodes.item(0);
            String Name__Last__First_ = XMLfunctions.getValue(e, isContact ? ""Name__Last__First_"" : ""Name"");
            String phone = """";
            if (!isContact) phone = XMLfunctions.getValue(e, ""Phone"");
            String Email1 = XMLfunctions.getValue(e, isContact ? ""Personal_Email"" : ""Email"");
            String Home_Fax = XMLfunctions.getValue(e, isContact ? ""Home_Fax"" : ""Fax1"");
            String Address1 = XMLfunctions.getValue(e, ""Address1"");
            String Address2 = XMLfunctions.getValue(e, ""Address2"");
            String City = XMLfunctions.getValue(e, ""City"");
            String State = XMLfunctions.getValue(e, ""State"");
            String Zip = XMLfunctions.getValue(e, ""Zip"");
            String Country = XMLfunctions.getValue(e, ""Country"");
            String Profile = XMLfunctions.getValue(e, ""Profile"");
            String success = XMLfunctions.getValue(e, ""success"");
            String error = XMLfunctions.getValue(e, ""error"");
            SearchItem item = new SearchItem();
            item.set(1, Name__Last__First_);
            item.set(2, phone);
            item.set(3, phone);
            item.set(4, Email1);
            item.set(5, Home_Fax);
            item.set(6, Address1);
            item.set(7, Address2);
            item.set(8, City);
            item.set(9, State);
            item.set(10, Zip);
            item.set(11, Profile);
            item.set(12, Country);
            item.set(13, success);
            item.set(14, error);
            return item;
        } catch (Exception e) {
            line = ""<results status=\""error\""><msg>Can't connect to server</msg></results>"";
            line = null;
        }
        return null;
    }
",False
900760,15260218,14675462,"    public static String md5Encode16(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(s.getBytes(""utf-8""));
            byte b[] = md.digest();
            int i;
            StringBuilder buf = new StringBuilder("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString().substring(8, 24);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static byte[] encrypt(String passphrase, byte[] data) throws Exception {
        byte[] dataTemp;
        try {
            Security.addProvider(new com.sun.crypto.provider.SunJCE());
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passphrase.getBytes());
            DESKeySpec key = new DESKeySpec(md.digest());
            SecretKeySpec DESKey = new SecretKeySpec(key.getKey(), ""DES"");
            Cipher cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
            cipher.init(Cipher.ENCRYPT_MODE, DESKey);
            dataTemp = cipher.doFinal(data);
        } catch (Exception e) {
            throw e;
        }
        return dataTemp;
    }
",True
900761,2461168,20192098,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public Object read(InputStream inputStream, Map metadata) throws IOException, ClassNotFoundException {
        if (log.isTraceEnabled()) log.trace(""Read input stream with metadata="" + metadata);
        Integer resCode = (Integer) metadata.get(HTTPMetadataConstants.RESPONSE_CODE);
        String resMessage = (String) metadata.get(HTTPMetadataConstants.RESPONSE_CODE_MESSAGE);
        if (resCode != null && validResponseCodes.contains(resCode) == false) throw new RuntimeException(""Invalid HTTP server response ["" + resCode + ""] - "" + resMessage);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
        IOUtils.copyStream(baos, inputStream);
        String soapMessage = new String(baos.toByteArray(), charsetEncoding);
        if (isTraceEnabled) {
            String prettySoapMessage = DOMWriter.printNode(DOMUtils.parse(soapMessage), true);
            log.trace(""Incoming Response SOAPMessage\n"" + prettySoapMessage);
        }
        return soapMessage;
    }
",True
900762,6513769,1995571,"    @Before
    public void BeforeTheTest() throws Exception {
        URL url = ProfileParserTest.class.getClassLoader().getResource(""ca/uhn/hl7v2/conf/parser/tests/example_ack.xml"");
        URLConnection conn = url.openConnection();
        InputStream instream = conn.getInputStream();
        if (instream == null) throw new Exception(""can't find the xml file"");
        BufferedReader in = new BufferedReader(new InputStreamReader(instream));
        int tmp = 0;
        StringBuffer buf = new StringBuffer();
        while ((tmp = in.read()) != -1) {
            buf.append((char) tmp);
        }
        profileString = buf.toString();
    }
","    protected Source resolveRepositoryURI(String path) throws TransformerException {
        Source resolvedSource = null;
        try {
            if (path != null) {
                URL url = new URL(path);
                InputStream in = url.openStream();
                if (in != null) {
                    resolvedSource = new StreamSource(in);
                }
            } else {
                throw new TransformerException(""Resource does not exist. \"""" + path + ""\"" is not accessible."");
            }
        } catch (MalformedURLException mfue) {
            throw new TransformerException(""Error accessing resource using servlet context: "" + path, mfue);
        } catch (IOException ioe) {
            throw new TransformerException(""Unable to access resource at: "" + path, ioe);
        }
        return resolvedSource;
    }
",False
900763,8416636,19532000,"    private static byte[] Md5f(String plainText) {
        byte[] ab = new byte[16];
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainText.getBytes());
            byte b[] = md.digest();
            ab = b;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return ab;
    }
","    static MenuListener openRecentHandler() {
        MenuListener handler = new MenuListener() {

            public void menuSelected(final MenuEvent event) {
                final JMenu menu = (JMenu) event.getSource();
                menu.removeAll();
                String[] recentURLSpecs = Application.getApp().getRecentURLSpecs();
                for (int index = 0; index < recentURLSpecs.length; index++) {
                    String urlSpec = recentURLSpecs[index];
                    JMenuItem menuItem = new JMenuItem(urlSpec);
                    menu.add(menuItem);
                    menuItem.setAction(openURLAction(urlSpec));
                    menuItem.setText(urlSpec);
                    try {
                        new java.net.URL(urlSpec).openStream();
                    } catch (java.io.IOException exception) {
                        menuItem.setEnabled(false);
                    }
                }
                menu.addSeparator();
                final JMenuItem clearItem = new JMenuItem(""Clear"");
                clearItem.setAction(new AbstractAction() {

                    public void actionPerformed(final ActionEvent event) {
                        Application.getApp().clearRecentItems();
                    }
                });
                clearItem.setText(""Clear"");
                menu.add(clearItem);
            }

            public void menuCanceled(final MenuEvent event) {
            }

            public void menuDeselected(final MenuEvent event) {
            }
        };
        return handler;
    }
",False
900764,16227459,16946193,"    public CmsSetupTestResult execute(CmsSetupBean setupBean) {
        CmsSetupTestResult testResult = new CmsSetupTestResult(this);
        String basePath = setupBean.getWebAppRfsPath();
        if (!basePath.endsWith(File.separator)) {
            basePath += File.separator;
        }
        File file1;
        Random rnd = new Random();
        do {
            file1 = new File(basePath + ""test"" + rnd.nextInt(1000));
        } while (file1.exists());
        boolean success = false;
        try {
            file1.createNewFile();
            FileWriter fw = new FileWriter(file1);
            fw.write(""aA1"");
            fw.close();
            success = true;
            FileReader fr = new FileReader(file1);
            success = success && (fr.read() == 'a');
            success = success && (fr.read() == 'A');
            success = success && (fr.read() == '1');
            success = success && (fr.read() == -1);
            fr.close();
            success = file1.delete();
            success = !file1.exists();
        } catch (Exception e) {
            success = false;
        }
        if (!success) {
            testResult.setRed();
            testResult.setInfo(""OpenCms cannot be installed without read and write privileges for path "" + basePath + ""! Please check you are running your servlet container with the right user and privileges."");
            testResult.setHelp(""Not enough permissions to create/read/write a file"");
            testResult.setResult(RESULT_FAILED);
        } else {
            testResult.setGreen();
            testResult.setResult(RESULT_PASSED);
        }
        return testResult;
    }
","    public void deploy(final File extension) {
        log.info(""Deploying new extension from {}"", extension.getPath());
        RequestContextHolder.setRequestContext(new RequestContext(SZoneConfig.getDefaultZoneName(), SZoneConfig.getAdminUserName(SZoneConfig.getDefaultZoneName()), new BaseSessionContext()));
        RequestContextHolder.getRequestContext().resolve();
        JarInputStream warIn;
        try {
            warIn = new JarInputStream(new FileInputStream(extension), true);
        } catch (IOException e) {
            log.warn(""Unable to open extension WAR at "" + extension.getPath(), e);
            return;
        }
        SAXReader reader = new SAXReader(false);
        reader.setIncludeExternalDTDDeclarations(false);
        String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("".""));
        File extensionDir = new File(extensionBaseDir, extensionPrefix);
        extensionDir.mkdirs();
        File extensionWebDir = new File(this.extensionWebDir, extensionPrefix);
        extensionWebDir.mkdirs();
        try {
            for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) {
                File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName());
                if (entry.isDirectory()) {
                    log.debug(""Creating directory at {}"", inflated.getPath());
                    inflated.mkdirs();
                    continue;
                }
                inflated.getParentFile().mkdirs();
                FileOutputStream entryOut = new FileOutputStream(inflated);
                if (!entry.getName().endsWith(configurationFileExtension)) {
                    log.debug(""Inflating file resource to {}"", inflated.getPath());
                    IOUtils.copy(warIn, entryOut);
                    entryOut.close();
                    continue;
                }
                try {
                    final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true));
                    Attribute schema = document.getRootElement().attribute(schemaAttribute);
                    if (schema == null || StringUtils.isBlank(schema.getText())) {
                        log.debug(""Inflating XML with unrecognized schema to {}"", inflated.getPath());
                        continue;
                    }
                    if (schema.getText().contains(definitionsSchemaNamespace)) {
                        log.debug(""Inflating and registering definition from {}"", inflated.getPath());
                        document.getRootElement().add(new AbstractAttribute() {

                            private static final long serialVersionUID = -7880537136055718310L;

                            public QName getQName() {
                                return new QName(extensionAttr, document.getRootElement().getNamespace());
                            }

                            public String getValue() {
                                return extension.getName().substring(0, extension.getName().lastIndexOf("".""));
                            }
                        });
                        definitionModule.addDefinition(document, true);
                        continue;
                    }
                    if (schema.getText().contains(templateSchemaNamespace)) {
                        log.debug(""Inflating and registering template from {}"", inflated.getPath());
                        templateService.addTemplate(document, true, zoneModule.getDefaultZone());
                        continue;
                    }
                } catch (DocumentException e) {
                    log.warn(""Malformed XML file in extension war at "" + extension.getPath(), e);
                    return;
                }
            }
        } catch (IOException e) {
            log.warn(""Malformed extension war at "" + extension.getPath(), e);
            return;
        } finally {
            try {
                warIn.close();
            } catch (IOException e) {
                log.warn(""Unable to close extension war at "" + extension.getPath(), e);
                return;
            }
            RequestContextHolder.clear();
        }
        log.info(""Extension deployed successfully from {}"", extension.getPath());
    }
",True
900765,10271558,3318214,"    private void processBasicContent() {
        String[] packageNames = sourceCollector.getPackageNames();
        for (int i = 0; i < packageNames.length; i++) {
            XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i]);
            File dir = new File(outputDir, packageNames[i]);
            dir.mkdirs();
            Set pkgDirs = new HashSet();
            for (int j = 0; j < sources.length; j++) {
                XdcSource source = sources[j];
                Properties patterns = source.getPatterns();
                if (patterns != null) {
                    tables.put(""patterns"", patterns);
                }
                pkgDirs.add(source.getFile().getParentFile());
                DialectHandler dialectHandler = source.getDialectHandler();
                Writer out = null;
                try {
                    String sourceFilePath = source.getFile().getAbsolutePath();
                    source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null);
                    String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + ""/source-header.xsl"", tables);
                    source.setRootComment(rootComment);
                    Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables);
                    if (LOG.isInfoEnabled()) {
                        LOG.info(""Processing source file "" + sourceFilePath);
                    }
                    out = IOUtils.getWriter(new File(dir, source.getFile().getName() + "".html""), docencoding);
                    XmlUtils.printHtml(out, htmlDoc);
                    if (sourceProcessor != null) {
                        sourceProcessor.processSource(source, encoding, docencoding);
                    }
                    XdcSource.clearProcessingProperties(baseProperties);
                } catch (XmlException e) {
                    LOG.error(e.getMessage(), e);
                } catch (IOException e) {
                    LOG.error(e.getMessage(), e);
                } finally {
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            LOG.error(e.getMessage(), e);
                        }
                    }
                }
            }
            for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) {
                File docFilesDir = new File((File) iter.next(), ""xdc-doc-files"");
                if (docFilesDir.exists() && docFilesDir.isDirectory()) {
                    File targetDir = new File(dir, ""xdc-doc-files"");
                    targetDir.mkdirs();
                    try {
                        IOUtils.copyTree(docFilesDir, targetDir);
                    } catch (IOException e) {
                        LOG.error(e.getMessage(), e);
                    }
                }
            }
        }
    }
","    void copyFile(String sInput, String sOutput) throws IOException {
        File inputFile = new File(sInput);
        File outputFile = new File(sOutput);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",True
900766,15193,14959919,"    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""Copy: no such source file: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""Copy: source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""Copy: destination file is unwriteable: "" + toFileName);
            if (JOptionPane.showConfirmDialog(null, ""Overwrite File ?"", ""Overwrite File"", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) return;
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""Copy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""Copy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""Copy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public final void build() {
        if (!built_) {
            built_ = true;
            final boolean[] done = new boolean[] { false };
            Runnable runnable = new Runnable() {

                public void run() {
                    try {
                        exists_ = true;
                        URL url = getContentURL();
                        URLConnection cnx = url.openConnection();
                        cnx.connect();
                        lastModified_ = cnx.getLastModified();
                        length_ = cnx.getContentLength();
                        type_ = cnx.getContentType();
                        if (isDirectory()) {
                            InputStream in = cnx.getInputStream();
                            BufferedReader nr = new BufferedReader(new InputStreamReader(in));
                            FuVectorString v = readList(nr);
                            nr.close();
                            v.sort();
                            v.uniq();
                            list_ = v.toArray();
                        }
                    } catch (Exception ex) {
                        exists_ = false;
                    }
                    done[0] = true;
                }
            };
            Thread t = new Thread(runnable, ""VfsFileUrl connection "" + getContentURL());
            t.setPriority(Math.max(Thread.MIN_PRIORITY, t.getPriority() - 1));
            t.start();
            for (int i = 0; i < 100; i++) {
                if (done[0]) break;
                try {
                    Thread.sleep(300L);
                } catch (InterruptedException ex) {
                }
            }
            if (!done[0]) {
                t.interrupt();
                exists_ = false;
                canRead_ = false;
                FuLog.warning(""VFS: fail to get "" + url_);
            }
        }
    }
",False
900767,12524253,5673928,"    public DialogSongList(JFrame frame) {
        super(frame, ""Menu_SongList"", ""songList"");
        setMinimumSize(new Dimension(400, 200));
        JPanel panel, spanel;
        Container contentPane;
        (contentPane = getContentPane()).add(songSelector = new SongSelector(configKey, null, true));
        songSelector.setSelectionAction(new Runnable() {

            public void run() {
                final Item<URL, MidiFileInfo> item = songSelector.getSelectedInfo();
                if (item != null) {
                    try {
                        selection = new File(item.getKey().toURI());
                        author.setEnabled(true);
                        title.setEnabled(true);
                        difficulty.setEnabled(true);
                        save.setEnabled(true);
                        final MidiFileInfo info = item.getValue();
                        author.setText(info.getAuthor());
                        title.setText(info.getTitle());
                        Util.selectKey(difficulty, info.getDifficulty());
                        return;
                    } catch (Exception e) {
                    }
                }
                selection = null;
                author.setEnabled(false);
                title.setEnabled(false);
                difficulty.setEnabled(false);
                save.setEnabled(false);
            }
        });
        contentPane.add(panel = new JPanel(), BorderLayout.SOUTH);
        panel.setLayout(new BorderLayout());
        JScrollPane scrollPane;
        panel.add(scrollPane = new JScrollPane(spanel = new JPanel()), BorderLayout.NORTH);
        scrollPane.setPreferredSize(new Dimension(0, 60));
        Util.addLabeledComponent(spanel, ""Lbl_Author"", author = new JTextField(10));
        Util.addLabeledComponent(spanel, ""Lbl_Title"", title = new JTextField(14));
        Util.addLabeledComponent(spanel, ""Lbl_Difficulty"", difficulty = new JComboBox());
        difficulty.addItem(new Item<Byte, String>((byte) -1, """"));
        for (Map.Entry<Byte, String> entry : SongSelector.DIFFICULTIES.entrySet()) {
            final String value = entry.getValue();
            difficulty.addItem(new Item<Byte, String>(entry.getKey(), Util.getMsg(value, value), value));
        }
        spanel.add(save = new JButton());
        Util.updateButtonText(save, ""Save"");
        save.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File selected = MidiSong.setMidiFileInfo(selection, author.getText(), title.getText(), getAsByte(difficulty));
                SongSelector.refresh();
                try {
                    songSelector.setSelected(selected == null ? null : selected.toURI().toURL());
                } catch (MalformedURLException ex) {
                }
            }
        });
        author.setEnabled(false);
        title.setEnabled(false);
        difficulty.setEnabled(false);
        save.setEnabled(false);
        JButton button;
        panel.add(spanel = new JPanel(), BorderLayout.WEST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Import"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                final File inputFile = KeyboardHero.midiFile();
                try {
                    if (inputFile == null) return;
                    final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR));
                    if (dir.exists()) {
                        if (!dir.isDirectory()) {
                            Util.error(Util.getMsg(""Err_MidiFilesDirNotDirectory""), dir.getParent());
                            return;
                        }
                    } else if (!dir.mkdirs()) {
                        Util.error(Util.getMsg(""Err_CouldntMkDir""), dir.getParent());
                        return;
                    }
                    File outputFile = new File(dir.getPath() + File.separator + inputFile.getName());
                    if (!outputFile.exists() || KeyboardHero.confirm(""Que_FileExistsOverwrite"")) {
                        final FileChannel inChannel = new FileInputStream(inputFile).getChannel();
                        inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel());
                    }
                } catch (Exception ex) {
                    Util.getMsg(Util.getMsg(""Err_CouldntImportSong""), ex.toString());
                }
                SongSelector.refresh();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Delete"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (KeyboardHero.confirm(Util.getMsg(""Que_SureToDelete""))) {
                    try {
                        new File(songSelector.getSelectedFile().toURI()).delete();
                    } catch (Exception ex) {
                        Util.error(Util.getMsg(""Err_CouldntDeleteFile""), ex.toString());
                    }
                    SongSelector.refresh();
                }
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.CENTER);
        spanel.setLayout(new FlowLayout());
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Close"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Play"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                Game.newGame(songSelector.getSelectedFile());
                close();
            }
        });
        panel.add(spanel = new JPanel(), BorderLayout.EAST);
        spanel.add(button = new JButton());
        Util.updateButtonText(button, ""Refresh"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                SongSelector.refresh();
            }
        });
        getRootPane().setDefaultButton(button);
        instance = this;
    }
","    void loadImage(Frame frame, URL url) throws Exception {
        URLConnection conn = url.openConnection();
        String mimeType = conn.getContentType();
        long length = conn.getContentLength();
        InputStream is = conn.getInputStream();
        loadImage(frame, is, length, mimeType);
    }
",False
900768,13828673,18519246,"        protected void find(final String pckgname, final boolean recursive) {
            URL url;
            String name = pckgname;
            name = name.replace('.', '/');
            url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name);
            File directory;
            try {
                directory = new File(URLDecoder.decode(url.getFile(), ""UTF-8""));
            } catch (final UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            if (directory.exists()) {
                logger.info(""Searching for examples in \"""" + directory.getPath() + ""\""."");
                addAllFilesInDirectory(directory, pckgname, recursive);
            } else {
                try {
                    logger.info(""Searching for Demo classes in \"""" + url + ""\""."");
                    final URLConnection urlConnection = url.openConnection();
                    if (urlConnection instanceof JarURLConnection) {
                        final JarURLConnection conn = (JarURLConnection) urlConnection;
                        final JarFile jfile = conn.getJarFile();
                        final Enumeration<JarEntry> e = jfile.entries();
                        while (e.hasMoreElements()) {
                            final ZipEntry entry = e.nextElement();
                            final Class<?> result = load(entry.getName());
                            if (result != null) {
                                addClassForPackage(result);
                            }
                        }
                    }
                } catch (final IOException e) {
                    logger.logp(Level.SEVERE, this.getClass().toString(), ""find(pckgname, recursive, classes)"", ""Exception"", e);
                } catch (final Exception e) {
                    logger.logp(Level.SEVERE, this.getClass().toString(), ""find(pckgname, recursive, classes)"", ""Exception"", e);
                }
            }
        }
","    public List<PathObject> fetchPath(BoardObject board) throws NetworkException {
        if (boardPathMap.containsKey(board.getId())) {
            return boardPathMap.get(board.getId()).getChildren();
        }
        HttpClient client = HttpConfig.newInstance();
        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN_BOARD + board.getId());
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            Document doc = XmlOperator.readDocument(entity.getContent());
            PathObject parent = new PathObject();
            BBSBodyParseHelper.parsePathList(doc, parent);
            parent = searchAndCreatePathFromRoot(parent);
            boardPathMap.put(board.getId(), parent);
            return parent.getChildren();
        } catch (Exception e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",False
900769,18253220,13961100,"    public boolean downloadFTP(String ipFTP, String loginFTP, String senhaFTP, String diretorioFTP, String diretorioAndroid, String arquivoFTP) throws SocketException, IOException {
        boolean retorno = false;
        FileOutputStream arqReceber = null;
        try {
            ftp.connect(ipFTP);
            Log.i(""DownloadFTP"", ""Connected: "" + ipFTP);
            ftp.login(loginFTP, senhaFTP);
            Log.i(""DownloadFTP"", ""Logged on"");
            ftp.enterLocalPassiveMode();
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
            arqReceber = new FileOutputStream(file.toString());
            ftp.retrieveFile(""/tablet_ftp/Novo/socialAlimenta.xml"", arqReceber);
            retorno = true;
            ftp.disconnect();
            Log.i(""DownloadFTP"", ""retorno:"" + retorno);
        } catch (Exception e) {
            ftp.disconnect();
            Log.e(""DownloadFTP"", ""Erro:"" + e.getMessage());
        } finally {
            Log.e(""DownloadFTP"", ""Finally"");
        }
        return retorno;
    }
","    public void initialize(IProgressMonitor monitor) throws JETException {
        IProgressMonitor progressMonitor = monitor;
        progressMonitor.beginTask("""", 10);
        progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_GeneratingJETEmitterFor_message"", new Object[] { getTemplateURI() }));
        final IWorkspace workspace = ResourcesPlugin.getWorkspace();
        IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
        try {
            final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader());
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETParsing_message"", new Object[] { jetCompiler.getResolvedTemplateURI() }));
            jetCompiler.parse();
            progressMonitor.worked(1);
            String packageName = jetCompiler.getSkeleton().getPackageName();
            if (getTemplateURIPath() != null) {
                URI templateURI = URI.createURI(getTemplateURIPath()[0]);
                URLClassLoader theClassLoader = null;
                if (templateURI.isPlatformResource()) {
                    IProject project = workspace.getRoot().getProject(templateURI.segment(1));
                    if (JETNature.getRuntime(project) != null) {
                        List<URL> urls = new ArrayList<URL>();
                        IJavaProject javaProject = JavaCore.create(project);
                        urls.add(new File(project.getLocation() + ""/"" + javaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURI().toURL());
                        for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) {
                            if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {
                                IPath projectPath = classpathEntry.getPath();
                                IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0));
                                IJavaProject otherJavaProject = JavaCore.create(otherProject);
                                urls.add(new File(otherProject.getLocation() + ""/"" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURI().toURL());
                            }
                        }
                        theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls));
                    }
                } else if (templateURI.isPlatformPlugin()) {
                    final Bundle bundle = Platform.getBundle(templateURI.segment(1));
                    if (bundle != null) {
                        theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle));
                    }
                }
                if (theClassLoader != null) {
                    String className = (packageName.length() == 0 ? """" : packageName + ""."") + jetCompiler.getSkeleton().getClassName();
                    if (className.endsWith(""_"")) {
                        className = className.substring(0, className.length() - 1);
                    }
                    try {
                        Class<?> theClass = theClassLoader.loadClass(className);
                        Class<?> theOtherClass = null;
                        try {
                            theOtherClass = getClassLoader().loadClass(className);
                        } catch (ClassNotFoundException exception) {
                        }
                        if (theClass != theOtherClass) {
                            String methodName = jetCompiler.getSkeleton().getMethodName();
                            Method[] methods = theClass.getDeclaredMethods();
                            for (int i = 0; i < methods.length; ++i) {
                                if (methods[i].getName().equals(methodName)) {
                                    jetEmitter.setMethod(methods[i]);
                                    break;
                                }
                            }
                            return;
                        }
                    } catch (ClassNotFoundException exception) {
                    }
                }
            }
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            jetCompiler.generate(outputStream);
            final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray());
            if (!javaModel.isOpen()) {
                javaModel.open(new SubProgressMonitor(progressMonitor, 1));
            } else {
                progressMonitor.worked(1);
            }
            final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName());
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETPreparingProject_message"", new Object[] { project.getName() }));
            IJavaProject javaProject;
            if (!project.exists()) {
                progressMonitor.subTask(""JET creating project "" + project.getName());
                project.create(new SubProgressMonitor(progressMonitor, 1));
                progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETCreatingProject_message"", new Object[] { project.getName() }));
                IProjectDescription description = workspace.newProjectDescription(project.getName());
                description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                description.setLocation(null);
                project.open(new SubProgressMonitor(progressMonitor, 1));
                project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
            } else {
                project.open(new SubProgressMonitor(progressMonitor, 5));
                IProjectDescription description = project.getDescription();
                description.setNatureIds(new String[] { JavaCore.NATURE_ID });
                project.setDescription(description, new SubProgressMonitor(progressMonitor, 1));
            }
            javaProject = JavaCore.create(project);
            List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath()));
            for (int i = 0, len = classpath.size(); i < len; i++) {
                IClasspathEntry entry = classpath.get(i);
                if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && (""/"" + project.getName()).equals(entry.getPath().toString())) {
                    classpath.remove(i);
                }
            }
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETInitializingProject_message"", new Object[] { project.getName() }));
            IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path(""/"" + project.getName() + ""/src""));
            IClasspathEntry jreClasspathEntry = JavaCore.newContainerEntry(new Path(""org.eclipse.jdt.launching.JRE_CONTAINER""));
            classpath.add(classpathEntry);
            classpath.add(jreClasspathEntry);
            classpath.addAll(getClassPathEntries());
            IFolder sourceFolder = project.getFolder(new Path(""src""));
            if (!sourceFolder.exists()) {
                sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
            }
            IFolder runtimeFolder = project.getFolder(new Path(""bin""));
            if (!runtimeFolder.exists()) {
                runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1));
            }
            javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1));
            javaProject.setOutputLocation(new Path(""/"" + project.getName() + ""/bin""), new SubProgressMonitor(progressMonitor, 1));
            javaProject.close();
            progressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETOpeningJavaProject_message"", new Object[] { project.getName() }));
            javaProject.open(new SubProgressMonitor(progressMonitor, 1));
            IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots();
            IPackageFragmentRoot sourcePackageFragmentRoot = null;
            for (int j = 0; j < packageFragmentRoots.length; ++j) {
                IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j];
                if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) {
                    sourcePackageFragmentRoot = packageFragmentRoot;
                    break;
                }
            }
            StringTokenizer stringTokenizer = new StringTokenizer(packageName, ""."");
            IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);
            subProgressMonitor.beginTask("""", stringTokenizer.countTokens() + 4);
            subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_CreateTargetFile_message""));
            IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource();
            while (stringTokenizer.hasMoreElements()) {
                String folderName = stringTokenizer.nextToken();
                sourceContainer = sourceContainer.getFolder(new Path(folderName));
                if (!sourceContainer.exists()) {
                    ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1));
                }
            }
            IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + "".java""));
            if (!targetFile.exists()) {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETCreating_message"", new Object[] { targetFile.getFullPath() }));
                targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1));
            } else {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETUpdating_message"", new Object[] { targetFile.getFullPath() }));
                targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1));
            }
            subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETBuilding_message"", new Object[] { project.getName() }));
            project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1));
            boolean errors = hasErrors(subProgressMonitor, targetFile);
            if (!errors) {
                subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString(""_UI_JETLoadingClass_message"", new Object[] { jetCompiler.getSkeleton().getClassName() + "".class"" }));
                List<URL> urls = new ArrayList<URL>();
                urls.add(new File(project.getLocation() + ""/"" + javaProject.getOutputLocation().removeFirstSegments(1) + ""/"").toURI().toURL());
                final Set<Bundle> bundles = new HashSet<Bundle>();
                LOOP: for (IClasspathEntry jetEmitterClasspathEntry : jetEmitter.getClasspathEntries()) {
                    IClasspathAttribute[] classpathAttributes = jetEmitterClasspathEntry.getExtraAttributes();
                    if (classpathAttributes != null) {
                        for (IClasspathAttribute classpathAttribute : classpathAttributes) {
                            if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) {
                                Bundle bundle = Platform.getBundle(classpathAttribute.getValue());
                                if (bundle != null) {
                                    bundles.add(bundle);
                                    continue LOOP;
                                }
                            }
                        }
                    }
                    urls.add(new URL(""platform:/resource"" + jetEmitterClasspathEntry.getPath() + ""/""));
                }
                URLClassLoader theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperBundlesAction(bundles, urls));
                Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? """" : packageName + ""."") + jetCompiler.getSkeleton().getClassName());
                String methodName = jetCompiler.getSkeleton().getMethodName();
                Method[] methods = theClass.getDeclaredMethods();
                for (int i = 0; i < methods.length; ++i) {
                    if (methods[i].getName().equals(methodName)) {
                        jetEmitter.setMethod(methods[i]);
                        break;
                    }
                }
            }
            subProgressMonitor.done();
        } catch (CoreException exception) {
            throw new JETException(exception);
        } catch (Exception exception) {
            throw new JETException(exception);
        } finally {
            progressMonitor.done();
        }
    }
",False
900770,19886621,3024978,"    private void doPOST(HttpURLConnection connection, InputStream inputXML) throws MessageServiceException {
        try {
            OutputStream requestStream = new BufferedOutputStream(connection.getOutputStream());
            IOUtils.copyAndClose(inputXML, requestStream);
            connection.connect();
        } catch (IOException e) {
            throw new MessageServiceException(e.getMessage(), e);
        }
    }
","    @Test
    public void testCopy_inputStreamToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((InputStream) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",True
900771,12049052,20805884,"    private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException {
        Collection<Class<? extends Plugin>> pluginClasses = new HashSet<Class<? extends Plugin>>();
        Enumeration providerFiles = classLoader.getResources(resource);
        if (!providerFiles.hasMoreElements()) {
            logger.warning(""Can't find the resource: "" + resource);
            return pluginClasses;
        }
        do {
            URL url = (URL) providerFiles.nextElement();
            InputStream stream = url.openStream();
            BufferedReader reader;
            try {
                reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
            } catch (IOException e) {
                continue;
            }
            String line;
            while ((line = reader.readLine()) != null) {
                int index = line.indexOf('#');
                if (index != -1) {
                    line = line.substring(0, index);
                }
                line = line.trim();
                if (line.length() > 0) {
                    Class pluginClass;
                    try {
                        pluginClass = classLoader.loadClass(line);
                    } catch (ClassNotFoundException e) {
                        logger.log(Level.WARNING, ""Can't use the Pluginclass with the name "" + line + ""."", e);
                        continue;
                    }
                    if (Plugin.class.isAssignableFrom(pluginClass)) {
                        pluginClasses.add((Class<? extends Plugin>) pluginClass);
                    } else {
                        logger.warning(""The Pluginclass with the name "" + line + "" isn't a subclass of Plugin."");
                    }
                }
            }
            reader.close();
            stream.close();
        } while (providerFiles.hasMoreElements());
        return pluginClasses;
    }
","    public String preProcessHTML(String uri) {
        final StringBuffer buf = new StringBuffer();
        try {
            HTMLDocument doc = new HTMLDocument() {

                public HTMLEditorKit.ParserCallback getReader(int pos) {
                    return new HTMLEditorKit.ParserCallback() {

                        public void handleText(char[] data, int pos) {
                            buf.append(data);
                            buf.append('\n');
                        }
                    };
                }
            };
            URL url = new URI(uri).toURL();
            URLConnection conn = url.openConnection();
            Reader rd = new InputStreamReader(conn.getInputStream());
            new ParserDelegator().parse(rd, doc.getReader(0), Boolean.TRUE);
        } catch (MalformedURLException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        } catch (URISyntaxException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        }
        return buf.toString();
    }
",False
900772,3229361,3594612,"    public void copyFile(String source_name, String dest_name) throws IOException {
        File source_file = new File(source_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(QZ.PHRASES.getPhrase(""25"") + "" "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(QZ.PHRASES.getPhrase(""26"") + "" "" + QZ.PHRASES.getPhrase(""27"") + "": "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    DataInputStream in = new DataInputStream(System.in);
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""29"") + "": "" + dest_name);
                    System.out.print(QZ.PHRASES.getPhrase(""19"") + dest_name + QZ.PHRASES.getPhrase(""30"") + "": "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(QZ.PHRASES.getPhrase(""31""));
                } else throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""32"") + "": "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""33"") + "": "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(QZ.PHRASES.getPhrase(""28"") + "" "" + QZ.PHRASES.getPhrase(""34"") + "": "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            while (true) {
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
                ;
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public static String[] check() throws Exception {
        if (currentVersion == null) throw new Exception();
        URL url = new URL(versionURL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        String str = """";
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        while (br.ready()) {
            str = str + br.readLine();
        }
        br.close();
        Document document = DocumentHelper.parseText(str);
        Node node = document.selectSingleNode(""//root/version"");
        String latestVersion = node.valueOf(""@id"");
        Double latest = Double.parseDouble(latestVersion);
        Double current = Double.parseDouble(currentVersion.substring(0, currentVersion.indexOf(""-"")));
        if (latest > current) {
            String[] a = { latestVersion, node.valueOf(""@url""), node.valueOf(""@description"") };
            return a;
        }
        return null;
    }
",False
900773,13753266,416235,"    public static void s_copy(FileInputStream fis, FileOutputStream fos) throws Exception {
        FileChannel in = fis.getChannel();
        FileChannel out = fos.getChannel();
        in.transferTo(0, in.size(), out);
        if (in != null) in.close();
        if (out != null) out.close();
    }
","    static String fetchURLComposeExternPackageList(String urlpath, String pkglisturlpath) {
        String link = pkglisturlpath + ""package-list"";
        try {
            boolean relative = isRelativePath(urlpath);
            readPackageList((new URL(link)).openStream(), urlpath, relative);
        } catch (MalformedURLException exc) {
            return getText(""doclet.MalformedURL"", link);
        } catch (IOException exc) {
            return getText(""doclet.URL_error"", link);
        }
        return null;
    }
",False
900774,12202844,17337015,"    private String getMD5(String data) {
        try {
            MessageDigest md5Algorithm = MessageDigest.getInstance(""MD5"");
            md5Algorithm.update(data.getBytes(), 0, data.length());
            byte[] digest = md5Algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            String hexDigit = null;
            for (int i = 0; i < digest.length; i++) {
                hexDigit = Integer.toHexString(0xFF & digest[i]);
                if (hexDigit.length() < 2) {
                    hexDigit = ""0"" + hexDigit;
                }
                hexString.append(hexDigit);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException ne) {
            return data;
        }
    }
","    public boolean downloadFile(String webdir, String fileName, String localdir) {
        boolean result = false;
        checkDownLoadDirectory(localdir);
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(url);
            ftp.login(username, password);
            if (!"""".equals(webdir.trim())) ftp.changeDirectory(webdir);
            ftp.download(fileName, new File(localdir + ""//"" + fileName));
            result = true;
            ftp.disconnect(true);
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (FTPIllegalReplyException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (FTPDataTransferException e) {
            e.printStackTrace();
        } catch (FTPAbortedException e) {
            e.printStackTrace();
        }
        return result;
    }
",False
900775,11904056,14770723,"    public static void convertEncoding(File infile, File outfile, String from, String to) throws IOException, UnsupportedEncodingException {
        InputStream in;
        if (infile != null) in = new FileInputStream(infile); else in = System.in;
        OutputStream out;
        outfile.createNewFile();
        if (outfile != null) out = new FileOutputStream(outfile); else out = System.out;
        if (from == null) from = System.getProperty(""file.encoding"");
        if (to == null) to = ""Unicode"";
        Reader r = new BufferedReader(new InputStreamReader(in, from));
        Writer w = new BufferedWriter(new OutputStreamWriter(out, to));
        char[] buffer = new char[4096];
        int len;
        while ((len = r.read(buffer)) != -1) w.write(buffer, 0, len);
        r.close();
        w.close();
    }
","    public static boolean copyFile(File dest, File source) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        boolean rv = false;
        byte[] buf = new byte[1000000];
        int bytesRead = 0;
        if (!dest.getParentFile().exists()) dest.getParentFile().mkdirs();
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(dest);
            while ((bytesRead = fis.read(buf)) > 0) fos.write(buf, 0, bytesRead);
            fis.close();
            fis = null;
            fos.close();
            fos = null;
            rv = true;
        } catch (Throwable t) {
            throw new ApplicationException(""copy error ("" + source.getAbsolutePath() + "" => "" + dest.getAbsolutePath(), t);
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (Exception e) {
                }
                fis = null;
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (Exception e) {
                }
                fos = null;
            }
        }
        return rv;
    }
",True
900776,3167464,8917665,"    public void adicionaCliente(ClienteBean cliente) {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        String sql = ""insert into cliente(nome,cpf,telefone,cursoCargo,bloqueado,ativo,tipo) values(?,?,?,?,?,?,?)"";
        try {
            pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, cliente.getNome());
            pstmt.setString(2, cliente.getCPF());
            pstmt.setString(3, cliente.getTelefone());
            pstmt.setString(4, cliente.getCursoCargo());
            pstmt.setString(5, cliente.getBloqueado());
            pstmt.setString(6, cliente.getAtivo());
            pstmt.setString(7, cliente.getTipo());
            pstmt.executeUpdate();
            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                cliente.setIdCliente(rs.getLong(1));
            }
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (SQLException ex1) {
                throw new RuntimeException(""Erro ao inserir cliente."", ex1);
            }
            throw new RuntimeException(""Erro ao inserir cliente."", ex);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
            } catch (SQLException ex) {
                throw new RuntimeException(""Ocorreu um erro no banco de dados."", ex);
            }
        }
    }
","    public static void copyAll(URL url, StringBuilder ret) {
        Reader in = null;
        try {
            in = new InputStreamReader(new BufferedInputStream(url.openStream()));
            copyAll(in, ret);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            close(in);
        }
    }
",False
900777,20438542,20965286,"    public static Shader loadShader(String vspath, String fspath, int textureUnits, boolean separateCam, boolean fog) throws ShaderProgramProcessException {
        if (vspath == """" || fspath == """") return null;
        BufferedReader in;
        String vert = """", frag = """";
        try {
            URL v_url = Graphics.class.getClass().getResource(""/eu/cherrytree/paj/graphics/shaders/"" + vspath);
            String v_path = AppDefinition.getDefaultDataPackagePath() + ""/shaders/"" + vspath;
            if (v_url != null) in = new BufferedReader(new InputStreamReader(v_url.openStream())); else in = new BufferedReader(new InputStreamReader(new FileReader(v_path).getInputStream()));
            boolean run = true;
            String str;
            while (run) {
                str = in.readLine();
                if (str != null) vert += str + ""\n""; else run = false;
            }
            in.close();
        } catch (Exception e) {
            System.err.println(""Couldn't read in vertex shader \"""" + vspath + ""\""."");
            throw new ShaderNotLoadedException(vspath, fspath);
        }
        try {
            URL f_url = Graphics.class.getClass().getResource(""/eu/cherrytree/paj/graphics/shaders/"" + fspath);
            String f_path = AppDefinition.getDefaultDataPackagePath() + ""/shaders/"" + fspath;
            if (f_url != null) in = new BufferedReader(new InputStreamReader(f_url.openStream())); else in = new BufferedReader(new InputStreamReader(new FileReader(f_path).getInputStream()));
            boolean run = true;
            String str;
            while (run) {
                str = in.readLine();
                if (str != null) frag += str + ""\n""; else run = false;
            }
            in.close();
        } catch (Exception e) {
            System.err.println(""Couldn't read in fragment shader \"""" + fspath + ""\""."");
            throw new ShaderNotLoadedException(vspath, fspath);
        }
        return loadShaderFromSource(vert, frag, textureUnits, separateCam, fog);
    }
","    public void openAndClose(ZKEntry zke, LinkedList toOpen, LinkedList toRemove) throws SQLException {
        conn.setAutoCommit(false);
        try {
            Statement stm = conn.createStatement();
            ResultSet rset = stm.executeQuery(""SELECT now();"");
            rset.next();
            Timestamp now = rset.getTimestamp(""now()"");
            for (int i = 0; i < toRemove.size(); i++) {
                Workitem wi = (Workitem) toRemove.get(i);
                rset = stm.executeQuery(""SELECT intime, part FROM stampzk WHERE stampzkid = '"" + wi.getStampZkId() + ""';"");
                rset.next();
                long diff = now.getTime() - rset.getLong(""intime"");
                float diffp = diff * rset.getFloat(""part"");
                stm.executeUpdate(""UPDATE stampzk SET outtime='"" + now.getTime() + ""', diff='"" + diff + ""', diffp='"" + diffp + ""' WHERE stampzkid='"" + wi.getStampZkId() + ""';"");
            }
            rset = stm.executeQuery(""SELECT COUNT(*) FROM stampzk WHERE personalid='"" + zke.getWorker().getPersonalId() + ""' AND outtime='0';"");
            rset.next();
            int count = rset.getInt(""COUNT(*)"") + toOpen.size();
            rset = stm.executeQuery(""SELECT * FROM stampzk WHERE personalid='"" + zke.getWorker().getPersonalId() + ""' AND outtime='0';"");
            while (rset.next()) {
                long diff = now.getTime() - rset.getLong(""intime"");
                float diffp = diff * rset.getFloat(""part"");
                int firstId = rset.getInt(""firstid"");
                if (firstId == 0) firstId = rset.getInt(""stampzkid"");
                Statement ust = conn.createStatement();
                ust.executeUpdate(""UPDATE stampzk SET outtime='"" + now.getTime() + ""', diff='"" + diff + ""', diffp='"" + diffp + ""' WHERE stampzkid='"" + rset.getInt(""stampzkid"") + ""';"");
                ust.executeUpdate(""INSERT INTO stampzk SET zeitkid='"" + rset.getInt(""zeitkid"") + ""', personalid='"" + zke.getWorker().getPersonalId() + ""', funcsid='"" + rset.getInt(""funcsid"") + ""', part='"" + (float) 1f / count + ""', intime='"" + now.getTime() + ""', firstid='"" + firstId + ""';"");
            }
            for (int i = 0; i < toOpen.size(); i++) {
                stm.executeUpdate(""INSERT INTO stampzk SET zeitkid='"" + zke.getZeitKId() + ""', personalid='"" + zke.getWorker().getPersonalId() + ""', intime='"" + now.getTime() + ""', funcsid='"" + ((Workitem) toOpen.get(i)).getWorkType() + ""', part='"" + (float) 1f / count + ""';"");
            }
        } catch (SQLException sqle) {
            conn.rollback();
            conn.setAutoCommit(true);
            throw sqle;
        }
        conn.commit();
        conn.setAutoCommit(true);
    }
",False
900778,3345991,12863885,"    private String calculatePassword(String string) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""md5"");
            md5.update(nonce.getBytes());
            md5.update(string.getBytes());
            return toHexString(md5.digest());
        } catch (NoSuchAlgorithmException e) {
            error(""MD5 digest is no supported !!!"", ""ERROR"");
            return null;
        }
    }
","    private static String md5(String input) {
        String res = """";
        try {
            MessageDigest cript = MessageDigest.getInstance(""MD5"");
            cript.reset();
            cript.update(input.getBytes());
            byte[] md5 = cript.digest();
            String tmp = """";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += ""0"" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Log4k.error(pdfPrinter.class.getName(), ex.getMessage());
        }
        return res;
    }
",True
900779,4309920,8561731,"    public InputStream doRemoteCall(NamedList<String> params) throws IOException {
        String protocol = ""http"";
        String host = getHost();
        int port = Integer.parseInt(getPort());
        StringBuilder sb = new StringBuilder();
        for (Map.Entry entry : params) {
            Object key = entry.getKey();
            Object value = entry.getValue();
            sb.append(key).append(""="").append(value).append(""&"");
        }
        sb.setLength(sb.length() - 1);
        String file = ""/"" + getUrl() + ""/?"" + sb.toString();
        URL url = new URL(protocol, host, port, file);
        logger.debug(url.toString());
        InputStream stream;
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        try {
            stream = conn.getInputStream();
        } catch (IOException ioe) {
            InputStream is = conn.getErrorStream();
            if (is != null) {
                String msg = getStringFromInputStream(conn.getErrorStream());
                throw new IOException(msg);
            } else {
                throw ioe;
            }
        }
        return stream;
    }
","    public boolean actualizarEstadoDivision(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET terminado = '1' "" + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",False
900780,8788331,22966596,"    private void copyFromStdin(Path dst, FileSystem dstFs) throws IOException {
        if (dstFs.isDirectory(dst)) {
            throw new IOException(""When source is stdin, destination must be a file."");
        }
        if (dstFs.exists(dst)) {
            throw new IOException(""Target "" + dst.toString() + "" already exists."");
        }
        FSDataOutputStream out = dstFs.create(dst);
        try {
            IOUtils.copyBytes(System.in, out, getConf(), false);
        } finally {
            out.close();
        }
    }
","    public static void copyFile(String oldPath, String newPath) throws IOException {
        int bytesum = 0;
        int byteread = 0;
        File oldfile = new File(oldPath);
        if (oldfile.exists()) {
            InputStream inStream = new FileInputStream(oldPath);
            FileOutputStream fs = new FileOutputStream(newPath);
            byte[] buffer = new byte[1444];
            while ((byteread = inStream.read(buffer)) != -1) {
                bytesum += byteread;
                fs.write(buffer, 0, byteread);
            }
            inStream.close();
        }
    }
",True
900781,21273059,3495456,"    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }
","    public boolean crear() {
        int result = 0;
        String sql = ""insert into ronda"" + ""(divisionxTorneo_idDivisionxTorneo, fechaRonda, nRonda, estado ) "" + ""values (?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unaRonda);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
",False
900782,18675737,17987049,"    private void post(String title, Document content, Set<String> tags) throws HttpException, IOException, TransformerException {
        PostMethod method = null;
        try {
            method = new PostMethod(""http://www.blogger.com/feeds/"" + this.blogId + ""/posts/default"");
            method.addRequestHeader(""GData-Version"", String.valueOf(GDataVersion));
            method.addRequestHeader(""Authorization"", ""GoogleLogin auth="" + this.AuthToken);
            Document dom = this.domBuilder.newDocument();
            Element entry = dom.createElementNS(Atom.NS, ""entry"");
            dom.appendChild(entry);
            entry.setAttribute(""xmlns"", Atom.NS);
            Element titleNode = dom.createElementNS(Atom.NS, ""title"");
            entry.appendChild(titleNode);
            titleNode.setAttribute(""type"", ""text"");
            titleNode.appendChild(dom.createTextNode(title));
            Element contentNode = dom.createElementNS(Atom.NS, ""content"");
            entry.appendChild(contentNode);
            contentNode.setAttribute(""type"", ""xhtml"");
            contentNode.appendChild(dom.importNode(content.getDocumentElement(), true));
            for (String tag : tags) {
                Element category = dom.createElementNS(Atom.NS, ""category"");
                category.setAttribute(""scheme"", ""http://www.blogger.com/atom/ns#"");
                category.setAttribute(""term"", tag);
                entry.appendChild(category);
            }
            StringWriter out = new StringWriter();
            this.xml2ascii.transform(new DOMSource(dom), new StreamResult(out));
            method.setRequestEntity(new StringRequestEntity(out.toString(), ""application/atom+xml"", ""UTF-8""));
            int status = getHttpClient().executeMethod(method);
            if (status == 201) {
                IOUtils.copyTo(method.getResponseBodyAsStream(), System.out);
            } else {
                throw new HttpException(""post returned http-code="" + status + "" expected 201 (CREATE)"");
            }
        } catch (TransformerException err) {
            throw err;
        } catch (HttpException err) {
            throw err;
        } catch (IOException err) {
            throw err;
        } finally {
            if (method != null) method.releaseConnection();
        }
    }
","    private boolean writeResource(PluginProxy eclipseInstallPlugin, ResourceProxy translation, LocaleProxy locale) throws Exception {
        String translationResourceName = determineTranslatedResourceName(translation, locale);
        String pluginNameInDirFormat = eclipseInstallPlugin.getName().replace(Messages.getString(""Characters_period""), File.separator);
        if (translation.getRelativePath().contains(pluginNameInDirFormat)) {
            return writeResourceToBundleClasspath(translation, locale);
        } else if (translationResourceName.contains(File.separator)) {
            String resourcePath = translationResourceName.substring(0, translationResourceName.lastIndexOf(File.separatorChar));
            File resourcePathDirectory = new File(directory.getPath() + File.separatorChar + resourcePath);
            resourcePathDirectory.mkdirs();
        }
        File fragmentResource = new File(directory.getPath() + File.separatorChar + translationResourceName);
        File translatedResource = new File(translation.getFileResource().getAbsolutePath());
        FileChannel inputChannel = new FileInputStream(translatedResource).getChannel();
        FileChannel outputChannel = new FileOutputStream(fragmentResource).getChannel();
        inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        inputChannel.close();
        outputChannel.close();
        return true;
    }
",True
900783,10177034,17197906,"    public static synchronized BaseFont getL2BaseFont() {
        if (l2baseFont == null) {
            final ConfigProvider conf = ConfigProvider.getInstance();
            try {
                final ByteArrayOutputStream tmpBaos = new ByteArrayOutputStream();
                String fontPath = conf.getNotEmptyProperty(""font.path"", null);
                String fontName;
                String fontEncoding;
                InputStream tmpIs;
                if (fontPath != null) {
                    fontName = conf.getNotEmptyProperty(""font.name"", null);
                    if (fontName == null) {
                        fontName = new File(fontPath).getName();
                    }
                    fontEncoding = conf.getNotEmptyProperty(""font.encoding"", null);
                    if (fontEncoding == null) {
                        fontEncoding = BaseFont.WINANSI;
                    }
                    tmpIs = new FileInputStream(fontPath);
                } else {
                    fontName = Constants.L2TEXT_FONT_NAME;
                    fontEncoding = BaseFont.IDENTITY_H;
                    tmpIs = FontUtils.class.getResourceAsStream(Constants.L2TEXT_FONT_PATH);
                }
                IOUtils.copy(tmpIs, tmpBaos);
                tmpIs.close();
                tmpBaos.close();
                l2baseFont = BaseFont.createFont(fontName, fontEncoding, BaseFont.EMBEDDED, BaseFont.CACHED, tmpBaos.toByteArray(), null);
            } catch (Exception e) {
                e.printStackTrace();
                try {
                    l2baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
                } catch (Exception ex) {
                }
            }
        }
        return l2baseFont;
    }
","    public void run() {
        LogPrinter.log(Level.FINEST, ""Started Download at : {0, date, long}"", new Date());
        if (!PipeConnected) {
            throw new IllegalStateException(""You should connect the pipe before with getInputStream()"");
        }
        InputStream ins = null;
        if (IsAlreadyDownloaded) {
            LogPrinter.log(Level.FINEST, ""The file already Exists open and foward the byte"");
            try {
                ContentLength = (int) TheAskedFile.length();
                ContentType = URLConnection.getFileNameMap().getContentTypeFor(TheAskedFile.getName());
                ins = new FileInputStream(TheAskedFile);
                byte[] buffer = new byte[BUFFER_SIZE];
                int read = ins.read(buffer);
                while (read >= 0) {
                    Pipe.write(buffer, 0, read);
                    read = ins.read(buffer);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (ins != null) {
                    try {
                        ins.close();
                    } catch (IOException e) {
                    }
                }
            }
        } else {
            LogPrinter.log(Level.FINEST, ""the file does not exist locally so we try to download the thing"");
            File theDir = TheAskedFile.getParentFile();
            if (!theDir.exists()) {
                theDir.mkdirs();
            }
            for (URL url : ListFastest) {
                FileOutputStream fout = null;
                boolean OnError = false;
                long timestart = System.currentTimeMillis();
                long bytecount = 0;
                try {
                    URL newUrl = new URL(url.toString() + RequestedFile);
                    LogPrinter.log(Level.FINEST, ""the download URL = {0}"", newUrl);
                    URLConnection conn = newUrl.openConnection();
                    ContentType = conn.getContentType();
                    ContentLength = conn.getContentLength();
                    ins = conn.getInputStream();
                    fout = new FileOutputStream(TheAskedFile);
                    byte[] buffer = new byte[BUFFER_SIZE];
                    int read = ins.read(buffer);
                    while (read >= 0) {
                        fout.write(buffer, 0, read);
                        Pipe.write(buffer, 0, read);
                        read = ins.read(buffer);
                        bytecount += read;
                    }
                    Pipe.flush();
                } catch (IOException e) {
                    OnError = true;
                } finally {
                    if (ins != null) {
                        try {
                            ins.close();
                        } catch (IOException e) {
                        }
                    }
                    if (fout != null) {
                        try {
                            fout.close();
                        } catch (IOException e) {
                        }
                    }
                }
                long timeend = System.currentTimeMillis();
                if (OnError) {
                    continue;
                } else {
                    long timetook = timeend - timestart;
                    BigDecimal speed = new BigDecimal(bytecount).multiply(new BigDecimal(1000)).divide(new BigDecimal(timetook), MathContext.DECIMAL32);
                    for (ReportCalculatedStatistique report : Listener) {
                        report.reportUrlStat(url, speed, timetook);
                    }
                    break;
                }
            }
        }
        LogPrinter.log(Level.FINEST, ""download finished at {0,date,long}"", new Date());
        if (Pipe != null) {
            try {
                Pipe.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",True
900784,17141933,17829989,"    public static InputSource getInputSource(URL url) throws IOException {
        String proto = url.getProtocol().toLowerCase();
        if (!(""http"".equals(proto) || ""https"".equals(proto))) throw new IllegalArgumentException(""OAI-PMH only allows HTTP(S) as network protocol!"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        StringBuilder ua = new StringBuilder(""Java/"");
        ua.append(System.getProperty(""java.version""));
        ua.append("" ("");
        ua.append(OAIHarvester.class.getName());
        ua.append(')');
        conn.setRequestProperty(""User-Agent"", ua.toString());
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate, identity;q=0.3, *;q=0"");
        conn.setRequestProperty(""Accept-Charset"", ""utf-8, *;q=0.1"");
        conn.setRequestProperty(""Accept"", ""text/xml, application/xml, *;q=0.1"");
        conn.setUseCaches(false);
        conn.setFollowRedirects(true);
        log.debug(""Opening connection..."");
        InputStream in = null;
        try {
            conn.connect();
            in = conn.getInputStream();
        } catch (IOException ioe) {
            int after, code;
            try {
                after = conn.getHeaderFieldInt(""Retry-After"", -1);
                code = conn.getResponseCode();
            } catch (IOException ioe2) {
                after = -1;
                code = -1;
            }
            if (code == HttpURLConnection.HTTP_UNAVAILABLE && after > 0) throw new RetryAfterIOException(after, ioe);
            throw ioe;
        }
        String encoding = conn.getContentEncoding();
        if (encoding == null) encoding = ""identity"";
        encoding = encoding.toLowerCase();
        log.debug(""HTTP server uses "" + encoding + "" content encoding."");
        if (""gzip"".equals(encoding)) in = new GZIPInputStream(in); else if (""deflate"".equals(encoding)) in = new InflaterInputStream(in); else if (!""identity"".equals(encoding)) throw new IOException(""Server uses an invalid content encoding: "" + encoding);
        String contentType = conn.getContentType();
        String charset = null;
        if (contentType != null) {
            contentType = contentType.toLowerCase();
            int charsetStart = contentType.indexOf(""charset="");
            if (charsetStart >= 0) {
                int charsetEnd = contentType.indexOf("";"", charsetStart);
                if (charsetEnd == -1) charsetEnd = contentType.length();
                charsetStart += ""charset="".length();
                charset = contentType.substring(charsetStart, charsetEnd).trim();
            }
        }
        log.debug(""Charset from Content-Type: '"" + charset + ""'"");
        InputSource src = new InputSource(in);
        src.setSystemId(url.toString());
        src.setEncoding(charset);
        return src;
    }
","        @Override
        public void run() {
            File dir = new File(loggingDir);
            if (!dir.isDirectory()) {
                logger.error(""Logging directory \"""" + dir.getAbsolutePath() + ""\"" does not exist."");
                return;
            }
            File file = new File(dir, new Date().toString().replaceAll(""[ ,:]"", """") + ""LoadBalancerLog.txt"");
            FileWriter writer;
            try {
                writer = new FileWriter(file);
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            int counter = 0;
            while (!isInterrupted() && counter < numProbes) {
                try {
                    writer.write(System.currentTimeMillis() + "","" + currentPending + "","" + currentThreads + "","" + droppedTasks + "","" + executionExceptions + "","" + currentWeight + "","" + averageWaitTime + "","" + averageExecutionTime + ""#"");
                    writer.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                    break;
                }
                counter++;
                try {
                    sleep(probeTime);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    break;
                }
            }
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
            FileReader reader;
            try {
                reader = new FileReader(file);
            } catch (FileNotFoundException e2) {
                e2.printStackTrace();
                return;
            }
            Vector<StatStorage> dataV = new Vector<StatStorage>();
            int c;
            try {
                c = reader.read();
            } catch (IOException e1) {
                e1.printStackTrace();
                c = -1;
            }
            String entry = """";
            Date startTime = null;
            Date stopTime = null;
            while (c != -1) {
                if (c == 35) {
                    String parts[] = entry.split("","");
                    if (startTime == null) startTime = new Date(Long.parseLong(parts[0]));
                    if (parts.length > 0) dataV.add(parse(parts));
                    stopTime = new Date(Long.parseLong(parts[0]));
                    entry = """";
                } else {
                    entry += (char) c;
                }
                try {
                    c = reader.read();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (dataV.size() > 0) {
                int[] dataPending = new int[dataV.size()];
                int[] dataOccupied = new int[dataV.size()];
                long[] dataDropped = new long[dataV.size()];
                long[] dataException = new long[dataV.size()];
                int[] dataWeight = new int[dataV.size()];
                long[] dataExecution = new long[dataV.size()];
                long[] dataWait = new long[dataV.size()];
                for (int i = 0; i < dataV.size(); i++) {
                    dataPending[i] = dataV.get(i).pending;
                    dataOccupied[i] = dataV.get(i).occupied;
                    dataDropped[i] = dataV.get(i).dropped;
                    dataException[i] = dataV.get(i).exceptions;
                    dataWeight[i] = dataV.get(i).currentWeight;
                    dataExecution[i] = (long) dataV.get(i).executionTime;
                    dataWait[i] = (long) dataV.get(i).waitTime;
                }
                String startName = startTime.toString();
                startName = startName.replaceAll(""[ ,:]"", """");
                file = new File(dir, startName + ""pending.gif"");
                SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""occupied.gif"");
                SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""dropped.gif"");
                SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""exceptions.gif"");
                SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""weight.gif"");
                SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""execution.gif"");
                SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0));
                file = new File(dir, startName + ""wait.gif"");
                SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0));
            }
            recordedExecutionThreads = 0;
            recordedWaitingThreads = 0;
            averageExecutionTime = 0;
            averageWaitTime = 0;
            if (!isLocked) {
                debugThread = new DebugThread();
                debugThread.start();
            }
        }
",False
900785,433062,120707,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900786,21456138,3767763,"    @TestTargetNew(level = TestLevel.COMPLETE, notes = """", method = ""getServerCertificates"", args = {  })
    public final void test_getServerCertificates() throws Exception {
        try {
            URL url = new URL(""https://localhost:55555"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                connection.getServerCertificates();
                fail(""IllegalStateException wasn't thrown"");
            } catch (IllegalStateException ise) {
            }
        } catch (Exception e) {
            fail(""Unexpected exception "" + e + "" for exception case"");
        }
        HttpsURLConnection con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.508"");
        try {
            Certificate[] cert = con.getServerCertificates();
            fail(""SSLPeerUnverifiedException wasn't thrown"");
        } catch (SSLPeerUnverifiedException e) {
        }
        con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.509"");
        try {
            Certificate[] cert = con.getServerCertificates();
            assertNotNull(cert);
            assertEquals(1, cert.length);
        } catch (Exception e) {
            fail(""Unexpected exception "" + e);
        }
    }
","    @Override
    public long insertStatement(String sql) {
        Statement statement = null;
        try {
            statement = getConnection().createStatement();
            long result = statement.executeUpdate(sql.toString());
            if (result == 0) log.warn(sql + "" result row count is 0"");
            getConnection().commit();
            return getInsertId(statement);
        } catch (SQLException e) {
            try {
                getConnection().rollback();
            } catch (SQLException e1) {
                log.error(e1.getMessage(), e1);
            }
            log.error(e.getMessage(), e);
            throw new RuntimeException();
        } finally {
            try {
                statement.close();
                getConnection().close();
            } catch (SQLException e) {
                log.error(e.getMessage(), e);
            }
        }
    }
",False
900787,5751313,13396233,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            closeQuietly(in);
            closeQuietly(out);
        }
        return success;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900788,12232011,17726029,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    private String getRandomGUID(final boolean secure) {
        MessageDigest md5 = null;
        final StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        try {
            final long time = System.currentTimeMillis();
            final long rand;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            final byte[] array = md5.digest();
            final StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                final int bufferIndex = array[j] & SHIFT_SPACE;
                if (ZERO_TEST > bufferIndex) sb.append(CHAR_ZERO);
                sb.append(Integer.toHexString(bufferIndex));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",False
900789,6166363,20306674,"    private static byte[] gerarHash(String frase) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(frase.getBytes());
            return md.digest();
        } catch (Exception e) {
            return null;
        }
    }
","    public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_BILL""));
            pst.setDate(1, new java.sql.Date(bill.getDate().getTime()));
            pst.setInt(2, bill.getIdAccount());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id) from bill"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",False
900790,13048962,14267319,"    public final void saveAsCopy(String current_image, String destination) {
        BufferedInputStream from = null;
        BufferedOutputStream to = null;
        String source = temp_dir + key + current_image;
        try {
            from = new BufferedInputStream(new FileInputStream(source));
            to = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[65535];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } catch (Exception e) {
            LogWriter.writeLog(""Exception "" + e + "" copying file"");
        }
        try {
            to.close();
            from.close();
        } catch (Exception e) {
            LogWriter.writeLog(""Exception "" + e + "" closing files"");
        }
    }
","    public void run() {
        BufferedInputStream bis = null;
        URLConnection url = null;
        String textType = null;
        StringBuffer sb = new StringBuffer();
        try {
            if (!location.startsWith(""http://"")) {
                location = ""http://"" + location;
            }
            url = (new URL(location)).openConnection();
            size = url.getContentLength();
            textType = url.getContentType();
            lastModified = url.getIfModifiedSince();
            InputStream is = url.getInputStream();
            bis = new BufferedInputStream(is);
            if (textType.startsWith(""text/plain"")) {
                int i;
                i = bis.read();
                ++position;
                status = ""    Reading From URL..."";
                this.setChanged();
                this.notifyObservers();
                while (i != END_OF_STREAM) {
                    sb.append((char) i);
                    i = bis.read();
                    ++position;
                    if (position % (size / 25) == 0) {
                        this.setChanged();
                        this.notifyObservers();
                    }
                    if (abortLoading) {
                        break;
                    }
                }
                status = ""    Finished reading URL..."";
            } else if (textType.startsWith(""text/html"")) {
                int i;
                i = bis.read();
                char c = (char) i;
                ++position;
                status = ""    Reading From URL..."";
                this.setChanged();
                this.notifyObservers();
                boolean enclosed = false;
                if (c == '<') {
                    enclosed = true;
                }
                while (i != END_OF_STREAM) {
                    if (enclosed) {
                        if (c == '>') {
                            enclosed = false;
                        }
                    } else {
                        if (c == '<') {
                            enclosed = true;
                        } else {
                            sb.append((char) i);
                        }
                    }
                    i = bis.read();
                    c = (char) i;
                    ++position;
                    if (size == 0) {
                        if (position % (size / 25) == 0) {
                            this.setChanged();
                            this.notifyObservers();
                        }
                    }
                    if (abortLoading) {
                        break;
                    }
                }
                status = ""    Finished reading URL..."";
            } else {
                status = ""    Unable to read document type: "" + textType + ""..."";
            }
            bis.close();
            try {
                document.insertString(0, sb.toString(), SimpleAttributeSet.EMPTY);
            } catch (BadLocationException ble) {
                ble.printStackTrace();
            }
            finished = true;
            this.setChanged();
            this.notifyObservers();
        } catch (IOException ioe) {
            try {
                document.insertString(0, sb.toString(), SimpleAttributeSet.EMPTY);
            } catch (BadLocationException ble) {
                ble.printStackTrace();
            }
            status = ""    IO Error Reading From URL..."";
            finished = true;
            this.setChanged();
            this.notifyObservers();
        }
    }
",False
900791,12243391,21609544,"    private byte[] getMD5(String string) throws IMException {
        byte[] buffer = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(string.getBytes(""utf-8""));
            buffer = md.digest();
            buffer = getHexString(buffer);
        } catch (NoSuchAlgorithmException e) {
            throw new IMException(e);
        } catch (UnsupportedEncodingException ue) {
            throw new IMException(ue);
        }
        return buffer;
    }
","    public static JSONObject delete(String uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpGet get = new HttpGet(DELETE_URI + ""?uid="" + uid);
        HttpResponse response = client.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            return new JSONObject(res);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
",False
900792,5953607,2252378,"    public synchronized void write() throws IOException {
        ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath));
        int index = className.lastIndexOf('.');
        String packageName = className.substring(0, index);
        String clazz = className.substring(index + 1);
        String directory = packageName.replace('.', '/');
        ZipEntry dummyClass = new ZipEntry(directory + ""/"" + clazz + "".class"");
        jar.putNextEntry(dummyClass);
        ClassGen classgen = new ClassGen(getClassName(), ""java.lang.Object"", ""<generated>"", Constants.ACC_PUBLIC | Constants.ACC_SUPER, null);
        byte[] bytes = classgen.getJavaClass().getBytes();
        jar.write(bytes);
        jar.closeEntry();
        ZipEntry synthFile = new ZipEntry(directory + ""/synth.xml"");
        jar.putNextEntry(synthFile);
        Comment comment = new Comment(""Generated by SynthBuilder from L2FProd.com"");
        Element root = new Element(""synth"");
        root.addAttribute(new Attribute(""version"", ""1""));
        root.appendChild(comment);
        Element defaultStyle = new Element(""style"");
        defaultStyle.addAttribute(new Attribute(""id"", ""default""));
        Element defaultFont = new Element(""font"");
        defaultFont.addAttribute(new Attribute(""name"", ""SansSerif""));
        defaultFont.addAttribute(new Attribute(""size"", ""12""));
        defaultStyle.appendChild(defaultFont);
        Element defaultState = new Element(""state"");
        defaultStyle.appendChild(defaultState);
        root.appendChild(defaultStyle);
        Element bind = new Element(""bind"");
        bind.addAttribute(new Attribute(""style"", ""default""));
        bind.addAttribute(new Attribute(""type"", ""region""));
        bind.addAttribute(new Attribute(""key"", "".*""));
        root.appendChild(bind);
        doc = new Document(root);
        imagesToCopy = new HashMap();
        ComponentStyle[] styles = config.getStyles();
        for (ComponentStyle element : styles) {
            write(element);
        }
        Serializer writer = new Serializer(jar);
        writer.setIndent(2);
        writer.write(doc);
        writer.flush();
        jar.closeEntry();
        for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) {
            String element = (String) iter.next();
            File pathToImage = (File) imagesToCopy.get(element);
            ZipEntry image = new ZipEntry(directory + ""/"" + element);
            jar.putNextEntry(image);
            FileInputStream input = new FileInputStream(pathToImage);
            int read = -1;
            while ((read = input.read()) != -1) {
                jar.write(read);
            }
            input.close();
            jar.flush();
            jar.closeEntry();
        }
        jar.flush();
        jar.close();
    }
","    private static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900793,10076077,20265649,"    @Override
    public void save(String arxivId, InputStream inputStream, String encoding) {
        String filename = StringUtil.arxivid2filename(arxivId, ""tex"");
        try {
            Writer writer = new OutputStreamWriter(new FileOutputStream(String.format(""%s/%s"", LATEX_DOCUMENT_DIR, filename)), encoding);
            IOUtils.copy(inputStream, writer, encoding);
            writer.flush();
            writer.close();
            inputStream.close();
        } catch (IOException e) {
            logger.error(""Failed to save the Latex source with id='{}'"", arxivId, e);
            throw new RuntimeException(e);
        }
    }
","    public static void setFinishedFlag(String ip, String port, String user, String dbname, String password, int flag) throws Exception {
        String sql = ""update flag set flag = "" + flag;
        Connection conn = CubridDBCenter.getConnection(ip, port, dbname, user, password);
        System.out.println(""====:::==="" + ip);
        Statement stmt = null;
        try {
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);
            conn.commit();
        } catch (Exception ex) {
            ex.printStackTrace();
            conn.rollback();
            throw ex;
        } finally {
            stmt.close();
            conn.close();
        }
    }
",False
900794,22564546,1577152,"    public void unzip(String resource) {
        File f = new File(resource);
        if (!f.exists()) throw new RuntimeException(""The specified resources does not exist ("" + resource + "")"");
        String parent = f.getParent().toString();
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(resource);
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                log.info(""Extracting archive entry: "" + entry);
                String entryPath = new StringBuilder(parent).append(System.getProperty(""file.separator"")).append(entry.getName()).toString();
                if (entry.isDirectory()) {
                    log.info(""Creating directory: "" + entryPath);
                    (new File(entryPath)).mkdir();
                    continue;
                }
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(entryPath);
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","            public void run() {
                try {
                    File inf = new File(dest);
                    if (!inf.exists()) {
                        inf.getParentFile().mkdirs();
                    }
                    FileChannel in = new FileInputStream(src).getChannel();
                    FileChannel out = new FileOutputStream(dest).getChannel();
                    out.transferFrom(in, 0, in.size());
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.err.println(""Error copying file \n"" + src + ""\n"" + dest);
                }
            }
",True
900795,4228617,5537139,"    public static String createHash(String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't happen!"", e);
        }
        try {
            md.update(seed.getBytes(CHARSET));
            md.update(String.valueOf(System.currentTimeMillis()).getBytes(CHARSET));
            return toHexString(md.digest());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""Can't happen!"", e);
        }
    }
","    public static String getDigest(String seed, byte[] code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(seed.getBytes(""UTF-8""));
            byte[] passwordMD5Byte = md.digest(code);
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < passwordMD5Byte.length; i++) sb.append(Integer.toHexString(passwordMD5Byte[i] & 0XFF));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            log.error(e);
            return null;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            log.error(e);
            return null;
        }
    }
",True
900796,276152,14409851,"    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
","    public void test() throws Exception {
        File temp = File.createTempFile(""test"", "".test"");
        temp.deleteOnExit();
        StorageFile s = new StorageFile(temp, ""UTF-8"");
        s.addText(""Test"");
        s.getOutputStream().write(""ing is important"".getBytes(""UTF-8""));
        s.getWriter().write("" but overrated"");
        assertEquals(""Testing is important but overrated"", s.getText());
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important but overrated"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important but overrated"", writer.toString());
        try {
            s.getOutputStream();
            fail(""Should thow an IOException as it is closed."");
        } catch (IOException e) {
        }
    }
",True
900797,22259089,10760907,"    private ChangeCapsule fetchServer(OWLOntology ontologyURI, Long sequenceNumber) throws IOException {
        String requestString = ""http://"" + InetAddress.getLocalHost().getHostName() + "":8080/ChangeServer"";
        requestString += ""?fetch="" + URLEncoder.encode(ontologyURI.getURI().toString(), ""UTF-8"");
        requestString += ""&number"" + sequenceNumber;
        URL url = new URL(requestString);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer returned = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            returned.append(str);
        }
        input.close();
        ChangeCapsule cp = new ChangeCapsule(returned.toString());
        return cp;
    }
","    public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException {
        ByteArrayInputStream bais = null;
        FileOutputStream fos = null;
        try {
            if ((files == null) || (files.size() <= 0)) {
                return;
            }
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            Users user = getUser(hsession, repositoryName);
            Identity identity = getDefaultIdentity(hsession, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            for (int i = 0; i < files.size(); i++) {
                MultiPartEmail email = email = new MultiPartEmail();
                email.setCharset(charset);
                if (_from != null) {
                    email.setFrom(_from.getAddress(), _from.getPersonal());
                }
                if (_returnPath != null) {
                    email.addHeader(""Return-Path"", _returnPath.getAddress());
                    email.addHeader(""Errors-To"", _returnPath.getAddress());
                    email.addHeader(""X-Errors-To"", _returnPath.getAddress());
                }
                if (_replyTo != null) {
                    email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
                }
                if (_to != null) {
                    email.addTo(_to.getAddress(), _to.getPersonal());
                }
                MailPartObj obj = (MailPartObj) files.get(i);
                email.setSubject(""Files-System "" + obj.getName());
                Date now = new Date();
                email.setSentDate(now);
                File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
                if (!dir.exists()) {
                    dir.mkdir();
                }
                File file = new File(dir, obj.getName());
                bais = new ByteArrayInputStream(obj.getAttachent());
                fos = new FileOutputStream(file);
                IOUtils.copy(bais, fos);
                IOUtils.closeQuietly(bais);
                IOUtils.closeQuietly(fos);
                EmailAttachment attachment = new EmailAttachment();
                attachment.setPath(file.getPath());
                attachment.setDisposition(EmailAttachment.ATTACHMENT);
                attachment.setDescription(""File Attachment: "" + file.getName());
                attachment.setName(file.getName());
                email.attach(attachment);
                String mid = getId();
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(""X-DBox"", ""FILES"");
                email.addHeader(""X-DRecent"", ""false"");
                email.setMailSession(session);
                email.buildMimeMessage();
                MimeMessage mime = email.getMimeMessage();
                int size = MessageUtilities.getMessageSize(mime);
                if (!controlQuota(hsession, user, size)) {
                    throw new MailException(""ErrorMessages.mail.quota.exceded"");
                }
                messageable.storeMessage(mid, mime, user);
            }
        } catch (FilesException e) {
            throw e;
        } catch (Exception e) {
            throw new FilesException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new FilesException(ex);
        } catch (Throwable e) {
            throw new FilesException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
            IOUtils.closeQuietly(bais);
            IOUtils.closeQuietly(fos);
        }
    }
",False
900798,3474688,9593394,"    public void connect(final URLConnectAdapter urlAdapter) {
        if (this.connectSettings == null) {
            throw new IllegalStateException(""Invalid Connect Settings (is null)"");
        }
        final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();
        BufferedReader in;
        try {
            in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
            final StringBuilder buf = new StringBuilder(200);
            String str;
            while ((str = in.readLine()) != null) {
                buf.append(str);
                buf.append('\n');
            }
            final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());
            final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {
                final String key = entry.getKey();
                final List<String> val = entry.getValue();
                if ((val != null) && (val.size() > 1)) {
                    System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());
                }
                if (key != null) {
                    result.addHeader(key, val.get(0), val);
                } else {
                    result.addHeader(""Status"", val.get(0), val);
                }
            }
            this.lastResult = result;
        } catch (IOException e) {
            throw new ConnectException(e);
        }
    }
","    private RatingServiceSelectionResponseType contactService(String xmlInputString) throws Exception {
        OutputStream outputStream = null;
        RatingServiceSelectionResponseType rType = null;
        try {
            URL url = new URL(ENDPOINT_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setUseCaches(false);
            outputStream = connection.getOutputStream();
            outputStream.write(xmlInputString.getBytes());
            outputStream.flush();
            outputStream.close();
            rType = readURLConnection(connection);
            connection.disconnect();
        } catch (Exception e) {
            throw e;
        } finally {
            if (outputStream != null) {
                outputStream.close();
                outputStream = null;
            }
        }
        return rType;
    }
",False
900799,9891128,10482004,"    private static void readIzvestiyaArticles() throws IOException {
        CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream(""mathnet_izvestiya.csv"")), ';');
        reader.setTrimWhitespace(true);
        try {
            while (reader.readRecord()) {
                String id = reader.get(0);
                String filename = reader.get(1);
                StringTokenizer st = new StringTokenizer(filename, ""-."");
                String name = st.nextToken();
                String volume = st.nextToken();
                String year = st.nextToken();
                String extension = st.nextToken();
                String filepath = String.format(""%s/%s/%s-%s.%s"", year, volume.length() == 1 ? ""0"" + volume : volume, name, volume, extension);
                id2filename.put(id, filepath);
            }
        } finally {
            reader.close();
        }
        for (Map.Entry<String, String> entry : id2filename.entrySet()) {
            String filepath = String.format(""%s/%s"", INPUT_DIR, entry.getValue());
            filepath = new File(filepath).exists() ? filepath : filepath.replace("".tex"", "".TEX"");
            if (new File(filepath).exists()) {
                InputStream in = new FileInputStream(filepath);
                FileOutputStream out = new FileOutputStream(String.format(""%s/%s.tex"", OUTPUT_DIR, entry.getKey()), false);
                try {
                    org.apache.commons.io.IOUtils.copy(in, out);
                } catch (Exception e) {
                    org.apache.commons.io.IOUtils.closeQuietly(in);
                    org.apache.commons.io.IOUtils.closeQuietly(out);
                }
            } else {
                logger.log(Level.INFO, ""File with the path="" + filepath + "" doesn't exist"");
            }
        }
    }
","    public static void main(String[] args) throws IOException {
        System.out.println(""Start filtering zgps..."");
        final Config config = ConfigUtils.loadConfig(args[0]);
        final String CONFIG_MODULE = ""GPSFilterZGPS"";
        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));
        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));
        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));
        System.out.println(""Start reading selected stages..."");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedStages);
        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");
        System.out.println(""Start reading and writing zgps..."");
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));
            out.write(in.readLine());
            out.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = in.readLine()) != null) {
                String[] entries = lineFromInputFile.split(""\t"");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    out.write(lineFromInputFile);
                    out.newLine();
                    out.flush();
                }
            }
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""Could not find source file for selected stages."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IO Exception while reading or writing zgps."");
            e.printStackTrace();
        }
        System.out.println(""Done."");
    }
",True
900800,7306114,4318399,"    @Override
    public void setOntology2Document(URL url2) throws IllegalArgumentException {
        if (url2 == null) throw new IllegalArgumentException(""Input parameter URL for ontology 2 is null."");
        try {
            ont2 = OWLManager.createOWLOntologyManager().loadOntologyFromOntologyDocument(url2.openStream());
        } catch (IOException e) {
            throw new IllegalArgumentException(""Cannot open stream for ontology 2 from given URL."");
        } catch (OWLOntologyCreationException e) {
            throw new IllegalArgumentException(""Cannot load ontology 2 from given URL."");
        }
    }
","    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) {
        LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList();
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        for (int i = 0; i < fileList.size(); i++) {
            if (fileList.get(i).getId().equals(entry.getName())) {
                for (int j = 0; j < restoreList.size(); j++) {
                    if ((fileList.get(i).getName() + ""."" + fileList.get(i).getType()).equals(restoreList.get(j))) {
                        counter += 1;
                        File outputFile = new File(outputDir, fileList.get(i).getName() + ""."" + fileList.get(i).getType());
                        if (!outputFile.getParentFile().exists()) {
                            createDir(outputFile.getParentFile());
                        }
                        BufferedInputStream inputStream;
                        BufferedOutputStream outputStream;
                        try {
                            inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
                            outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
                            IOUtils.copy(inputStream, outputStream);
                            outputStream.close();
                            inputStream.close();
                        } catch (IOException ex) {
                            throw new BackupException(ex.getMessage());
                        }
                    }
                }
            }
        }
    }
",False
900801,10437938,22568530,"    protected Document loadDocument() throws MalformedURLException, DocumentException, IOException {
        if (jiraFilterURL.startsWith(""file"")) {
            URL url = getSourceURL();
            return parseDocument(url);
        } else {
            HttpClient httpClient = new DefaultHttpClient();
            List<NameValuePair> formparams = new ArrayList<NameValuePair>();
            formparams.add(new BasicNameValuePair(""os_username"", jiraUser));
            formparams.add(new BasicNameValuePair(""os_password"", jiraPassword));
            formparams.add(new BasicNameValuePair(""os_cookie"", ""true""));
            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, ""UTF-8"");
            HttpPost post = new HttpPost(getJiraRootUrl() + ""/secure/login.jsp"");
            post.setEntity(entity);
            HttpResponse response = httpClient.execute(post);
            response.getEntity().consumeContent();
            String url_str = StringEscapeUtils.unescapeXml(jiraFilterURL);
            HttpGet get = new HttpGet(url_str);
            response = httpClient.execute(get);
            return parseDocument(response.getEntity().getContent());
        }
    }
","    private InputStream callService(String text) {
        InputStream in = null;
        try {
            URL url = new URL(SERVLET_URL);
            URLConnection conn = url.openConnection();
            HttpURLConnection httpConn = (HttpURLConnection) conn;
            httpConn.setRequestMethod(""POST"");
            httpConn.setDoInput(true);
            httpConn.setDoOutput(true);
            httpConn.connect();
            DataOutputStream dataStream = new DataOutputStream(conn.getOutputStream());
            dataStream.writeBytes(text);
            dataStream.flush();
            dataStream.close();
            int responseCode = httpConn.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                in = httpConn.getInputStream();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return in;
    }
",False
900802,5339736,9127823,"    public static String translate(String s) {
        try {
            String result = null;
            URL url = new URL(""http://translate.google.com/translate_t"");
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""text="" + URLEncoder.encode(s, ""UTF-8"") + ""&langpair="");
            if (s.matches(""[\\u0000-\\u00ff]+"")) {
                out.print(""en|ja"");
            } else {
                out.print(""ja|en"");
            }
            out.print(""&hl=en&ie=UTF-8&oe=UTF-8"");
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int textPos = inputLine.indexOf(""id=result_box"");
                if (textPos >= 0) {
                    int ltrPos = inputLine.indexOf(""dir=ltr"", textPos + 9);
                    if (ltrPos >= 0) {
                        int closePos = inputLine.indexOf(""<"", ltrPos + 8);
                        if (closePos >= 0) {
                            result = inputLine.substring(ltrPos + 8, closePos);
                        }
                    }
                }
            }
            in.close();
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
","    public static Status checkUpdate() {
        Status updateStatus = Status.FAILURE;
        URL url;
        InputStream is;
        InputStreamReader isr;
        BufferedReader r;
        String line;
        try {
            url = new URL(updateURL);
            is = url.openStream();
            isr = new InputStreamReader(is);
            r = new BufferedReader(isr);
            String variable, value;
            while ((line = r.readLine()) != null) {
                if (!line.equals("""") && line.charAt(0) != '/') {
                    variable = line.substring(0, line.indexOf('='));
                    value = line.substring(line.indexOf('=') + 1);
                    if (variable.equals(""Latest Version"")) {
                        variable = value;
                        value = variable.substring(0, variable.indexOf("" ""));
                        variable = variable.substring(variable.indexOf("" "") + 1);
                        latestGameVersion = value;
                        latestModifier = variable;
                        if (Float.parseFloat(value) > Float.parseFloat(gameVersion)) updateStatus = Status.NOT_CURRENT; else updateStatus = Status.CURRENT;
                    } else if (variable.equals(""Download URL"")) downloadURL = value;
                }
            }
            return updateStatus;
        } catch (MalformedURLException e) {
            return Status.URL_NOT_FOUND;
        } catch (IOException e) {
            return Status.FAILURE;
        }
    }
",True
900803,15537156,614390,"    private void copy(String inputPath, String outputPath, String name) {
        try {
            FileReader in = new FileReader(inputPath + name);
            FileWriter out = new FileWriter(outputPath + name);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900804,12626918,10760907,"    public void xtestURL2() throws Exception {
        URL url = new URL(IOTest.URL);
        InputStream inputStream = url.openStream();
        OutputStream outputStream = new FileOutputStream(""C:/Temp/testURL2.mp4"");
        IOUtils.copy(inputStream, outputStream);
        inputStream.close();
        outputStream.close();
    }
","    public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException {
        ByteArrayInputStream bais = null;
        FileOutputStream fos = null;
        try {
            if ((files == null) || (files.size() <= 0)) {
                return;
            }
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            Users user = getUser(hsession, repositoryName);
            Identity identity = getDefaultIdentity(hsession, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            for (int i = 0; i < files.size(); i++) {
                MultiPartEmail email = email = new MultiPartEmail();
                email.setCharset(charset);
                if (_from != null) {
                    email.setFrom(_from.getAddress(), _from.getPersonal());
                }
                if (_returnPath != null) {
                    email.addHeader(""Return-Path"", _returnPath.getAddress());
                    email.addHeader(""Errors-To"", _returnPath.getAddress());
                    email.addHeader(""X-Errors-To"", _returnPath.getAddress());
                }
                if (_replyTo != null) {
                    email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
                }
                if (_to != null) {
                    email.addTo(_to.getAddress(), _to.getPersonal());
                }
                MailPartObj obj = (MailPartObj) files.get(i);
                email.setSubject(""Files-System "" + obj.getName());
                Date now = new Date();
                email.setSentDate(now);
                File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
                if (!dir.exists()) {
                    dir.mkdir();
                }
                File file = new File(dir, obj.getName());
                bais = new ByteArrayInputStream(obj.getAttachent());
                fos = new FileOutputStream(file);
                IOUtils.copy(bais, fos);
                IOUtils.closeQuietly(bais);
                IOUtils.closeQuietly(fos);
                EmailAttachment attachment = new EmailAttachment();
                attachment.setPath(file.getPath());
                attachment.setDisposition(EmailAttachment.ATTACHMENT);
                attachment.setDescription(""File Attachment: "" + file.getName());
                attachment.setName(file.getName());
                email.attach(attachment);
                String mid = getId();
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(""X-DBox"", ""FILES"");
                email.addHeader(""X-DRecent"", ""false"");
                email.setMailSession(session);
                email.buildMimeMessage();
                MimeMessage mime = email.getMimeMessage();
                int size = MessageUtilities.getMessageSize(mime);
                if (!controlQuota(hsession, user, size)) {
                    throw new MailException(""ErrorMessages.mail.quota.exceded"");
                }
                messageable.storeMessage(mid, mime, user);
            }
        } catch (FilesException e) {
            throw e;
        } catch (Exception e) {
            throw new FilesException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new FilesException(ex);
        } catch (Throwable e) {
            throw new FilesException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
            IOUtils.closeQuietly(bais);
            IOUtils.closeQuietly(fos);
        }
    }
",True
900805,14058408,13046328,"    private static void zipFolder(File folder, ZipOutputStream zipOutputStream, String relativePath) throws IOException {
        File[] children = folder.listFiles();
        for (int i = 0; i < children.length; i++) {
            File child = children[i];
            if (child.isFile()) {
                String zipEntryName = children[i].getCanonicalPath().replace(relativePath + File.separator, """");
                ZipEntry entry = new ZipEntry(zipEntryName);
                zipOutputStream.putNextEntry(entry);
                InputStream inputStream = new FileInputStream(child);
                IOUtils.copy(inputStream, zipOutputStream);
                inputStream.close();
            } else {
                ZipUtil.zipFolder(child, zipOutputStream, relativePath);
            }
        }
    }
","    public FlickrObject perform(boolean chkResponse) throws FlickrException {
        validate();
        String data = getRequestData();
        OutputStream os = null;
        InputStream is = null;
        try {
            URL url = null;
            try {
                url = new URL(m_url);
            } catch (MalformedURLException mux) {
                IllegalStateException iax = new IllegalStateException();
                iax.initCause(mux);
                throw iax;
            }
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setDoOutput(true);
            con.setRequestMethod(""POST"");
            os = con.getOutputStream();
            OutputStreamWriter osw = new OutputStreamWriter(os);
            osw.write(data);
            osw.flush();
            is = con.getInputStream();
            return processRespons(is, chkResponse);
        } catch (FlickrException fx) {
            throw fx;
        } catch (IOException iox) {
            throw new FlickrException(iox);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException _) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException _) {
            }
        }
    }
",False
900806,1951103,5704569,"    private List<File> ungzipFile(File directory, File compressedFile) throws IOException {
        List<File> files = new ArrayList<File>();
        TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile)));
        try {
            TarArchiveEntry entry = in.getNextTarEntry();
            while (entry != null) {
                if (entry.isDirectory()) {
                    log.warn(""TAR archive contains directories which are being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                String fn = new File(entry.getName()).getName();
                if (fn.startsWith(""."")) {
                    log.warn(""TAR archive contains a hidden file which is being ignored"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                File targetFile = new File(directory, fn);
                if (targetFile.exists()) {
                    log.warn(""TAR archive contains duplicate filenames, only the first is being extracted"");
                    entry = in.getNextTarEntry();
                    continue;
                }
                files.add(targetFile);
                log.debug(""Extracting file: "" + entry.getName() + "" to: "" + targetFile.getAbsolutePath());
                OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile));
                InputStream entryIn = new FileInputStream(entry.getFile());
                IOUtils.copy(entryIn, fout);
                fout.close();
                entryIn.close();
            }
        } finally {
            in.close();
        }
        return files;
    }
","    public static void copy(File src, File dest) throws IOException {
        if (!src.exists()) {
            throw new IOException(StaticUtils.format(OStrings.getString(""LFC_ERROR_FILE_DOESNT_EXIST""), new Object[] { src.getAbsolutePath() }));
        }
        FileInputStream fis = new FileInputStream(src);
        dest.getParentFile().mkdirs();
        FileOutputStream fos = new FileOutputStream(dest);
        byte[] b = new byte[BUFSIZE];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
",True
900807,3533514,3287812,"    public boolean saveVideoXMLOnWebserver() {
        String text = """";
        boolean erg = false;
        try {
            URL url = new URL(""http://localhost:8080/virtPresenterVerwalter/videofile.jsp?id="" + this.getId());
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(http.getInputStream()));
            String zeile = """";
            while ((zeile = in.readLine()) != null) {
                text += zeile + ""\n"";
            }
            in.close();
            http.disconnect();
            erg = saveVideoXMLOnWebserver(text);
            System.err.println(""Job "" + this.getId() + "" erfolgreich bearbeitet!"");
        } catch (MalformedURLException e) {
            System.err.println(""Job "" + this.getId() + "": Konnte video.xml nicht erstellen. Verbindung konnte nicht aufgebaut werden."");
            return false;
        } catch (IOException e) {
            System.err.println(""Job "" + this.getId() + "": Konnte video.xml nicht erstellen. Konnte Daten nicht lesen/schreiben."");
            return false;
        }
        return erg;
    }
","    private String getResourceAsString(final String name) throws IOException {
        final InputStream is = JiBXTestCase.class.getResourceAsStream(name);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copyAndClose(is, baos);
        return baos.toString();
    }
",False
900808,8651990,427727,"    @Override
    public void sendContent(OutputStream out, Range range, Map<String, String> params, String contentType) throws IOException, NotAuthorizedException, BadRequestException, NotFoundException {
        try {
            resolveFileAttachment();
        } catch (NoFileByTheIdException e) {
            throw new NotFoundException(e.getLocalizedMessage());
        }
        DefinableEntity owningEntity = fa.getOwner().getEntity();
        InputStream in = getFileModule().readFile(owningEntity.getParentBinder(), owningEntity, fa);
        try {
            if (range != null) {
                if (logger.isDebugEnabled()) logger.debug(""sendContent: ranged content: "" + toString(fa));
                PartialGetHelper.writeRange(in, range, out);
            } else {
                if (logger.isDebugEnabled()) logger.debug(""sendContent: send whole file "" + toString(fa));
                IOUtils.copy(in, out);
            }
            out.flush();
        } catch (ReadingException e) {
            throw new IOException(e);
        } catch (WritingException e) {
            throw new IOException(e);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",True
900809,2887981,850680,"    private CathUtils() throws Exception {
        super(Ontology.CATH);
        InputStream is = null;
        BufferedReader reader = null;
        try {
            final String CATH_REGEXP = OntologyFactory.getOntology(Ontology.CATH).getRegularExpression();
            final URL url = new URL(""http://release.cathdb.info/v3.4.0/CathNames"");
            is = url.openStream();
            reader = new BufferedReader(new InputStreamReader(is, Charset.defaultCharset()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                final String[] tokens = line.split(""\\s+"");
                if (RegularExpressionUtils.getMatches(tokens[0], CATH_REGEXP).size() > 0) {
                    idToName.put(tokens[0], line.substring(line.indexOf(':') + 1, line.length()));
                }
            }
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } finally {
                if (reader != null) {
                    reader.close();
                }
            }
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",False
900810,4866624,20499484,"    public boolean authenticate() {
        if (empresaFeta == null) empresaFeta = new AltaEmpresaBean();
        log.info(""authenticating {0}"", credentials.getUsername());
        boolean bo;
        try {
            String passwordEncriptat = credentials.getPassword();
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(passwordEncriptat.getBytes(), 0, passwordEncriptat.length());
            passwordEncriptat = new BigInteger(1, m.digest()).toString(16);
            Query q = entityManager.createQuery(""select usuari from Usuaris usuari where usuari.login=? and usuari.password=?"");
            q.setParameter(1, credentials.getUsername());
            q.setParameter(2, passwordEncriptat);
            Usuaris usuari = (Usuaris) q.getSingleResult();
            bo = (usuari != null);
            if (bo) {
                if (usuari.isEsAdministrador()) {
                    identity.addRole(""admin"");
                } else {
                    carregaDadesEmpresa();
                    log.info(""nom de l'empresa: "" + empresaFeta.getInstance().getNom());
                }
            }
        } catch (Throwable t) {
            log.error(t);
            bo = false;
        }
        log.info(""L'usuari {0} s'ha identificat bé? : {1} "", credentials.getUsername(), bo ? ""si"" : ""no"");
        return bo;
    }
","    private static byte[] getLoginHashSHA(final char[] password, final int seed) throws GGException {
        try {
            final MessageDigest hash = MessageDigest.getInstance(""SHA1"");
            hash.update(new String(password).getBytes());
            hash.update(GGUtils.intToByte(seed));
            return hash.digest();
        } catch (final NoSuchAlgorithmException e) {
            LOG.error(""SHA1 algorithm not usable"", e);
            throw new GGException(""SHA1 algorithm not usable!"", e);
        }
    }
",True
900811,18785060,12894191,"    public static NotaFiscal insert(NotaFiscal objNF) {
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        int result;
        if (c == null) {
            return null;
        }
        if (objNF == null) {
            return null;
        }
        try {
            c.setAutoCommit(false);
            String sql = """";
            int idNotaFiscal;
            idNotaFiscal = NotaFiscalDAO.getLastCodigo();
            if (idNotaFiscal < 1) {
                return null;
            }
            sql = ""INSERT INTO nota_fiscal "" + ""(id_nota_fiscal, id_fornecedor, total, data_emissao, data_cadastro, numero) "" + ""VALUES(?, ?, TRUNCATE(?,2), STR_TO_DATE(?,'%d/%m/%Y'), now(), ?) "";
            pst = c.prepareStatement(sql);
            pst.setInt(1, idNotaFiscal);
            pst.setLong(2, objNF.getFornecedor().getCodigo());
            pst.setString(3, new DecimalFormat(""#0.00"").format(objNF.getValor()));
            pst.setString(4, objNF.getDataEmissaoFormatada());
            pst.setString(5, objNF.getNumero());
            result = pst.executeUpdate();
            pst = null;
            if (result > 0) {
                Iterator<ItemNotaFiscal> itINF = (objNF.getItemNotaFiscal()).iterator();
                while ((itINF != null) && (itINF.hasNext())) {
                    ItemNotaFiscal objINF = (ItemNotaFiscal) itINF.next();
                    sql = """";
                    sql = ""INSERT INTO item_nota_fiscal "" + ""(id_nota_fiscal, id_produto, quantidade, subtotal) "" + ""VALUES(?, ?, ?, TRUNCATE(?,2))"";
                    pst = c.prepareStatement(sql);
                    pst.setInt(1, idNotaFiscal);
                    pst.setInt(2, objINF.getProduto().getCodigo());
                    pst.setInt(3, objINF.getQuantidade());
                    pst.setString(4, new DecimalFormat(""#0.00"").format(objINF.getSubtotal()));
                    result = pst.executeUpdate();
                }
            }
            c.commit();
            objNF.setCodigo(idNotaFiscal);
        } catch (final Exception e) {
            try {
                c.rollback();
            } catch (final Exception e1) {
                System.out.println(""[NotaFiscalDAO.insert.rollback] Erro ao inserir -> "" + e1.getMessage());
            }
            System.out.println(""[NotaFiscalDAO.insert] Erro ao inserir -> "" + e.getMessage());
            objNF = null;
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        return objNF;
    }
","    @Override
    public void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String directURL = request.getRequestURL().toString();
        response.setCharacterEncoding(""gbk"");
        PrintWriter out = response.getWriter();
        try {
            directURL = urlTools.urlFilter(directURL, true);
            URL url = new URL(directURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""gbk""));
            String line;
            while ((line = in.readLine()) != null) {
                out.println(line);
            }
            in.close();
        } catch (Exception e) {
            out.println(""file not find"");
        }
        out.flush();
    }
",False
900812,16116225,8639730,"    public void process(String t) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(MD5_DIGEST);
            md5.reset();
            md5.update(t.getBytes());
            callback.display(null, digestToHexString(md5.digest()));
        } catch (Exception ex) {
            callback.display(null, ""[failed]"");
        }
    }
","    public static String md5encrypt(String toEncrypt) {
        if (toEncrypt == null) {
            throw new IllegalArgumentException(""null is not a valid password to encrypt"");
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(toEncrypt.getBytes());
            byte[] hash = md.digest();
            return new String(dumpBytes(hash));
        } catch (NoSuchAlgorithmException nsae) {
            return toEncrypt;
        }
    }
",True
900813,14776145,13216961,"    private void addPNMLFileToLibrary(File selected) {
        try {
            FileChannel srcChannel = new FileInputStream(selected.getAbsolutePath()).getChannel();
            FileChannel dstChannel = new FileOutputStream(new File(matchingOrderXML).getParent() + ""/"" + selected.getName()).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
            order.add(new ComponentDescription(false, selected.getName().replaceAll("".pnml"", """"), 1.0));
            updateComponentList();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(dialog, ""Could not add the PNML file "" + selected.getName() + "" to the library!"");
        }
    }
","        public void actionPerformed(ActionEvent ev) {
            if (fileChooser == null) {
                fileChooser = new JFileChooser();
                ExtensionFileFilter fileFilter = new ExtensionFileFilter(""Device profile (*.jar, *.zip)"");
                fileFilter.addExtension(""jar"");
                fileFilter.addExtension(""zip"");
                fileChooser.setFileFilter(fileFilter);
            }
            if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) {
                String manifestDeviceName = null;
                URL[] urls = new URL[1];
                ArrayList descriptorEntries = new ArrayList();
                JarFile jar = null;
                try {
                    jar = new JarFile(fileChooser.getSelectedFile());
                    Manifest manifest = jar.getManifest();
                    if (manifest != null) {
                        Attributes attrs = manifest.getMainAttributes();
                        manifestDeviceName = attrs.getValue(""Device-Name"");
                    }
                    for (Enumeration en = jar.entries(); en.hasMoreElements(); ) {
                        String entry = ((JarEntry) en.nextElement()).getName();
                        if ((entry.toLowerCase().endsWith("".xml"") || entry.toLowerCase().endsWith(""device.txt"")) && !entry.toLowerCase().startsWith(""meta-inf"")) {
                            descriptorEntries.add(entry);
                        }
                    }
                    urls[0] = fileChooser.getSelectedFile().toURL();
                } catch (IOException e) {
                    Message.error(""Error reading file: "" + fileChooser.getSelectedFile().getName() + "", "" + Message.getCauseMessage(e), e);
                    return;
                } finally {
                    if (jar != null) {
                        try {
                            jar.close();
                        } catch (IOException ignore) {
                        }
                    }
                }
                if (descriptorEntries.size() == 0) {
                    Message.error(""Cannot find any device profile in file: "" + fileChooser.getSelectedFile().getName());
                    return;
                }
                if (descriptorEntries.size() > 1) {
                    manifestDeviceName = null;
                }
                ClassLoader classLoader = Common.createExtensionsClassLoader(urls);
                HashMap devices = new HashMap();
                for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) {
                    String entryName = (String) it.next();
                    try {
                        devices.put(entryName, DeviceImpl.create(emulatorContext, classLoader, entryName, J2SEDevice.class));
                    } catch (IOException e) {
                        Message.error(""Error parsing device profile, "" + Message.getCauseMessage(e), e);
                        return;
                    }
                }
                for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) {
                    DeviceEntry entry = (DeviceEntry) en.nextElement();
                    if (devices.containsKey(entry.getDescriptorLocation())) {
                        devices.remove(entry.getDescriptorLocation());
                    }
                }
                if (devices.size() == 0) {
                    Message.info(""Device profile already added"");
                    return;
                }
                try {
                    File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName());
                    if (deviceFile.exists()) {
                        deviceFile = File.createTempFile(""device"", "".jar"", Config.getConfigPath());
                    }
                    IOUtils.copyFile(fileChooser.getSelectedFile(), deviceFile);
                    DeviceEntry entry = null;
                    for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) {
                        String descriptorLocation = (String) it.next();
                        Device device = (Device) devices.get(descriptorLocation);
                        if (manifestDeviceName != null) {
                            entry = new DeviceEntry(manifestDeviceName, deviceFile.getName(), descriptorLocation, false);
                        } else {
                            entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false);
                        }
                        lsDevicesModel.addElement(entry);
                        Config.addDeviceEntry(entry);
                    }
                    lsDevices.setSelectedValue(entry, true);
                } catch (IOException e) {
                    Message.error(""Error adding device profile, "" + Message.getCauseMessage(e), e);
                    return;
                }
            }
        }
",True
900814,17871427,18956180,"    public void decryptFile(String encryptedFile, String decryptedFile, String password) throws Exception {
        CipherInputStream in;
        OutputStream out;
        Cipher cipher;
        SecretKey key;
        byte[] byteBuffer;
        cipher = Cipher.getInstance(""DES"");
        key = new SecretKeySpec(password.getBytes(), ""DES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        in = new CipherInputStream(new FileInputStream(encryptedFile), cipher);
        out = new FileOutputStream(decryptedFile);
        byteBuffer = new byte[1024];
        for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) ;
        in.close();
        out.close();
    }
","    private void copyMerge(Path[] sources, OutputStream out) throws IOException {
        Configuration conf = getConf();
        for (int i = 0; i < sources.length; ++i) {
            FileSystem fs = sources[i].getFileSystem(conf);
            InputStream in = fs.open(sources[i]);
            try {
                IOUtils.copyBytes(in, out, conf, false);
            } finally {
                in.close();
            }
        }
    }
",True
900815,3883870,12226563,"    public String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return null;
    }
","    public void run() {
        Vector<Update> updates = new Vector<Update>();
        if (dic != null) updates.add(dic);
        if (gen != null) updates.add(gen);
        if (res != null) updates.add(res);
        if (help != null) updates.add(help);
        for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) {
            Update update = (Update) iterator.next();
            try {
                File temp = File.createTempFile(""fm_"" + update.getType(), "".jar"");
                temp.deleteOnExit();
                FileOutputStream out = new FileOutputStream(temp);
                URL url = new URL(update.getAction());
                URLConnection conn = url.openConnection();
                com.diccionarioderimas.Utils.setupProxy(conn);
                InputStream in = conn.getInputStream();
                byte[] buffer = new byte[1024];
                int read = 0;
                int total = 0;
                while ((read = in.read(buffer)) != -1) {
                    out.write(buffer, 0, read);
                    total += read;
                    if (total > 10000) {
                        progressBar.setValue(progressBar.getValue() + total);
                        total = 0;
                    }
                }
                out.close();
                in.close();
                String fileTo = basePath + ""diccionariorimas.jar"";
                if (update.getType() == Update.GENERATOR) fileTo = basePath + ""generador.jar""; else if (update.getType() == Update.RESBC) fileTo = basePath + ""resbc.me""; else if (update.getType() == Update.HELP) fileTo = basePath + ""help.html"";
                if (update.getType() == Update.RESBC) {
                    Utils.unzip(temp, new File(fileTo));
                } else {
                    Utils.copyFile(new FileInputStream(temp), new File(fileTo));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        setVisible(false);
        if (gen != null || res != null) {
            try {
                new Main(null, basePath, false);
            } catch (Exception e) {
                new ErrorDialog(frame, e);
            }
        }
        String restart = """";
        if (dic != null) restart += ""\nAlgunas de ellas s�lo estar�n disponibles despu�s de reiniciar el diccionario."";
        JOptionPane.showMessageDialog(frame, ""Se han terminado de realizar las actualizaciones."" + restart, ""Actualizaciones"", JOptionPane.INFORMATION_MESSAGE);
    }
",False
900816,10140251,13908,"    protected String contentString() {
        String result = null;
        URL url;
        String encoding = null;
        try {
            url = url();
            URLConnection connection = url.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(false);
            connection.setUseCaches(false);
            for (Enumeration e = bindingKeys().objectEnumerator(); e.hasMoreElements(); ) {
                String key = (String) e.nextElement();
                if (key.startsWith(""?"")) {
                    connection.setRequestProperty(key.substring(1), valueForBinding(key).toString());
                }
            }
            if (connection.getContentEncoding() != null) {
                encoding = connection.getContentEncoding();
            }
            if (encoding == null) {
                encoding = (String) valueForBinding(""encoding"");
            }
            if (encoding == null) {
                encoding = ""UTF-8"";
            }
            InputStream stream = connection.getInputStream();
            byte bytes[] = ERXFileUtilities.bytesFromInputStream(stream);
            stream.close();
            result = new String(bytes, encoding);
        } catch (IOException ex) {
            throw NSForwardException._runtimeExceptionForThrowable(ex);
        }
        return result;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",True
900817,8364547,11075647,"        @Override
        public void executeInterruptible() {
            encodingTerminated = false;
            File destinationFile = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                IconAndFileListElement element;
                while ((element = getNextFileElement()) != null) {
                    File origFile = element.getFile();
                    destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName());
                    if (!destinationFile.getParentFile().exists()) {
                        destinationFile.getParentFile().mkdirs();
                    }
                    actualFileLabel.setText(origFile.getName());
                    actualFileModel.setMaximum((int) origFile.length());
                    actualFileModel.setValue(0);
                    int bitrate;
                    synchronized (bitratePattern) {
                        Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue());
                        bitrateMatcher.find();
                        bitrate = Integer.parseInt(bitrateMatcher.group(1));
                    }
                    List<String> command = new LinkedList<String>();
                    command.add(encoderFile.getCanonicalPath());
                    command.add(""--mp3input"");
                    command.add(""-m"");
                    command.add(""j"");
                    String sampleFreq = Settings.getSetting(""encode.sample.freq"");
                    if (Util.isNotEmpty(sampleFreq)) {
                        command.add(""--resample"");
                        command.add(sampleFreq);
                    }
                    QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem();
                    command.add(""-q"");
                    command.add(Integer.toString(quality.getValue()));
                    command.add(""-b"");
                    command.add(Integer.toString(bitrate));
                    command.add(""--cbr"");
                    command.add(""-"");
                    command.add(destinationFile.getCanonicalPath());
                    if (LOG.isDebugEnabled()) {
                        StringBuilder commandLine = new StringBuilder();
                        boolean first = true;
                        for (String part : command) {
                            if (!first) commandLine.append("" "");
                            commandLine.append(part);
                            first = false;
                        }
                        LOG.debug(""Command line: "" + commandLine.toString());
                    }
                    encodingProcess = runtime.exec(command.toArray(new String[0]));
                    lastPosition = 0l;
                    InputStream fileStream = null;
                    try {
                        fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this);
                        IOUtils.copy(fileStream, encodingProcess.getOutputStream());
                        encodingProcess.getOutputStream().close();
                    } finally {
                        IOUtils.closeQuietly(fileStream);
                        if (LOG.isDebugEnabled()) {
                            InputStream processOut = null;
                            try {
                                processOut = encodingProcess.getInputStream();
                                StringWriter sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process output stream:\n"" + sw);
                                IOUtils.closeQuietly(processOut);
                                processOut = encodingProcess.getErrorStream();
                                sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process error stream:\n"" + sw);
                            } finally {
                                IOUtils.closeQuietly(processOut);
                            }
                        }
                    }
                    int result = encodingProcess.waitFor();
                    encodingProcess = null;
                    if (result != 0) {
                        LOG.warn(""Encoder process returned error code "" + result);
                    }
                    if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) {
                        MP3File mp3Input = new MP3File(origFile);
                        MP3File mp3Output = new MP3File(destinationFile);
                        boolean write = false;
                        if (mp3Input.hasID3v2tag()) {
                            ID3v2Tag id3v2Tag = new ID3v2Tag();
                            for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) {
                                id3v2Tag.addFrame(frame);
                            }
                            mp3Output.setID3v2tag(id3v2Tag);
                            write = true;
                        }
                        if (mp3Input.hasID3v11tag()) {
                            mp3Output.setID3v11tag(mp3Input.getID3v11tag());
                            write = true;
                        }
                        if (write) mp3Output.write();
                    }
                }
                actualFileLabel.setText(Messages.getString(""operations.file.encode.execute.actualfile.terminated""));
                actualFileModel.setValue(actualFileModel.getMaximum());
            } catch (Exception e) {
                LOG.error(""Cannot encode files"", e);
                if (!(e instanceof IOException && encodingTerminated)) MainWindowInterface.showError(e);
                if (destinationFile != null) destinationFile.delete();
            }
        }
","    @Test
    public void testWriteModel() {
        Model model = new Model();
        model.setName(""MY_MODEL1"");
        Stereotype st1 = new Stereotype();
        st1.setName(""Pirulito1"");
        PackageObject p1 = new PackageObject(""p1"");
        ClassType type1 = new ClassType(""Class1"");
        type1.setStereotype(st1);
        type1.addMethod(new Method(""doSomething""));
        p1.add(type1);
        ClassType type2 = new ClassType(""Class2"");
        Method m2 = new Method(""doSomethingElse"");
        m2.setType(type1);
        type2.addMethod(m2);
        p1.add(type2);
        Generalization g = new Generalization();
        g.setSource(type1);
        g.setTarget(type1);
        p1.add(g);
        model.add(p1);
        ModelWriter writer = new ModelWriter();
        try {
            File modelFile = new File(""target"", ""test.model"");
            writer.write(model, modelFile);
            File xmlFile = new File(""target"", ""test.xml"");
            xmlFile.createNewFile();
            IOUtils.copy(new GZIPInputStream(new FileInputStream(modelFile)), new FileOutputStream(xmlFile));
        } catch (IOException e) {
            log.error(e.getMessage(), e);
            Assert.fail(e.getMessage());
        }
    }
",True
900818,19715255,708766,"    static Object executeMethod(HttpMethod method, int timeout, boolean array) throws HttpRequestFailureException, HttpException, IOException, HttpRequestTimeoutException {
        try {
            method.getParams().setSoTimeout(timeout * 1000);
            int status = -1;
            Object result = null;
            System.out.println(""Execute method: "" + method.getPath() + "" "" + method.getQueryString());
            TwitterclipseConfig config = TwitterclipsePlugin.getDefault().getTwitterclipseConfiguration();
            HttpClient httpClient = HttpClientUtils.createHttpClient(TWITTER_BASE_URL, config.getUserId(), config.getPassword());
            status = httpClient.executeMethod(method);
            System.out.println(""Received response. status = "" + status);
            if (status == HttpStatus.SC_OK) {
                InputStream inputStream = method.getResponseBodyAsStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                IOUtils.copy(inputStream, baos);
                String response = new String(baos.toByteArray(), ""UTF-8"");
                System.out.println(response);
                if (array) result = JSONArray.fromString(response); else result = JSONObject.fromString(response);
            } else {
                throw new HttpRequestFailureException(status);
            }
            return result;
        } catch (SocketTimeoutException e) {
            throw new HttpRequestTimeoutException(e);
        } finally {
            method.releaseConnection();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
900819,6371592,8258909,"    public void deleteUser(final List<Integer> userIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.delete""));
                    Iterator<Integer> iter = userIds.iterator();
                    int userId;
                    while (iter.hasNext()) {
                        userId = iter.next();
                        psImpl.setInt(1, userId);
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.removeUsers(userIds);
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
","    public static void copyFile(File sourceFile, File destFile) {
        FileChannel source = null;
        FileChannel destination = null;
        try {
            if (!destFile.exists()) {
                destFile.createNewFile();
            }
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (source != null) {
                    source.close();
                }
                if (destination != null) {
                    destination.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",False
900820,12477501,20506425,"    public HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {
        URI uri = request.getURI();
        String original = uri.toString();
        UrlRules rules = UrlRules.getRules(mResolver);
        UrlRules.Rule rule = rules.matchRule(original);
        String rewritten = rule.apply(original);
        if (rewritten == null) {
            Log.w(TAG, ""Blocked by "" + rule.mName + "": "" + original);
            throw new BlockedRequestException(rule);
        } else if (rewritten == original) {
            return executeWithoutRewriting(request, context);
        }
        try {
            uri = new URI(rewritten);
        } catch (URISyntaxException e) {
            throw new RuntimeException(""Bad URL from rule: "" + rule.mName, e);
        }
        RequestWrapper wrapper = wrapRequest(request);
        wrapper.setURI(uri);
        request = wrapper;
        if (LOCAL_LOGV) Log.v(TAG, ""Rule "" + rule.mName + "": "" + original + "" -> "" + rewritten);
        return executeWithoutRewriting(request, context);
    }
","    private void handleXInclude(final String localName, final Attributes atts) {
        if (""include"".equals(localName)) {
            this.inXInclude++;
            String href = atts.getValue(""href"");
            if ((href == null) || """".equals(href.trim())) {
                href = null;
            }
            String parse = atts.getValue(""parse"");
            if ((parse == null) || """".equals(parse.trim())) {
                parse = ""xml"";
            }
            String xpointer = atts.getValue(""xpointer"");
            if ((xpointer == null) || """".equals(xpointer.trim())) {
                xpointer = null;
            }
            String encoding = atts.getValue(""encoding"");
            if ((encoding == null) || """".equals(encoding.trim())) {
                encoding = null;
            }
            String accept = atts.getValue(""accept"");
            if ((accept == null) || """".equals(accept.trim())) {
                accept = null;
            }
            String accept_language = atts.getValue(""accept-language"");
            if ((accept_language == null) || """".equals(accept_language.trim())) {
                accept_language = null;
            }
            if (href != null) {
                if (href.indexOf("":/"") == -1) {
                    if (href.startsWith(""/"")) {
                        href = href.substring(1);
                    }
                    href = this.documentURI + href;
                }
                if (this.localParser.get() == null) {
                    this.localParser.set(new CShaniDomParser());
                }
                CShaniDomParser p = (CShaniDomParser) this.localParser.get();
                InputStream in = null;
                try {
                    URL url = new URL(href);
                    URLConnection connection = url.openConnection();
                    if (accept != null) {
                        connection.addRequestProperty(""Accept"", accept);
                    }
                    if (accept_language != null) {
                        connection.addRequestProperty(""Accept-Language"", accept_language);
                    }
                    in = connection.getInputStream();
                    ADocument doc = null;
                    if (encoding != null) {
                        doc = (ADocument) p.parse(new InputStreamReader(in, encoding));
                    } else {
                        doc = (ADocument) p.parse(in);
                    }
                    if (xpointer == null) {
                        CDOM2SAX converter = new CDOM2SAX(doc.getDocumentElement());
                        converter.setProperty(""http://xml.org/sax/properties/lexical-handler"", this.lHandler);
                        converter.setContentHandler(this.cHandler);
                        converter.setDocumentHandler(this.dHandler);
                        converter.setDTDHandler(this.dtdHandler);
                        converter.serialize();
                    } else {
                        XPath xpath = new DOMXPath(xpointer);
                        for (Iterator it = doc.getNamespaceList().iterator(); it.hasNext(); ) {
                            CNamespace ns = (CNamespace) it.next();
                            xpath.addNamespace(ns.getPrefix() == null ? """" : ns.getPrefix(), ns.getNamespaceURI());
                        }
                        List result = xpath.selectNodes(doc.getDocumentElement());
                        for (final Iterator it = result.iterator(); it.hasNext(); ) {
                            final Node node = (Node) it.next();
                            CDOM2SAX converter = new CDOM2SAX(node);
                            converter.setProperty(""http://xml.org/sax/properties/lexical-handler"", this.lHandler);
                            converter.setContentHandler(this.cHandler);
                            converter.setDocumentHandler(this.dHandler);
                            converter.setDTDHandler(this.dtdHandler);
                            converter.serialize();
                        }
                    }
                } catch (final Exception e) {
                    this.xiFallbackFlag++;
                } finally {
                    try {
                        in.close();
                        in = null;
                    } catch (final Exception ignore) {
                    }
                }
            }
        }
    }
",False
900821,8805074,20662462,"    protected boolean checkLogin(String username, String password) {
        log.debug(""Called checkLogin with "" + username);
        String urlIn = GeoNetworkContext.url + ""/"" + GeoNetworkContext.loginService + ""?username="" + username + ""&password="" + password;
        Element results = null;
        String cookieValue = null;
        try {
            URL url = new URL(urlIn);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(1000);
            BufferedInputStream in = new BufferedInputStream(conn.getInputStream());
            try {
                results = Xml.loadStream(in);
                log.debug(""CheckLogin to GeoNetwork returned "" + Xml.getString(results));
            } finally {
                in.close();
            }
            Map<String, List<String>> headers = conn.getHeaderFields();
            List<String> values = headers.get(""Set-Cookie"");
            for (Iterator iter = values.iterator(); iter.hasNext(); ) {
                String v = (String) iter.next();
                if (cookieValue == null) {
                    cookieValue = v;
                } else {
                    cookieValue = cookieValue + "";"" + v;
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(""User login to GeoNetwork failed: "", e);
        }
        if (!results.getName().equals(""ok"")) return false;
        Session session = getConnection().getSession();
        session.removeAttribute(""usercookie.object"");
        session.setAttribute(""usercookie.object"", cookieValue);
        log.debug(""Cookie set is "" + cookieValue);
        return true;
    }
","    @Override
    public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException {
        boolean firstIteration = true;
        Iterator<PlaylistEntry> entries = playlist.getEntries().iterator();
        DownloadingItem prevItem = null;
        File[] previousDownloadedFiles = new File[0];
        while (entries.hasNext()) {
            PlaylistEntry entry = entries.next();
            DownloadingItem item = null;
            LOGGER.info(""Downloading from '"" + entry.getTitle() + ""'"");
            InputStream is = RESTHelper.inputStream(entry.getUrl());
            boolean stopped = false;
            File nfile = null;
            try {
                nfile = createFileStream(folder, entry);
                item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition);
                if (previousDownloadedFiles.length > 0) {
                    item.setPreviousFiles(previousDownloadedFiles);
                }
                addItem(item);
                if (prevItem != null) deletePrevItem(prevItem);
                prevItem = item;
                stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition);
            } catch (IOException e) {
                LOGGER.log(Level.SEVERE, e.getMessage(), e);
                radioScheduler.fireException(e);
                if (!condition.isStopped()) {
                    File[] nfiles = new File[previousDownloadedFiles.length + 1];
                    System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length);
                    nfiles[nfiles.length - 1] = item.getFile();
                    previousDownloadedFiles = nfiles;
                    if ((!entries.hasNext()) && (firstIteration)) {
                        firstIteration = false;
                        entries = playlist.getEntries().iterator();
                    }
                    continue;
                }
            }
            if (stopped) {
                item.setState(ProcessStates.STOPPED);
                this.radioScheduler.fireStopDownloading(item);
                return item;
            }
        }
        return null;
    }
",False
900822,12903179,13433127,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!sourceFile.exists()) {
            return;
        }
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        source = new FileInputStream(sourceFile).getChannel();
        destination = new FileOutputStream(destFile).getChannel();
        if (destination != null && source != null) {
            destination.transferFrom(source, 0, source.size());
        }
        if (source != null) {
            source.close();
        }
        if (destination != null) {
            destination.close();
        }
    }
","    public void save(File selectedFile) throws IOException {
        if (storeEntriesInFiles) {
            boolean moved = false;
            for (int i = 0; i < tempFiles.size(); i++) {
                File newFile = new File(selectedFile.getAbsolutePath() + ""_"" + Integer.toString(i) + "".zettmp"");
                moved = tempFiles.get(i).renameTo(newFile);
                if (!moved) {
                    BufferedReader read = new BufferedReader(new FileReader(tempFiles.get(i)));
                    PrintWriter write = new PrintWriter(newFile);
                    String s;
                    while ((s = read.readLine()) != null) write.print(s);
                    read.close();
                    write.flush();
                    write.close();
                    tempFiles.get(i).delete();
                }
                tempFiles.set(i, newFile);
            }
        }
        GZIPOutputStream output = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(selectedFile)));
        XStream xml_convert = new XStream();
        xml_convert.setMode(XStream.ID_REFERENCES);
        xml_convert.toXML(this, output);
        output.flush();
        output.close();
    }
",True
900823,2362445,6008880,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    protected void updateJava2ScriptProject(String prjFolder, String binRelative) {
        try {
            File cpFile = new File(prjFolder, "".classpath"");
            FileInputStream fis = new FileInputStream(cpFile);
            String classpath = J2SLaunchingUtil.readAFile(fis);
            if (classpath != null) {
                boolean needUpdate = false;
                if (classpath.indexOf(""ECLIPSE_SWT"") == -1 && classpath.indexOf(""SWT_LIBRARY"") == -1 && classpath.indexOf(""eclipse.swt"") == -1) {
                    int idx = classpath.lastIndexOf(""<"");
                    classpath = classpath.substring(0, idx) + ""\t<classpathentry kind=\""var\"" path=\""ECLIPSE_SWT\""/>\r\n"" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf(""AJAX_SWT"") == -1 && classpath.indexOf(""ajaxswt.jar"") == -1) {
                    int idx = classpath.lastIndexOf(""<"");
                    classpath = classpath.substring(0, idx) + ""\t<classpathentry sourcepath=\""AJAX_SWT_SRC\"" kind=\""var\"" path=\""AJAX_SWT\""/>\r\n"" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf(""AJAX_RPC"") == -1 && classpath.indexOf(""ajaxrpc.jar"") == -1) {
                    int idx = classpath.lastIndexOf(""<"");
                    classpath = classpath.substring(0, idx) + ""\t<classpathentry sourcepath=\""AJAX_RPC_SRC\"" kind=\""var\"" path=\""AJAX_RPC\""/>\r\n"" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (classpath.indexOf(""AJAX_PIPE"") == -1 && classpath.indexOf(""ajaxpipe.jar"") == -1) {
                    int idx = classpath.lastIndexOf(""<"");
                    classpath = classpath.substring(0, idx) + ""\t<classpathentry sourcepath=\""AJAX_PIPE_SRC\"" kind=\""var\"" path=\""AJAX_PIPE\""/>\r\n"" + classpath.substring(idx);
                    needUpdate = true;
                }
                if (needUpdate) {
                    try {
                        FileOutputStream fos = new FileOutputStream(cpFile);
                        fos.write(classpath.getBytes(""utf-8""));
                        fos.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            File webinf = new File(prjFolder, ""WEB-INF"");
            webinf.mkdir();
            new File(webinf, ""classes"").mkdir();
            File lib = new File(webinf, ""lib"");
            lib.mkdir();
            IPath newPath = null;
            URL starterURL = AjaxPlugin.getDefault().getBundle().getEntry(File.separator);
            String root = ""."";
            try {
                root = Platform.asLocalURL(starterURL).getFile();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root + ""/ajaxrpc.jar"");
            File rpcFile = new File(newPath.toOSString());
            try {
                FileInputStream is = new FileInputStream(rpcFile);
                FileOutputStream os = new FileOutputStream(new File(lib, ""ajaxrpc.jar""));
                byte[] buf = new byte[1024];
                int read = -1;
                while ((read = is.read(buf)) != -1) {
                    os.write(buf, 0, read);
                }
                os.close();
                is.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root + ""/ajaxpipe.jar"");
            File pipeFile = new File(newPath.toOSString());
            try {
                FileInputStream is = new FileInputStream(pipeFile);
                FileOutputStream os = new FileOutputStream(new File(lib, ""ajaxpipe.jar""));
                byte[] buf = new byte[1024];
                int read = -1;
                while ((read = is.read(buf)) != -1) {
                    os.write(buf, 0, read);
                }
                os.close();
                is.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            StringBuffer buildxml = new StringBuffer();
            buildxml.append(""<?xml version=\""1.0\""?>\r\n"");
            buildxml.append(""<project name=\""java2script.servlet.pack\"" default=\""pack.war\"" basedir=\"".\"">\r\n"");
            buildxml.append(""    <description>Pack Java2Script Servlet Application</description>\r\n"");
            buildxml.append(""\r\n"");
            String name = new File(prjFolder).getName();
            buildxml.append(""	<property name=\""java2script.app.name\"" value=\"""" + name + ""\""/>\r\n"");
            buildxml.append(""	<property name=\""bin.folder\"" value=\""${basedir}/../"" + binRelative + ""\""/>\r\n"");
            buildxml.append(""\r\n"");
            buildxml.append(""    <target name=\""pack.war\"" depends=\""pack.jar\"">\r\n"");
            buildxml.append(""        <tstamp>\r\n"");
            buildxml.append(""            <format property=\""now\"" pattern=\""yyyy-MM-dd-HH-mm-ss\""/>\r\n"");
            buildxml.append(""        </tstamp>\r\n"");
            buildxml.append(""        <delete file=\""${basedir}/../${java2script.app.name}.war\"" quiet=\""true\""/>\r\n"");
            buildxml.append(""        <zip destfile=\""${basedir}/../${java2script.app.name}.${now}.war\"">\r\n"");
            buildxml.append(""            <fileset dir=\""${basedir}/../\"">\r\n"");
            buildxml.append(""                <exclude name=\""src/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\""META-INF/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\""WEB-INF/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.java\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.class\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.swp\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.swo\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.jar\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.war\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".classpath\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".project\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".j2s\""/>\r\n"");
            buildxml.append(""                <exclude name=\""web.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""build.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""build.properties\""/>\r\n"");
            buildxml.append(""                <exclude name=\""plugin.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""plugin.properties\""/>\r\n"");
            buildxml.append(""            </fileset>\r\n"");
            buildxml.append(""            <fileset dir=\""${basedir}/..\"">\r\n"");
            buildxml.append(""                <include name=\""WEB-INF/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\""WEB-INF/build.xml\""/>\r\n"");
            buildxml.append(""            </fileset>\r\n"");
            buildxml.append(""        </zip>\r\n"");
            buildxml.append(""        <copy file=\""${basedir}/../${java2script.app.name}.${now}.war\""\r\n"");
            buildxml.append(""                tofile=\""${basedir}/../${java2script.app.name}.war\""/>\r\n"");
            buildxml.append(""    </target>\r\n"");
            buildxml.append(""\r\n"");
            buildxml.append(""    <target name=\""pack.jar\"">\r\n"");
            buildxml.append(""        <delete file=\""${basedir}/lib/${java2script.app.name}.jar\"" quiet=\""true\""/>\r\n"");
            buildxml.append(""        <zip destfile=\""${basedir}/lib/${java2script.app.name}.jar\"">\r\n"");
            buildxml.append(""            <fileset dir=\""${bin.folder}\"">\r\n"");
            buildxml.append(""                <exclude name=\""WEB-INF/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.html\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.js\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.css\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.bmp\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.gif\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.png\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.jpg\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.jpeg\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.swp\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.swo\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.jar\""/>\r\n"");
            buildxml.append(""                <exclude name=\""**/*.war\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".classpath\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".project\""/>\r\n"");
            buildxml.append(""                <exclude name=\"".j2s\""/>\r\n"");
            buildxml.append(""                <exclude name=\""web.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""build.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""build.properties\""/>\r\n"");
            buildxml.append(""                <exclude name=\""plugin.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\""plugin.properties\""/>\r\n"");
            buildxml.append(""            </fileset>\r\n"");
            buildxml.append(""        </zip>\r\n"");
            buildxml.append(""    </target>\r\n"");
            buildxml.append(""\r\n"");
            starterURL = AjaxPlugin.getDefault().getBundle().getEntry(File.separator);
            root = ""."";
            try {
                root = Platform.asLocalURL(starterURL).getFile();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            newPath = Path.fromPortableString(root);
            String ajaxPath = newPath.toOSString();
            String key = ""net.sf.j2s.ajax"";
            int idx = ajaxPath.lastIndexOf(key);
            if (idx != -1) {
                ajaxPath = ajaxPath.substring(0, idx) + ""net.sf.j2s.lib"" + ajaxPath.substring(idx + key.length());
            }
            File libFile = new File(ajaxPath);
            String j2sRelativePath = FileUtil.toRelativePath(libFile.getAbsolutePath(), webinf.getAbsolutePath());
            if (j2sRelativePath.length() > 0 && !j2sRelativePath.endsWith(""/"")) {
                j2sRelativePath += ""/"";
            }
            int slashIndex = j2sRelativePath.lastIndexOf('/', j2sRelativePath.length() - 2);
            String pluginPath = j2sRelativePath.substring(0, slashIndex);
            String libPluginPath = j2sRelativePath.substring(slashIndex + 1, j2sRelativePath.length() - 1);
            buildxml.append(""    <target name=\""pack.plugins.j2slib.war\"">\r\n"");
            buildxml.append(""        <delete file=\""${basedir}/../plugins.war\"" quiet=\""true\""/>\r\n"");
            buildxml.append(""        <zip destfile=\""${basedir}/../plugins.war\"">\r\n"");
            buildxml.append(""            <fileset dir=\""${basedir}/"" + pluginPath + ""/\"">\r\n"");
            buildxml.append(""                <include name=\"""" + libPluginPath + ""/**\""/>\r\n"");
            buildxml.append(""                <exclude name=\"""" + libPluginPath + ""/library.jar\""/>\r\n"");
            buildxml.append(""                <exclude name=\"""" + libPluginPath + ""/plugin.xml\""/>\r\n"");
            buildxml.append(""                <exclude name=\"""" + libPluginPath + ""/META-INF/**\""/>\r\n"");
            buildxml.append(""            </fileset>\r\n"");
            buildxml.append(""        </zip>\r\n"");
            buildxml.append(""    </target>\r\n"");
            buildxml.append(""\r\n"");
            buildxml.append(""</project>\r\n"");
            try {
                FileOutputStream fos = new FileOutputStream(new File(webinf, ""build.xml""));
                fos.write(buildxml.toString().getBytes());
                fos.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            StringBuffer webxml = new StringBuffer();
            webxml.append(""<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?>\r\n"");
            webxml.append(""<!DOCTYPE web-app\r\n"");
            webxml.append(""    PUBLIC \""-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\""\r\n"");
            webxml.append(""    \""http://java.sun.com/dtd/web-app_2_3.dtd\"">\r\n"");
            webxml.append(""<web-app>\r\n"");
            webxml.append(""    <display-name>Java2Script</display-name>\r\n"");
            webxml.append(""    <description>Java2Script application</description>\r\n"");
            webxml.append(genereateServlet(""simplerpc"", ""net.sf.j2s.ajax.SimpleRPCHttpServlet""));
            webxml.append(genereateServlet(""piperpc"", ""net.sf.j2s.ajax.CompoundPipeRPCHttpServlet""));
            webxml.append(""    <servlet>\r\n"");
            webxml.append(""        <servlet-name>simplepipe</servlet-name>\r\n"");
            webxml.append(""        <servlet-class>net.sf.j2s.ajax.SimplePipeHttpServlet</servlet-class>\r\n"");
            webxml.append(""        <init-param>\r\n"");
            webxml.append(""            <param-name>simple.pipe.query.timeout</param-name>\r\n"");
            webxml.append(""            <param-value>20000</param-value>\r\n"");
            webxml.append(""        </init-param>\r\n"");
            webxml.append(""        <init-param>\r\n"");
            webxml.append(""            <param-name>simple.pipe.script.breakout</param-name>\r\n"");
            webxml.append(""            <param-value>1200000</param-value>\r\n"");
            webxml.append(""        </init-param>\r\n"");
            webxml.append(""        <init-param>\r\n"");
            webxml.append(""            <param-name>simple.pipe.max.items.per.query</param-name>\r\n"");
            webxml.append(""            <param-value>60</param-value>\r\n"");
            webxml.append(""        </init-param>\r\n"");
            webxml.append(""    </servlet>\r\n"");
            webxml.append(""    <servlet-mapping>\r\n"");
            webxml.append(""        <servlet-name>simplerpc</servlet-name>\r\n"");
            webxml.append(""        <url-pattern>/simplerpc</url-pattern>\r\n"");
            webxml.append(""    </servlet-mapping>\r\n"");
            webxml.append(""    <servlet-mapping>\r\n"");
            webxml.append(""        <servlet-name>piperpc</servlet-name>\r\n"");
            webxml.append(""        <url-pattern>/piperpc</url-pattern>\r\n"");
            webxml.append(""    </servlet-mapping>\r\n"");
            webxml.append(""    <servlet-mapping>\r\n"");
            webxml.append(""        <servlet-name>simplepipe</servlet-name>\r\n"");
            webxml.append(""        <url-pattern>/simplepipe</url-pattern>\r\n"");
            webxml.append(""    </servlet-mapping>\r\n"");
            webxml.append(""</web-app>\r\n"");
            try {
                FileOutputStream fos = new FileOutputStream(new File(webinf, ""web.xml""));
                fos.write(webxml.toString().getBytes());
                fos.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }
",True
900824,552319,420619,"    public String getpage(String leurl) throws Exception {
        int data;
        StringBuffer lapage = new StringBuffer();
        URL myurl = new URL(leurl);
        URLConnection conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return lapage.toString();
        }
        InputStream in = conn.getInputStream();
        for (data = in.read(); data != -1; data = in.read()) lapage.append((char) data);
        return lapage.toString();
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",False
900825,18060085,10086563,"    public static boolean verifyPassword(String digest, String password) {
        String alg = null;
        int size = 0;
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            digest = digest.substring(5);
            alg = ""SHA-1"";
            size = 20;
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            digest = digest.substring(6);
            alg = ""SHA-1"";
            size = 20;
        } else if (digest.regionMatches(true, 0, ""{MD5}"", 0, 5)) {
            digest = digest.substring(5);
            alg = ""MD5"";
            size = 16;
        } else if (digest.regionMatches(true, 0, ""{SMD5}"", 0, 6)) {
            digest = digest.substring(6);
            alg = ""MD5"";
            size = 16;
        }
        try {
            MessageDigest sha = MessageDigest.getInstance(alg);
            if (sha == null) {
                return false;
            }
            byte[][] hs = split(Base64.decode(digest), size);
            byte[] hash = hs[0];
            byte[] salt = hs[1];
            sha.reset();
            sha.update(password.getBytes());
            sha.update(salt);
            byte[] pwhash = sha.digest();
            return MessageDigest.isEqual(hash, pwhash);
        } catch (NoSuchAlgorithmException nsae) {
            throw new RuntimeException(""failed to find "" + ""algorithm for password hashing."", nsae);
        }
    }
","    public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
        if (Val.chkStr(profileTag).equals("""")) {
            profileTag = ""Profile"";
        }
        String configuration_folder_path = this.getConfigurationFolderPath();
        if (configuration_folder_path == null || configuration_folder_path.length() == 0) {
            Properties properties = new Properties();
            final URL url = CswProfiles.class.getResource(""CswCommon.properties"");
            properties.load(url.openStream());
            configuration_folder_path = properties.getProperty(""DEFAULT_CONFIGURATION_FOLDER_PATH"");
        }
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        ResourcePath rscPath = new ResourcePath();
        InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename);
        if (configFile == null) {
            configFile = rscPath.makeInputSource(""/"" + configuration_folder_path + filename);
        }
        Document doc = builder.parse(configFile);
        NodeList profileNodes = doc.getElementsByTagName(profileTag);
        for (int i = 0; i < profileNodes.getLength(); i++) {
            Node currProfile = profileNodes.item(i);
            XPath xpath = XPathFactory.newInstance().newXPath();
            String id = Val.chkStr(xpath.evaluate(""ID"", currProfile));
            String name = Val.chkStr(xpath.evaluate(""Name"", currProfile));
            String description = Val.chkStr(xpath.evaluate(""Description"", currProfile));
            String requestXslt = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Request"", currProfile));
            String expectedGptXmlOutput = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Request/@expectedGptXmlOutput"", currProfile));
            if (expectedGptXmlOutput.equals("""")) {
                expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString();
            }
            String responseXslt = Val.chkStr(xpath.evaluate(""GetRecords/XSLTransformations/Response"", currProfile));
            String requestKVPs = Val.chkStr(xpath.evaluate(""GetRecordByID/RequestKVPs"", currProfile));
            String metadataXslt = Val.chkStr(xpath.evaluate(""GetRecordByID/XSLTransformations/Response"", currProfile));
            boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportSpatialQuery"", currProfile)));
            boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportContentTypeQuery"", currProfile)));
            boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""SupportSpatialBoundary"", currProfile)));
            boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate(""Harvestable"", currProfile)));
            requestXslt = configuration_folder_path + requestXslt;
            responseXslt = configuration_folder_path + responseXslt;
            metadataXslt = configuration_folder_path + metadataXslt;
            SearchXslProfile profile = null;
            try {
                profile = xslProfileClass.getClass().newInstance();
                profile.setId(id);
                profile.setName(name);
                profile.setDescription(description);
                profile.setRequestxslt(requestXslt);
                profile.setResponsexslt(responseXslt);
                profile.setMetadataxslt(metadataXslt);
                profile.setSupportsContentTypeQuery(liveDataMaps);
                profile.setSupportsSpatialBoundary(extentDisplay);
                profile.setSupportsSpatialQuery(extentSearch);
                profile.setKvp(requestKVPs);
                profile.setHarvestable(harvestable);
                profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput));
                profile.setFilter_extentsearch(extentSearch);
                profile.setFilter_livedatamap(liveDataMaps);
                addProfile((P) profile);
            } catch (InstantiationException e) {
                throw new IOException(""Could not instantiate profile class"" + e.getMessage());
            } catch (IllegalAccessException e) {
                throw new IOException(""Could not instantiate profile class"" + e.getMessage());
            }
        }
    }
",False
900826,9399634,12803512,"    protected static String fileName2md5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes(""iso-8859-1""));
            byte[] byteHash = md.digest();
            md.reset();
            StringBuffer resultString = new StringBuffer();
            for (int i = 0; i < byteHash.length; i++) {
                resultString.append(Integer.toHexString(0xFF & byteHash[i]));
            }
            return (resultString.toString());
        } catch (Exception ex) {
            Logger.error(ex.getClass() + "" "" + ex.getMessage());
            for (int i = 0; i < ex.getStackTrace().length; i++) Logger.error(""     "" + ex.getStackTrace()[i].toString());
            ex.printStackTrace();
        }
        return String.valueOf(Math.random() * Long.MAX_VALUE);
    }
","    @Override
    public CheckAvailabilityResult execute(final CheckAvailabilityAction action, final ExecutionContext context) throws ActionException {
        if (LOGGER.isDebugEnabled()) {
            String serverName = null;
            if (action.getServerId() == CheckAvailability.FEDORA_ID) {
                serverName = ""fedora"";
            } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {
                serverName = ""kramerius"";
            }
            LOGGER.debug(""Processing action: CheckAvailability: "" + serverName);
        }
        ServerUtils.checkExpiredSession(httpSessionProvider);
        boolean status = true;
        String url = null;
        String usr = """";
        String pass = """";
        if (action.getServerId() == CheckAvailability.FEDORA_ID) {
            url = configuration.getFedoraHost();
            usr = configuration.getFedoraLogin();
            pass = configuration.getFedoraPassword();
        } else if (action.getServerId() == CheckAvailability.KRAMERIUS_ID) {
            url = configuration.getKrameriusHost() + SOME_STATIC_KRAMERIUS_PAGE;
        } else {
            throw new ActionException(""Unknown server id"");
        }
        try {
            URLConnection con = RESTHelper.openConnection(url, usr, pass, false);
            if (con instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) con;
                int resp = httpConnection.getResponseCode();
                if (resp < 200 || resp >= 308) {
                    status = false;
                    LOGGER.info(""Server "" + url + "" answered with HTTP code "" + httpConnection.getResponseCode());
                }
            } else {
                status = false;
            }
        } catch (MalformedURLException e) {
            status = false;
            e.printStackTrace();
        } catch (IOException e) {
            status = false;
            e.printStackTrace();
        }
        return new CheckAvailabilityResult(status, url);
    }
",False
900827,597134,18613811,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public void readPersistentProperties() {
        try {
            String file = System.getProperty(""user.home"") + System.getProperty(""file.separator"") + "".das2rc"";
            File f = new File(file);
            if (f.canRead()) {
                try {
                    InputStream in = new FileInputStream(f);
                    load(in);
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    org.das2.util.DasExceptionHandler.handle(e);
                }
            } else {
                if (!f.exists() && f.canWrite()) {
                    try {
                        OutputStream out = new FileOutputStream(f);
                        store(out, """");
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                        org.das2.util.DasExceptionHandler.handle(e);
                    }
                } else {
                    System.err.println(""Unable to read or write "" + file + "".  Using defaults."");
                }
            }
        } catch (SecurityException ex) {
            ex.printStackTrace();
        }
    }
",True
900828,20805884,10058360,"    public String preProcessHTML(String uri) {
        final StringBuffer buf = new StringBuffer();
        try {
            HTMLDocument doc = new HTMLDocument() {

                public HTMLEditorKit.ParserCallback getReader(int pos) {
                    return new HTMLEditorKit.ParserCallback() {

                        public void handleText(char[] data, int pos) {
                            buf.append(data);
                            buf.append('\n');
                        }
                    };
                }
            };
            URL url = new URI(uri).toURL();
            URLConnection conn = url.openConnection();
            Reader rd = new InputStreamReader(conn.getInputStream());
            new ParserDelegator().parse(rd, doc.getReader(0), Boolean.TRUE);
        } catch (MalformedURLException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        } catch (URISyntaxException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
        }
        return buf.toString();
    }
","    void startzm() {
        URL myzzurl;
        InputStream myzstream;
        byte zmemimage[];
        boolean joined;
        zmemimage = null;
        try {
            System.err.println(zcodefile);
            myzzurl = new URL(zcodefile);
            myzstream = myzzurl.openStream();
            zmemimage = suckstream(myzstream);
        } catch (MalformedURLException booga) {
            try {
                myzstream = new FileInputStream(zcodefile);
                zmemimage = suckstream(myzstream);
            } catch (IOException booga2) {
                add(""North"", new Label(""Malformed URL""));
                failed = true;
            }
        } catch (IOException booga) {
            add(""North"", new Label(""I/O Error""));
        }
        if (zmemimage != null) {
            switch(zmemimage[0]) {
                case 3:
                    zm = new ZMachine3(screen, status_line, zmemimage);
                    break;
                case 5:
                    remove(status_line);
                    zm = new ZMachine5(screen, zmemimage);
                    break;
                case 8:
                    remove(status_line);
                    zm = new ZMachine8(screen, zmemimage);
                    break;
                default:
                    add(""North"", new Label(""Not a valid V3,V5, or V8 story file""));
            }
            if (zm != null) zm.start();
        }
        joined = false;
        if (zmemimage != null) {
            while (!joined) {
                try {
                    zm.join();
                    joined = true;
                } catch (InterruptedException booga) {
                }
            }
        }
        System.exit(0);
    }
",False
900829,17398520,11163692,"    public void SendFile(File testfile) {
        try {
            SocketChannel sock = SocketChannel.open(new InetSocketAddress(""127.0.0.1"", 1234));
            sock.configureBlocking(true);
            while (!sock.finishConnect()) {
                System.out.println(""NOT connected!"");
            }
            System.out.println(""CONNECTED!"");
            FileInputStream fis = new FileInputStream(testfile);
            FileChannel fic = fis.getChannel();
            long len = fic.size();
            Buffer.clear();
            Buffer.putLong(len);
            Buffer.flip();
            sock.write(Buffer);
            long cnt = 0;
            while (cnt < len) {
                Buffer.clear();
                int add = fic.read(Buffer);
                cnt += add;
                Buffer.flip();
                while (Buffer.hasRemaining()) {
                    sock.write(Buffer);
                }
            }
            fic.close();
            File tmpfile = getTmp().createNewFile(""tmp"", ""tmp"");
            FileOutputStream fos = new FileOutputStream(tmpfile);
            FileChannel foc = fos.getChannel();
            int mlen = -1;
            do {
                Buffer.clear();
                mlen = sock.read(Buffer);
                Buffer.flip();
                if (mlen > 0) {
                    foc.write(Buffer);
                }
            } while (mlen > 0);
            foc.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static void transfer(File src, File dest, boolean removeSrc) throws FileNotFoundException, IOException {
        Log.warning(""source: "" + src);
        Log.warning(""dest: "" + dest);
        if (!src.canRead()) {
            throw new IOException(""can not read src file: "" + src);
        }
        if (!dest.getParentFile().isDirectory()) {
            if (!dest.getParentFile().mkdirs()) {
                throw new IOException(""failed to make directories: "" + dest.getParent());
            }
        }
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        FileChannel fcin = fis.getChannel();
        FileChannel fcout = fos.getChannel();
        Log.warning(""starting transfer from position "" + fcin.position() + "" to size "" + fcin.size());
        fcout.transferFrom(fcin, 0, fcin.size());
        Log.warning(""closing streams and channels"");
        fcin.close();
        fcout.close();
        fis.close();
        fos.close();
        if (removeSrc) {
            Log.warning(""deleting file "" + src);
            src.delete();
        }
    }
",True
900830,2716763,16822377,"    public void saveUploadFile(String toFileName, UploadFile uploadFile, SysConfig sysConfig) throws IOException {
        OutputStream bos = new FileOutputStream(toFileName);
        IOUtils.copy(uploadFile.getInputStream(), bos);
        if (sysConfig.isAttachImg(uploadFile.getFileName()) && sysConfig.getReduceAttachImg() == 1) {
            ImgUtil.reduceImg(toFileName, toFileName + Constant.IMG_SMALL_FILEPREFIX, sysConfig.getReduceAttachImgSize(), sysConfig.getReduceAttachImgSize(), 1);
        }
    }
","    public String buscarArchivos(String nUsuario) {
        String responce = """";
        String request = conf.Conf.buscarArchivo;
        OutputStreamWriter wr = null;
        BufferedReader rd = null;
        try {
            URL url = new URL(request);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(""nUsuario="" + nUsuario);
            wr.flush();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                responce += line;
            }
        } catch (Exception e) {
        }
        return responce;
    }
",False
900831,254039,2633238,"    protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception {
        String key = s3object.getKey();
        key = trimPrefix(key);
        String[] path = key.split(""/"");
        String fileName = path[path.length - 1];
        String dirPath = """";
        for (int i = 0; i < path.length - 1; i++) {
            dirPath += path[i] + ""/"";
        }
        File outputDir = new File(downloadFileOutputDir + ""/"" + dirPath);
        if (outputDir.exists() == false) {
            outputDir.mkdirs();
        }
        File outputFile = new File(outputDir, fileName);
        long size = s3object.getContentLength();
        if (outputFile.exists() && outputFile.length() == size) {
            return;
        }
        long startTime = System.currentTimeMillis();
        log.info(""Download start.S3 file="" + s3object.getKey() + "" local file="" + outputFile.getAbsolutePath());
        FileOutputStream fout = null;
        S3Object dataObject = null;
        try {
            fout = new FileOutputStream(outputFile);
            dataObject = s3.getObject(bucket, s3object.getKey());
            InputStream is = dataObject.getDataInputStream();
            IOUtils.copyStream(is, fout);
            downloadedFileList.add(key);
            long downloadTime = System.currentTimeMillis() - startTime;
            log.info(""Download complete.Estimete time="" + downloadTime + ""ms "" + IOUtils.toBPSText(downloadTime, size));
        } catch (Exception e) {
            log.error(""Download fail. s3 file="" + key, e);
            outputFile.delete();
            throw e;
        } finally {
            IOUtils.closeNoException(fout);
            if (dataObject != null) {
                dataObject.closeDataInputStream();
            }
        }
    }
","    public static String getResourceFromURL(URL url, String acceptHeader) throws java.io.IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Accept"", acceptHeader);
        urlConnection.setInstanceFollowRedirects(true);
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        String content = """";
        String line;
        while ((line = input.readLine()) != null) {
            content += line;
        }
        input.close();
        return content;
    }
",False
900832,3597316,5706224,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","        public void run() {
            try {
                File outDir = new File(outDirTextField.getText());
                if (!outDir.exists()) {
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            JOptionPane.showMessageDialog(UnpackWizard.this, ""The chosen directory does not exist!"", ""Directory Not Found Error"", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    return;
                }
                if (!outDir.isDirectory()) {
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            JOptionPane.showMessageDialog(UnpackWizard.this, ""The chosen file is not a directory!"", ""Not a Directory Error"", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    return;
                }
                if (!outDir.canWrite()) {
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            JOptionPane.showMessageDialog(UnpackWizard.this, ""Cannot write to the chosen directory!"", ""Directory Not Writeable Error"", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    return;
                }
                File archiveDir = new File(""foo.bar"").getAbsoluteFile().getParentFile();
                URL baseUrl = UnpackWizard.class.getClassLoader().getResource(UnpackWizard.class.getName().replaceAll(""\\."", ""/"") + "".class"");
                if (baseUrl.getProtocol().equals(""jar"")) {
                    String jarPath = baseUrl.getPath();
                    jarPath = jarPath.substring(0, jarPath.indexOf('!'));
                    if (jarPath.startsWith(""file:"")) {
                        try {
                            archiveDir = new File(new URI(jarPath)).getAbsoluteFile().getParentFile();
                        } catch (URISyntaxException e1) {
                            e1.printStackTrace(System.err);
                        }
                    }
                }
                SortedMap<Integer, String> inputFileNames = new TreeMap<Integer, String>();
                for (Entry<Object, Object> anEntry : indexProperties.entrySet()) {
                    String key = anEntry.getKey().toString();
                    if (key.startsWith(""archive file "")) {
                        inputFileNames.put(Integer.parseInt(key.substring(""archive file "".length())), anEntry.getValue().toString());
                    }
                }
                byte[] buff = new byte[64 * 1024];
                try {
                    long bytesToWrite = 0;
                    long bytesReported = 0;
                    long bytesWritten = 0;
                    for (String aFileName : inputFileNames.values()) {
                        File aFile = new File(archiveDir, aFileName);
                        if (aFile.exists()) {
                            if (aFile.isFile()) {
                                bytesToWrite += aFile.length();
                            } else {
                                final File wrongFile = aFile;
                                SwingUtilities.invokeLater(new Runnable() {

                                    public void run() {
                                        JOptionPane.showMessageDialog(UnpackWizard.this, ""File \"""" + wrongFile.getAbsolutePath() + ""\"" is not a standard file!"", ""Non Standard File Error"", JOptionPane.ERROR_MESSAGE);
                                    }
                                });
                                return;
                            }
                        } else {
                            final File wrongFile = aFile;
                            SwingUtilities.invokeLater(new Runnable() {

                                public void run() {
                                    JOptionPane.showMessageDialog(UnpackWizard.this, ""File \"""" + wrongFile.getAbsolutePath() + ""\"" does not exist!"", ""File Not Found Error"", JOptionPane.ERROR_MESSAGE);
                                }
                            });
                            return;
                        }
                    }
                    MultiFileInputStream mfis = new MultiFileInputStream(archiveDir, inputFileNames.values().toArray(new String[inputFileNames.size()]));
                    TarArchiveInputStream tis = new TarArchiveInputStream(new BufferedInputStream(mfis));
                    TarArchiveEntry tarEntry = tis.getNextTarEntry();
                    while (tarEntry != null) {
                        File outFile = new File(outDir.getAbsolutePath() + ""/"" + tarEntry.getName());
                        if (outFile.exists()) {
                            final File wrongFile = outFile;
                            SwingUtilities.invokeLater(new Runnable() {

                                public void run() {
                                    JOptionPane.showMessageDialog(UnpackWizard.this, ""Was about to write out file \"""" + wrongFile.getAbsolutePath() + ""\"" but it already "" + ""exists.\nPlease [re]move existing files out of the way "" + ""and try again."", ""File Not Found Error"", JOptionPane.ERROR_MESSAGE);
                                }
                            });
                            return;
                        }
                        if (tarEntry.isDirectory()) {
                            outFile.getAbsoluteFile().mkdirs();
                        } else {
                            outFile.getAbsoluteFile().getParentFile().mkdirs();
                            OutputStream os = new BufferedOutputStream(new FileOutputStream(outFile));
                            int len = tis.read(buff, 0, buff.length);
                            while (len != -1) {
                                os.write(buff, 0, len);
                                bytesWritten += len;
                                if (bytesWritten - bytesReported > (10 * 1024 * 1024)) {
                                    bytesReported = bytesWritten;
                                    final int progress = (int) (bytesReported * 100 / bytesToWrite);
                                    SwingUtilities.invokeLater(new Runnable() {

                                        @Override
                                        public void run() {
                                            progressBar.setValue(progress);
                                        }
                                    });
                                }
                                len = tis.read(buff, 0, buff.length);
                            }
                            os.close();
                        }
                        tarEntry = tis.getNextTarEntry();
                    }
                    long expectedCrc = 0;
                    try {
                        expectedCrc = Long.parseLong(indexProperties.getProperty(""CRC32"", ""0""));
                    } catch (NumberFormatException e) {
                        System.err.println(""Error while obtaining the expected CRC"");
                        e.printStackTrace(System.err);
                    }
                    if (mfis.getCRC() == expectedCrc) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                progressBar.setValue(0);
                                JOptionPane.showMessageDialog(UnpackWizard.this, ""Extraction completed successfully!"", ""Done!"", JOptionPane.INFORMATION_MESSAGE);
                            }
                        });
                        return;
                    } else {
                        System.err.println(""CRC Error: was expecting "" + expectedCrc + "" but got "" + mfis.getCRC());
                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                progressBar.setValue(0);
                                JOptionPane.showMessageDialog(UnpackWizard.this, ""CRC Error: the data extracted does not have the expected CRC!\n"" + ""You should probably delete the extracted files, as they are "" + ""likely to be invalid."", ""CRC Error"", JOptionPane.ERROR_MESSAGE);
                            }
                        });
                        return;
                    }
                } catch (final IOException e) {
                    e.printStackTrace(System.err);
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            progressBar.setValue(0);
                            JOptionPane.showMessageDialog(UnpackWizard.this, ""Input/Output Error: "" + e.getLocalizedMessage(), ""Input/Output Error"", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                    return;
                }
            } finally {
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        progressBar.setValue(0);
                        setEnabled(true);
                    }
                });
            }
        }
",True
900833,21518266,1208401,"    public void initGet() throws Exception {
        cl = new DefaultHttpClient();
        GetAuthPromter hp = new GetAuthPromter();
        cl.setCredentialsProvider(hp);
        get = new HttpGet(getURL());
        get.setHeader(""User-Agent"", ""test"");
        get.setHeader(""Accept"", ""*/*"");
        get.setHeader(""Range"", ""bytes="" + getPosition() + ""-"" + getRangeEnd());
        HttpResponse resp = cl.execute(get);
        ent = resp.getEntity();
        setInputStream(ent.getContent());
    }
","    public static String hash(String str) {
        if (str == null || str.length() == 0) {
            throw new CaptureSecurityException(""String to encript cannot be null or zero length"");
        }
        StringBuilder hexString = new StringBuilder();
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            for (byte element : hash) {
                if ((0xff & element) < 0x10) {
                    hexString.append('0').append(Integer.toHexString((0xFF & element)));
                } else {
                    hexString.append(Integer.toHexString(0xFF & element));
                }
            }
        } catch (NoSuchAlgorithmException e) {
            throw new CaptureSecurityException(e);
        }
        return hexString.toString();
    }
",False
900834,19121580,6729311,"    public static String toMd5(String s) {
        String res = """";
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();
            res = toHexString(messageDigest);
        } catch (NoSuchAlgorithmException e) {
        }
        return res;
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",True
900835,20681845,19029279,"    public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception {
        JCRNodeSource emptySource = loadTestSource();
        assertEquals(false, emptySource.exists());
        OutputStream sourceOut = emptySource.getOutputStream();
        assertNotNull(sourceOut);
        InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE);
        try {
            IOUtils.copy(contentIn, sourceOut);
            sourceOut.flush();
        } finally {
            sourceOut.close();
            contentIn.close();
        }
        InputStream contentIn2 = getClass().getResourceAsStream(CONTENT2_FILE);
        sourceOut = emptySource.getOutputStream();
        try {
            IOUtils.copy(contentIn2, sourceOut);
            sourceOut.flush();
        } finally {
            sourceOut.close();
            contentIn2.close();
        }
        InputStream expected = getClass().getResourceAsStream(CONTENT2_FILE);
        JCRNodeSource persistentSource = loadTestSource();
        assertEquals(true, persistentSource.exists());
        InputStream actual = persistentSource.getInputStream();
        try {
            assertTrue(isXmlEqual(expected, actual));
        } finally {
            expected.close();
            actual.close();
        }
        JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.saar"");
        persistentSource.delete();
        tmpSrc.delete();
    }
","    public static boolean copy(File from, File to, Override override) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        FileChannel srcChannel = null;
        FileChannel destChannel = null;
        if (override == null) override = Override.NEWER;
        switch(override) {
            case NEVER:
                if (to.isFile()) return false;
                break;
            case NEWER:
                if (to.isFile() && (from.lastModified() - LASTMODIFIED_DIFF_MILLIS) < to.lastModified()) return false;
                break;
        }
        to.getParentFile().mkdirs();
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            srcChannel = in.getChannel();
            destChannel = out.getChannel();
            long position = 0L;
            long count = srcChannel.size();
            while (position < count) {
                long chunk = Math.min(MAX_IO_CHUNK_SIZE, count - position);
                position += destChannel.transferFrom(srcChannel, position, chunk);
            }
            to.setLastModified(from.lastModified());
            return true;
        } finally {
            CommonUtils.close(srcChannel);
            CommonUtils.close(destChannel);
            CommonUtils.close(out);
            CommonUtils.close(in);
        }
    }
",True
900836,413620,13824827,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
","    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",True
900837,23243320,6535232,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    public String encodePassword(String password, byte[] salt) throws Exception {
        if (salt == null) {
            salt = new byte[12];
            secureRandom.nextBytes(salt);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        byte[] storedPassword = new byte[digest.length + 12];
        System.arraycopy(salt, 0, storedPassword, 0, 12);
        System.arraycopy(digest, 0, storedPassword, 12, digest.length);
        return new String(Base64.encode(storedPassword));
    }
",True
900838,23349376,5855466,"    public TreeMap getStrainMap() {
        TreeMap strainMap = new TreeMap();
        String server = """";
        try {
            Datasource[] ds = DatasourceManager.getDatasouce(alias, version, DatasourceManager.ALL_CONTAINS_GROUP);
            for (int i = 0; i < ds.length; i++) {
                if (ds[i].getDescription().startsWith(MOUSE_DBSNP)) {
                    if (ds[i].getServer().length() == 0) {
                        Connection con = ds[i].getConnection();
                        strainMap = Action.lineMode.regularSQL.GenotypeDataSearchAction.getStrainMap(con);
                        break;
                    } else {
                        server = ds[i].getServer();
                        HashMap serverUrlMap = InitXml.getInstance().getServerMap();
                        String serverUrl = (String) serverUrlMap.get(server);
                        URL url = new URL(serverUrl + servletName);
                        URLConnection uc = url.openConnection();
                        uc.setDoOutput(true);
                        OutputStream os = uc.getOutputStream();
                        StringBuffer buf = new StringBuffer();
                        buf.append(""viewType=getstrains"");
                        buf.append(""&hHead="" + hHead);
                        buf.append(""&hCheck="" + version);
                        PrintStream ps = new PrintStream(os);
                        ps.print(buf.toString());
                        ps.close();
                        ObjectInputStream ois = new ObjectInputStream(uc.getInputStream());
                        strainMap = (TreeMap) ois.readObject();
                        ois.close();
                    }
                }
            }
        } catch (Exception e) {
            log.error(""strain map"", e);
        }
        return strainMap;
    }
","    public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) {
        if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) {
            throw new IllegalArgumentException(""Class "" + callingClazz + "" is not derived from "" + hierarchyRootClazz);
        }
        if (null == resourceBaseName) {
            throw new NullPointerException(""resourceBaseName is null"");
        }
        String fqcn = callingClazz.getName();
        String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1);
        String callingClassResource = uqcn + "".properties"";
        String globalCallingClassResource = ""/"" + callingClassResource;
        String baseClassResource = resourceBaseName + ""-"" + uqcn + "".properties"";
        String globalBaseClassResource = ""/"" + baseClassResource;
        String pkgResource = resourceBaseName + "".properties"";
        String globalResource = ""/"" + pkgResource;
        boolean loaded = false;
        final String[] resources = { baseClassResource, globalBaseClassResource, callingClassResource, globalCallingClassResource, pkgResource, globalResource };
        List<URL> urls = new ArrayList<URL>();
        Class<?> clazz = callingClazz;
        do {
            for (String res : resources) {
                URL url = clazz.getResource(res);
                if (null != url && !urls.contains(url)) {
                    urls.add(url);
                }
            }
            if (hierarchyRootClazz.equals(clazz)) {
                clazz = null;
            } else {
                clazz = clazz.getSuperclass();
            }
        } while (null != clazz);
        ListIterator<URL> it = urls.listIterator(urls.size());
        while (it.hasPrevious()) {
            URL url = it.previous();
            InputStream in = null;
            try {
                LOG.info(""Loading test properties from resource: "" + url);
                in = url.openStream();
                props.load(in);
                loaded = true;
            } catch (IOException ex) {
                LOG.warn(""Failed to load properties from resource: "" + url, ex);
            }
            IOUtil.closeSilently(in);
        }
        return loaded;
    }
",False
900839,16458721,4336715,"    public String stringOfUrl(String addr) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        URL url = new URL(addr);
        IOUtils.copy(url.openStream(), output);
        return output.toString();
    }
","    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",True
900840,8224584,18070587,"    @Override
    public boolean checkConnection() {
        int status = 0;
        try {
            URL url = new URL(TupeloProxy.endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            status = conn.getResponseCode();
        } catch (Exception e) {
            logger.severe(""Connection test failed with code:"" + status);
            e.printStackTrace();
        }
        return status > 199 && status < 400;
    }
","    @Test
    public void testWriteAndReadFirstLevel() throws Exception {
        JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0);
        JCFS.configureDiscovery(defaultUdpAddress, defaultUdpPort);
        try {
            server.start();
            RFile directory1 = new RFile(""directory1"");
            RFile file = new RFile(directory1, ""testreadwrite1st.txt"");
            RFileOutputStream out = new RFileOutputStream(file);
            out.write(""test"".getBytes(""utf-8""));
            out.close();
            RFileInputStream in = new RFileInputStream(file);
            byte[] buffer = new byte[4];
            int readCount = in.read(buffer);
            in.close();
            assertEquals(4, readCount);
            String resultRead = new String(buffer, ""utf-8"");
            assertEquals(""test"", resultRead);
        } finally {
            server.stop();
        }
    }
",False
900841,5199811,2273819,"    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");
            messageDiegest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Exception while encoding password"");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Exception while encoding password"");
            throw new Error(e);
        }
    }
","        String digest(final UserAccountEntity account) {
            try {
                final MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
                digest.reset();
                digest.update(account.getUserId().getBytes(""UTF-8""));
                digest.update(account.getLastLogin().toString().getBytes(""UTF-8""));
                digest.update(account.getPerson().getGivenName().getBytes(""UTF-8""));
                digest.update(account.getPerson().getSurname().getBytes(""UTF-8""));
                digest.update(account.getPerson().getEmail().getBytes(""UTF-8""));
                digest.update(m_random);
                return new String(Base64.altEncode(digest.digest()));
            } catch (final Exception e) {
                LOG.error(""Exception"", e);
                throw new RuntimeException(e);
            }
        }
",True
900842,11918313,19498550,"    public String[] retrieveFasta(String id) throws Exception {
        URL url = new URL(""http://www.ebi.ac.uk/ena/data/view/"" + id + ""&display=fasta"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String header = reader.readLine();
        StringBuffer seq = new StringBuffer();
        String line = """";
        while ((line = reader.readLine()) != null) {
            seq.append(line);
        }
        reader.close();
        return new String[] { header, seq.toString() };
    }
","                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + ComponentApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = ComponentApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new ComponentApplicationException(""No "" + ""ComponentApplicationContext implementation "" + ""found."");
                        }
",True
900843,21348949,21575638,"        protected void onSubmit() {
            super.onSubmit();
            if (!this.hasError()) {
                final FileUpload upload = fileUploadField.getFileUpload();
                if (upload != null) {
                    try {
                        StringWriter xmlSourceWriter = new StringWriter();
                        IOUtils.copy(upload.getInputStream(), xmlSourceWriter);
                        processSubmittedDoap(xmlSourceWriter.toString());
                    } catch (IOException e) {
                        setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    }
                }
            }
        }
","    protected void writeGZippedBytes(byte array[], TupleOutput out) {
        if (array == null || array.length == 0) {
            out.writeBoolean(false);
            writeBytes(array, out);
            return;
        }
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream(array.length);
            GZIPOutputStream gzout = new GZIPOutputStream(baos);
            ByteArrayInputStream bais = new ByteArrayInputStream(array);
            IOUtils.copyTo(bais, gzout);
            gzout.finish();
            gzout.close();
            bais.close();
            byte compressed[] = baos.toByteArray();
            if (compressed.length < array.length) {
                out.writeBoolean(true);
                writeBytes(compressed, out);
            } else {
                out.writeBoolean(false);
                writeBytes(array, out);
            }
        } catch (IOException err) {
            throw new RuntimeException(err);
        }
    }
",True
900844,5875194,9689565,"    @SuppressWarnings(""unchecked"")
    public static void unzip(String zipFileName, String folder, boolean isCreate) throws IOException {
        File file = new File(zipFileName);
        File folderfile = null;
        if (file.exists() && file.isFile()) {
            String mfolder = folder == null ? file.getParent() : folder;
            String fn = file.getName();
            fn = fn.substring(0, fn.lastIndexOf("".""));
            mfolder = isCreate ? (mfolder + File.separator + fn) : mfolder;
            folderfile = new File(mfolder);
            if (!folderfile.exists()) {
                folderfile.mkdirs();
            }
        } else {
            throw new FileNotFoundException(""不存在 zip 文件"");
        }
        ZipFile zipFile = new ZipFile(file);
        try {
            Enumeration<ZipArchiveEntry> en = zipFile.getEntries();
            ZipArchiveEntry ze = null;
            while (en.hasMoreElements()) {
                ze = en.nextElement();
                if (ze.isDirectory()) {
                    String dirName = ze.getName();
                    dirName = dirName.substring(0, dirName.length() - 1);
                    File f = new File(folderfile.getPath() + File.separator + dirName);
                    f.mkdirs();
                } else {
                    File f = new File(folderfile.getPath() + File.separator + ze.getName());
                    if (!f.getParentFile().exists()) {
                        f.getParentFile().mkdirs();
                    }
                    f.createNewFile();
                    InputStream in = zipFile.getInputStream(ze);
                    OutputStream out = new FileOutputStream(f);
                    IOUtils.copy(in, out);
                    out.close();
                    in.close();
                }
            }
        } finally {
            zipFile.close();
        }
    }
","    public static String md5sum(String s, String alg) {
        try {
            MessageDigest md = MessageDigest.getInstance(alg);
            md.update(s.getBytes(), 0, s.length());
            StringBuffer sb = new StringBuffer();
            synchronized (sb) {
                for (byte b : md.digest()) sb.append(pad(Integer.toHexString(0xFF & b), ZERO.charAt(0), 2, true));
            }
            return sb.toString();
        } catch (Exception ex) {
            log(ex);
        }
        return null;
    }
",False
900845,13028546,18695537,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","        public InputSource resolveEntity(String pPublicId, String pSystemId) throws SAXException, IOException {
            try {
                URL url = new URL(pSystemId);
                String fileName = (String) urlMap.get(url);
                if (fileName != null) {
                    FileInputStream istream = new FileInputStream(new File(schemaDir, fileName));
                    InputSource isource = new InputSource(istream);
                    isource.setSystemId(url.toString());
                    return isource;
                }
                String file = url.getFile();
                if (file == null) {
                    file = """";
                } else {
                    int offset = file.lastIndexOf('/');
                    if (offset >= 0) {
                        file = file.substring(offset + 1);
                    }
                }
                if ("""".equals(file)) {
                    file = ""schema.xsd"";
                }
                int offset = file.lastIndexOf('.');
                String prefix;
                String suffix;
                String numAsStr = """";
                if (offset > 0 && offset < file.length()) {
                    prefix = file.substring(0, offset);
                    suffix = file.substring(offset);
                } else {
                    prefix = file;
                    suffix = "".xsd"";
                }
                File f;
                for (int num = 1; ; ++num) {
                    f = new File(schemaDir, prefix + numAsStr + suffix);
                    if (f.exists()) {
                        numAsStr = ""_"" + num;
                    } else {
                        break;
                    }
                }
                InputStream istream = url.openStream();
                schemaDir.mkdirs();
                FileOutputStream fos = new FileOutputStream(f);
                try {
                    byte[] buffer = new byte[1024];
                    for (; ; ) {
                        int res = istream.read(buffer);
                        if (res == -1) {
                            break;
                        } else if (res > 0) {
                            fos.write(buffer, 0, res);
                        }
                    }
                    istream.close();
                    fos.close();
                    fos = null;
                } finally {
                    if (fos != null) {
                        try {
                            f.delete();
                        } catch (Throwable ignore) {
                        }
                    }
                }
                urlMap.put(url, f.getName());
                InputSource isource = new InputSource(new FileInputStream(f));
                isource.setSystemId(url.toString());
                return isource;
            } catch (Exception e) {
                JaxMeServlet.this.log(""Failed to resolve URL "" + pSystemId, e);
            }
            return null;
        }
",False
900846,7996909,13744886,"    private String mkSid() {
        String temp = toString();
        MessageDigest messagedigest = null;
        try {
            messagedigest = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
        messagedigest.update(temp.getBytes());
        byte digest[] = messagedigest.digest();
        String chk = """";
        for (int i = 0; i < digest.length; i++) {
            String s = Integer.toHexString(digest[i] & 0xFF);
            chk += ((s.length() == 1) ? ""0"" + s : s);
        }
        return chk.toString();
    }
","    @Override
    public void run() {
        try {
            FileChannel in = new FileInputStream(inputfile).getChannel();
            long pos = 0;
            for (int i = 1; i <= noofparts; i++) {
                FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + ""."" + ""v"" + i).getChannel();
                status.setText(""Rozdělovač: Rozděluji část "" + i + "".."");
                if (remainingsize >= splitsize) {
                    in.transferTo(pos, splitsize, out);
                    pos += splitsize;
                    remainingsize -= splitsize;
                } else {
                    in.transferTo(pos, remainingsize, out);
                }
                pb.setValue(100 * i / noofparts);
                out.close();
            }
            in.close();
            if (deleteOnFinish) new File(inputfile + """").delete();
            status.setText(""Rozdělovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Rozděleno!"", ""Rozdělovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
        }
    }
",False
900847,21144775,4462296,"    public static void main(String[] args) {
        String logConfiguration = args[2];
        DOMConfigurator.configure(logConfiguration);
        String urlToRun = args[0];
        String outputFile = args[1];
        InputStream conInput = null;
        BufferedReader reader = null;
        BufferedWriter writer = null;
        if (logger.isDebugEnabled()) {
            logger.debug(""output file is "" + outputFile);
        }
        try {
            URL url = new URL(urlToRun);
            URLConnection urlCon = url.openConnection();
            urlCon.connect();
            conInput = urlCon.getInputStream();
            reader = new BufferedReader(new InputStreamReader(conInput));
            File output = new File(outputFile);
            writer = new BufferedWriter(new FileWriter(output));
            String line = null;
            while ((line = reader.readLine()) != null) {
                logger.debug(line);
                writer.write(line);
            }
            writer.flush();
        } catch (MalformedURLException murle) {
            logger.error(urlToRun + "" is not a valid URL"", murle);
        } catch (IOException ioe) {
            logger.error(""IO Error ocured while opening connection to "" + urlToRun, ioe);
        } finally {
            try {
                reader.close();
                conInput.close();
                writer.close();
            } catch (IOException ioe) {
                throw new RuntimeException(""Cannot close readers or streams"", ioe);
            }
        }
    }
","    public synchronized void insertMessage(FrostUnsentMessageObject mo) throws SQLException {
        AttachmentList files = mo.getAttachmentsOfType(Attachment.FILE);
        AttachmentList boards = mo.getAttachmentsOfType(Attachment.BOARD);
        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();
        try {
            conn.setAutoCommit(false);
            PreparedStatement ps = conn.prepareStatement(""INSERT INTO UNSENDMESSAGES ("" + ""primkey,messageid,inreplyto,board,sendafter,idlinepos,idlinelen,fromname,subject,recipient,msgcontent,"" + ""hasfileattachment,hasboardattachment,timeAdded"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");
            Long identity = null;
            Statement stmt = AppLayerDatabase.getInstance().createStatement();
            ResultSet rs = stmt.executeQuery(""select UNIQUEKEY('UNSENDMESSAGES')"");
            if (rs.next()) {
                identity = new Long(rs.getLong(1));
            } else {
                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");
            }
            rs.close();
            stmt.close();
            mo.setMsgIdentity(identity.longValue());
            int i = 1;
            ps.setLong(i++, mo.getMsgIdentity());
            ps.setString(i++, mo.getMessageId());
            ps.setString(i++, mo.getInReplyTo());
            ps.setInt(i++, mo.getBoard().getPrimaryKey().intValue());
            ps.setLong(i++, 0);
            ps.setInt(i++, mo.getIdLinePos());
            ps.setInt(i++, mo.getIdLineLen());
            ps.setString(i++, mo.getFromName());
            ps.setString(i++, mo.getSubject());
            ps.setString(i++, mo.getRecipientName());
            ps.setString(i++, mo.getContent());
            ps.setBoolean(i++, (files.size() > 0));
            ps.setBoolean(i++, (boards.size() > 0));
            ps.setLong(i++, mo.getTimeAdded());
            int inserted = 0;
            try {
                inserted = ps.executeUpdate();
            } finally {
                ps.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");
                return;
            }
            mo.setMsgIdentity(identity.longValue());
            if (files.size() > 0) {
                PreparedStatement p = conn.prepareStatement(""INSERT INTO UNSENDFILEATTACHMENTS"" + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");
                for (Iterator it = files.iterator(); it.hasNext(); ) {
                    FileAttachment fa = (FileAttachment) it.next();
                    int ix = 1;
                    p.setLong(ix++, mo.getMsgIdentity());
                    p.setString(ix++, fa.getInternalFile().getPath());
                    p.setLong(ix++, fa.getFileSize());
                    p.setString(ix++, fa.getKey());
                    int ins = p.executeUpdate();
                    if (ins == 0) {
                        logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");
                    }
                }
                p.close();
            }
            if (boards.size() > 0) {
                PreparedStatement p = conn.prepareStatement(""INSERT INTO UNSENDBOARDATTACHMENTS"" + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");
                for (Iterator it = boards.iterator(); it.hasNext(); ) {
                    BoardAttachment ba = (BoardAttachment) it.next();
                    Board b = ba.getBoardObj();
                    int ix = 1;
                    p.setLong(ix++, mo.getMsgIdentity());
                    p.setString(ix++, b.getNameLowerCase());
                    p.setString(ix++, b.getPublicKey());
                    p.setString(ix++, b.getPrivateKey());
                    p.setString(ix++, b.getDescription());
                    int ins = p.executeUpdate();
                    if (ins == 0) {
                        logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");
                    }
                }
                p.close();
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Throwable t) {
            logger.log(Level.SEVERE, ""Exception during insert of unsent message"", t);
            try {
                conn.rollback();
            } catch (Throwable t1) {
                logger.log(Level.SEVERE, ""Exception during rollback"", t1);
            }
            try {
                conn.setAutoCommit(true);
            } catch (Throwable t1) {
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(conn);
        }
    }
",False
900848,11992308,6258282,"    public static String generateStringSHA256(String content) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ScannerChecksum.class.getName()).log(Level.SEVERE, null, ex);
        }
        md.update(content.getBytes());
        byte byteData[] = md.digest();
        @SuppressWarnings(""StringBufferMayBeStringBuilder"") StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        @SuppressWarnings(""StringBufferMayBeStringBuilder"") StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
","    public void testDigest() {
        try {
            String myinfo = ""我的测试信息"";
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(myinfo.getBytes());
            byte[] digesta = alga.digest();
            System.out.println(""本信息摘要是:"" + byte2hex(digesta));
            MessageDigest algb = MessageDigest.getInstance(""SHA-1"");
            algb.update(myinfo.getBytes());
            if (MessageDigest.isEqual(digesta, algb.digest())) {
                System.out.println(""信息检查正常"");
            } else {
                System.out.println(""摘要不相同"");
            }
        } catch (NoSuchAlgorithmException ex) {
            System.out.println(""非法摘要算法"");
        }
    }
",True
900849,14287646,8335460,"    private String getStoreName() {
        try {
            final MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(protectionDomain.getBytes());
            final byte[] bs = digest.digest();
            final StringBuffer sb = new StringBuffer(bs.length * 2);
            for (int i = 0; i < bs.length; i++) {
                final String s = Integer.toHexString(bs[i] & 0xff);
                if (s.length() < 2) sb.append('0');
                sb.append(s);
            }
            return sb.toString();
        } catch (final NoSuchAlgorithmException e) {
            throw new RuntimeException(""Can't save credentials: digest method MD5 unavailable."");
        }
    }
","    public static String encrypt(String password, String algorithm, byte[] salt) {
        StringBuffer buffer = new StringBuffer();
        MessageDigest digest = null;
        int size = 0;
        if (""CRYPT"".equalsIgnoreCase(algorithm)) {
            throw new InternalError(""Not implemented"");
        } else if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {
            size = 20;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SSHA}"");
            } else {
                buffer.append(""{SHA}"");
            }
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {
            size = 16;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SMD5}"");
            } else {
                buffer.append(""{MD5}"");
            }
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        }
        int outSize = size;
        digest.reset();
        digest.update(password.getBytes());
        if (salt != null && salt.length > 0) {
            digest.update(salt);
            outSize += salt.length;
        }
        byte[] out = new byte[outSize];
        System.arraycopy(digest.digest(), 0, out, 0, size);
        if (salt != null && salt.length > 0) {
            System.arraycopy(salt, 0, out, size, salt.length);
        }
        buffer.append(Base64.encode(out));
        return buffer.toString();
    }
",True
900850,13799349,7149321,"    void bubbleSort(int ids[]) {
        boolean flag = true;
        int temp;
        while (flag) {
            flag = false;
            for (int i = 0; i < ids.length - 1; i++) if (ids[i] < ids[i + 1]) {
                temp = ids[i];
                ids[i] = ids[i + 1];
                ids[i + 1] = temp;
                flag = true;
            }
        }
    }
","    public static Dimension getJPEGDimension(String urls) throws IOException {
        URL url;
        Dimension d = null;
        try {
            url = new URL(urls);
            InputStream fis = url.openStream();
            if (fis.read() != 255 || fis.read() != 216) throw new RuntimeException(""SOI (Start Of Image) marker 0xff 0xd8 missing"");
            while (fis.read() == 255) {
                int marker = fis.read();
                int len = fis.read() << 8 | fis.read();
                if (marker == 192) {
                    fis.skip(1);
                    int height = fis.read() << 8 | fis.read();
                    int width = fis.read() << 8 | fis.read();
                    d = new Dimension(width, height);
                    break;
                }
                fis.skip(len - 2);
            }
            fis.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        return d;
    }
",False
900851,20954717,10912335,"    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
","    public void guardarCantidad() {
        try {
            String can = String.valueOf(cantidadArchivos);
            File archivo = new File(""cantidadArchivos.txt"");
            FileWriter fw = new FileWriter(archivo);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter salida = new PrintWriter(bw);
            salida.print(can);
            salida.close();
            BufferedInputStream origin = null;
            FileOutputStream dest = new FileOutputStream(""cantidadArchivos.zip"");
            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
            byte data[] = new byte[buffer];
            File f = new File(""cantidadArchivos.txt"");
            FileInputStream fi = new FileInputStream(f);
            origin = new BufferedInputStream(fi, buffer);
            ZipEntry entry = new ZipEntry(""cantidadArchivos.txt"");
            out.putNextEntry(entry);
            int count;
            while ((count = origin.read(data, 0, buffer)) != -1) out.write(data, 0, count);
            out.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, ""Error en: "" + e.toString(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
    }
",True
900852,22564546,22448399,"    public void unzip(String resource) {
        File f = new File(resource);
        if (!f.exists()) throw new RuntimeException(""The specified resources does not exist ("" + resource + "")"");
        String parent = f.getParent().toString();
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(resource);
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                log.info(""Extracting archive entry: "" + entry);
                String entryPath = new StringBuilder(parent).append(System.getProperty(""file.separator"")).append(entry.getName()).toString();
                if (entry.isDirectory()) {
                    log.info(""Creating directory: "" + entryPath);
                    (new File(entryPath)).mkdir();
                    continue;
                }
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(entryPath);
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    private HttpURLConnection getHttpURLConnection(String bizDocToExecute) {
        StringBuffer servletURL = new StringBuffer();
        servletURL.append(getBaseServletURL());
        servletURL.append(""?_BIZVIEW="").append(bizDocToExecute);
        Map<String, Object> inputParms = getInputParams();
        if (inputParms != null) {
            Set<Entry<String, Object>> entrySet = inputParms.entrySet();
            for (Entry<String, Object> entry : entrySet) {
                String name = entry.getKey();
                String value = entry.getValue().toString();
                servletURL.append(""&"").append(name).append(""="").append(value);
            }
        }
        HttpURLConnection connection = null;
        try {
            URL url = new URL(servletURL.toString());
            connection = (HttpURLConnection) url.openConnection();
        } catch (IOException e) {
            Assert.fail(""Failed to connect to the test servlet: "" + e);
        }
        return connection;
    }
",False
900853,777609,8856524,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    @Action(value = ""ajaxFileUploads"", results = {  })
    public void ajaxFileUploads() throws IOException {
        String extName = """";
        String newFilename = """";
        String nowTimeStr = """";
        String realpath = """";
        if (Validate.StrNotNull(this.getImgdirpath())) {
            realpath = ""Uploads/"" + this.getImgdirpath() + ""/"";
        } else {
            realpath = this.isexistdir();
        }
        SimpleDateFormat sDateFormat;
        Random r = new Random();
        String savePath = ServletActionContext.getServletContext().getRealPath("""");
        savePath = savePath + realpath;
        HttpServletResponse response = ServletActionContext.getResponse();
        int rannum = (int) (r.nextDouble() * (99999 - 1000 + 1)) + 10000;
        sDateFormat = new SimpleDateFormat(""yyyyMMddHHmmss"");
        nowTimeStr = sDateFormat.format(new Date());
        String filename = request.getHeader(""X-File-Name"");
        if (filename.lastIndexOf(""."") >= 0) {
            extName = filename.substring(filename.lastIndexOf("".""));
        }
        newFilename = nowTimeStr + rannum + extName;
        PrintWriter writer = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            writer = response.getWriter();
        } catch (IOException ex) {
            log.debug(ImgTAction.class.getName() + ""has thrown an exception:"" + ex.getMessage());
        }
        try {
            is = request.getInputStream();
            fos = new FileOutputStream(new File(savePath + newFilename));
            IOUtils.copy(is, fos);
            response.setStatus(response.SC_OK);
            writer.print(""{success:'"" + realpath + newFilename + ""'}"");
        } catch (FileNotFoundException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log.debug(ImgTAction.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } catch (IOException ex) {
            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);
            writer.print(""{success: false}"");
            log.debug(ImgTAction.class.getName() + ""has thrown an exception: "" + ex.getMessage());
        } finally {
            try {
                this.setImgdirpath(null);
                fos.close();
                is.close();
            } catch (IOException ignored) {
            }
        }
        writer.flush();
        writer.close();
    }
",True
900854,2476569,2737487,"    public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException {
        OutputStream out = fout;
        OutputStream out2 = fout;
        boolean signed = false;
        OutputStream oldOut = null;
        File tmp = null;
        File tmp2 = null;
        try {
            tmp = File.createTempFile(""yahp"", ""pdf"");
            tmp2 = File.createTempFile(""yahp"", ""pdf"");
            oldOut = out;
            if (""true"".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SIGNING))) {
                signed = true;
                out2 = new FileOutputStream(tmp2);
            } else {
                out2 = oldOut;
            }
            out = new FileOutputStream(tmp);
            com.lowagie.text.Document document = null;
            PdfCopy writer = null;
            boolean first = true;
            Map mapSizeDoc = new HashMap();
            int totalPage = 0;
            for (int i = 0; i < files.size(); i++) {
                final File fPDF = (File) files.get(i);
                final PdfReader reader = new PdfReader(fPDF.getAbsolutePath());
                reader.consolidateNamedDestinations();
                final int n = reader.getNumberOfPages();
                if (first) {
                    first = false;
                    document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1));
                    writer = new PdfCopy(document, out);
                    writer.setPdfVersion(PdfWriter.VERSION_1_3);
                    writer.setFullCompression();
                    if (""true"".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) {
                        final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD);
                        final int securityType = CDocumentReconstructor.getSecurityFlags(properties);
                        writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType);
                    }
                    final String title = (String) properties.get(IHtmlToPdfTransformer.PDF_TITLE);
                    if (title != null) {
                        document.addTitle(title);
                    } else if (base_url != null) {
                        document.addTitle(base_url);
                    }
                    final String creator = (String) properties.get(IHtmlToPdfTransformer.PDF_CREATOR);
                    if (creator != null) {
                        document.addCreator(creator);
                    } else {
                        document.addCreator(IHtmlToPdfTransformer.VERSION);
                    }
                    final String author = (String) properties.get(IHtmlToPdfTransformer.PDF_AUTHOR);
                    if (author != null) {
                        document.addAuthor(author);
                    }
                    final String sproducer = (String) properties.get(IHtmlToPdfTransformer.PDF_PRODUCER);
                    if (sproducer != null) {
                        document.addProducer(sproducer);
                    } else {
                        document.addProducer(IHtmlToPdfTransformer.VERSION + "" - http://www.allcolor.org/YaHPConverter/ - "" + producer);
                    }
                    document.open();
                }
                PdfImportedPage page;
                for (int j = 0; j < n; ) {
                    ++j;
                    totalPage++;
                    mapSizeDoc.put("""" + totalPage, """" + i);
                    page = writer.getImportedPage(reader, j);
                    writer.addPage(page);
                }
            }
            document.close();
            out.flush();
            out.close();
            {
                final PdfReader reader = new PdfReader(tmp.getAbsolutePath());
                ;
                final int n = reader.getNumberOfPages();
                final PdfStamper stp = new PdfStamper(reader, out2);
                int i = 0;
                BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
                final CHtmlToPdfFlyingSaucerTransformer trans = new CHtmlToPdfFlyingSaucerTransformer();
                while (i < n) {
                    i++;
                    int indexSize = Integer.parseInt((String) mapSizeDoc.get("""" + i));
                    final int[] dsize = size[indexSize].getSize();
                    final int[] dmargin = size[indexSize].getMargin();
                    for (final Iterator it = hf.iterator(); it.hasNext(); ) {
                        final CHeaderFooter chf = (CHeaderFooter) it.next();
                        if (chf.getSfor().equals(CHeaderFooter.ODD_PAGES) && (i % 2 == 0)) {
                            continue;
                        } else if (chf.getSfor().equals(CHeaderFooter.EVEN_PAGES) && (i % 2 != 0)) {
                            continue;
                        }
                        final String text = chf.getContent().replaceAll(""<pagenumber>"", """" + i).replaceAll(""<pagecount>"", """" + n);
                        final PdfContentByte over = stp.getOverContent(i);
                        final ByteArrayOutputStream bbout = new ByteArrayOutputStream();
                        if (chf.getType().equals(CHeaderFooter.HEADER)) {
                            trans.transform(new ByteArrayInputStream(text.getBytes(""utf-8"")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout);
                        } else if (chf.getType().equals(CHeaderFooter.FOOTER)) {
                            trans.transform(new ByteArrayInputStream(text.getBytes(""utf-8"")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout);
                        }
                        final PdfReader readerHF = new PdfReader(bbout.toByteArray());
                        if (chf.getType().equals(CHeaderFooter.HEADER)) {
                            over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], dsize[1] - dmargin[3]);
                        } else if (chf.getType().equals(CHeaderFooter.FOOTER)) {
                            over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], 0);
                        }
                        readerHF.close();
                    }
                }
                stp.close();
            }
            try {
                out2.flush();
            } catch (Exception ignore) {
            } finally {
                try {
                    out2.close();
                } catch (Exception ignore) {
                }
            }
            if (signed) {
                final String keypassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_PASSWORD);
                final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD);
                final String keyStorepassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_KEYSTORE_PASSWORD);
                final String privateKeyFile = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_FILE);
                final String reason = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_REASON);
                final String location = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_LOCATION);
                final boolean selfSigned = !""false"".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SELF_SIGNING));
                PdfReader reader = null;
                if (password != null) {
                    reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes());
                } else {
                    reader = new PdfReader(tmp2.getAbsolutePath());
                }
                final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance(""pkcs12"");
                ks.load(new FileInputStream(privateKeyFile), keyStorepassword.toCharArray());
                final String alias = (String) ks.aliases().nextElement();
                final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray());
                final Certificate chain[] = ks.getCertificateChain(alias);
                final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0');
                if (""true"".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) {
                    stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties));
                }
                final PdfSignatureAppearance sap = stp.getSignatureAppearance();
                if (selfSigned) {
                    sap.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
                } else {
                    sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
                }
                if (reason != null) {
                    sap.setReason(reason);
                }
                if (location != null) {
                    sap.setLocation(location);
                }
                stp.close();
                oldOut.flush();
            }
        } catch (final Exception e) {
            throw new CConvertException(""ERROR: An Exception occured while reconstructing the pdf document: "" + e.getMessage(), e);
        } finally {
            try {
                tmp.delete();
            } catch (final Exception ignore) {
            }
            try {
                tmp2.delete();
            } catch (final Exception ignore) {
            }
        }
    }
","    public static void copy(File src, File dest) throws IOException {
        OutputStream stream = new FileOutputStream(dest);
        FileInputStream fis = new FileInputStream(src);
        byte[] buffer = new byte[16384];
        while (fis.available() != 0) {
            int read = fis.read(buffer);
            stream.write(buffer, 0, read);
        }
        stream.flush();
    }
",True
900855,4988270,4898682,"    public static void resize(File originalFile, File resizedFile, int width, String format) throws IOException {
        if (format != null && ""gif"".equals(format.toLowerCase())) {
            resize(originalFile, resizedFile, width, 1);
            return;
        }
        FileInputStream fis = new FileInputStream(originalFile);
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        int readLength = -1;
        int bufferSize = 1024;
        byte bytes[] = new byte[bufferSize];
        while ((readLength = fis.read(bytes, 0, bufferSize)) != -1) {
            byteStream.write(bytes, 0, readLength);
        }
        byte[] in = byteStream.toByteArray();
        fis.close();
        byteStream.close();
        Image inputImage = Toolkit.getDefaultToolkit().createImage(in);
        waitForImage(inputImage);
        int imageWidth = inputImage.getWidth(null);
        if (imageWidth < 1) throw new IllegalArgumentException(""image width "" + imageWidth + "" is out of range"");
        int imageHeight = inputImage.getHeight(null);
        if (imageHeight < 1) throw new IllegalArgumentException(""image height "" + imageHeight + "" is out of range"");
        int height = -1;
        double scaleW = (double) imageWidth / (double) width;
        double scaleY = (double) imageHeight / (double) height;
        if (scaleW >= 0 && scaleY >= 0) {
            if (scaleW > scaleY) {
                height = -1;
            } else {
                width = -1;
            }
        }
        Image outputImage = inputImage.getScaledInstance(width, height, java.awt.Image.SCALE_DEFAULT);
        checkImage(outputImage);
        encode(new FileOutputStream(resizedFile), outputImage, format);
    }
","    public void run() {
        try {
            String s = (new StringBuilder()).append(""fName="").append(URLEncoder.encode(""???"", ""UTF-8"")).append(""&lName="").append(URLEncoder.encode(""???"", ""UTF-8"")).toString();
            URL url = new URL(""http://snoop.minecraft.net/"");
            HttpURLConnection httpurlconnection = (HttpURLConnection) url.openConnection();
            httpurlconnection.setRequestMethod(""POST"");
            httpurlconnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpurlconnection.setRequestProperty(""Content-Length"", (new StringBuilder()).append("""").append(Integer.toString(s.getBytes().length)).toString());
            httpurlconnection.setRequestProperty(""Content-Language"", ""en-US"");
            httpurlconnection.setUseCaches(false);
            httpurlconnection.setDoInput(true);
            httpurlconnection.setDoOutput(true);
            DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());
            dataoutputstream.writeBytes(s);
            dataoutputstream.flush();
            dataoutputstream.close();
            java.io.InputStream inputstream = httpurlconnection.getInputStream();
            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(inputstream));
            StringBuffer stringbuffer = new StringBuffer();
            String s1;
            while ((s1 = bufferedreader.readLine()) != null) {
                stringbuffer.append(s1);
                stringbuffer.append('\r');
            }
            bufferedreader.close();
        } catch (Exception exception) {
        }
    }
",False
900856,13783899,5785861,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    @Test
    public void testEncryptDecrypt() throws IOException {
        BlockCipher cipher = new SerpentEngine();
        Random rnd = new Random();
        byte[] key = new byte[256 / 8];
        rnd.nextBytes(key);
        byte[] iv = new byte[cipher.getBlockSize()];
        rnd.nextBytes(iv);
        byte[] data = new byte[1230000];
        new Random().nextBytes(data);
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        CryptOutputStream eout = new CryptOutputStream(bout, cipher, key);
        eout.write(data);
        eout.close();
        byte[] eData = bout.toByteArray();
        ByteArrayInputStream bin = new ByteArrayInputStream(eData);
        CryptInputStream din = new CryptInputStream(bin, cipher, key);
        bout = new ByteArrayOutputStream();
        IOUtils.copy(din, bout);
        eData = bout.toByteArray();
        Assert.assertTrue(Arrays.areEqual(data, eData));
    }
",True
900857,3739492,420619,"    public static boolean downloadFile(String url, String destination) {
        BufferedInputStream bi = null;
        BufferedOutputStream bo = null;
        File destfile;
        try {
            java.net.URL fileurl;
            try {
                fileurl = new java.net.URL(url);
            } catch (MalformedURLException e) {
                return false;
            }
            bi = new BufferedInputStream(fileurl.openStream());
            destfile = new File(destination);
            if (!destfile.createNewFile()) {
                destfile.delete();
                destfile.createNewFile();
            }
            bo = new BufferedOutputStream(new FileOutputStream(destfile));
            int readedbyte;
            while ((readedbyte = bi.read()) != -1) {
                bo.write(readedbyte);
            }
            bo.flush();
        } catch (IOException ex) {
            return false;
        } finally {
            try {
                bi.close();
                bo.close();
            } catch (Exception ex) {
            }
        }
        return true;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",False
900858,17141933,19027042,"    public static InputSource getInputSource(URL url) throws IOException {
        String proto = url.getProtocol().toLowerCase();
        if (!(""http"".equals(proto) || ""https"".equals(proto))) throw new IllegalArgumentException(""OAI-PMH only allows HTTP(S) as network protocol!"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        StringBuilder ua = new StringBuilder(""Java/"");
        ua.append(System.getProperty(""java.version""));
        ua.append("" ("");
        ua.append(OAIHarvester.class.getName());
        ua.append(')');
        conn.setRequestProperty(""User-Agent"", ua.toString());
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate, identity;q=0.3, *;q=0"");
        conn.setRequestProperty(""Accept-Charset"", ""utf-8, *;q=0.1"");
        conn.setRequestProperty(""Accept"", ""text/xml, application/xml, *;q=0.1"");
        conn.setUseCaches(false);
        conn.setFollowRedirects(true);
        log.debug(""Opening connection..."");
        InputStream in = null;
        try {
            conn.connect();
            in = conn.getInputStream();
        } catch (IOException ioe) {
            int after, code;
            try {
                after = conn.getHeaderFieldInt(""Retry-After"", -1);
                code = conn.getResponseCode();
            } catch (IOException ioe2) {
                after = -1;
                code = -1;
            }
            if (code == HttpURLConnection.HTTP_UNAVAILABLE && after > 0) throw new RetryAfterIOException(after, ioe);
            throw ioe;
        }
        String encoding = conn.getContentEncoding();
        if (encoding == null) encoding = ""identity"";
        encoding = encoding.toLowerCase();
        log.debug(""HTTP server uses "" + encoding + "" content encoding."");
        if (""gzip"".equals(encoding)) in = new GZIPInputStream(in); else if (""deflate"".equals(encoding)) in = new InflaterInputStream(in); else if (!""identity"".equals(encoding)) throw new IOException(""Server uses an invalid content encoding: "" + encoding);
        String contentType = conn.getContentType();
        String charset = null;
        if (contentType != null) {
            contentType = contentType.toLowerCase();
            int charsetStart = contentType.indexOf(""charset="");
            if (charsetStart >= 0) {
                int charsetEnd = contentType.indexOf("";"", charsetStart);
                if (charsetEnd == -1) charsetEnd = contentType.length();
                charsetStart += ""charset="".length();
                charset = contentType.substring(charsetStart, charsetEnd).trim();
            }
        }
        log.debug(""Charset from Content-Type: '"" + charset + ""'"");
        InputSource src = new InputSource(in);
        src.setSystemId(url.toString());
        src.setEncoding(charset);
        return src;
    }
","    public boolean refreshRequired() {
        boolean status = false;
        Set<String> urls = lastModifiedDates.keySet();
        try {
            for (String urlPath : urls) {
                Long lastModifiedDate = lastModifiedDates.get(urlPath);
                URL url = new URL(urlPath);
                URLConnection connection = url.openConnection();
                connection.connect();
                long newModDate = connection.getLastModified();
                if (newModDate != lastModifiedDate) {
                    status = true;
                    break;
                }
            }
        } catch (Exception e) {
            LOG.warn(""Exception while monitoring update times."", e);
            return true;
        }
        return status;
    }
",False
900859,8269895,16879559,"    private String getData(String requestUrl) throws AuthenticationException, IOException {
        URL url = new URL(requestUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        String header;
        try {
            header = oauthAuthenticator.getHttpAuthorizationHeader(url.toString(), ""GET"", profile.getOAuthToken(), profile.getOAuthTokenSecret());
        } catch (OAuthException e) {
            throw new AuthenticationException(e);
        }
        conn.setRequestProperty(""Authorization"", header);
        if (conn.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
            throw new AuthenticationException();
        }
        InputStreamReader reader = new InputStreamReader(conn.getInputStream());
        char[] buffer = new char[1024];
        int bytesRead = 0;
        StringBuilder data = new StringBuilder();
        while ((bytesRead = reader.read(buffer)) != -1) {
            data.append(buffer, 0, bytesRead);
        }
        reader.close();
        if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new IOException(conn.getResponseCode() + "" "" + conn.getResponseMessage() + ""\n"" + data);
        }
        return data.toString();
    }
","    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        final EditText eText = (EditText) findViewById(R.id.address);
        final Button button = (Button) findViewById(R.id.ButtonGo);
        button.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                try {
                    HttpClient httpclient = new DefaultHttpClient();
                    HttpPost httppost = new HttpPost(""https://mt0-app.cloud.cm/rpc/json"");
                    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                    nameValuePairs.add(new BasicNameValuePair(""m"", ""login""));
                    nameValuePairs.add(new BasicNameValuePair(""c"", ""User""));
                    nameValuePairs.add(new BasicNameValuePair(""password"", ""cloudisgreat""));
                    nameValuePairs.add(new BasicNameValuePair(""alias"", ""cs588""));
                    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                    String result = """";
                    try {
                        HttpResponse response = httpclient.execute(httppost);
                        result = EntityUtils.toString(response.getEntity());
                    } catch (Exception e) {
                        result = e.getMessage();
                    }
                    LayoutInflater inflater = (LayoutInflater) WebTest.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    final View layout = inflater.inflate(R.layout.window1, null);
                    final PopupWindow popup = new PopupWindowTest(layout, 100, 100);
                    Button b = (Button) layout.findViewById(R.id.test_button);
                    b.setOnTouchListener(new OnTouchListener() {

                        @Override
                        public boolean onTouch(View v, MotionEvent event) {
                            Log.d(""Debug"", ""Button activate"");
                            popup.dismiss();
                            return false;
                        }
                    });
                    popup.showAtLocation(layout, Gravity.CENTER, 0, 0);
                    View layout2 = inflater.inflate(R.layout.window1, null);
                    final PopupWindow popup2 = new PopupWindowTest(layout2, 100, 100);
                    TextView tview = (TextView) layout2.findViewById(R.id.pagetext);
                    tview.setText(result);
                    popup2.showAtLocation(layout, Gravity.CENTER, 50, -90);
                } catch (Exception e) {
                    Log.d(""Debug"", e.toString());
                }
            }
        });
    }
",False
900860,20661433,21247844,"    public static void copyFile(String fromFilePath, String toFilePath, boolean overwrite) throws IOException {
        File fromFile = new File(fromFilePath);
        File toFile = new File(toFilePath);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFilePath);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFilePath);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFilePath);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!overwrite) {
                throw new IOException(toFilePath + "" already exists!"");
            }
            if (!toFile.canWrite()) {
                throw new IOException(""FileCopy: destination file is unwriteable: "" + toFilePath);
            }
            String parent = toFile.getParent();
            if (parent == null) {
                parent = System.getProperty(""user.dir"");
            }
            File dir = new File(parent);
            if (!dir.exists()) {
                throw new IOException(""FileCopy: destination directory doesn't exist: "" + parent);
            }
            if (dir.isFile()) {
                throw new IOException(""FileCopy: destination is not a directory: "" + parent);
            }
            if (!dir.canWrite()) {
                throw new IOException(""FileCopy: destination directory is unwriteable: "" + parent);
            }
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            long lastModified = fromFile.lastModified();
            toFile.setLastModified(lastModified);
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                }
            }
        }
    }
","    public static void kopirujSoubor(File vstup, File vystup) throws IOException {
        FileChannel sourceChannel = new FileInputStream(vstup).getChannel();
        FileChannel destinationChannel = new FileOutputStream(vystup).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",True
900861,20054230,1024884,"    private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
","    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        try {
            final HttpServlet servlet;
            String path = url.getPath();
            if (path.matches(""reg:.+"")) {
                String registerName = path.replaceAll(""reg:([^/]*)/.*"", ""$1"");
                servlet = register.get(registerName);
                if (servlet == null) throw new RuntimeException(""No servlet registered with name "" + registerName);
            } else {
                String servletClassName = path.replaceAll(""([^/]*)/.*"", ""$1"");
                servlet = (HttpServlet) Class.forName(servletClassName).newInstance();
            }
            final MockHttpServletRequest req = new MockHttpServletRequest().setMethod(""GET"");
            final MockHttpServletResponse resp = new MockHttpServletResponse();
            return new HttpURLConnection(url) {

                @Override
                public int getResponseCode() throws IOException {
                    serviceIfNeeded();
                    return resp.status;
                }

                @Override
                public InputStream getInputStream() throws IOException {
                    serviceIfNeeded();
                    if (resp.status == 500) throw new IOException(""Server responded with error 500"");
                    byte[] array = resp.out.toByteArray();
                    return new ByteArrayInputStream(array);
                }

                @Override
                public InputStream getErrorStream() {
                    try {
                        serviceIfNeeded();
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                    if (resp.status != 500) return null;
                    return new ByteArrayInputStream(resp.out.toByteArray());
                }

                @Override
                public OutputStream getOutputStream() throws IOException {
                    return req.tmp;
                }

                @Override
                public void addRequestProperty(String key, String value) {
                    req.addHeader(key, value);
                }

                @Override
                public void connect() throws IOException {
                }

                @Override
                public boolean usingProxy() {
                    return false;
                }

                @Override
                public void disconnect() {
                }

                private boolean called;

                private void serviceIfNeeded() throws IOException {
                    try {
                        if (!called) {
                            called = true;
                            req.setMethod(getRequestMethod());
                            servlet.service(req, resp);
                        }
                    } catch (ServletException e) {
                        throw new RuntimeException(e);
                    }
                }
            };
        } catch (InstantiationException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
",False
900862,21277519,12197340,"    public static String getMD5(String s) throws Exception {
        MessageDigest complete = MessageDigest.getInstance(""MD5"");
        complete.update(s.getBytes());
        byte[] b = complete.digest();
        String result = """";
        for (int i = 0; i < b.length; i++) {
            result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
        }
        return result;
    }
","    private void initBanner() {
        for (int k = 0; k < 3; k++) {
            if (bannerImg == null) {
                int i = getRandomId();
                imageURL = NbBundle.getMessage(BottomContent.class, ""URL_BannerImageLink"", Integer.toString(i));
                bannerURL = NbBundle.getMessage(BottomContent.class, ""URL_BannerLink"", Integer.toString(i));
                HttpContext context = new BasicHttpContext();
                context.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
                HttpGet method = new HttpGet(imageURL);
                try {
                    HttpResponse response = ProxyManager.httpClient.execute(method, context);
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        bannerImg = new ImageIcon(ImageIO.read(entity.getContent()));
                        EntityUtils.consume(entity);
                    }
                } catch (IOException ex) {
                    bannerImg = null;
                } finally {
                    method.abort();
                }
            } else {
                break;
            }
        }
        if (bannerImg == null) {
            NotifyUtil.error(""Banner Error"", ""Application could not get banner image. Please check your internet connection."", false);
        }
    }
",False
900863,17930257,22010538,"                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setFileView(new ImageFileView());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(Resorces.this, ""Seleccione una imagen"");
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + file.separator + ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        String rutaRelativa = ""data"" + file.separator + ""imagenes"" + file.separator + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        imagen.setImagenURL(rutaRelativa);
                        System.out.println(rutaGlobal + "" "" + rutaRelativa);
                        buttonImagen.setIcon(new ImageIcon(getClass().getResource(""/data/icons/view_sidetreeOK.png"")));
                        labelImagenPreview.setIcon(gui.procesadorDatos.escalaImageIcon(imagen.getImagenURL()));
                    } else {
                    }
                }
","    private byte[] getBytes(String resource) throws IOException {
        InputStream is = HttpServletFileDownloadTest.class.getResourceAsStream(resource);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        IOUtils.copy(is, out);
        IOUtils.closeQuietly(is);
        return out.toByteArray();
    }
",True
900864,23113421,2278820,"    public String getString(String arg) throws Exception {
        URL url = new URL(arg);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        con.connect();
        InputStreamReader src = new InputStreamReader(con.getInputStream(), ""ISO-8859-1"");
        StringBuffer stb = new StringBuffer();
        char[] buf = new char[1024];
        int l;
        while ((l = src.read(buf, 0, 1024)) >= 0) {
            stb.append(buf, 0, l);
        }
        String res = stb.toString();
        if (res.startsWith(""<pannenleiter-exception"")) {
            builder.start(new TreeNode((TreeWidget) null, false), false);
            InputSource xmlInput = new InputSource(new StringReader(res));
            parser.setDocumentHandler(builder);
            parser.parse(xmlInput);
        }
        return res;
    }
","    public String md5sum(String toCompute) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(toCompute.getBytes());
        java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
        return hash.toString(16);
    }
",False
900865,12614305,9127823,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static Status checkUpdate() {
        Status updateStatus = Status.FAILURE;
        URL url;
        InputStream is;
        InputStreamReader isr;
        BufferedReader r;
        String line;
        try {
            url = new URL(updateURL);
            is = url.openStream();
            isr = new InputStreamReader(is);
            r = new BufferedReader(isr);
            String variable, value;
            while ((line = r.readLine()) != null) {
                if (!line.equals("""") && line.charAt(0) != '/') {
                    variable = line.substring(0, line.indexOf('='));
                    value = line.substring(line.indexOf('=') + 1);
                    if (variable.equals(""Latest Version"")) {
                        variable = value;
                        value = variable.substring(0, variable.indexOf("" ""));
                        variable = variable.substring(variable.indexOf("" "") + 1);
                        latestGameVersion = value;
                        latestModifier = variable;
                        if (Float.parseFloat(value) > Float.parseFloat(gameVersion)) updateStatus = Status.NOT_CURRENT; else updateStatus = Status.CURRENT;
                    } else if (variable.equals(""Download URL"")) downloadURL = value;
                }
            }
            return updateStatus;
        } catch (MalformedURLException e) {
            return Status.URL_NOT_FOUND;
        } catch (IOException e) {
            return Status.FAILURE;
        }
    }
",False
900866,5518199,9552054,"    protected String loadPage(String url_string) {
        try {
            URL url = new URL(url_string);
            HttpURLConnection connection = null;
            InputStream is = null;
            try {
                connection = (HttpURLConnection) url.openConnection();
                int response = connection.getResponseCode();
                if (response == HttpURLConnection.HTTP_ACCEPTED || response == HttpURLConnection.HTTP_OK) {
                    is = connection.getInputStream();
                    String page = """";
                    while (page.length() < MAX_PAGE_SIZE) {
                        byte[] buffer = new byte[2048];
                        int len = is.read(buffer);
                        if (len < 0) {
                            break;
                        }
                        page += new String(buffer, 0, len);
                    }
                    return (page);
                } else {
                    informFailure(""httpinvalidresponse"", """" + response);
                    return (null);
                }
            } finally {
                try {
                    if (is != null) {
                        is.close();
                    }
                    if (connection != null) {
                        connection.disconnect();
                    }
                } catch (Throwable e) {
                    Debug.printStackTrace(e);
                }
            }
        } catch (Throwable e) {
            informFailure(""httploadfail"", e.toString());
            return (null);
        }
    }
","    public static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) dir.mkdir();
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",False
900867,1944560,7395775,"    private static boolean copyFile(File src, File dest) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(src);
            fos = new FileOutputStream(dest);
            for (int c = fis.read(); c != -1; c = fis.read()) fos.write(c);
            return true;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } finally {
            if (fis != null) try {
                fis.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (fos != null) try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    private void copyReportFile(ServletRequest req, String reportName, Report report) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException, FileNotFoundException, IOException {
        String reportFileName = (String) Class.forName(""org.eclipse.birt.report.utility.ParameterAccessor"").getMethod(""getReport"", new Class[] { HttpServletRequest.class, String.class }).invoke(null, new Object[] { req, reportName });
        ByteArrayInputStream bais = new ByteArrayInputStream(report.getReportContent());
        FileOutputStream fos = new FileOutputStream(new File(reportFileName));
        IOUtils.copy(bais, fos);
        bais.close();
        fos.close();
    }
",True
900868,9696025,8344806,"    public static boolean copyFile(File source, File dest) {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(dest).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            return false;
        } finally {
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (IOException e) {
            }
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (IOException e) {
            }
        }
        return true;
    }
","    public void unpack(File destDirectory, boolean delete) {
        if (delete) delete(destDirectory);
        if (destDirectory.exists()) throw new ContentPackageException(""Destination directory already exists."");
        this.destDirectory = destDirectory;
        this.manifestFile = new File(destDirectory, MANIFEST_FILE_NAME);
        try {
            if (zipInputStream == null) zipInputStream = new ZipInputStream(new FileInputStream(zipFile));
            ZipEntry zipEntry;
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                File destFile = new File(destDirectory, zipEntry.getName());
                destFile.getParentFile().mkdirs();
                if (!zipEntry.isDirectory()) {
                    BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(destFile), BUFFER_SIZE);
                    byte[] buffer = new byte[BUFFER_SIZE];
                    int length;
                    while ((length = zipInputStream.read(buffer, 0, BUFFER_SIZE)) != -1) output.write(buffer, 0, length);
                    output.close();
                    zipInputStream.closeEntry();
                }
            }
            zipInputStream.close();
        } catch (IOException ex) {
            throw new ContentPackageException(ex);
        }
    }
",True
900869,196392,14289588,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    @Override
    public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException {
        if ((baseName == null) || (locale == null) || (format == null) || (loader == null)) {
            throw new NullPointerException();
        }
        ResourceBundle bundle = null;
        if (format.equals(XML)) {
            String bundleName = toBundleName(baseName, locale);
            String resourceName = toResourceName(bundleName, format);
            URL url = loader.getResource(resourceName);
            if (url != null) {
                URLConnection connection = url.openConnection();
                if (connection != null) {
                    if (reload) {
                        connection.setUseCaches(false);
                    }
                    InputStream stream = connection.getInputStream();
                    if (stream != null) {
                        BufferedInputStream bis = new BufferedInputStream(stream);
                        bundle = new XMLResourceBundle(bis);
                        bis.close();
                    }
                }
            }
        }
        return bundle;
    }
",False
900870,11339042,9543279,"    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        PrintWriter out = null;
        ServletOutputStream outstream = null;
        try {
            String action = req.getParameter(""nmrshiftdbaction"");
            String relativepath = ServletUtils.expandRelative(this.getServletConfig(), ""/WEB-INF"");
            TurbineConfig tc = new TurbineConfig(relativepath + "".."", relativepath + getServletConfig().getInitParameter(""properties""));
            tc.init();
            int spectrumId = -1;
            DBSpectrum spectrum = null;
            Export export = null;
            String format = req.getParameter(""format"");
            if (action.equals(""test"")) {
                try {
                    res.setContentType(""text/plain"");
                    out = res.getWriter();
                    List l = DBSpectrumPeer.executeQuery(""select SPECTRUM_ID from SPECTRUM limit 1"");
                    if (l.size() > 0) spectrumId = ((Record) l.get(0)).getValue(1).asInt();
                    out.write(""success"");
                } catch (Exception ex) {
                    out.write(""failure"");
                }
            } else if (action.equals(""rss"")) {
                int numbertoexport = 10;
                out = res.getWriter();
                if (req.getParameter(""numbertoexport"") != null) {
                    try {
                        numbertoexport = Integer.parseInt(req.getParameter(""numbertoexport""));
                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(""Number to small/large"");
                    } catch (NumberFormatException ex) {
                        out.println(""The parameter <code>numbertoexport</code>must be an integer from 1 to 20"");
                    }
                }
                res.setContentType(""text/xml"");
                RssWriter rssWriter = new RssWriter();
                rssWriter.setWriter(res.getWriter());
                AtomContainerSet soac = new AtomContainerSet();
                String query = ""select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\""true\"" order by MOLECULE.DATE desc;"";
                List l = NmrshiftdbUserPeer.executeQuery(query);
                for (int i = 0; i < numbertoexport; i++) {
                    if (i == l.size()) break;
                    DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));
                    IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1);
                    soac.addAtomContainer(cdkmol);
                    rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req));
                    rssWriter.getDatemap().put(cdkmol, mol.getDate());
                    rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback());
                    rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName());
                    rssWriter.setCreator(GeneralUtils.getAdminEmail(getServletConfig()));
                    Vector v = mol.getDBCanonicalNames();
                    for (int k = 0; k < v.size(); k++) {
                        DBCanonicalName canonName = (DBCanonicalName) v.get(k);
                        if (canonName.getDBCanonicalNameType().getCanonicalNameType() == ""INChI"") {
                            rssWriter.getInchimap().put(cdkmol, canonName.getName());
                            break;
                        }
                    }
                    rssWriter.setTitle(""NMRShiftDB"");
                    rssWriter.setLink(""http://www.nmrshiftdb.org"");
                    rssWriter.setDescription(""NMRShiftDB is an open-source, open-access, open-submission, open-content web database for chemical structures and their nuclear magnetic resonance data"");
                    rssWriter.setPublisher(""NMRShiftDB.org"");
                    rssWriter.setImagelink(""http://www.nmrshiftdb.org/images/nmrshift-logo.gif"");
                    rssWriter.setAbout(""http://www.nmrshiftdb.org/NmrshiftdbServlet?nmrshiftdbaction=rss"");
                    Collection coll = new ArrayList();
                    Vector spectra = mol.selectSpectra(null);
                    for (int k = 0; k < spectra.size(); k++) {
                        Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect();
                        Element el2 = el.getChildElements().get(0);
                        el.removeChild(el2);
                        coll.add(el2);
                    }
                    rssWriter.getMultiMap().put(cdkmol, coll);
                }
                rssWriter.write(soac);
            } else if (action.equals(""getattachment"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter(""sampleid"")));
                outstream.write(sample.getAttachment());
            } else if (action.equals(""createreport"")) {
                res.setContentType(""application/pdf"");
                outstream = res.getOutputStream();
                boolean yearly = req.getParameter(""style"").equals(""yearly"");
                int yearstart = Integer.parseInt(req.getParameter(""yearstart""));
                int yearend = Integer.parseInt(req.getParameter(""yearend""));
                int monthstart = 0;
                int monthend = 0;
                if (!yearly) {
                    monthstart = Integer.parseInt(req.getParameter(""monthstart""));
                    monthend = Integer.parseInt(req.getParameter(""monthend""));
                }
                int type = Integer.parseInt(req.getParameter(""type""));
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(relativepath + ""/reports/"" + (yearly ? ""yearly"" : ""monthly"") + ""_report_"" + type + "".jasper"");
                Map parameters = new HashMap();
                if (yearly) parameters.put(""HEADER"", ""Report for years "" + yearstart + "" - "" + yearend); else parameters.put(""HEADER"", ""Report for "" + monthstart + ""/"" + yearstart + "" - "" + monthend + ""/"" + yearend);
                DBConnection dbconn = TurbineDB.getConnection();
                Connection conn = dbconn.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = null;
                if (type == 1) {
                    rs = stmt.executeQuery(""select YEAR(DATE) as YEAR, "" + (yearly ? """" : "" MONTH(DATE) as MONTH, "") + ""AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>="" + yearstart + "" and YEAR(DATE)<="" + yearend + "" and LOGIN_NAME<>'testuser' group by YEAR, "" + (yearly ? """" : ""MONTH, "") + ""AFFILIATION_1, AFFILIATION_2, MACHINE.NAME"");
                } else if (type == 2) {
                    rs = stmt.executeQuery(""select YEAR(DATE) as YEAR, "" + (yearly ? """" : "" MONTH(DATE) as MONTH, "") + ""MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, "" + (yearly ? """" : ""MONTH, "") + ""MACHINE.NAME"");
                }
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs));
                JasperExportManager.exportReportToPdfStream(jasperPrint, outstream);
                dbconn.close();
            } else if (action.equals(""exportcmlbyinchi"")) {
                res.setContentType(""text/xml"");
                out = res.getWriter();
                String inchi = req.getParameter(""inchi"");
                String spectrumtype = req.getParameter(""spectrumtype"");
                Criteria crit = new Criteria();
                crit.add(DBCanonicalNamePeer.NAME, inchi);
                crit.addJoin(DBCanonicalNamePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);
                crit.addJoin(DBSpectrumPeer.SPECTRUM_TYPE_ID, DBSpectrumTypePeer.SPECTRUM_TYPE_ID);
                crit.add(DBSpectrumTypePeer.NAME, spectrumtype);
                try {
                    GeneralUtils.logToSql(crit.toString(), null);
                } catch (Exception ex) {
                }
                Vector spectra = DBSpectrumPeer.doSelect(crit);
                if (spectra.size() == 0) {
                    out.write(""No such molecule or spectrum"");
                } else {
                    Element cmlElement = new Element(""cml"");
                    cmlElement.addAttribute(new Attribute(""convention"", ""nmrshiftdb-convention""));
                    cmlElement.setNamespaceURI(""http://www.xml-cml.org/schema"");
                    Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1);
                    nu.xom.Node cmldoc = parent.getChild(0);
                    ((Element) cmldoc).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    parent.removeChildren();
                    cmlElement.appendChild(cmldoc);
                    for (int k = 0; k < spectra.size(); k++) {
                        Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect();
                        Node spectrumel = parentspec.getChild(0);
                        parentspec.removeChildren();
                        cmlElement.appendChild(spectrumel);
                        ((Element) spectrumel).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    }
                    out.write(cmlElement.toXML());
                }
            } else if (action.equals(""namelist"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ZipOutputStream zipout = new ZipOutputStream(baos);
                Criteria crit = new Criteria();
                crit.addJoin(DBMoleculePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID);
                crit.add(DBSpectrumPeer.REVIEW_FLAG, ""true"");
                Vector v = DBMoleculePeer.doSelect(crit);
                for (int i = 0; i < v.size(); i++) {
                    if (i % 500 == 0) {
                        if (i != 0) {
                            zipout.write(new String(""<p>The list is continued <a href=\""nmrshiftdb.names."" + i + "".html\"">here</a></p></body></html>"").getBytes());
                            zipout.closeEntry();
                        }
                        zipout.putNextEntry(new ZipEntry(""nmrshiftdb.names."" + i + "".html""));
                        zipout.write(new String(""<html><body><h1>This is a list of strcutures in <a href=\""http://www.nmrshiftdb.org\"">NMRShiftDB</a>, starting at "" + i + "", Its main purpose is to be found by search engines</h1>"").getBytes());
                    }
                    DBMolecule mol = (DBMolecule) v.get(i);
                    zipout.write(new String(""<p><a href=\"""" + mol.getEasylink(req) + ""\"">"").getBytes());
                    Vector cannames = mol.getDBCanonicalNames();
                    for (int k = 0; k < cannames.size(); k++) {
                        zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + "" "").getBytes());
                    }
                    Vector chemnames = mol.getDBChemicalNames();
                    for (int k = 0; k < chemnames.size(); k++) {
                        zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + "" "").getBytes());
                    }
                    zipout.write(new String(""</a>. Information we have got: NMR spectra"").getBytes());
                    Vector spectra = mol.selectSpectra();
                    for (int k = 0; k < spectra.size(); k++) {
                        zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + "", "").getBytes());
                    }
                    if (mol.hasAny3d()) zipout.write(new String(""3D coordinates, "").getBytes());
                    zipout.write(new String(""File formats: CML, mol, png, jpeg"").getBytes());
                    zipout.write(new String(""</p>"").getBytes());
                }
                zipout.write(new String(""</body></html>"").getBytes());
                zipout.closeEntry();
                zipout.close();
                InputStream is = new ByteArrayInputStream(baos.toByteArray());
                byte[] buf = new byte[32 * 1024];
                int nRead = 0;
                while ((nRead = is.read(buf)) != -1) {
                    outstream.write(buf, 0, nRead);
                }
            } else if (action.equals(""predictor"")) {
                if (req.getParameter(""symbol"") == null) {
                    res.setContentType(""text/plain"");
                    out = res.getWriter();
                    out.write(""please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C"");
                }
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ZipOutputStream zipout = new ZipOutputStream(baos);
                String filename = ""org/openscience/nmrshiftdb/PredictionTool.class"";
                zipout.putNextEntry(new ZipEntry(filename));
                JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), ""/WEB-INF/lib/nmrshiftdb-lib.jar"")));
                JarEntry entry = jip.getNextJarEntry();
                while (entry.getName().indexOf(""PredictionTool.class"") == -1) {
                    entry = jip.getNextJarEntry();
                }
                for (int i = 0; i < entry.getSize(); i++) {
                    zipout.write(jip.read());
                }
                zipout.closeEntry();
                zipout.putNextEntry(new ZipEntry(""nmrshiftdb.csv""));
                int i = 0;
                org.apache.turbine.util.db.pool.DBConnection conn = TurbineDB.getConnection();
                HashMap mapsmap = new HashMap();
                while (true) {
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(""select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='"" + req.getParameter(""symbol"") + ""' limit "" + (i * 1000) + "", 1000"");
                    int m = 0;
                    while (rs.next()) {
                        String code = rs.getString(1);
                        Double value = new Double(rs.getString(2));
                        String symbol = rs.getString(3);
                        if (mapsmap.get(symbol) == null) {
                            mapsmap.put(symbol, new HashMap());
                        }
                        for (int spheres = 6; spheres > 0; spheres--) {
                            StringBuffer hoseCodeBuffer = new StringBuffer();
                            StringTokenizer st = new StringTokenizer(code, ""()/"");
                            for (int k = 0; k < spheres; k++) {
                                if (st.hasMoreTokens()) {
                                    String partcode = st.nextToken();
                                    hoseCodeBuffer.append(partcode);
                                }
                                if (k == 0) {
                                    hoseCodeBuffer.append(""("");
                                } else if (k == 3) {
                                    hoseCodeBuffer.append("")"");
                                } else {
                                    hoseCodeBuffer.append(""/"");
                                }
                            }
                            String hoseCode = hoseCodeBuffer.toString();
                            if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) {
                                ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList());
                            }
                            ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value);
                        }
                        m++;
                    }
                    i++;
                    stmt.close();
                    if (m == 0) break;
                }
                Set keySet = mapsmap.keySet();
                Iterator it = keySet.iterator();
                while (it.hasNext()) {
                    String symbol = (String) it.next();
                    HashMap hosemap = ((HashMap) mapsmap.get(symbol));
                    Set keySet2 = hosemap.keySet();
                    Iterator it2 = keySet2.iterator();
                    while (it2.hasNext()) {
                        String hoseCode = (String) it2.next();
                        ArrayList list = ((ArrayList) hosemap.get(hoseCode));
                        double[] values = new double[list.size()];
                        for (int k = 0; k < list.size(); k++) {
                            values[k] = ((Double) list.get(k)).doubleValue();
                        }
                        zipout.write(new String(symbol + ""|"" + hoseCode + ""|"" + Statistics.minimum(values) + ""|"" + Statistics.average(values) + ""|"" + Statistics.maximum(values) + ""\r\n"").getBytes());
                    }
                }
                zipout.closeEntry();
                zipout.close();
                InputStream is = new ByteArrayInputStream(baos.toByteArray());
                byte[] buf = new byte[32 * 1024];
                int nRead = 0;
                i = 0;
                while ((nRead = is.read(buf)) != -1) {
                    outstream.write(buf, 0, nRead);
                }
            } else if (action.equals(""exportspec"") || action.equals(""exportmol"")) {
                if (spectrumId > -1) spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(spectrumId)); else spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter(""spectrumid"")));
                export = new Export(spectrum);
            } else if (action.equals(""exportmdl"")) {
                res.setContentType(""text/plain"");
                outstream = res.getOutputStream();
                DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter(""moleculeid"")));
                outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter(""coordsetid"")), false).getBytes());
            } else if (action.equals(""exportlastinputs"")) {
                format = action;
            } else if (action.equals(""printpredict"")) {
                res.setContentType(""text/html"");
                out = res.getWriter();
                HttpSession session = req.getSession();
                VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true);
                StringWriter w = new StringWriter();
                Velocity.mergeTemplate(""predictprint.vm"", ""ISO-8859-1"", context, w);
                out.println(w.toString());
            } else {
                res.setContentType(""text/html"");
                out = res.getWriter();
                out.println(""No valid action"");
            }
            if (format == null) format = """";
            if (format.equals(""pdf"") || format.equals(""rtf"")) {
                res.setContentType(""application/"" + format);
                out = res.getWriter();
            }
            if (format.equals(""docbook"")) {
                res.setContentType(""application/zip"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""svg"")) {
                res.setContentType(""image/x-svg"");
                out = res.getWriter();
            }
            if (format.equals(""tiff"")) {
                res.setContentType(""image/tiff"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""jpeg"")) {
                res.setContentType(""image/jpeg"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""png"")) {
                res.setContentType(""image/png"");
                outstream = res.getOutputStream();
            }
            if (format.equals(""mdl"") || format.equals(""txt"") || format.equals(""cml"") || format.equals(""cmlboth"") || format.indexOf(""exsection"") == 0) {
                res.setContentType(""text/plain"");
                out = res.getWriter();
            }
            if (format.equals(""simplehtml"") || format.equals(""exportlastinputs"")) {
                res.setContentType(""text/html"");
                out = res.getWriter();
            }
            if (action.equals(""exportlastinputs"")) {
                int numbertoexport = 4;
                if (req.getParameter(""numbertoexport"") != null) {
                    try {
                        numbertoexport = Integer.parseInt(req.getParameter(""numbertoexport""));
                        if (numbertoexport < 1 || numbertoexport > 20) throw new NumberFormatException(""Number to small/large"");
                    } catch (NumberFormatException ex) {
                        out.println(""The parameter <code>numbertoexport</code>must be an integer from 1 to 20"");
                    }
                }
                NmrshiftdbUser user = null;
                try {
                    user = NmrshiftdbUserPeer.getByName(req.getParameter(""username""));
                } catch (NmrshiftdbException ex) {
                    out.println(""Seems <code>username</code> is not OK: "" + ex.getMessage());
                }
                if (user != null) {
                    List l = NmrshiftdbUserPeer.executeQuery(""SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\"""" + user.getUserName() + ""\"";"");
                    Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate();
                    if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) {
                        out.println(""Your last download was at "" + lastDownloadDate + "". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!"");
                    } else {
                        NmrshiftdbUserPeer.executeStatement(""UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\"""" + user.getUserName() + ""\"";"");
                        Vector<String> parameters = new Vector<String>();
                        String query = ""select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\""true\"" and SPECTRUM.USER_ID="" + user.getUserId() + "" order by MOLECULE.DATE desc;"";
                        l = NmrshiftdbUserPeer.executeQuery(query);
                        String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString();
                        url = url.substring(0, url.length() - 17);
                        for (int i = 0; i < numbertoexport; i++) {
                            if (i == l.size()) break;
                            DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt()));
                            parameters.add(new String(""<a href=\"""" + url + ""/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber="" + mol.getMoleculeId() + ""\""><img src=\"""" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + ""?nmrshiftdbaction=exportmol&spectrumid="" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + ""&format=jpeg&size=150x150&backcolor=12632256\""></a>""));
                        }
                        VelocityContext context = new VelocityContext();
                        context.put(""results"", parameters);
                        StringWriter w = new StringWriter();
                        Velocity.mergeTemplate(""lateststructures.vm"", ""ISO-8859-1"", context, w);
                        out.println(w.toString());
                    }
                }
            }
            if (action.equals(""exportspec"")) {
                if (format.equals(""txt"")) {
                    String lastsearchtype = req.getParameter(""lastsearchtype"");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        List l = ParseUtils.parseSpectrumFromSpecFile(req.getParameter(""lastsearchvalues""));
                        spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM));
                    }
                    Vector v = spectrum.getOptions();
                    DBMolecule mol = spectrum.getDBMolecule();
                    out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + ""; "" + mol.getMolecularWeight() + "" Dalton\n\r"");
                    out.print(""\n\rAtom\t"");
                    if (spectrum.getDBSpectrumType().getElementSymbol() == (""H"")) out.print(""Mult.\t"");
                    out.print(""Meas."");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        out.print(""\tInput\tDiff"");
                    }
                    out.print(""\n\r"");
                    out.print(""No.\t"");
                    if (spectrum.getDBSpectrumType().getElementSymbol() == (""H"")) out.print(""\t"");
                    out.print(""Shift"");
                    if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                        out.print(""\tShift\tM-I"");
                    }
                    out.print(""\n\r"");
                    for (int i = 0; i < v.size(); i++) {
                        out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + ""\t"" + ((ValuesForVelocityBean) v.get(i)).getRange());
                        if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) {
                            out.print(""\t"" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + ""\t"" + ((ValuesForVelocityBean) v.get(i)).getDelta());
                        }
                        out.print(""\n\r"");
                    }
                }
                if (format.equals(""simplehtml"")) {
                    String i1 = export.getImage(false, ""jpeg"", ServletUtils.expandRelative(this.getServletConfig(), ""/nmrshiftdbhtml"") + ""/tmp/"" + System.currentTimeMillis(), true);
                    export.pictures[0] = new File(i1).getName();
                    String i2 = export.getImage(true, ""jpeg"", ServletUtils.expandRelative(this.getServletConfig(), ""/nmrshiftdbhtml"") + ""/tmp/"" + System.currentTimeMillis(), true);
                    export.pictures[1] = new File(i2).getName();
                    String docbook = export.getHtml();
                    out.print(docbook);
                }
                if (format.equals(""pdf"") || format.equals(""rtf"")) {
                    String svgSpec = export.getSpecSvg(400, 200);
                    String svgspecfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + ""s.svg"";
                    new FileOutputStream(svgspecfile).write(svgSpec.getBytes());
                    export.pictures[1] = svgspecfile;
                    String molSvg = export.getMolSvg(true);
                    String svgmolfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + ""m.svg"";
                    new FileOutputStream(svgmolfile).write(molSvg.getBytes());
                    export.pictures[0] = svgmolfile;
                    String docbook = export.getDocbook(""pdf"", ""SVG"");
                    TransformerFactory tFactory = TransformerFactory.newInstance();
                    Transformer transformer = tFactory.newTransformer(new StreamSource(""file:"" + GeneralUtils.getNmrshiftdbProperty(""docbookxslpath"", getServletConfig()) + ""/fo/docbook.xsl""));
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    transformer.transform(new StreamSource(new StringReader(docbook)), new StreamResult(baos));
                    FopFactory fopFactory = FopFactory.newInstance();
                    FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
                    OutputStream out2 = new ByteArrayOutputStream();
                    Fop fop = fopFactory.newFop(format.equals(""rtf"") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2);
                    TransformerFactory factory = TransformerFactory.newInstance();
                    transformer = factory.newTransformer();
                    Source src = new StreamSource(new StringReader(baos.toString()));
                    Result res2 = new SAXResult(fop.getDefaultHandler());
                    transformer.transform(src, res2);
                    out.print(out2.toString());
                }
                if (format.equals(""docbook"")) {
                    String i1 = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".svg"";
                    new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes());
                    export.pictures[0] = new File(i1).getName();
                    String i2 = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".svg"";
                    new FileOutputStream(i2).write(export.getMolSvg(true).getBytes());
                    export.pictures[1] = new File(i2).getName();
                    String docbook = export.getDocbook(""pdf"", ""SVG"");
                    String docbookfile = relativepath + ""/tmp/"" + System.currentTimeMillis() + "".xml"";
                    new FileOutputStream(docbookfile).write(docbook.getBytes());
                    ByteArrayOutputStream baos = export.makeZip(new String[] { docbookfile, i1, i2 });
                    outstream.write(baos.toByteArray());
                }
                if (format.equals(""svg"")) {
                    out.print(export.getSpecSvg(400, 200));
                }
                if (format.equals(""tiff"") || format.equals(""jpeg"") || format.equals(""png"")) {
                    InputStream is = new FileInputStream(export.getImage(false, format, relativepath + ""/tmp/"" + System.currentTimeMillis(), true));
                    byte[] buf = new byte[32 * 1024];
                    int nRead = 0;
                    while ((nRead = is.read(buf)) != -1) {
                        outstream.write(buf, 0, nRead);
                    }
                }
                if (format.equals(""cml"")) {
                    out.print(spectrum.getCmlSpect().toXML());
                }
                if (format.equals(""cmlboth"")) {
                    Element cmlElement = new Element(""cml"");
                    cmlElement.addAttribute(new Attribute(""convention"", ""nmrshiftdb-convention""));
                    cmlElement.setNamespaceURI(""http://www.xml-cml.org/schema"");
                    Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals(""1H""));
                    nu.xom.Node cmldoc = parent.getChild(0);
                    ((Element) cmldoc).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    parent.removeChildren();
                    cmlElement.appendChild(cmldoc);
                    Element parentspec = spectrum.getCmlSpect();
                    Node spectrumel = parentspec.getChild(0);
                    parentspec.removeChildren();
                    cmlElement.appendChild(spectrumel);
                    ((Element) spectrumel).setNamespaceURI(""http://www.xml-cml.org/schema"");
                    out.write(cmlElement.toXML());
                }
                if (format.indexOf(""exsection"") == 0) {
                    StringTokenizer st = new StringTokenizer(format, ""-"");
                    st.nextToken();
                    String template = st.nextToken();
                    Criteria crit = new Criteria();
                    crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId());
                    Vector v = spectrum.getDBMolecule().getDBSpectrums(crit);
                    VelocityContext context = new VelocityContext();
                    context.put(""spectra"", v);
                    context.put(""molecule"", spectrum.getDBMolecule());
                    StringWriter w = new StringWriter();
                    Velocity.mergeTemplate(""exporttemplates/"" + template, ""ISO-8859-1"", context, w);
                    out.write(w.toString());
                }
            }
            if (action.equals(""exportmol"")) {
                int width = -1;
                int height = -1;
                if (req.getParameter(""size"") != null) {
                    StringTokenizer st = new StringTokenizer(req.getParameter(""size""), ""x"");
                    width = Integer.parseInt(st.nextToken());
                    height = Integer.parseInt(st.nextToken());
                }
                boolean shownumbers = true;
                if (req.getParameter(""shownumbers"") != null && req.getParameter(""shownumbers"").equals(""false"")) {
                    shownumbers = false;
                }
                if (req.getParameter(""backcolor"") != null) {
                    export.backColor = new Color(Integer.parseInt(req.getParameter(""backcolor"")));
                }
                if (req.getParameter(""markatom"") != null) {
                    export.selected = Integer.parseInt(req.getParameter(""markatom"")) - 1;
                }
                if (format.equals(""svg"")) {
                    out.print(export.getMolSvg(true));
                }
                if (format.equals(""tiff"") || format.equals(""jpeg"") || format.equals(""png"")) {
                    InputStream is = new FileInputStream(export.getImage(true, format, relativepath + ""/tmp/"" + System.currentTimeMillis(), width, height, shownumbers, null));
                    byte[] buf = new byte[32 * 1024];
                    int nRead = 0;
                    while ((nRead = is.read(buf)) != -1) {
                        outstream.write(buf, 0, nRead);
                    }
                }
                if (format.equals(""mdl"")) {
                    out.println(spectrum.getDBMolecule().getStructureFile(1, false));
                }
                if (format.equals(""cml"")) {
                    out.println(spectrum.getDBMolecule().getCMLString(1));
                }
            }
            if (out != null) out.flush(); else outstream.flush();
        } catch (Exception ex) {
            ex.printStackTrace();
            out.print(GeneralUtils.logError(ex, ""NmrshiftdbServlet"", null, true));
            out.flush();
        }
    }
","    @Override
    protected void write(InputStream in, OutputStream out, javax.sound.sampled.AudioFormat javaSoundFormat) throws IOException {
        if (USE_JAVASOUND) {
            super.write(in, out, javaSoundFormat);
        } else {
            try {
                byte[] header = JavaSoundCodec.createWavHeader(javaSoundFormat);
                if (header == null) throw new IOException(""Unable to create wav header"");
                out.write(header);
                IOUtils.copyStream(in, out);
            } catch (InterruptedIOException e) {
                logger.log(Level.FINE, """" + e, e);
                throw e;
            } catch (IOException e) {
                logger.log(Level.WARNING, """" + e, e);
                throw e;
            }
        }
    }
",True
900871,8359775,17241450,"    public static void shakeSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int k = 0;
        int left = 0;
        int right = a.length - 1;
        while (right - left > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
            k = a.length - 1;
            for (int i = left; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            left = k;
        }
    }
","    public static boolean copyFile(File src, File des) {
        try {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(des));
            int b;
            while ((b = in.read()) != -1) out.write(b);
            out.flush();
            out.close();
            in.close();
            return true;
        } catch (IOException ie) {
            m_logCat.error(""Copy file + "" + src + "" to "" + des + "" failed!"", ie);
            return false;
        }
    }
",False
900872,3236017,23058336,"    public static void copyFile(String source, String dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(new File(source)).getChannel();
            out = new FileOutputStream(new File(dest)).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",True
900873,6371603,5257598,"    public void setDefaultMailBox(final int domainId, final int userId) {
        final EmailAddress defaultMailbox = cmDB.getDefaultMailbox(domainId);
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(defaultMailbox == null ? ""domain.setDefaultMailbox"" : ""domain.updateDefaultMailbox""));
                    if (defaultMailbox == null) {
                        psImpl.setInt(1, domainId);
                        psImpl.setInt(2, userId);
                    } else {
                        psImpl.setInt(1, userId);
                        psImpl.setInt(2, domainId);
                    }
                    psImpl.executeUpdate();
                }
            });
            connection.commit();
            cmDB.updateDomains(null, null);
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
","    public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException {
        final HostConfiguration hostConfig = new HostConfiguration();
        hostConfig.setHost(uri.getHost());
        HttpMethodBase httpMethod = null;
        if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) {
            httpMethod = new GetMethod(uri.toString());
            httpMethod.setFollowRedirects(true);
        } else if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) {
            httpMethod = new PostMethod(uri.toString());
            final Enumeration parameterNames = req.getParameterNames();
            if (parameterNames != null) while (parameterNames.hasMoreElements()) {
                final String parameterName = (String) parameterNames.nextElement();
                for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue);
            }
            ((PostMethod) httpMethod).setRequestEntity(new InputStreamRequestEntity(req.getInputStream()));
        }
        if (httpMethod == null) throw new IllegalArgumentException(""Unsupported http request method"");
        final int responseCode;
        final Enumeration headers = req.getHeaderNames();
        if (headers != null) while (headers.hasMoreElements()) {
            final String headerName = (String) headers.nextElement();
            final Enumeration headerValues = req.getHeaders(headerName);
            while (headerValues.hasMoreElements()) {
                httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement());
            }
        }
        final HttpState httpState = new HttpState();
        if (req.getCookies() != null) for (Cookie cookie : req.getCookies()) {
            String host = req.getHeader(""Host"");
            if (StringUtils.isEmpty(cookie.getDomain())) cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + "":"" + req.getServerPort() : host);
            if (StringUtils.isEmpty(cookie.getPath())) cookie.setPath(""/"");
            httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()));
        }
        httpMethod.setQueryString(req.getQueryString());
        responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState);
        if (responseCode < 0) {
            httpMethod.releaseConnection();
            return responseCode;
        }
        if (httpMethod.getResponseHeaders() != null) for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue());
        final InputStream in = httpMethod.getResponseBodyAsStream();
        final OutputStream out = res.getOutputStream();
        IOUtils.copy(in, out);
        out.flush();
        out.close();
        in.close();
        httpMethod.releaseConnection();
        return responseCode;
    }
",False
900874,11450174,4975451,"    private void publishPage(URL url, String path, File outputFile) throws IOException {
        if (debug) {
            System.out.println(""      publishing page: "" + path);
            System.out.println(""        url == "" + url);
            System.out.println(""        file == "" + outputFile);
        }
        StringBuffer sb = new StringBuffer();
        try {
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            boolean firstLine = true;
            String line;
            do {
                line = br.readLine();
                if (line != null) {
                    if (!firstLine) sb.append(""\n""); else firstLine = false;
                    sb.append(line);
                }
            } while (line != null);
            br.close();
        } catch (IOException e) {
            String mess = outputFile.toString() + "": "" + e.getMessage();
            errors.add(mess);
        }
        FileOutputStream fos = new FileOutputStream(outputFile);
        OutputStreamWriter sw = new OutputStreamWriter(fos);
        sw.write(sb.toString());
        sw.close();
        if (prepareArchive) archiveFiles.add(new ArchiveFile(path, outputFile));
    }
","    public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception {
        int i = 0;
        try {
            for (PackageDescriptor desc : downloadList) {
                String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName());
                int minProgress = 20 + 80 * i / downloadList.size();
                int maxProgress = 20 + 80 * (i + 1) / downloadList.size();
                boolean incremental = UpdateManager.isIncrementalUpdate();
                if (desc.getPackageTypeName().equals(""RAPIDMINER_PLUGIN"")) {
                    ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName());
                    String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion());
                    incremental &= baseVersion != null;
                    URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? ""?baseVersion="" + URLEncoder.encode(baseVersion, ""UTF-8"") : """")).toURL();
                    if (incremental) {
                        LogService.getRoot().info(""Updating "" + desc.getPackageId() + "" incrementally."");
                        try {
                            updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion());
                        } catch (IOException e) {
                            LogService.getRoot().warning(""Incremental Update failed. Trying to fall back on non incremental Update..."");
                            incremental = false;
                        }
                    }
                    if (!incremental) {
                        LogService.getRoot().info(""Updating "" + desc.getPackageId() + ""."");
                        updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion());
                    }
                    extension.addAndSelectVersion(desc.getVersion());
                } else {
                    URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? ""?baseVersion="" + URLEncoder.encode(RapidMiner.getLongVersion(), ""UTF-8"") : """")).toURL();
                    LogService.getRoot().info(""Updating RapidMiner core."");
                    updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion());
                }
                i++;
                progressListener.setCompleted(20 + 80 * i / downloadList.size());
            }
        } catch (URISyntaxException e) {
            throw new IOException(e);
        } finally {
            progressListener.complete();
        }
    }
",False
900875,11517213,9176940,"    private static void copyFile(File sourceFile, File destFile) {
        try {
            if (!destFile.exists()) {
                destFile.createNewFile();
            }
            FileChannel source = null;
            FileChannel destination = null;
            try {
                source = new FileInputStream(sourceFile).getChannel();
                destination = new FileOutputStream(destFile).getChannel();
                destination.transferFrom(source, 0, source.size());
            } finally {
                if (source != null) {
                    source.close();
                }
                if (destination != null) {
                    destination.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static void copyFile(File in, File out, boolean read, boolean write, boolean execute) throws FileNotFoundException, IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        File outFile = null;
        if (out.isDirectory()) {
            outFile = new File(out.getAbsolutePath() + File.separator + in.getName());
        } else {
            outFile = out;
        }
        FileChannel outChannel = new FileOutputStream(outFile).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
            outFile.setReadable(read);
            outFile.setWritable(write);
            outFile.setExecutable(execute);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
900876,21843124,12967783,"    protected String connectPost(String urlString, String parameter) {
        String response = null;
        try {
            URL url = new URL(urlString);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setUseCaches(false);
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            log.fine(connection.getURL().toString());
            DataOutputStream out = new DataOutputStream(connection.getOutputStream());
            out.write(parameter.getBytes());
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            response = in.readLine();
            in.close();
            log.finest(response);
        } catch (Exception e) {
            log.log(Level.SEVERE, urlString, e);
        }
        return response;
    }
","    @Override
    public void doExecute(String[] args) {
        if (args.length != 2) {
            printUsage();
        } else {
            int fileNo = 0;
            try {
                fileNo = Integer.parseInt(args[1]) - 1;
            } catch (NumberFormatException e) {
                printUsage();
                return;
            }
            if (fileNo < 0) {
                printUsage();
                return;
            }
            StorageFile[] files = (StorageFile[]) ctx.getRemoteDir().listFiles();
            try {
                StorageFile file = files[fileNo];
                File outFile = getOutFile(file);
                FileOutputStream out = new FileOutputStream(outFile);
                InputStream in = file.openStream();
                IOUtils.copy(in, out);
                IOUtils.closeQuietly(out);
                afterSave(outFile);
                if (outFile.exists()) {
                    print(""File written to: "" + outFile.getAbsolutePath());
                }
            } catch (IOException e) {
                printError(""Failed to load file. "" + e.getMessage());
            } catch (Exception e) {
                printUsage();
                return;
            }
        }
    }
",False
900877,11261168,20177224,"    public static String encryptPassword(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digester = MessageDigest.getInstance(""sha-256"");
        digester.reset();
        digester.update(""Carmen Sandiago"".getBytes());
        return asHex(digester.digest(password.getBytes(""UTF-8"")));
    }
","    public static String encryptPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            int hashLength = hash.length;
            StringBuffer hashStringBuf = new StringBuffer();
            String byteString;
            int byteLength;
            for (int index = 0; index < hashLength; index++) {
                byteString = String.valueOf(hash[index] + 128);
                byteLength = byteString.length();
                switch(byteLength) {
                    case 1:
                        byteString = ""00"" + byteString;
                        break;
                    case 2:
                        byteString = ""0"" + byteString;
                        break;
                }
                hashStringBuf.append(byteString);
            }
            return hashStringBuf.toString();
        } catch (NoSuchAlgorithmException nsae) {
            log.error(""Error getting password hash: "" + nsae.getMessage());
            return null;
        }
    }
",True
900878,11149084,282431,"    private void deleteProject(String uid, String home, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String project = request.getParameter(""project"");
        String line;
        response.setContentType(""text/html"");
        PrintWriter out = response.getWriter();
        htmlHeader(out, ""Project Status"", """");
        try {
            synchronized (Class.forName(""com.sun.gep.SunTCP"")) {
                Vector list = new Vector();
                String directory = home;
                Runtime.getRuntime().exec(""/usr/bin/rm -rf "" + directory + project);
                FilePermission perm = new FilePermission(directory + SUNTCP_LIST, ""read,write,execute"");
                File listfile = new File(directory + SUNTCP_LIST);
                BufferedReader read = new BufferedReader(new FileReader(listfile));
                while ((line = read.readLine()) != null) {
                    if (!((new StringTokenizer(line, ""\t"")).nextToken().equals(project))) {
                        list.addElement(line);
                    }
                }
                read.close();
                if (list.size() > 0) {
                    PrintWriter write = new PrintWriter(new BufferedWriter(new FileWriter(listfile)));
                    for (int i = 0; i < list.size(); i++) {
                        write.println((String) list.get(i));
                    }
                    write.close();
                } else {
                    listfile.delete();
                }
                out.println(""The project was successfully deleted."");
            }
        } catch (Exception e) {
            out.println(""Error accessing this project."");
        }
        out.println(""<center><form><input type=button value=Continue onClick=\""opener.location.reload(); window.close()\""></form></center>"");
        htmlFooter(out);
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900879,23241194,3573409,"    private void publishZip(LWMap map) {
        try {
            if (map.getFile() == null) {
                VueUtil.alert(VueResources.getString(""dialog.mapsave.message""), VueResources.getString(""dialog.mapsave.title""));
                return;
            }
            File savedCMap = PublishUtil.createZip(map, Publisher.resourceVector);
            InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));
            OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile(""Export to Zip File"", ""zip"")));
            int fileLength = (int) savedCMap.length();
            byte bytes[] = new byte[fileLength];
            while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength);
            istream.close();
            ostream.close();
        } catch (Exception ex) {
            System.out.println(ex);
            VueUtil.alert(VUE.getDialogParent(), VueResources.getString(""dialog.export.message"") + ex.getMessage(), VueResources.getString(""dialog.export.title""), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
","    public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        CacheEntry entry = null;
        Tenant tenant = null;
        if (!tenantInfo.getTenants().isEmpty()) {
            tenant = tenantInfo.getMatchingTenant(request);
            if (tenant == null) {
                tenant = tenantInfo.getTenants().get(0);
            }
            entry = tenantToCacheEntry.get(tenant.getName());
        } else {
            entry = cacheEntry;
        }
        if (entry == null) {
            File tempDir = (File) servletContext.getAttribute(""javax.servlet.context.tempdir"");
            tempDir = new File(tempDir, ""pustefix-sitemap-cache"");
            if (!tempDir.exists()) {
                tempDir.mkdirs();
            }
            entry = new CacheEntry();
            entry.file = new File(tempDir, ""sitemap"" + (tenant == null ? """" : ""-"" + tenant.getName()) + "".xml"");
            try {
                String host = AbstractPustefixRequestHandler.getServerName(request);
                Document doc = getSearchEngineSitemap(tenant, host);
                Transformer trf = TransformerFactory.newInstance().newTransformer();
                trf.setOutputProperty(OutputKeys.INDENT, ""yes"");
                FileOutputStream out = new FileOutputStream(entry.file);
                MessageDigest digest;
                try {
                    digest = MessageDigest.getInstance(""MD5"");
                } catch (NoSuchAlgorithmException x) {
                    throw new RuntimeException(""Can't create message digest"", x);
                }
                DigestOutputStream digestOutput = new DigestOutputStream(out, digest);
                trf.transform(new DOMSource(doc), new StreamResult(digestOutput));
                digestOutput.close();
                byte[] digestBytes = digest.digest();
                entry.etag = MD5Utils.byteToHex(digestBytes);
            } catch (Exception x) {
                throw new ServletException(""Error creating sitemap"", x);
            }
        }
        String reqETag = request.getHeader(""If-None-Match"");
        if (reqETag != null) {
            if (entry.etag.equals(reqETag)) {
                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                response.flushBuffer();
                return;
            }
        }
        long reqMod = request.getDateHeader(""If-Modified-Since"");
        if (reqMod != -1) {
            if (entry.file.lastModified() < reqMod + 1000) {
                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                response.flushBuffer();
                return;
            }
        }
        response.setContentType(""application/xml"");
        response.setContentLength((int) entry.file.length());
        response.setDateHeader(""Last-Modified"", entry.file.lastModified());
        response.setHeader(""ETag"", entry.etag);
        OutputStream out = new BufferedOutputStream(response.getOutputStream());
        InputStream in = new FileInputStream(entry.file);
        int bytes_read;
        byte[] buffer = new byte[8];
        while ((bytes_read = in.read(buffer)) != -1) {
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        in.close();
        out.close();
    }
",True
900880,11810425,14768963,"    private static String createBoundary(int number) {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        digest.update(String.valueOf(Math.random()).getBytes());
        digest.update(String.valueOf(System.currentTimeMillis()).getBytes());
        digest.update(String.valueOf(digest.hashCode()).getBytes());
        byte[] bytes = digest.digest();
        String paddedNumber = Integer.toString(number);
        paddedNumber = (""0000000000"".substring(0, 10 - paddedNumber.length()) + paddedNumber);
        StringBuffer buffer = new StringBuffer();
        buffer.append(""---------------------------------=__"");
        for (int i = 0; i < 8; i++) {
            String hex = Integer.toHexString((bytes[i] & 0xff) + 0x100).substring(1);
            buffer.append(hex);
        }
        buffer.append('_');
        buffer.append(paddedNumber);
        return buffer.toString();
    }
","    public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) {
        if (!urlpath.endsWith(""/"")) {
            urlpath = urlpath + '/';
        }
        if (!urlpath.startsWith(""http://"")) {
            urlpath = ""http://"" + urlpath;
        }
        String url = urlpath;
        if (fname.startsWith(""dusty_"")) {
            url = url + ""libraries/"" + fname;
        } else {
            url = url + ""users/"" + fname;
        }
        StringBuffer src = new StringBuffer(2400);
        try {
            String s;
            BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            while ((s = br.readLine()) != null) {
                src.append(s).append('\n');
            }
            br.close();
        } catch (Exception e) {
            OUT.println(new DSOut(DSOut.ERR_OUT, -1, ""Dustyscript failed at reading the file'"" + fname + ""'\n\t...for 'use' statement""), vc, AT);
            return false;
        }
        fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies);
        return true;
    }
",False
900881,19643372,8296360,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            logger.error(Logger.SECURITY_FAILURE, ""Problem encoding file to file"", exc);
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void copiaAnexos(String from, String to, AnexoTO[] anexoTO) {
        FileChannel in = null, out = null;
        for (int i = 0; i < anexoTO.length; i++) {
            try {
                in = new FileInputStream(new File((uploadDiretorio.concat(from)).concat(File.separator + anexoTO[i].getNome()))).getChannel();
                out = new FileOutputStream(new File((uploadDiretorio.concat(to)).concat(File.separator + anexoTO[i].getNome()))).getChannel();
                long size = in.size();
                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                out.write(buf);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (in != null) try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (out != null) try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",True
900882,20651942,15953416,"    public synchronized void receive(MessageEvent e) {
        switch(e.message.getType()) {
            case MessageTypes.QUIT:
                activeSessions--;
                break;
            case MessageTypes.SHUTDOWN_SERVER:
                activeSessions--;
                if (Options.password.trim().equals("""")) {
                    System.err.println(""No default password set. Shutdown not allowed."");
                    break;
                }
                if (e.message.get(""pwhash"") == null) {
                    System.err.println(""Shutdown message without password received. Shutdown not allowed."");
                    break;
                }
                try {
                    java.security.MessageDigest hash = java.security.MessageDigest.getInstance(""SHA-1"");
                    hash.update(Options.password.getBytes(""UTF-8""));
                    if (!java.security.MessageDigest.isEqual(hash.digest(), (byte[]) e.message.get(""pwhash""))) {
                        System.err.println(""Wrong shutdown password. Shutdown not allowed."");
                        break;
                    } else {
                        System.out.println(""Valid shutdown password received."");
                    }
                } catch (java.security.NoSuchAlgorithmException ex) {
                    System.err.println(""Password hash algorithm SHA-1 not supported by runtime."");
                    break;
                } catch (UnsupportedEncodingException ex) {
                    System.err.println(""Password character encoding not supported."");
                    break;
                } catch (Exception ex) {
                    System.err.println(""Unhandled exception occured. Shutdown aborted. Details:"");
                    ex.printStackTrace(System.err);
                    break;
                }
                if (activeSessions == 0) tStop(); else System.err.println(""there are other active sessions - shutdown failed"");
                break;
            default:
        }
    }
","    public static String getMD5(String password) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            String salt = ""UseTheForce4"";
            password = salt + password;
            md5.update(password.getBytes(), 0, password.length());
            password = new BigInteger(1, md5.digest()).toString(16);
        } catch (Exception e) {
        }
        return password;
    }
",True
900883,16503018,4758044,"    public String getNextObjectId() throws SQLException {
        long nextserial = 1;
        String s0 = ""lock table serials in exclusive mode"";
        String s1 = ""SELECT nextserial FROM serials WHERE tablename = 'SERVER_OIDS'"";
        String s2;
        try {
            Statement stmt = dbconnect.connection.createStatement();
            stmt.executeUpdate(s0);
            ResultSet rs = stmt.executeQuery(s1);
            if (!rs.next()) {
                s2 = ""insert into serials (tablename,nextserial) values ('SERVER_OIDS', "" + (nextserial) + "")"";
            } else {
                nextserial = rs.getLong(1) + 1;
                s2 = ""update serials set nextserial="" + (nextserial) + "" where tablename='SERVER_OIDS'"";
            }
            stmt.executeUpdate(s2);
            dbconnect.connection.commit();
            rs.close();
            stmt.close();
            return """" + nextserial;
        } catch (SQLException e) {
            dbconnect.connection.rollback();
            throw e;
        }
    }
","    private static void readServicesFromUrl(Collection<String> list, URL url) throws IOException {
        InputStream in = url.openStream();
        try {
            if (in == null) return;
            BufferedReader r = new BufferedReader(new InputStreamReader(in, ""UTF-8""));
            while (true) {
                String line = r.readLine();
                if (line == null) break;
                int idx = line.indexOf('#');
                if (idx != -1) line = line.substring(0, idx);
                line = line.trim();
                if (line.length() == 0) continue;
                list.add(line);
            }
        } finally {
            try {
                if (in != null) in.close();
            } catch (Throwable ignore) {
            }
        }
    }
",False
900884,8372919,2329054,"    private String MD5(String s) {
        Log.d(""MD5"", ""Hashing '"" + s + ""'"");
        String hash = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            hash = new BigInteger(1, m.digest()).toString(16);
            Log.d(""MD5"", ""Hash: "" + hash);
        } catch (Exception e) {
            Log.e(""MD5"", e.getMessage());
        }
        return hash;
    }
","    public static String MD5(String str) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""md5"");
            md5.update(str.getBytes(), 0, str.length());
            String sig = new BigInteger(1, md5.digest()).toString();
            return sig;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Can not use md5 algorithm"");
        }
        return null;
    }
",True
900885,17958985,5404510,"    public void onCreate() {
        window = ((Window) getFellow(""win""));
        userName = ((Textbox) getFellow(""user""));
        password = ((Textbox) getFellow(""password""));
        session = window.getDesktop().getSession();
        if (Executions.getCurrent().getParameter(""login"") != null) {
            login = Executions.getCurrent().getParameter(""login"");
            session.setAttribute(""login"", login);
        }
        if (Executions.getCurrent().getParameter(""password"") != null) {
            passwordu = Executions.getCurrent().getParameter(""password"");
        }
        if (Executions.getCurrent().getParameter(""option"") != null) {
            option = Executions.getCurrent().getParameter(""option"");
            session.setAttribute(""option"", option);
        }
        if (Executions.getCurrent().getParameter(""organization"") != null) {
            organization = Executions.getCurrent().getParameter(""organization"");
            session.setAttribute(""organization"", organization);
        }
        if (Executions.getCurrent().getParameter(""project"") != null) {
            project = Executions.getCurrent().getParameter(""project"");
            session.setAttribute(""project"", project);
        }
        if (login != null) {
            User user = UserDAO.getUserByUserName(login);
            if (user != null) {
                String encodedPassword = null;
                try {
                    MessageDigest digest = MessageDigest.getInstance(""MD5"");
                    digest.update(user.getPassword().getBytes());
                    BASE64Encoder encoder = new BASE64Encoder();
                    encodedPassword = encoder.encode(digest.digest());
                } catch (Exception e) {
                }
                if (passwordu.compareTo(encodedPassword) == 0) {
                    session.setAttribute(""user"", user);
                    session.setAttribute(""numero"", 5);
                    session.setAttribute(""option"", option);
                    session.setAttribute(""organization"", organization);
                    session.setAttribute(""project"", project);
                    Executions.sendRedirect(""menu.zul"");
                }
            }
        }
    }
","    @MediumTest
    public void testUrlRewriteRules() throws Exception {
        ContentResolver resolver = getContext().getContentResolver();
        GoogleHttpClient client = new GoogleHttpClient(resolver, ""Test"", false);
        Settings.Gservices.putString(resolver, ""url:test"", ""http://foo.bar/ rewrite "" + mServerUrl + ""new/"");
        Settings.Gservices.putString(resolver, ""digest"", mServerUrl);
        try {
            HttpGet method = new HttpGet(""http://foo.bar/path"");
            HttpResponse response = client.execute(method);
            String body = EntityUtils.toString(response.getEntity());
            assertEquals(""/new/path"", body);
        } finally {
            client.close();
        }
    }
",False
900886,8696200,12568442,"    public static String getHash(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes());
            byte[] array = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < array.length; i++) {
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
","    public static String MD5(String text) {
        byte[] md5hash = new byte[32];
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return convertToHex(md5hash);
    }
",True
900887,20970925,20071852,"    public static final String convertPassword(final String srcPwd) {
        StringBuilder out;
        MessageDigest md;
        byte[] byteValues;
        byte singleChar = 0;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(srcPwd.getBytes());
            byteValues = md.digest();
            if ((byteValues == null) || (byteValues.length <= 0)) {
                return null;
            }
            out = new StringBuilder(byteValues.length * 2);
            for (byte element : byteValues) {
                singleChar = (byte) (element & 0xF0);
                singleChar = (byte) (singleChar >>> 4);
                singleChar = (byte) (singleChar & 0x0F);
                out.append(PasswordConverter.ENTRIES[singleChar]);
                singleChar = (byte) (element & 0x0F);
                out.append(PasswordConverter.ENTRIES[singleChar]);
            }
            return out.toString();
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
","    void write() throws IOException {
        if (!allowUnlimitedArgs && args != null && args.length > 1) throw new IllegalArgumentException(""Only one argument allowed unless allowUnlimitedArgs is enabled"");
        String shebang = ""#!"" + interpretter;
        for (int i = 0; i < args.length; i++) {
            shebang += "" "" + args[i];
        }
        shebang += '\n';
        IOUtils.copy(new StringReader(shebang), outputStream);
    }
",False
900888,1665765,716032,"    public InputStream openFileInputStream(String fileName) throws IOException {
        if (fileName.indexOf(':') > 1) {
            URL url = new URL(fileName);
            InputStream in = url.openStream();
            return in;
        }
        fileName = translateFileName(fileName);
        FileInputStream in = new FileInputStream(fileName);
        trace(""openFileInputStream"", fileName, in);
        return in;
    }
","    public void getZipFiles(String filename) {
        try {
            String destinationname = ""c:\\mods\\peu\\"";
            byte[] buf = new byte[1024];
            ZipInputStream zipinputstream = null;
            ZipEntry zipentry;
            zipinputstream = new ZipInputStream(new FileInputStream(filename));
            zipentry = zipinputstream.getNextEntry();
            while (zipentry != null) {
                String entryName = zipentry.getName();
                System.out.println(""entryname "" + entryName);
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(entryName);
                String directory = newFile.getParent();
                if (directory == null) {
                    if (newFile.isDirectory()) break;
                }
                fileoutputstream = new FileOutputStream(destinationname + entryName);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
                zipentry = zipinputstream.getNextEntry();
            }
            zipinputstream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900889,10453631,2279291,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            log().error(""failed to encrypt the password."", e);
            throw new RuntimeException(""failed to encrypt the password."", e);
        } catch (UnsupportedEncodingException e) {
            log().error(""failed to encrypt the password."", e);
            throw new RuntimeException(""failed to encrypt the password."", e);
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    public static String encrypt(String plainText) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",True
900890,8924519,3461964,"    private String grabInformationFromWeb(String query, String infoName) throws Exception {
        String result = """";
        URL url = new URL(query);
        HttpURLConnection request = null;
        request = (HttpURLConnection) url.openConnection();
        if (request != null) {
            InputStream in = url.openStream();
            int c = 0;
            StringBuilder sb = new StringBuilder();
            while ((c = in.read()) != -1) {
                sb = sb.append((char) c);
            }
            String s = sb.toString();
            result = Utils.getTagValue(s, ""<"" + infoName + "">"", ""</"" + infoName + "">"");
            in.close();
        }
        return result;
    }
","    public String useService(HashMap<String, String> input) {
        String output = """";
        if (input.size() < 1) {
            return """";
        }
        String data = """";
        try {
            for (String key : input.keySet()) {
                data += ""&"" + URLEncoder.encode(key, ""UTF-8"") + ""="" + URLEncoder.encode(input.get(key), ""UTF-8"");
            }
            data = data.substring(1);
            URL url = new URL(serviceUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                output += line;
            }
            wr.close();
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return output;
    }
",False
900891,4259286,3239010,"    protected List webservice(URL url, List locations, boolean followRedirect) throws GeoServiceException {
        long start = System.currentTimeMillis();
        int rowCount = 0, hitCount = 0;
        try {
            HttpURLConnection con;
            try {
                con = (HttpURLConnection) url.openConnection();
                try {
                    con.getClass().getMethod(""setConnectTimeout"", new Class[] { Integer.TYPE }).invoke(con, new Object[] { TIMEOUT });
                } catch (Throwable t) {
                    LOG.info(""can't set connection timeout"");
                }
                con.setRequestMethod(""POST"");
                con.setDoOutput(true);
                con.setDoInput(true);
                Writer out = new OutputStreamWriter(con.getOutputStream(), UTF8);
                out.write(HEADER + ""\n"");
                for (int i = 0; i < locations.size(); i++) {
                    if (i > 0) out.write(""\n"");
                    out.write(encode((GeoLocation) locations.get(i)));
                }
                out.close();
            } catch (IOException e) {
                throw new GeoServiceException(""Accessing GEO Webservice failed"", e);
            }
            List rows = new ArrayList();
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF8));
                for (int l = 0; l < locations.size(); l++) {
                    String line = in.readLine();
                    LOG.finer(line);
                    if (line == null) break;
                    if (l == 0 && followRedirect) {
                        try {
                            return webservice(new URL(line), locations, false);
                        } catch (MalformedURLException e) {
                        }
                    }
                    rowCount++;
                    List row = new ArrayList();
                    if (!line.startsWith(""?"")) {
                        StringTokenizer hits = new StringTokenizer(line, "";"");
                        while (hits.hasMoreTokens()) {
                            GeoLocation hit = decode(hits.nextToken());
                            if (hit != null) {
                                row.add(hit);
                                hitCount++;
                            }
                        }
                    }
                    rows.add(row);
                }
                in.close();
            } catch (IOException e) {
                throw new GeoServiceException(""Reading from GEO Webservice failed"", e);
            }
            if (rows.size() < locations.size()) throw new GeoServiceException(""GEO Webservice returned "" + rows.size() + "" rows for "" + locations.size() + "" locations"");
            return rows;
        } finally {
            long secs = (System.currentTimeMillis() - start) / 1000;
            LOG.fine(""query for "" + locations.size() + "" locations in "" + secs + ""s resulted in "" + rowCount + "" rows and "" + hitCount + "" total hits"");
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",False
900892,6319887,19786101,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    protected void initializeFromURL(URL url, AVList params) throws IOException {
        URLConnection connection = url.openConnection();
        String message = this.validateURLConnection(connection, SHAPE_CONTENT_TYPES);
        if (message != null) {
            throw new IOException(message);
        }
        this.shpChannel = Channels.newChannel(WWIO.getBufferedInputStream(connection.getInputStream()));
        URLConnection shxConnection = this.getURLConnection(WWIO.replaceSuffix(url.toString(), INDEX_FILE_SUFFIX));
        if (shxConnection != null) {
            message = this.validateURLConnection(shxConnection, INDEX_CONTENT_TYPES);
            if (message != null) Logging.logger().warning(message); else {
                InputStream shxStream = this.getURLStream(shxConnection);
                if (shxStream != null) this.shxChannel = Channels.newChannel(WWIO.getBufferedInputStream(shxStream));
            }
        }
        URLConnection prjConnection = this.getURLConnection(WWIO.replaceSuffix(url.toString(), PROJECTION_FILE_SUFFIX));
        if (prjConnection != null) {
            message = this.validateURLConnection(prjConnection, PROJECTION_CONTENT_TYPES);
            if (message != null) Logging.logger().warning(message); else {
                InputStream prjStream = this.getURLStream(prjConnection);
                if (prjStream != null) this.prjChannel = Channels.newChannel(WWIO.getBufferedInputStream(prjStream));
            }
        }
        this.setValue(AVKey.DISPLAY_NAME, url.toString());
        this.initialize(params);
        URL dbfURL = WWIO.makeURL(WWIO.replaceSuffix(url.toString(), ATTRIBUTE_FILE_SUFFIX));
        if (dbfURL != null) {
            try {
                this.attributeFile = new DBaseFile(dbfURL);
            } catch (Exception e) {
            }
        }
    }
",False
900893,18648407,7366687,"    public static void copyFile(File file, File destination) throws Exception {
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            out = new BufferedOutputStream(new FileOutputStream(destination));
            int c;
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            try {
                if (out != null) out.close();
            } catch (Exception e) {
            }
            try {
                if (in != null) in.close();
            } catch (Exception e) {
            }
        }
    }
","    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
",True
900894,13949581,12232011,"    public static String cryptografar(String senha) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(senha.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            senha = hash.toString(16);
        } catch (NoSuchAlgorithmException ns) {
            ns.printStackTrace();
        }
        return senha;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",False
900895,17987049,13547845,"    private boolean writeResource(PluginProxy eclipseInstallPlugin, ResourceProxy translation, LocaleProxy locale) throws Exception {
        String translationResourceName = determineTranslatedResourceName(translation, locale);
        String pluginNameInDirFormat = eclipseInstallPlugin.getName().replace(Messages.getString(""Characters_period""), File.separator);
        if (translation.getRelativePath().contains(pluginNameInDirFormat)) {
            return writeResourceToBundleClasspath(translation, locale);
        } else if (translationResourceName.contains(File.separator)) {
            String resourcePath = translationResourceName.substring(0, translationResourceName.lastIndexOf(File.separatorChar));
            File resourcePathDirectory = new File(directory.getPath() + File.separatorChar + resourcePath);
            resourcePathDirectory.mkdirs();
        }
        File fragmentResource = new File(directory.getPath() + File.separatorChar + translationResourceName);
        File translatedResource = new File(translation.getFileResource().getAbsolutePath());
        FileChannel inputChannel = new FileInputStream(translatedResource).getChannel();
        FileChannel outputChannel = new FileOutputStream(fragmentResource).getChannel();
        inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        inputChannel.close();
        outputChannel.close();
        return true;
    }
","    public static PortalConfig install(File xml, File dir) throws IOException, ConfigurationException {
        if (!dir.exists()) {
            log.info(""Creating directory {}"", dir);
            dir.mkdirs();
        }
        if (!xml.exists()) {
            log.info(""Installing default configuration to {}"", xml);
            OutputStream output = new FileOutputStream(xml);
            try {
                InputStream input = ResourceLoader.open(""res://"" + PORTAL_CONFIG_XML);
                try {
                    IOUtils.copy(input, output);
                } finally {
                    input.close();
                }
            } finally {
                output.close();
            }
        }
        return create(xml, dir);
    }
",True
900896,21161448,2771574,"    public static boolean copyFile(File soureFile, File destFile) {
        boolean copySuccess = false;
        if (soureFile != null && destFile != null && soureFile.exists()) {
            try {
                new File(destFile.getParent()).mkdirs();
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destFile));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(soureFile));
                for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte);
                in.close();
                out.close();
                copySuccess = true;
            } catch (Exception e) {
                copySuccess = false;
            }
        }
        return copySuccess;
    }
","                protected IStatus run(IProgressMonitor monitor) {
                    try {
                        updateRunning = true;
                        distributor = getFromFile(""[SERVER]"", ""csz"", getAppPath() + ""/server.ini"");
                        MAC = getFromFile(""[SPECIFICINFO]"", ""MAC"", getAppPath() + ""/register.ini"");
                        serial = getFromFile(""[SPECIFICINFO]"", ""serial"", getAppPath() + ""/register.ini"");
                        if (MAC.equals(""not_found"") || serial.equals(""not_found"") || !serial.startsWith(distributor)) {
                            try {
                                MAC = getFromFile(""[SPECIFICINFO]"", ""MAC"", getAppPath() + ""/register.ini"");
                                serial = getFromFile(""[SPECIFICINFO]"", ""serial"", getAppPath() + ""/register.ini"");
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                        } else {
                            try {
                                url = new URL(""http://"" + getFromFile(""[SERVER]"", ""url"", getAppPath() + ""/server.ini""));
                            } catch (MalformedURLException e) {
                                System.out.println(e);
                            }
                            download = ""/download2.php?distributor="" + distributor + ""&&mac="" + MAC + ""&&serial="" + serial;
                            readXML();
                            if (htmlMessage.contains(""error"")) {
                                try {
                                    PrintWriter pw = new PrintWriter(getAppPath() + ""/register.ini"");
                                    pw.write("""");
                                    pw.close();
                                } catch (IOException e) {
                                    System.out.println(e);
                                }
                                setProperty(IProgressConstants.ICON_PROPERTY, IconImg.liveUpIco);
                                if (isModal(this)) {
                                    showResults2();
                                } else {
                                    setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
                                    setProperty(IProgressConstants.ACTION_PROPERTY, getUpdateCompletedAction2());
                                }
                            } else {
                                if (!getDBVersion().equals(latestVersion)) {
                                    try {
                                        OutputStream out = null;
                                        HttpURLConnection conn = null;
                                        InputStream in = null;
                                        int size;
                                        try {
                                            URL url = new URL(fileLoc);
                                            String outFile = getAppPath() + ""/temp/"" + getFileName(url);
                                            File oFile = new File(outFile);
                                            oFile.delete();
                                            out = new BufferedOutputStream(new FileOutputStream(outFile));
                                            monitor.beginTask(""Connecting to NWD Server"", 100);
                                            conn = (HttpURLConnection) url.openConnection();
                                            conn.setConnectTimeout(20000);
                                            conn.connect();
                                            if (conn.getResponseCode() / 100 != 2) {
                                                System.out.println(""Error: "" + conn.getResponseCode());
                                                return null;
                                            }
                                            monitor.worked(100);
                                            monitor.done();
                                            size = conn.getContentLength();
                                            monitor.beginTask(""Download Worm Definition"", size);
                                            in = conn.getInputStream();
                                            byte[] buffer;
                                            String downloadedSize;
                                            long numWritten = 0;
                                            boolean status = true;
                                            while (status) {
                                                if (size - numWritten > 1024) {
                                                    buffer = new byte[1024];
                                                } else {
                                                    buffer = new byte[(int) (size - numWritten)];
                                                }
                                                int read = in.read(buffer);
                                                if (read == -1) {
                                                    break;
                                                }
                                                out.write(buffer, 0, read);
                                                numWritten += read;
                                                downloadedSize = Long.toString(numWritten / 1024) + "" KB"";
                                                monitor.worked(read);
                                                monitor.subTask(downloadedSize + "" of "" + Integer.toString(size / 1024) + "" KB"");
                                                if (size == numWritten) {
                                                    status = false;
                                                }
                                                if (monitor.isCanceled()) return Status.CANCEL_STATUS;
                                            }
                                            if (in != null) {
                                                in.close();
                                            }
                                            if (out != null) {
                                                out.close();
                                            }
                                            try {
                                                ZipFile zFile = new ZipFile(outFile);
                                                Enumeration all = zFile.entries();
                                                while (all.hasMoreElements()) {
                                                    ZipEntry zEntry = (ZipEntry) all.nextElement();
                                                    long zSize = zEntry.getSize();
                                                    if (zSize > 0) {
                                                        if (zEntry.getName().endsWith(""script"")) {
                                                            InputStream instream = zFile.getInputStream(zEntry);
                                                            FileOutputStream fos = new FileOutputStream(oldLoc[0]);
                                                            int ch;
                                                            while ((ch = instream.read()) != -1) {
                                                                fos.write(ch);
                                                            }
                                                            instream.close();
                                                            fos.close();
                                                        } else if (zEntry.getName().endsWith(""data"")) {
                                                            InputStream instream = zFile.getInputStream(zEntry);
                                                            FileOutputStream fos = new FileOutputStream(oldLoc[1]);
                                                            int ch;
                                                            while ((ch = instream.read()) != -1) {
                                                                fos.write(ch);
                                                            }
                                                            instream.close();
                                                            fos.close();
                                                        }
                                                    }
                                                }
                                                File xFile = new File(outFile);
                                                xFile.deleteOnExit();
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            try {
                                                monitor.done();
                                                monitor.beginTask(""Install Worm Definition"", 10000);
                                                monitor.worked(2500);
                                                CorePlugin.getDefault().getRawPacketHandler().removeRawPacketListener(p);
                                                p = null;
                                                if (!wormDB.getConn().isClosed()) {
                                                    shutdownDB();
                                                }
                                                System.out.println(wormDB.getConn().isClosed());
                                                for (int i = 0; i < 2; i++) {
                                                    try {
                                                        Process pid = Runtime.getRuntime().exec(""cmd /c copy \"""" + oldLoc[i].replace(""/"", ""\\"") + ""\"" \"""" + newLoc[i].replace(""/"", ""\\"") + ""\""/y"");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }
                                                    new File(oldLoc[i]).deleteOnExit();
                                                }
                                                monitor.worked(2500);
                                                initialArray();
                                                p = new PacketPrinter();
                                                CorePlugin.getDefault().getRawPacketHandler().addRawPacketListener(p);
                                                monitor.worked(2500);
                                                monitor.done();
                                                setProperty(IProgressConstants.ICON_PROPERTY, IconImg.liveUpIco);
                                                if (isModal(this)) {
                                                    showResults();
                                                } else {
                                                    setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
                                                    setProperty(IProgressConstants.ACTION_PROPERTY, getUpdateCompletedAction());
                                                }
                                            } catch (Exception e) {
                                                setProperty(IProgressConstants.ICON_PROPERTY, IconImg.liveUpIco);
                                                if (isModal(this)) {
                                                    showResults2();
                                                } else {
                                                    setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
                                                    setProperty(IProgressConstants.ACTION_PROPERTY, getUpdateCompletedAction2());
                                                }
                                                System.out.println(e);
                                            } finally {
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    } catch (Exception e) {
                                        setProperty(IProgressConstants.ICON_PROPERTY, IconImg.liveUpIco);
                                        if (isModal(this)) {
                                            showResults2();
                                        } else {
                                            setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
                                            setProperty(IProgressConstants.ACTION_PROPERTY, getUpdateCompletedAction2());
                                        }
                                        e.printStackTrace();
                                    }
                                } else {
                                    cancel();
                                    setProperty(IProgressConstants.ICON_PROPERTY, IconImg.liveUpIco);
                                    if (isModal(this)) {
                                        showResults1();
                                    } else {
                                        setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
                                        setProperty(IProgressConstants.ACTION_PROPERTY, getUpdateCompletedAction1());
                                    }
                                }
                            }
                        }
                        return Status.OK_STATUS;
                    } catch (Exception e) {
                        showResults2();
                        return Status.OK_STATUS;
                    } finally {
                        lock.release();
                        updateRunning = false;
                        if (getValue(""AUTO_UPDATE"")) schedule(10800000);
                    }
                }
",False
900897,8063675,16022035,"    private static int ejecutaUpdate(String database, String SQL) throws Exception {
        int i = 0;
        DBConnectionManager dbm = null;
        Connection bd = null;
        try {
            dbm = DBConnectionManager.getInstance();
            bd = dbm.getConnection(database);
            Statement st = bd.createStatement();
            i = st.executeUpdate(SQL);
            bd.commit();
            st.close();
            dbm.freeConnection(database, bd);
        } catch (Exception e) {
            log.error(""SQL error: "" + SQL, e);
            Exception excep;
            if (dbm == null) excep = new Exception(""Could not obtain pool object DbConnectionManager""); else if (bd == null) excep = new Exception(""The Db connection pool could not obtain a database connection""); else {
                bd.rollback();
                excep = new Exception(""SQL Error: "" + SQL + "" error: "" + e);
                dbm.freeConnection(database, bd);
            }
            throw excep;
        }
        return i;
    }
","    public boolean save(Object obj) {
        boolean bool = false;
        this.result = null;
        if (obj == null) return bool;
        Connection conn = null;
        try {
            conn = ConnectUtil.getConnect();
            conn.setAutoCommit(false);
            String sql = SqlUtil.getInsertSql(this.getCls());
            PreparedStatement ps = conn.prepareStatement(sql);
            setPsParams(ps, obj);
            ps.executeUpdate();
            ps.close();
            conn.commit();
            bool = true;
        } catch (Exception e) {
            try {
                conn.rollback();
            } catch (SQLException e1) {
            }
            this.result = e.getMessage();
        } finally {
            this.closeConnectWithTransaction(conn);
        }
        return bool;
    }
",True
900898,17608158,16499420,"    public static void main(String[] args) {
        FileInputStream in;
        DeflaterOutputStream out;
        FileOutputStream fos;
        FileDialog fd;
        fd = new FileDialog(new Frame(), ""Find a file to deflate"", FileDialog.LOAD);
        fd.show();
        if (fd.getFile() != null) {
            try {
                in = new FileInputStream(new File(fd.getDirectory(), fd.getFile()));
                fos = new FileOutputStream(new File(""Deflated.out""));
                out = new DeflaterOutputStream(fos, new Deflater(Deflater.DEFLATED, true));
                int bytes_read = 0;
                byte[] buffer = new byte[1024];
                while ((bytes_read = in.read(buffer)) != -1) {
                    out.write(buffer, 0, bytes_read);
                }
                fos.flush();
                fos.close();
                out.flush();
                out.close();
                in.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println(""Done"");
        }
    }
","    private void saveFile(InputStream in, String fullPath) {
        try {
            File sysfile = new File(fullPath);
            if (!sysfile.exists()) {
                sysfile.createNewFile();
            }
            java.io.OutputStream out = new FileOutputStream(sysfile);
            org.apache.commons.io.IOUtils.copy(in, out);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",True
900899,3253028,2530139,"    public static List<String> unTar(File tarFile, File directory) throws IOException {
        List<String> result = new ArrayList<String>();
        InputStream inputStream = new FileInputStream(tarFile);
        TarArchiveInputStream in = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = in.getNextTarEntry();
        while (entry != null) {
            OutputStream out = new FileOutputStream(new File(directory, entry.getName()));
            IOUtils.copy(in, out);
            out.close();
            result.add(entry.getName());
            entry = in.getNextTarEntry();
        }
        in.close();
        return result;
    }
","    public static String md5(String input) {
        String res = """";
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(input.getBytes());
            byte[] md5 = algorithm.digest();
            String tmp = """";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) {
                    res += ""0"" + tmp;
                } else {
                    res += tmp;
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            if (globali.jcVariabili.DEBUG) globali.jcFunzioni.erroreSQL(ex.toString());
        }
        return res;
    }
",False
900900,7952921,5705521,"    public static OutputStream getOutputStream(String path) throws ResourceException {
        URL url = getURL(path);
        if (url != null) {
            try {
                return url.openConnection().getOutputStream();
            } catch (IOException e) {
                throw new ResourceException(e);
            }
        } else {
            throw new ResourceException(""Error obtaining resource, invalid path: "" + path);
        }
    }
","    protected static URL[] createUrls(URL jarUrls[]) {
        ArrayList<URL> additionalUrls = new ArrayList<URL>(Arrays.asList(jarUrls));
        for (URL ju : jarUrls) {
            try {
                JarFile jar = new JarFile(ju.getFile());
                Enumeration<JarEntry> entries = jar.entries();
                while (entries.hasMoreElements()) {
                    JarEntry j = entries.nextElement();
                    if (j.isDirectory()) continue;
                    if (j.getName().startsWith(""lib/"") && j.getName().endsWith("".jar"")) {
                        URL url = new URL(""jar:"" + ju.getProtocol() + "":"" + ju.getFile() + ""!/"" + j.getName());
                        InputStream is = url.openStream();
                        File tmpFile = File.createTempFile(""SCDeploy"", "".jar"");
                        FileOutputStream fos = new FileOutputStream(tmpFile);
                        IOUtils.copy(is, fos);
                        is.close();
                        fos.close();
                        additionalUrls.add(new URL(""file://"" + tmpFile.getAbsolutePath()));
                    }
                }
            } catch (IOException e) {
            }
        }
        return additionalUrls.toArray(new URL[] {});
    }
",False
900901,3449615,8156588,"    public ProgramMessageSymbol addProgramMessageSymbol(int programID, String name, byte[] bytecode) throws AdaptationException {
        ProgramMessageSymbol programMessageSymbol = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        InputStream stream = new ByteArrayInputStream(bytecode);
        try {
            String query = ""INSERT INTO ProgramMessageSymbols(programID, name, "" + ""bytecode) VALUES ( ?, ?, ? )"";
            connection = DriverManager.getConnection(CONN_STR);
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, programID);
            preparedStatement.setString(2, name);
            preparedStatement.setBinaryStream(3, stream, bytecode.length);
            log.info(""INSERT INTO ProgramMessageSymbols(programID, name, "" + ""bytecode) VALUES ("" + programID + "", '"" + name + ""', "" + ""<bytecode>)"");
            preparedStatement.executeUpdate();
            statement = connection.createStatement();
            query = ""SELECT * FROM ProgramMessageSymbols WHERE "" + ""programID =  "" + programID + "" AND "" + ""name      = '"" + name + ""'"";
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to add program message symbol failed."";
                log.error(msg);
                ;
                throw new AdaptationException(msg);
            }
            programMessageSymbol = getProgramMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in addProgramMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                preparedStatement.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return programMessageSymbol;
    }
","    private static final BufferedInputStream createInputStreamFromRemoteUrl(String uri, ClientConnectionManager connectionManager) {
        InputStream contentInput = null;
        if (connectionManager == null) {
            try {
                URL url = new URI(uri).toURL();
                URLConnection conn = url.openConnection();
                conn.connect();
                contentInput = conn.getInputStream();
            } catch (Exception e) {
                Log.w(TAG, ""Request failed: "" + uri);
                e.printStackTrace();
                return null;
            }
        } else {
            final DefaultHttpClient mHttpClient = new DefaultHttpClient(connectionManager, HTTP_PARAMS);
            HttpUriRequest request = new HttpGet(uri);
            HttpResponse httpResponse = null;
            try {
                httpResponse = mHttpClient.execute(request);
                HttpEntity entity = httpResponse.getEntity();
                if (entity != null) {
                    contentInput = entity.getContent();
                }
            } catch (Exception e) {
                Log.w(TAG, ""Request failed: "" + request.getURI());
                return null;
            }
        }
        if (contentInput != null) {
            return new BufferedInputStream(contentInput, 4096);
        } else {
            return null;
        }
    }
",False
900902,10436333,9871401,"    private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception {
        String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH);
        if (bundleClassPath == null) {
            bundleClassPath = ""."";
        }
        ManifestEntry[] entries = ManifestEntry.parse(bundleClassPath);
        String[] classPaths = new String[0];
        for (int i = 0; i < entries.length; i++) {
            String classPath = entries[i].getName();
            if (classPath.startsWith(""/"")) {
                classPath = classPath.substring(1);
            }
            if (classPath.endsWith("".jar"")) {
                try {
                    File file = new File(cache, classPath);
                    if (!alreadyCached) {
                        file.getParentFile().mkdirs();
                        String url = new StringBuilder(""jar:"").append(bundleFile.toURI().toURL().toString()).append(""!/"").append(classPath).toString();
                        OutputStream os = new FileOutputStream(file);
                        InputStream is = new URL(url).openStream();
                        IOUtil.copy(is, os);
                        is.close();
                        os.close();
                    } else {
                        if (!file.exists()) {
                            throw new IOException(new StringBuilder(""classpath "").append(classPath).append("" not found"").toString());
                        }
                    }
                } catch (IOException e) {
                    FrameworkEvent frameworkEvent = new FrameworkEvent(FrameworkEvent.INFO, bundle, e);
                    framework.postFrameworkEvent(frameworkEvent);
                    continue;
                }
            }
            classPaths = (String[]) ArrayUtil.add(classPaths, classPath);
        }
        if (!alreadyCached) {
            String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE);
            if (bundleNativeCode != null) {
                entries = ManifestEntry.parse(bundleNativeCode);
                for (int i = 0; i < entries.length; i++) {
                    ManifestEntry entry = entries[i];
                    String libPath = entry.getName();
                    String url = new StringBuilder(""jar:"").append(bundleFile.toURI().toURL().toString()).append(""!/"").append(libPath).toString();
                    File file = new File(cache, libPath);
                    file.getParentFile().mkdirs();
                    OutputStream os = new FileOutputStream(file);
                    InputStream is = new URL(url).openStream();
                    IOUtil.copy(is, os);
                    is.close();
                    os.close();
                }
            }
        }
        BundleURLClassPath urlClassPath = new BundleURLClassPathImpl(bundle, version, classPaths, cache);
        return urlClassPath;
    }
","    protected void doPost(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {
        String pathInfo = httpServletRequest.getPathInfo();
        log.info(""PathInfo: "" + pathInfo);
        if (pathInfo == null || pathInfo.equals("""") || pathInfo.equals(""/"")) {
            httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String fileName = pathInfo.charAt(0) == '/' ? pathInfo.substring(1) : pathInfo;
        log.info(""FileName: "" + fileName);
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = getDataSource().getConnection();
            ps = con.prepareStatement(""select file, size from files where name=?"");
            ps.setString(1, fileName);
            rs = ps.executeQuery();
            if (rs.next()) {
                httpServletResponse.setContentType(getServletContext().getMimeType(fileName));
                httpServletResponse.setContentLength(rs.getInt(""size""));
                OutputStream os = httpServletResponse.getOutputStream();
                org.apache.commons.io.IOUtils.copy(rs.getBinaryStream(""file""), os);
                os.flush();
            } else {
                httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        } finally {
            if (rs != null) try {
                rs.close();
            } catch (SQLException e) {
            }
            if (ps != null) try {
                ps.close();
            } catch (SQLException e) {
            }
            if (con != null) try {
                con.close();
            } catch (SQLException e) {
            }
        }
    }
",False
900903,16270977,4518934,"    public Scene load(URL url) throws FileNotFoundException, IncorrectFormatException, ParsingErrorException {
        BufferedReader reader;
        if (baseUrl == null) setBaseUrlFromUrl(url);
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (IOException e) {
            throw new FileNotFoundException(e.getMessage());
        }
        fromUrl = true;
        return load(reader);
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",False
900904,3236017,2373293,"    public static void copyFile(String source, String dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(new File(source)).getChannel();
            out = new FileOutputStream(new File(dest)).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public static void copyFile(final File in, final File out) throws IOException {
        final FileChannel sourceChannel = new FileInputStream(in).getChannel();
        final FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",True
900905,19295736,15805163,"    public void setTableBraille(String tableBraille, boolean sys) {
        fiConf.setProperty(OptNames.fi_braille_table, tableBraille);
        fiConf.setProperty(OptNames.fi_is_sys_braille_table, Boolean.toString(sys));
        FileChannel in = null;
        FileChannel out = null;
        try {
            String fichTable;
            if (!(tableBraille.endsWith("".ent""))) {
                tableBraille = tableBraille + "".ent"";
            }
            if (sys) {
                fichTable = ConfigNat.getInstallFolder() + ""xsl/tablesBraille/"" + tableBraille;
            } else {
                fichTable = ConfigNat.getUserBrailleTableFolder() + tableBraille;
            }
            in = new FileInputStream(fichTable).getChannel();
            out = new FileOutputStream(getUserBrailleTableFolder() + ""Brltab.ent"").getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            String fichTable;
            if (sys) {
                fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + tableBraille;
            } else {
                fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + tableBraille;
            }
            in = new FileInputStream(fichTable).getChannel();
            out = new FileOutputStream(ConfigNat.getUserTempFolder() + ""Table_pour_chaines.ent"").getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    @Override
    public String encodePassword(String rawPass, Object salt) throws DataAccessException {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            digest.reset();
            digest.update(((String) salt).getBytes(""UTF-8""));
            return new String(digest.digest(rawPass.getBytes(""UTF-8"")));
        } catch (Throwable e) {
            throw new DataAccessException(""Error al codificar la contrase�a"", e) {

                private static final long serialVersionUID = 3880106673612870103L;
            };
        }
    }
",False
900906,6416201,20761751,"    @Override
    public void copyTo(ManagedFile other) throws ManagedIOException {
        try {
            if (other.getType() == ManagedFileType.FILE) {
                IOUtils.copy(this.getContent().getInputStream(), other.getContent().getOutputStream());
            } else {
                ManagedFile newFile = other.retrive(this.getPath());
                newFile.createFile();
                IOUtils.copy(this.getContent().getInputStream(), newFile.getContent().getOutputStream());
            }
        } catch (IOException ioe) {
            throw ManagedIOException.manage(ioe);
        }
    }
","    public static String encryptPassword(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            LOG.error(e);
        }
        try {
            md.update(password.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            LOG.error(e);
        }
        return (new BASE64Encoder()).encode(md.digest());
    }
",False
900907,15708288,19723158,"    private Response postRequest(String urlString, String params) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection uc = (HttpURLConnection) url.openConnection();
        uc.setDoInput(true);
        uc.setDoOutput(true);
        uc.setUseCaches(false);
        uc.setAllowUserInteraction(false);
        uc.setRequestMethod(""POST"");
        uc.setRequestProperty(""ContentType"", ""application/x-www-form-urlencoded"");
        uc.setRequestProperty(""User-Agent"", ""CytoLinkFromMJ"");
        if (cookie != null) uc.setRequestProperty(""Cookie"", cookie);
        PrintStream out = new PrintStream(uc.getOutputStream());
        out.print(params);
        out.flush();
        out.close();
        uc.connect();
        StringBuffer sb = new StringBuffer();
        String inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine + ""\n"");
        }
        in.close();
        Response res = new Response();
        res.content = sb.toString();
        res.contentType = uc.getHeaderField(""Content-Type"");
        res.cookie = uc.getHeaderField(""Set-Cookie"");
        return res;
    }
","    protected Scanner createScanner(InputSource source) {
        documentURI = source.getURI();
        if (documentURI == null) {
            documentURI = """";
        }
        Reader r = source.getCharacterStream();
        if (r != null) {
            return new Scanner(r);
        }
        InputStream is = source.getByteStream();
        if (is != null) {
            return new Scanner(is, source.getEncoding());
        }
        String uri = source.getURI();
        if (uri == null) {
            throw new CSSException(formatMessage(""empty.source"", null));
        }
        try {
            ParsedURL purl = new ParsedURL(uri);
            is = purl.openStreamRaw(CSSConstants.CSS_MIME_TYPE);
            return new Scanner(is, source.getEncoding());
        } catch (IOException e) {
            throw new CSSException(e);
        }
    }
",False
900908,3672328,5951112,"    public static void copy(String sourceFile, String targetFile) throws IOException {
        FileChannel sourceChannel = new FileInputStream(sourceFile).getChannel();
        FileChannel targetChannel = new FileOutputStream(targetFile).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        sourceChannel.close();
        targetChannel.close();
    }
","    public static String getFileContents(String path) {
        BufferedReader buffReader = null;
        InputStream stream = null;
        if (path.indexOf(""://"") != -1) {
            URL url = null;
            try {
                url = new URL(path);
            } catch (MalformedURLException e) {
                LOGGER.warn(String.format(""Malformed URL: \""%s\"""", path));
            }
            if (url == null) {
                throw new DeveloperError(String.format(""Cannot create URL from path: \""%s\"""", path), new NullPointerException());
            }
            try {
                String encoding = Characters.getDeclaredXMLEncoding(url);
                stream = url.openStream();
                buffReader = new BufferedReader(new InputStreamReader(stream, encoding));
            } catch (IOException e) {
                LOGGER.warn(String.format(""I/O error trying to read \""%s\"""", path));
            }
        } else {
            File toRead = null;
            try {
                toRead = getExistingFile(path);
            } catch (FileNotFoundException e) {
                throw new UserError(new FileNotFoundException(path));
            }
            if (toRead.isAbsolute()) {
                String parent = toRead.getParent();
                try {
                    workingDirectory.push(URLTools.createValidURL(parent));
                } catch (FileNotFoundException e) {
                    throw new DeveloperError(String.format(""Created an invalid parent file: \""%s\""."", parent), e);
                }
            }
            if (toRead.exists() && !toRead.isDirectory()) {
                String _path = toRead.getAbsolutePath();
                try {
                    String encoding = Characters.getDeclaredXMLEncoding(URLTools.createValidURL(_path));
                    stream = new FileInputStream(_path);
                    buffReader = new BufferedReader(new InputStreamReader(stream, encoding));
                } catch (IOException e) {
                    LOGGER.warn(String.format(""I/O error trying to read \""%s\"""", _path));
                    return null;
                }
            } else {
                assert toRead.exists() : ""getExistingFile() returned a non-existent file"";
                if (toRead.isDirectory()) {
                    throw new UserError(new FileAlreadyExistsAsDirectoryException(toRead));
                }
            }
        }
        StringBuilder result = new StringBuilder();
        String line;
        if (buffReader != null && stream != null) {
            try {
                while ((line = buffReader.readLine()) != null) {
                    result.append(line);
                }
                buffReader.close();
                stream.close();
            } catch (IOException e) {
                LOGGER.warn(String.format(""I/O error trying to read \""%s\"""", path));
                return null;
            }
        }
        return result.toString();
    }
",False
900909,8446877,1772401,"    public static byte[] ComputeForText(String ThisString) throws Exception {
        byte[] Result;
        MessageDigest MD5Hasher;
        MD5Hasher = MessageDigest.getInstance(""MD5"");
        MD5Hasher.update(ThisString.replaceAll(""\r"", """").getBytes(""iso-8859-1""));
        Result = MD5Hasher.digest();
        return Result;
    }
","    private void redownloadResource(SchemaResource resource) {
        if (_redownloadSet != null) {
            if (_redownloadSet.contains(resource)) return;
            _redownloadSet.add(resource);
        }
        String filename = resource.getFilename();
        String schemaLocation = resource.getSchemaLocation();
        String digest = null;
        if (schemaLocation == null || filename == null) return;
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        try {
            URL url = new URL(schemaLocation);
            URLConnection conn = url.openConnection();
            conn.addRequestProperty(""User-Agent"", USER_AGENT);
            conn.addRequestProperty(""Accept"", ""application/xml, text/xml, */*"");
            DigestInputStream input = digestInputStream(conn.getInputStream());
            IOUtil.copyCompletely(input, buffer);
            digest = HexBin.bytesToString(input.getMessageDigest().digest());
        } catch (Exception e) {
            warning(""Could not copy remote resource "" + schemaLocation + "":"" + e.getMessage());
            return;
        }
        if (digest.equals(resource.getSha1()) && fileExists(filename)) {
            warning(""Resource "" + filename + "" is unchanged from "" + schemaLocation + ""."");
            return;
        }
        try {
            InputStream source = new ByteArrayInputStream(buffer.toByteArray());
            writeInputStreamToFile(source, filename);
        } catch (IOException e) {
            warning(""Could not write to file "" + filename + "" for "" + schemaLocation + "":"" + e.getMessage());
            return;
        }
        warning(""Refreshed "" + filename + "" from "" + schemaLocation);
    }
",False
900910,10536444,19643372,"        public static void copyFile(File source, File destination) throws IOException {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));
            byte[] buffer = new byte[4096];
            int read = -1;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            out.flush();
            out.close();
            in.close();
        }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            logger.error(Logger.SECURITY_FAILURE, ""Problem encoding file to file"", exc);
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900911,19392393,13099597,"    private void addIngredients(Recipe recipe, int id) throws Exception {
        PreparedStatement pst = null;
        try {
            conn = getConnection();
            pst = conn.prepareStatement(""INSERT INTO ingredients (recipe_id, name, amount, measure_id, shop_flag) VALUES (?,?,?,?,?)"");
            IngredientContainer ings = recipe.getIngredients();
            Ingredient ingBean = null;
            Iterator it;
            for (it = ings.getIngredients().iterator(); it.hasNext(); ) {
                ingBean = (Ingredient) it.next();
                pst.setInt(1, id);
                pst.setString(2, ingBean.getName());
                pst.setDouble(3, ingBean.getAmount());
                pst.setInt(4, ingBean.getType());
                pst.setInt(5, ingBean.getShopFlag());
                pst.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            MainFrame.appendStatusText(""Can't add ingredient, the exception was "" + e.getMessage());
        } finally {
            try {
                if (pst != null) pst.close();
                pst = null;
            } catch (Exception ex) {
                MainFrame.appendStatusText(""Can't close database connection."");
            }
        }
    }
","    public void deleteGroup(String groupID) throws XregistryException {
        try {
            Connection connection = context.createConnection();
            connection.setAutoCommit(false);
            try {
                PreparedStatement statement1 = connection.prepareStatement(DELETE_GROUP_SQL_MAIN);
                statement1.setString(1, groupID);
                int updateCount = statement1.executeUpdate();
                if (updateCount == 0) {
                    throw new XregistryException(""Database is not updated, Can not find such Group "" + groupID);
                }
                if (cascadingDeletes) {
                    PreparedStatement statement2 = connection.prepareStatement(DELETE_GROUP_SQL_DEPEND);
                    statement2.setString(1, groupID);
                    statement2.setString(2, groupID);
                    statement2.executeUpdate();
                }
                connection.commit();
                groups.remove(groupID);
                log.info(""Delete Group "" + groupID + (cascadingDeletes ? "" with cascading deletes "" : """"));
            } catch (SQLException e) {
                connection.rollback();
                throw new XregistryException(e);
            } finally {
                context.closeConnection(connection);
            }
        } catch (SQLException e) {
            throw new XregistryException(e);
        }
    }
",True
900912,5674869,4531654,"    public static String getHash(String text) {
        if (text == null) return null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            byte[] hashedTextBytes = md.digest();
            BigInteger hashedTextBigInteger = new BigInteger(1, hashedTextBytes);
            String hashedTextString = hashedTextBigInteger.toString(16);
            return hashedTextString;
        } catch (NoSuchAlgorithmException e) {
            LOG.warning(e.toString());
            return null;
        }
    }
","    public static byte[] md5raw(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return md.digest();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",True
900913,16951197,14072818,"    public void testReleaseOnEntityWriteTo() throws Exception {
        HttpParams params = defaultParams.copy();
        ConnManagerParams.setMaxTotalConnections(params, 1);
        ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(1));
        ThreadSafeClientConnManager mgr = createTSCCM(params, null);
        assertEquals(0, mgr.getConnectionsInPool());
        DefaultHttpClient client = new DefaultHttpClient(mgr, params);
        HttpGet httpget = new HttpGet(""/random/20000"");
        HttpHost target = getServerHttp();
        HttpResponse response = client.execute(target, httpget);
        ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null);
        try {
            connreq.getConnection(250, TimeUnit.MILLISECONDS);
            fail(""ConnectionPoolTimeoutException should have been thrown"");
        } catch (ConnectionPoolTimeoutException expected) {
        }
        HttpEntity e = response.getEntity();
        assertNotNull(e);
        ByteArrayOutputStream outsteam = new ByteArrayOutputStream();
        e.writeTo(outsteam);
        assertEquals(1, mgr.getConnectionsInPool());
        connreq = mgr.requestConnection(new HttpRoute(target), null);
        ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS);
        mgr.releaseConnection(conn, -1, null);
        mgr.shutdown();
    }
","    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.dr.DigitalRepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file.getAbsolutePath().replaceAll(""%20"", "" "")));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        String pid = ""Method Not Supported any more"";
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }
",False
900914,4877333,22207420,"    private static String getWebPage(String urlString) throws Exception {
        URL url;
        HttpURLConnection conn;
        BufferedReader rd;
        String line;
        StringBuilder result = new StringBuilder();
        try {
            url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""GET"");
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                result.append(line);
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result.toString();
    }
","    public static void forEachLine(final URL url, final LineListener lit, final String encoding) {
        try {
            ReaderUtils.forEachLine(url.openStream(), lit);
        } catch (final IOException ioe) {
            lit.exception(ioe);
        }
    }
",False
900915,9983757,20187440,"    public static void copyFiles(String strPath, String dstPath) throws IOException {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + File.separatorChar + list[i];
                String src1 = src.getAbsolutePath() + File.separatorChar + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
","    public String getLastReleaseVersion() throws TransferException {
        try {
            URL url = new URL(""http://jtbdivelogbook.sourceforge.net/version.properties"");
            URLConnection urlConn = url.openConnection();
            urlConn.setDoInput(true);
            urlConn.setUseCaches(false);
            urlConn.setReadTimeout(20000);
            urlConn.setConnectTimeout(10000);
            Properties props = new Properties();
            InputStream is = urlConn.getInputStream();
            props.load(is);
            is.close();
            String lastVersion = props.getProperty(PROPERTY_LAST_RELEASE);
            if (lastVersion == null) {
                LOGGER.warn(""Couldn't find property "" + PROPERTY_LAST_RELEASE);
            }
            return lastVersion;
        } catch (MalformedURLException e) {
            LOGGER.error(e);
            throw new TransferException(e);
        } catch (IOException e) {
            LOGGER.error(e);
            throw new TransferException(e);
        }
    }
",False
900916,18488106,6037295,"    public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException {
        InputSource source = new InputSource(inputUrl.openStream());
        Document logDoc = DomUtil.getNewDom();
        XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs);
        reader.parse(source);
        InputStream logStream = DomUtil.serializeToInputStream(logDoc, ""utf-8"");
        System.out.println(""Creating message file \"""" + messageFile.getAbsolutePath() + ""\""..."");
        OutputStream fos = new FileOutputStream(messageFile);
        IOUtils.copy(logStream, fos);
        return logDoc;
    }
","    public void copyContent(long mailId1, long mailId2) throws Exception {
        File file1 = new File(this.getMailDir(mailId1) + ""/"");
        File file2 = new File(this.getMailDir(mailId2) + ""/"");
        this.recursiveDir(file2);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; i++) {
                    if (files[i].isFile()) {
                        File file2s = new File(file2.getAbsolutePath() + ""/"" + files[i].getName());
                        if (!file2s.exists()) {
                            file2s.createNewFile();
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s));
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i]));
                            int read;
                            while ((read = in.read()) != -1) {
                                out.write(read);
                            }
                            out.flush();
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ex1) {
                                    ex1.printStackTrace();
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
",True
900917,14950969,9103010,"    public void run() {
        BufferedReader reader = null;
        log = ""Downloading... "" + name;
        setChanged();
        notifyObservers();
        try {
            Date marker = to;
            int previousSize = 0;
            list.clear();
            do {
                previousSize = list.size();
                URL url = new URL(createLink(from, marker));
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = """";
                while ((line = reader.readLine()) != null) {
                    try {
                        IQuoteHistorical quote = parse(line + "","");
                        if (quote != null && !list.contains(quote)) list.add(quote); else System.err.println(line);
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                }
                if (list.size() > 0) marker = list.get(list.size() - 1).getData();
            } while (marker.after(from) && previousSize != list.size());
            log = ""download Completed!"";
        } catch (MalformedURLException e) {
            e.printStackTrace();
            log = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            log = e.getMessage();
        } finally {
            try {
                if (reader != null) reader.close();
            } catch (IOException e) {
                e.printStackTrace();
                log = e.getMessage();
            }
        }
        setChanged();
        notifyObservers();
    }
","    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        if ((this.jTree2.getSelectionPath() == null) || !(this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode)) {
            Msg.showMsg(""Devi selezionare lo stile sotto il quale caricare la ricetta!"", this);
            return;
        }
        if ((this.txtUser.getText() == null) || (this.txtUser.getText().length() == 0)) {
            Msg.showMsg(""Il nome utente è obbligatorio!"", this);
            return;
        }
        if ((this.txtPwd.getPassword() == null) || (this.txtPwd.getPassword().length == 0)) {
            Msg.showMsg(""La password è obbligatoria!"", this);
            return;
        }
        this.nomeRicetta = this.txtNome.getText();
        if ((this.nomeRicetta == null) || (this.nomeRicetta.length() == 0)) {
            Msg.showMsg(""Il nome della ricetta è obbligatorio!"", this);
            return;
        }
        StyleTreeNode node = null;
        if (this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode) {
            node = (StyleTreeNode) this.jTree2.getSelectionPath().getLastPathComponent();
        }
        try {
            String data = URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(this.txtUser.getText(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""pwd"", ""UTF-8"") + ""="" + URLEncoder.encode(new String(this.txtPwd.getPassword()), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""id_stile"", ""UTF-8"") + ""="" + URLEncoder.encode(node.getIdStile(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""nome_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.nomeRicetta, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""xml_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.xml, ""UTF-8"");
            URL url = new URL(""http://"" + Main.config.getRemoteServer() + ""/upload_ricetta.asp?"" + data);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            String str = """";
            while ((line = rd.readLine()) != null) {
                str += line;
            }
            rd.close();
            Msg.showMsg(str, this);
            doDefaultCloseAction();
        } catch (Exception e) {
            Utils.showException(e, ""Errore in upload"", this);
        }
        reloadTree();
    }
",True
900918,4645054,19142737,"        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath, Vector images) {
            int i;
            lengthOfTask = images.size();
            Element dataBaseXML = new Element(""dataBase"");
            for (i = 0; ((i < images.size()) && !stop && !cancel); i++) {
                Vector imagen = new Vector(2);
                imagen = (Vector) images.elementAt(i);
                String element = (String) imagen.elementAt(0);
                current = i;
                String pathSrc = System.getProperty(""user.dir"") + File.separator + ""images"" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(File.separator) + 1, pathSrc.length());
                String pathDst = directoryPath + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector<String> keyWords = new Vector<String>();
                keyWords = TIGDataBase.asociatedConceptSearch(element);
                Element image = new Element(""image"");
                image.setAttribute(""name"", name);
                if (keyWords.size() != 0) {
                    for (int k = 0; k < keyWords.size(); k++) {
                        Element category = new Element(""category"");
                        category.setText(keyWords.get(k).trim());
                        image.addContent(category);
                    }
                }
                dataBaseXML.addContent(image);
            }
            Document doc = new Document(dataBaseXML);
            try {
                XMLOutputter out = new XMLOutputter();
                FileOutputStream f = new FileOutputStream(directoryPath + ""images.xml"");
                out.output(doc, f);
                f.flush();
                f.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            current = lengthOfTask;
        }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900919,413620,23050895,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
","    protected void saveResponse(final WebResponse response, final WebRequest request) throws IOException {
        counter_++;
        final String extension = chooseExtension(response.getContentType());
        final File f = createFile(request.getUrl(), extension);
        final InputStream input = response.getContentAsStream();
        final OutputStream output = new FileOutputStream(f);
        try {
            IOUtils.copy(response.getContentAsStream(), output);
        } finally {
            IOUtils.closeQuietly(input);
            IOUtils.closeQuietly(output);
        }
        final URL url = response.getWebRequest().getUrl();
        LOG.info(""Created file "" + f.getAbsolutePath() + "" for response "" + counter_ + "": "" + url);
        final StringBuilder buffer = new StringBuilder();
        buffer.append(""tab[tab.length] = {code: "" + response.getStatusCode() + "", "");
        buffer.append(""fileName: '"" + f.getName() + ""', "");
        buffer.append(""contentType: '"" + response.getContentType() + ""', "");
        buffer.append(""method: '"" + request.getHttpMethod().name() + ""', "");
        if (request.getHttpMethod() == HttpMethod.POST && request.getEncodingType() == FormEncodingType.URL_ENCODED) {
            buffer.append(""postParameters: "" + nameValueListToJsMap(request.getRequestParameters()) + "", "");
        }
        buffer.append(""url: '"" + escapeJSString(url.toString()) + ""', "");
        buffer.append(""loadTime: "" + response.getLoadTime() + "", "");
        final byte[] bytes = IOUtils.toByteArray(response.getContentAsStream());
        buffer.append(""responseSize: "" + ((bytes == null) ? 0 : bytes.length) + "", "");
        buffer.append(""responseHeaders: "" + nameValueListToJsMap(response.getResponseHeaders()));
        buffer.append(""};\n"");
        appendToJSFile(buffer.toString());
    }
",True
900920,7067836,16981231,"    private String generateFilename() {
        byte[] hash = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            try {
                digest.update(InetAddress.getLocalHost().toString().getBytes());
            } catch (UnknownHostException e) {
            }
            digest.update(String.valueOf(System.currentTimeMillis()).getBytes());
            digest.update(String.valueOf(Runtime.getRuntime().freeMemory()).getBytes());
            byte[] foo = new byte[128];
            new SecureRandom().nextBytes(foo);
            digest.update(foo);
            hash = digest.digest();
        } catch (NoSuchAlgorithmException e) {
            Debug.assrt(false);
        }
        return hexEncode(hash);
    }
","    public static boolean verify(final String password, final String encryptedPassword) {
        MessageDigest digest = null;
        int size = 0;
        String base64 = null;
        if (encryptedPassword.regionMatches(true, 0, ""{CRYPT}"", 0, 7)) {
            throw new InternalError(""Not implemented"");
        } else if (encryptedPassword.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            size = 20;
            base64 = encryptedPassword.substring(5);
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            size = 20;
            base64 = encryptedPassword.substring(6);
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{MD5}"", 0, 5)) {
            size = 16;
            base64 = encryptedPassword.substring(5);
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (encryptedPassword.regionMatches(true, 0, ""{SMD5}"", 0, 6)) {
            size = 16;
            base64 = encryptedPassword.substring(6);
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else {
            return false;
        }
        final byte[] data = Base64.decode(base64.toCharArray());
        final byte[] orig = new byte[size];
        System.arraycopy(data, 0, orig, 0, size);
        digest.reset();
        digest.update(password.getBytes());
        if (data.length > size) {
            digest.update(data, size, data.length - size);
        }
        return MessageDigest.isEqual(digest.digest(), orig);
    }
",True
900921,1008332,2285646,"    public void copyFileToFileWithPaths(String sourcePath, String destinPath) throws Exception {
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        byte dataBuff[] = new byte[bufferSize];
        File file1 = new File(sourcePath);
        if (file1.exists() && (file1.isFile())) {
            File file2 = new File(destinPath);
            if (file2.exists()) {
                file2.delete();
            }
            FileUtils.getInstance().createDirectory(file2.getParent());
            in = new BufferedInputStream(new FileInputStream(sourcePath), bufferSize);
            out = new BufferedOutputStream(new FileOutputStream(destinPath), bufferSize);
            int readLen;
            while ((readLen = in.read(dataBuff)) > 0) {
                out.write(dataBuff, 0, readLen);
            }
            out.flush();
            in.close();
            out.close();
        } else {
            throw new Exception(""Source file not exist ! sourcePath = ("" + sourcePath + "")"");
        }
    }
","    protected void sendDoc(File indir, File outdir, File orig, Document doc, ServiceEndpoint ep) {
        ep.setMethod(""simpleDocumentTransfer"");
        Document response = null;
        try {
            response = protocolHandler.sendMessage(ep, doc);
        } catch (TransportException e) {
            logger.warn(""Message was not accepted, will try again later"");
            return;
        }
        String serial = String.valueOf(System.currentTimeMillis());
        File origCopy = new File(outdir, orig.getName() + ""."" + serial);
        File respDrop = new File(outdir, orig.getName() + ""."" + serial + "".resp"");
        FileOutputStream respos = null;
        try {
            respos = new FileOutputStream(respDrop);
            serializeDocument(respos, response);
        } catch (IOException e) {
            logger.warn(""Failed to dump response"");
            return;
        } finally {
            try {
                respos.close();
            } catch (IOException ignored) {
            }
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        byte[] buffer = new byte[2048];
        try {
            in = new FileInputStream(orig);
            out = new FileOutputStream(origCopy);
            int bytesread = 0;
            while ((bytesread = in.read(buffer)) > 0) {
                out.write(buffer, 0, bytesread);
            }
        } catch (IOException e) {
            logger.warn(""Failed to copy original"");
            return;
        } finally {
            try {
                in.close();
                out.close();
            } catch (IOException ignored) {
            }
        }
        orig.delete();
        logger.info(""File processed: "" + orig.getName());
    }
",True
900922,8401358,16654538,"    public void run() {
        FileInputStream src;
        try {
            src = new FileInputStream(srcName);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return;
        }
        FileOutputStream dest;
        FileChannel srcC = src.getChannel();
        ByteBuffer buf = ByteBuffer.allocateDirect(BUFFER_SIZE);
        try {
            int i = 1;
            int fileNo = 0;
            long maxByte = this.maxSize << 10;
            long nbByte = srcC.size();
            long nbFile = (nbByte / maxByte) + 1;
            for (fileNo = 0; fileNo < nbFile; fileNo++) {
                long fileByte = 0;
                String destName = srcName + ""_"" + fileNo;
                dest = new FileOutputStream(destName);
                FileChannel destC = dest.getChannel();
                while ((i > 0) && fileByte < maxByte) {
                    i = srcC.read(buf);
                    buf.flip();
                    fileByte += i;
                    destC.write(buf);
                    buf.compact();
                }
                destC.close();
                dest.close();
            }
        } catch (IOException e1) {
            e1.printStackTrace();
            return;
        }
    }
","    public void setTypeRefs(Connection conn) {
        log.traceln(""\tProcessing "" + table + "" references.."");
        try {
            String query = "" select distinct c.id, c.qualifiedname from "" + table + "", CLASSTYPE c "" + "" where "" + table + ""."" + reffield + "" is null and "" + table + ""."" + classnamefield + "" = c.qualifiedname"";
            PreparedStatement pstmt = conn.prepareStatement(query);
            long start = new Date().getTime();
            ResultSet rset = pstmt.executeQuery();
            long queryTime = new Date().getTime() - start;
            log.debug(""query time: "" + queryTime + "" ms"");
            String update = ""update "" + table + "" set "" + reffield + ""=? where "" + classnamefield + ""=? and "" + reffield + "" is null"";
            PreparedStatement pstmt2 = conn.prepareStatement(update);
            int n = 0;
            start = new Date().getTime();
            while (rset.next()) {
                n++;
                pstmt2.setInt(1, rset.getInt(1));
                pstmt2.setString(2, rset.getString(2));
                pstmt2.executeUpdate();
            }
            queryTime = new Date().getTime() - start;
            log.debug(""total update time: "" + queryTime + "" ms"");
            log.debug(""number of times through loop: "" + n);
            if (n > 0) log.debug(""avg update time: "" + (queryTime / n) + "" ms"");
            pstmt2.close();
            rset.close();
            pstmt.close();
            conn.commit();
            log.verbose(""Updated (committed) "" + table + "" references"");
        } catch (SQLException ex) {
            log.error(""Internal Reference Update Failed!"");
            DBUtils.logSQLException(ex);
            log.error(""Rolling back.."");
            try {
                conn.rollback();
            } catch (SQLException inner_ex) {
                log.error(""rollback failed!"");
            }
        }
    }
",False
900923,7998444,2955074,"    public static boolean isDicom(URL url) {
        assert url != null;
        boolean isDicom = false;
        BufferedInputStream is = null;
        try {
            is = new BufferedInputStream(url.openStream());
            is.skip(DICOM_PREAMBLE_SIZE);
            byte[] buf = new byte[DICM.length];
            is.read(buf);
            if (buf[0] == DICM[0] && buf[1] == DICM[1] && buf[2] == DICM[2] && buf[3] == DICM[3]) {
                isDicom = true;
            }
        } catch (Exception exc) {
            System.out.println(""ImageFactory::isDicom(): exc="" + exc);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (Exception exc) {
                }
            }
        }
        return isDicom;
    }
","    public static void copyFile(File source, File destination) throws IOException {
        if (source == null) {
            String message = Logging.getMessage(""nullValue.SourceIsNull"");
            Logging.logger().severe(message);
            throw new IllegalArgumentException(message);
        }
        if (destination == null) {
            String message = Logging.getMessage(""nullValue.DestinationIsNull"");
            Logging.logger().severe(message);
            throw new IllegalArgumentException(message);
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        FileChannel fic, foc;
        try {
            fis = new FileInputStream(source);
            fic = fis.getChannel();
            fos = new FileOutputStream(destination);
            foc = fos.getChannel();
            foc.transferFrom(fic, 0, fic.size());
            fos.flush();
            fis.close();
            fos.close();
        } finally {
            WWIO.closeStream(fis, source.getPath());
            WWIO.closeStream(fos, destination.getPath());
        }
    }
",False
900924,17874921,23512890,"    public static boolean buildCFItem2ItemStats(String outFileName, String movieAvgFileName, String custAvgFileName) {
        try {
            File infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + movieAvgFileName);
            FileChannel inC = new FileInputStream(infile).getChannel();
            int size = (int) inC.size();
            ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1);
            inC.close();
            while (map.hasRemaining()) {
                movieAverages.put(map.getShort(), map.getFloat());
            }
            map = null;
            infile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + custAvgFileName);
            inC = new FileInputStream(infile).getChannel();
            size = (int) inC.size();
            map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size);
            TIntFloatHashMap custAverages = new TIntFloatHashMap(480189, 1);
            inC.close();
            while (map.hasRemaining()) {
                custAverages.put(map.getInt(), map.getFloat());
            }
            File outfile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + outFileName);
            FileChannel outC = new FileOutputStream(outfile, true).getChannel();
            short[] movies = CustomersAndRatingsPerMovie.keys();
            Arrays.sort(movies);
            int noMovies = movies.length;
            for (int i = 0; i < noMovies - 1; i++) {
                short movie1 = movies[i];
                TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1);
                int[] customers1 = testMovieCustAndRatingsMap.keys();
                Arrays.sort(customers1);
                System.out.println(""Processing movie: "" + movie1);
                for (int j = i + 1; j < noMovies; j++) {
                    short movie2 = movies[j];
                    TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2);
                    int[] customers2 = otherMovieCustAndRatingsMap.keys();
                    TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2);
                    int count = 0;
                    float diffRating = 0;
                    float pearsonCorr = 0;
                    float cosineCorr = 0;
                    float adjustedCosineCorr = 0;
                    float sumX = 0;
                    float sumY = 0;
                    float sumXY = 0;
                    float sumX2 = 0;
                    float sumY2 = 0;
                    float sumXYPearson = 0;
                    float sumX2Pearson = 0;
                    float sumY2Pearson = 0;
                    float sumXYACos = 0;
                    float sumX2ACos = 0;
                    float sumY2ACos = 0;
                    if ((intersectSet.size() == 0) || (intersectSet == null)) {
                        count = 0;
                        diffRating = 0;
                    } else {
                        count = intersectSet.size();
                        for (int l = 0; l < count; l++) {
                            int commonCust = intersectSet.getQuick(l);
                            byte ratingX = testMovieCustAndRatingsMap.get(commonCust);
                            sumX += ratingX;
                            byte ratingY = otherMovieCustAndRatingsMap.get(commonCust);
                            sumY += ratingY;
                            sumX2 += ratingX * ratingX;
                            sumY2 += ratingY * ratingY;
                            sumXY += ratingX * ratingY;
                            diffRating += ratingX - ratingY;
                            sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2));
                            sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2);
                            sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2);
                            float custAverage = custAverages.get(commonCust);
                            sumXYACos += (ratingX - custAverage) * (ratingY - custAverage);
                            sumX2ACos += Math.pow((ratingX - custAverage), 2);
                            sumY2ACos += Math.pow((ratingY - custAverage), 2);
                        }
                    }
                    double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson);
                    if (pearsonDenominator == 0.0) {
                        pearsonCorr = 0;
                    } else {
                        pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue();
                    }
                    double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos);
                    if (adjCosineDenominator == 0.0) {
                        adjustedCosineCorr = 0;
                    } else {
                        adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue();
                    }
                    double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2);
                    if (cosineDenominator == 0.0) {
                        cosineCorr = 0;
                    } else {
                        cosineCorr = new Double(sumXY / cosineDenominator).floatValue();
                    }
                    ByteBuffer buf = ByteBuffer.allocate(44);
                    buf.putShort(movie1);
                    buf.putShort(movie2);
                    buf.putInt(count);
                    buf.putFloat(diffRating);
                    buf.putFloat(sumXY);
                    buf.putFloat(sumX);
                    buf.putFloat(sumY);
                    buf.putFloat(sumX2);
                    buf.putFloat(sumY2);
                    buf.putFloat(pearsonCorr);
                    buf.putFloat(adjustedCosineCorr);
                    buf.putFloat(cosineCorr);
                    buf.flip();
                    outC.write(buf);
                    buf.clear();
                }
            }
            outC.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    private boolean write(File file) {
        String filename = file.getPath();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(byteArrayOutputStream);
        try {
            StringBuffer xml = null;
            if (MainFrame.getInstance().getAnimation() != null) {
                MainFrame.getInstance().getAnimation().xml(out, ""\t"");
            } else {
                xml = MainFrame.getInstance().getModel().xml(""\t"");
            }
            if (file.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(filename));
                BufferedWriter writer = new BufferedWriter(new FileWriter(filename + ""~""));
                char[] buffer = new char[65536];
                int charsRead = 0;
                while ((charsRead = reader.read(buffer)) > 0) writer.write(buffer, 0, charsRead);
                reader.close();
                writer.close();
            }
            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
            writer.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"");
            writer.write(""<jpatch version=\"""" + VersionInfo.ver + ""\"">\n"");
            if (xml != null) writer.write(xml.toString()); else writer.write(byteArrayOutputStream.toString());
            writer.write(""</jpatch>\n"");
            writer.close();
            MainFrame.getInstance().getUndoManager().setChange(false);
            if (MainFrame.getInstance().getAnimation() != null) MainFrame.getInstance().getAnimation().setFile(file); else MainFrame.getInstance().getModel().setFile(file);
            MainFrame.getInstance().setFilename(file.getName());
            return true;
        } catch (IOException ioException) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), ""Unable to save file \"""" + filename + ""\""\n"" + ioException, ""Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
",True
900925,23284463,17439818,"    public static DownloadedContent downloadContent(final InputStream is) throws IOException {
        if (is == null) {
            return new DownloadedContent.InMemory(new byte[] {});
        }
        final ByteArrayOutputStream bos = new ByteArrayOutputStream();
        final byte[] buffer = new byte[1024];
        int nbRead;
        try {
            while ((nbRead = is.read(buffer)) != -1) {
                bos.write(buffer, 0, nbRead);
                if (bos.size() > MAX_IN_MEMORY) {
                    final File file = File.createTempFile(""htmlunit"", "".tmp"");
                    file.deleteOnExit();
                    final FileOutputStream fos = new FileOutputStream(file);
                    bos.writeTo(fos);
                    IOUtils.copyLarge(is, fos);
                    fos.close();
                    return new DownloadedContent.OnFile(file);
                }
            }
        } finally {
            IOUtils.closeQuietly(is);
        }
        return new DownloadedContent.InMemory(bos.toByteArray());
    }
","    public static void copyFile(File source, File dest) throws Exception {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (Exception e) {
            throw new Exception(""Cannot copy file "" + source.getAbsolutePath() + "" to "" + dest.getAbsolutePath(), e);
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (Exception e) {
                throw new Exception(""Cannot close streams."", e);
            }
        }
    }
",True
900926,18417069,19498550,"    public static int getUrl(final String s) {
        try {
            final URL url = new URL(s);
            final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            int count = 0;
            String data = null;
            while ((data = reader.readLine()) != null) {
                System.out.printf(""Results(%3d) of data: %s\n"", count, data);
                ++count;
            }
            return count;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
","                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + ComponentApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = ComponentApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new ComponentApplicationException(""No "" + ""ComponentApplicationContext implementation "" + ""found."");
                        }
",True
900927,17050025,1446728,"    private static String retrieveVersion(InputStream is) throws RepositoryException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, buffer);
        } catch (IOException e) {
            throw new RepositoryException(exceptionLocalizer.format(""device-repository-file-missing"", DeviceRepositoryConstants.VERSION_FILENAME), e);
        }
        return buffer.toString().trim();
    }
","    private void backupFile(ZipOutputStream out, String base, String fn) throws IOException {
        String f = FileUtils.getAbsolutePath(fn);
        base = FileUtils.getAbsolutePath(base);
        if (!f.startsWith(base)) {
            Message.throwInternalError(f + "" does not start with "" + base);
        }
        f = f.substring(base.length());
        f = correctFileName(f);
        out.putNextEntry(new ZipEntry(f));
        InputStream in = FileUtils.openFileInputStream(fn);
        IOUtils.copyAndCloseInput(in, out);
        out.closeEntry();
    }
",True
900928,14319557,10288282,"    public InstanceMonitor(String awsAccessId, String awsSecretKey, String bucketName, boolean first) throws IOException {
        this.awsAccessId = awsAccessId;
        this.awsSecretKey = awsSecretKey;
        props = new Properties();
        while (true) {
            try {
                s3 = new RestS3Service(new AWSCredentials(awsAccessId, awsSecretKey));
                bucket = new S3Bucket(bucketName);
                S3Object obj = s3.getObject(bucket, EW_PROPERTIES);
                props.load(obj.getDataInputStream());
                break;
            } catch (S3ServiceException ex) {
                logger.error(""problem fetching props from bucket, retrying"", ex);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException iex) {
                }
            }
        }
        URL url = new URL(""http://169.254.169.254/latest/meta-data/hostname"");
        hostname = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        url = new URL(""http://169.254.169.254/latest/meta-data/instance-id"");
        instanceId = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        url = new URL(""http://169.254.169.254/latest/meta-data/public-ipv4"");
        externalIP = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        this.dns = new NetticaAPI(props.getProperty(NETTICA_USER), props.getProperty(NETTICA_PASS));
        this.userData = awsAccessId + "" "" + awsSecretKey + "" "" + bucketName;
        this.first = first;
        logger.info(""InstanceMonitor initialized, first="" + first);
    }
","    public String getMarketInfo() {
        try {
            URL url = new URL(""http://api.eve-central.com/api/evemon"");
            BufferedReader s = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            String xml = """";
            while ((line = s.readLine()) != null) {
                xml += line;
            }
            return xml;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",True
900929,15236847,2638907,"    private static MapEntry<String, Properties> loadFpmConf() throws ConfigurationReadException {
        MapEntry<String, Properties> ret = null;
        Scanner sc = new Scanner(CONF_PATHS).useDelimiter(SEP_P);
        String prev = """";
        while (sc.hasNext() && !hasLoaded) {
            Properties fpmConf = null;
            boolean relative = false;
            String path = sc.next();
            if (path.startsWith(PREV_P)) {
                path = path.replace(PREV_P, prev.substring(0, prev.length() - 1));
            } else if (path.startsWith(REL_P)) {
                path = path.replace(REL_P + FS, """");
                relative = true;
            } else if (path.contains(HOME_P)) {
                path = path.replace(HOME_P, USER_HOME);
            }
            prev = path;
            path = path.concat(MAIN_CONF_FILE);
            try {
                InputStream is = null;
                if (relative) {
                    is = ClassLoader.getSystemResourceAsStream(path);
                    path = getSystemConfDir();
                    Strings.getOne().createPath(path);
                    path += MAIN_CONF_FILE;
                    FileOutputStream os = new FileOutputStream(path);
                    IOUtils.copy(is, os);
                    os.flush();
                    os.close();
                    os = null;
                } else {
                    is = new FileInputStream(path);
                }
                fpmConf = new Properties();
                fpmConf.load(is);
                if (fpmConf.isEmpty()) {
                    throw new ConfigurationReadException();
                }
                ret = new MapEntry<String, Properties>(path, fpmConf);
                hasLoaded = true;
            } catch (FileNotFoundException e) {
                fpmConf = null;
                singleton = null;
                hasLoaded = false;
            } catch (IOException e) {
                throw new ConfigurationReadException();
            }
        }
        return ret;
    }
","    public void run() {
        LOG.debug(this);
        String[] parts = createCmdArray(getCommand());
        Runtime runtime = Runtime.getRuntime();
        try {
            Process process = runtime.exec(parts);
            if (isBlocking()) {
                process.waitFor();
                StringWriter out = new StringWriter();
                IOUtils.copy(process.getInputStream(), out);
                String stdout = out.toString().replaceFirst(""\\s+$"", """");
                if (StringUtils.isNotBlank(stdout)) {
                    LOG.info(""Process stdout:\n"" + stdout);
                }
                StringWriter err = new StringWriter();
                IOUtils.copy(process.getErrorStream(), err);
                String stderr = err.toString().replaceFirst(""\\s+$"", """");
                if (StringUtils.isNotBlank(stderr)) {
                    LOG.error(""Process stderr:\n"" + stderr);
                }
            }
        } catch (IOException ioe) {
            LOG.error(String.format(""Could not exec [%s]"", getCommand()), ioe);
        } catch (InterruptedException ie) {
            LOG.error(String.format(""Interrupted [%s]"", getCommand()), ie);
        }
    }
",True
900930,2943254,12330089,"    public void saveDownloadFiles(List downloadFiles) throws SQLException {
        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();
        try {
            conn.setAutoCommit(false);
            Statement s = conn.createStatement();
            s.executeUpdate(""DELETE FROM DOWNLOADFILES"");
            s.close();
            s = null;
            PreparedStatement ps = conn.prepareStatement(""INSERT INTO DOWNLOADFILES "" + ""(name,targetpath,size,fnkey,enabled,state,downloadaddedtime,downloadstartedtime,downloadfinishedtime,"" + ""retries,lastdownloadstoptime,gqid,filelistfilesha) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)"");
            for (Iterator i = downloadFiles.iterator(); i.hasNext(); ) {
                FrostDownloadItem dlItem = (FrostDownloadItem) i.next();
                int ix = 1;
                ps.setString(ix++, dlItem.getFilename());
                ps.setString(ix++, dlItem.getTargetPath());
                ps.setLong(ix++, (dlItem.getFileSize() == null ? 0 : dlItem.getFileSize().longValue()));
                ps.setString(ix++, dlItem.getKey());
                ps.setBoolean(ix++, (dlItem.isEnabled() == null ? true : dlItem.isEnabled().booleanValue()));
                ps.setInt(ix++, dlItem.getState());
                ps.setLong(ix++, dlItem.getDownloadAddedTime());
                ps.setLong(ix++, dlItem.getDownloadStartedTime());
                ps.setLong(ix++, dlItem.getDownloadFinishedTime());
                ps.setInt(ix++, dlItem.getRetries());
                ps.setLong(ix++, dlItem.getLastDownloadStopTime());
                ps.setString(ix++, dlItem.getGqIdentifier());
                ps.setString(ix++, dlItem.getFileListFileObject() == null ? null : dlItem.getFileListFileObject().getSha());
                ps.executeUpdate();
            }
            ps.close();
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Throwable t) {
            logger.log(Level.SEVERE, ""Exception during save"", t);
            try {
                conn.rollback();
            } catch (Throwable t1) {
                logger.log(Level.SEVERE, ""Exception during rollback"", t1);
            }
            try {
                conn.setAutoCommit(true);
            } catch (Throwable t1) {
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(conn);
        }
    }
","    public static void main(String[] args) throws Exception {
        final URL url = new URL(""http://www.ebi.ac.uk/Tools/webservices/psicquic/registry/registry?action=ACTIVE&format=txt"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        Map<String, String> psiqcuicServices = new HashMap<String, String>();
        while ((str = in.readLine()) != null) {
            final int idx = str.indexOf('=');
            psiqcuicServices.put(str.substring(0, idx), str.substring(idx + 1, str.length()));
        }
        in.close();
        System.out.println(""Found "" + psiqcuicServices.size() + "" active service(s)."");
        for (Object o : psiqcuicServices.keySet()) {
            String serviceName = (String) o;
            String serviceUrl = psiqcuicServices.get(serviceName);
            System.out.println(serviceName + "" -> "" + serviceUrl);
            UniversalPsicquicClient client = new UniversalPsicquicClient(serviceUrl);
            try {
                SearchResult<?> result = client.getByInteractor(""brca2"", 0, 50);
                System.out.println(""Interactions found: "" + result.getTotalCount());
                for (BinaryInteraction binaryInteraction : result.getData()) {
                    String interactorIdA = binaryInteraction.getInteractorA().getIdentifiers().iterator().next().getIdentifier();
                    String interactorIdB = binaryInteraction.getInteractorB().getIdentifiers().iterator().next().getIdentifier();
                    String interactionAc = ""-"";
                    if (!binaryInteraction.getInteractionAcs().isEmpty()) {
                        CrossReference cr = (CrossReference) binaryInteraction.getInteractionAcs().iterator().next();
                        interactionAc = cr.getIdentifier();
                    }
                    System.out.println(""\tInteraction ("" + interactionAc + ""): "" + interactorIdA + "" interacts with "" + interactorIdB);
                }
            } catch (Throwable e) {
                System.err.println(""Service is down! "" + serviceName + ""("" + serviceUrl + "")"");
            }
        }
    }
",False
900931,978930,1959933,"    public static String encode(String arg) {
        if (arg == null) {
            arg = """";
        }
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(arg.getBytes(JavaCenterHome.JCH_CHARSET));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return toHex(md5.digest());
    }
","    public String plainStringToMD5(String input) {
        MessageDigest md = null;
        byte[] byteHash = null;
        StringBuffer resultString = new StringBuffer();
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.exit(-1);
        }
        md.reset();
        md.update(input.getBytes());
        byteHash = md.digest();
        for (int i = 0; i < byteHash.length; i++) {
            resultString.append(Integer.toHexString(0xFF & byteHash[i]));
        }
        return (resultString.toString());
    }
",True
900932,13405484,21234510,"    public boolean send(String number, String message) throws IOException {
        init();
        message = message.substring(0, Math.min(MAX_PAYLOAD, message.length()));
        message = message.replace('\r', ' ');
        message = message.replace('\n', ' ');
        ActualFormParameters params = new ActualFormParameters();
        String strippedNumber = strip(number);
        ActualFormParameter number1Param;
        ActualFormParameter number2Param;
        if (strippedNumber.startsWith(""00"")) strippedNumber = ""+"" + strippedNumber.substring(2); else if (strippedNumber.startsWith(""0"")) strippedNumber = ""+49"" + strippedNumber.substring(1);
        number1Param = new ActualFormParameter(number1InputElement.getName(), strippedNumber.substring(0, 6));
        number2Param = new ActualFormParameter(number2InputElement.getName(), strippedNumber.substring(6));
        params.add(number1Param);
        params.add(number2Param);
        ActualFormParameter messageParam = new ActualFormParameter(messageInputElement.getName(), message);
        params.add(messageParam);
        ActualFormParameter letterCountParam = new ActualFormParameter(letterCountInputElement.getName(), """" + (MAX_PAYLOAD - message.length()));
        params.add(letterCountParam);
        form.addDefaultParametersTo(params);
        Reader r = form.submitForm(params, form.getNetscapeRequestProperties());
        String result = getStringFromReader(r);
        String pattern = ""<meta http-equiv = \""refresh\"" content=\""1; url="";
        int patternIndex = result.indexOf(pattern);
        if (patternIndex < 0) return false;
        int end = result.lastIndexOf(""\"">"");
        if (end < 0) return false;
        String url = result.substring(patternIndex + pattern.length(), end);
        result = getStringFromReader(new InputStreamReader(new URL(url).openStream()));
        return result.indexOf(""wurde erfolgreich verschickt"") >= 0;
    }
","    public static void zip(String destination, String folder) {
        File fdir = new File(folder);
        File[] files = fdir.listFiles();
        PrintWriter stdout = new PrintWriter(System.out, true);
        int read = 0;
        FileInputStream in;
        byte[] data = new byte[1024];
        try {
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(destination));
            out.setMethod(ZipOutputStream.DEFLATED);
            for (int i = 0; i < files.length; i++) {
                try {
                    stdout.println(files[i].getName());
                    ZipEntry entry = new ZipEntry(files[i].getName());
                    in = new FileInputStream(files[i].getPath());
                    out.putNextEntry(entry);
                    while ((read = in.read(data, 0, 1024)) != -1) {
                        out.write(data, 0, read);
                    }
                    out.closeEntry();
                    in.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            out.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",False
900933,10318835,5373841,"    public static synchronized String Encrypt(String plaintextPassword) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (Exception error) {
            throw new Exception(error.getMessage());
        }
        try {
            md.update(plaintextPassword.getBytes(""UTF-8""));
        } catch (Exception e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    public static String encryptPassword(String password) throws PasswordException {
        String hash = null;
        if (password != null && !password.equals("""")) {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(password.getBytes(""UTF-8""));
                byte raw[] = md.digest();
                hash = String.valueOf(Base64Coder.encode(raw));
            } catch (NoSuchAlgorithmException nsae) {
                throw new PasswordException(PasswordException.SYSTEM_ERROR);
            } catch (UnsupportedEncodingException uee) {
                throw new PasswordException(PasswordException.SYSTEM_ERROR);
            }
        }
        return hash;
    }
",True
900934,2676364,10359449,"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    protected Class findClass(String name) throws ClassNotFoundException {
        String classFile = name.replace('.', '/') + "".class"";
        InputStream classInputStream = null;
        if (this.extensionJars != null) {
            for (int i = 0; i < this.extensionJars.length; i++) {
                JarFile extensionJar = this.extensionJars[i];
                JarEntry jarEntry = extensionJar.getJarEntry(classFile);
                if (jarEntry != null) {
                    try {
                        classInputStream = extensionJar.getInputStream(jarEntry);
                    } catch (IOException ex) {
                        throw new ClassNotFoundException(""Couldn't read class "" + name, ex);
                    }
                }
            }
        }
        if (classInputStream == null) {
            URL url = getResource(classFile);
            if (url == null) {
                throw new ClassNotFoundException(""Class "" + name);
            }
            try {
                classInputStream = url.openStream();
            } catch (IOException ex) {
                throw new ClassNotFoundException(""Couldn't read class "" + name, ex);
            }
        }
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            BufferedInputStream in = new BufferedInputStream(classInputStream);
            byte[] buffer = new byte[8096];
            int size;
            while ((size = in.read(buffer)) != -1) {
                out.write(buffer, 0, size);
            }
            in.close();
            return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain);
        } catch (IOException ex) {
            throw new ClassNotFoundException(""Class "" + name, ex);
        }
    }
",False
900935,1831679,5021563,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Account acc = (Account) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_ACCOUNT""));
            pst.setString(1, acc.getName());
            pst.setString(2, acc.getAddress());
            pst.setInt(3, acc.getCurrency());
            pst.setInt(4, acc.getMainContact());
            pst.setBoolean(5, acc.isArchived());
            pst.setInt(6, acc.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
","    private String AddAction(ResultSet node, String modo) throws SQLException {
        Connection cn = null;
        Connection cndef = null;
        String schema = boRepository.getDefaultSchemaName(boApplication.getDefaultApplication()).toLowerCase();
        try {
            cn = this.getRepositoryConnection(p_ctx.getApplication(), p_ctx.getBoSession().getRepository().getName(), 1);
            cndef = this.getRepositoryConnection(p_ctx.getApplication(), p_ctx.getBoSession().getRepository().getName(), 2);
            String dml = null;
            String objecttype = node.getString(""OBJECTTYPE"");
            if (objecttype.equalsIgnoreCase(""T"")) {
                boolean exists = existsTable(p_ctx, schema, node.getString(""OBJECTNAME"").toLowerCase());
                String[] sysflds = { ""SYS_USER"", ""SYS_ICN"", ""SYS_DTCREATE"", ""SYS_DTSAVE"", ""SYS_ORIGIN"" };
                String[] sysfdef = { ""VARCHAR(25)"", ""NUMERIC(7)"", ""TIMESTAMP DEFAULT now()"", ""TIMESTAMP"", ""VARCHAR(30)"" };
                String[] sysftyp = { ""C"", ""N"", ""D"", ""D"", ""C"" };
                String[] sysfsiz = { ""25"", ""7"", """", """", ""30"" };
                String[] sysfndef = { """", """", """", """", """" };
                String[] sysfdes = { """", """", """", """", """" };
                if (!exists && !modo.equals(""3"")) {
                    dml = ""CREATE TABLE "" + node.getString(""OBJECTNAME"") + "" ("";
                    for (int i = 0; i < sysflds.length; i++) {
                        dml += (sysflds[i] + "" "" + sysfdef[i] + ((i < (sysflds.length - 1)) ? "","" : "")""));
                    }
                    String vt = node.getString(""OBJECTNAME"");
                    if (node.getString(""SCHEMA"").equals(""DEF"")) {
                        vt = ""NGD_"" + vt;
                    } else if (node.getString(""SCHEMA"").equals(""SYS"")) {
                        vt = ""SYS_"" + vt;
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
                if (modo.equals(""3"") && exists) {
                    executeDDL(""DROP TABLE "" + node.getString(""OBJECTNAME""), node.getString(""SCHEMA""));
                    CallableStatement call = cndef.prepareCall(""DELETE FROM NGTDIC WHERE TABLENAME=?"");
                    call.setString(1, node.getString(""OBJECTNAME""));
                    call.executeUpdate();
                    call.close();
                }
                checkDicFields(node.getString(""OBJECTNAME""), node.getString(""SCHEMA""), sysflds, sysftyp, sysfsiz, sysfndef, sysfdes);
            }
            if (objecttype.equalsIgnoreCase(""F"")) {
                boolean fldchg = false;
                boolean fldexi = false;
                PreparedStatement pstm = cn.prepareStatement(""select column_name,udt_name,character_maximum_length,numeric_precision,numeric_scale from information_schema.columns"" + ""  where table_name=? and column_name=? and table_schema=?"");
                pstm.setString(1, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(3, schema);
                ResultSet rslt = pstm.executeQuery();
                if (rslt.next()) {
                    int fieldsiz = rslt.getInt(3);
                    int fielddec = rslt.getInt(5);
                    if ("",C,N,"".indexOf("","" + getNgtFieldTypeFromDDL(rslt.getString(2)) + "","") != -1) {
                        if (getNgtFieldTypeFromDDL(rslt.getString(2)).equals(""N"")) {
                            fieldsiz = rslt.getInt(4);
                        }
                        if (fielddec != 0) {
                            if (!(fieldsiz + "","" + fielddec).equals(node.getString(""FIELDSIZE""))) {
                                fldchg = true;
                            }
                        } else {
                            if (!((fieldsiz == 0) && ((node.getString(""FIELDSIZE"") == null) || (node.getString(""FIELDSIZE"").length() == 0)))) {
                                if (!("""" + fieldsiz).equals(node.getString(""FIELDSIZE""))) {
                                    fldchg = true;
                                }
                            }
                        }
                    }
                    fldexi = true;
                } else {
                    fldexi = false;
                }
                rslt.close();
                pstm.close();
                boolean drop = false;
                if ((""20"".indexOf(modo) != -1) && !fldexi) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" add \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                } else if ((""20"".indexOf(modo) != -1) && fldexi && fldchg) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" ALTER COLUMN \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                } else if (modo.equals(""3"") && fldexi) {
                    dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" drop  COLUMN \"""" + node.getString(""OBJECTNAME"").toLowerCase() + ""\"" "";
                    String sql = ""SELECT tc.constraint_name,tc.constraint_type"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name = ?"" + "" AND kcu.column_name = ?"" + "" and tc.table_schema=?"";
                    PreparedStatement pstmrelc = cn.prepareStatement(sql);
                    pstmrelc.setString(1, node.getString(""TABLENAME"").toLowerCase());
                    pstmrelc.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                    pstmrelc.setString(3, schema);
                    ResultSet rsltrelc = pstmrelc.executeQuery();
                    while (rsltrelc.next()) {
                        String constname = rsltrelc.getString(1);
                        String consttype = rsltrelc.getString(2);
                        PreparedStatement pstmdic = cndef.prepareStatement(""DELETE FROM NGTDIC WHERE TABLENAME=? AND OBJECTTYPE=? AND OBJECTNAME=?"");
                        pstmdic.setString(1, node.getString(""TABLENAME""));
                        pstmdic.setString(2, consttype.equals(""R"") ? ""FK"" : ""PK"");
                        pstmdic.setString(3, constname);
                        int nrecs = pstmdic.executeUpdate();
                        pstm.close();
                        executeDDL(""ALTER TABLE "" + node.getString(""TABLENAME"") + "" DROP CONSTRAINT "" + constname, node.getString(""SCHEMA""));
                    }
                    rsltrelc.close();
                    pstmrelc.close();
                }
                if ((dml != null) && (dml.length() > 0) && !modo.equals(""3"")) {
                    String mfield = node.getString(""MACROFIELD"");
                    if ((mfield != null) && !(!mfield.equals(""TEXTOLIVRE"") && !mfield.equals(""NUMEROLIVRE"") && !mfield.equals(""TEXT"") && !mfield.equals(""BLOB"") && !mfield.equals(""MDATA""))) {
                        String ngtft = """";
                        if (mfield.equals(""TEXTOLIVRE"")) {
                            ngtft = ""C"";
                        } else if (mfield.equals(""NUMEROLIVRE"")) {
                            ngtft = ""N"";
                        } else if (mfield.equals(""RAW"")) {
                            ngtft = ""RAW"";
                        } else if (mfield.equals(""TIMESTAMP"")) {
                            ngtft = ""TIMESTAMP"";
                        } else if (mfield.equals(""MDATA"")) {
                            ngtft = ""D"";
                        } else if (mfield.equals(""TEXT"")) {
                            ngtft = ""CL"";
                        } else if (mfield.equals(""BLOB"")) {
                            ngtft = ""BL"";
                        }
                        dml += getDDLFieldFromNGT(ngtft, node.getString(""FIELDSIZE""));
                    } else if ((mfield != null) && (mfield.length() > 0)) {
                        dml += getMacrofieldDef(cndef, node.getString(""MACROFIELD""));
                    } else {
                        dml += getDDLFieldFromNGT(node.getString(""FIELDTYPE""), node.getString(""FIELDSIZE""));
                    }
                }
                String[] flds = new String[1];
                flds[0] = node.getString(""OBJECTNAME"");
                if (dml != null) {
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.equalsIgnoreCase(""V"")) {
                String viewText = null;
                PreparedStatement pstmrelc = cn.prepareStatement(""SELECT view_definition FROM information_schema.views WHERE table_name=? "" + ""and table_schema=?"");
                pstmrelc.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstmrelc.setString(2, schema.toLowerCase());
                ResultSet rsltrelc = pstmrelc.executeQuery();
                boolean exists = false;
                if (rsltrelc.next()) {
                    exists = true;
                    viewText = rsltrelc.getString(1);
                    viewText = viewText.substring(0, viewText.length() - 1);
                }
                rsltrelc.close();
                pstmrelc.close();
                if (!modo.equals(""3"")) {
                    String vExpression = node.getString(""EXPRESSION"");
                    if (!vExpression.toLowerCase().equals(viewText)) {
                        dml = ""CREATE OR REPLACE VIEW \"""" + node.getString(""OBJECTNAME"") + ""\"" AS \n"" + vExpression;
                        executeDDL(dml, node.getString(""SCHEMA""));
                    }
                } else {
                    if (exists) {
                        dml = ""DROP VIEW "" + node.getString(""OBJECTNAME"");
                        executeDDL(dml, node.getString(""SCHEMA""));
                        CallableStatement call = cndef.prepareCall(""DELETE FROM NGTDIC WHERE TABLENAME=?"");
                        call.setString(1, node.getString(""OBJECTNAME""));
                        call.executeUpdate();
                        call.close();
                    }
                }
            }
            if (objecttype.startsWith(""PCK"")) {
                String templatestr = node.getString(""EXPRESSION"");
                String bstr = ""/*begin_package*/"";
                String estr = ""/*end_package*/"";
                if (""02"".indexOf(modo) != -1) {
                    if (templatestr.indexOf(bstr) != -1) {
                        int defpos;
                        dml = templatestr.substring(templatestr.indexOf(bstr), defpos = templatestr.indexOf(estr));
                        dml = ""create or replace package "" + node.getString(""OBJECTNAME"") + "" is \n"" + dml + ""end "" + node.getString(""OBJECTNAME"") + "";\n"";
                        executeDDL(dml, node.getString(""SCHEMA""));
                        bstr = ""/*begin_package_body*/"";
                        estr = ""/*end_package_body*/"";
                        if (templatestr.indexOf(bstr, defpos) != -1) {
                            dml = templatestr.substring(templatestr.indexOf(bstr, defpos), templatestr.indexOf(estr, defpos));
                            dml = ""create or replace package body "" + node.getString(""OBJECTNAME"") + "" is \n"" + dml + ""end "" + node.getString(""OBJECTNAME"") + "";\n"";
                            executeDDL(dml, node.getString(""SCHEMA""));
                        }
                    } else {
                    }
                }
            }
            if (objecttype.startsWith(""PK"") || objecttype.startsWith(""UN"")) {
                String sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name = ?"" + "" AND tc.constraint_name = ?"" + "" and tc.table_schema=? order by ordinal_position"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(2, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(3, schema.toLowerCase());
                boolean isunique = objecttype.startsWith(""UN"");
                ResultSet rslt = pstm.executeQuery();
                boolean exists = false;
                StringBuffer expression = new StringBuffer();
                while (rslt.next()) {
                    if (exists) {
                        expression.append(',');
                    }
                    exists = true;
                    expression.append(rslt.getString(1));
                }
                boolean diff = !expression.toString().toUpperCase().equals(node.getString(""EXPRESSION""));
                rslt.close();
                pstm.close();
                if ((modo.equals(""3"") || diff) && exists) {
                    sql = ""SELECT tc.constraint_name,tc.table_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE ccu.constraint_name = ?"" + "" and tc.table_schema=?"";
                    PreparedStatement pstmrefs = cn.prepareStatement(sql);
                    pstmrefs.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                    pstmrefs.setString(2, schema.toLowerCase());
                    ResultSet rsltrefs = pstmrefs.executeQuery();
                    while (rsltrefs.next()) {
                        PreparedStatement pstmdelref = cndef.prepareStatement(""DELETE NGTDIC WHERE OBJECTNAME=? AND SCHEMA=? AND TABLENAME=? AND OBJECTTYPE='FK'"");
                        pstmdelref.setString(1, rsltrefs.getString(1));
                        pstmdelref.setString(2, node.getString(""SCHEMA""));
                        pstmdelref.setString(3, rsltrefs.getString(2));
                        pstmdelref.executeUpdate();
                        pstmdelref.close();
                        executeDDL(""alter table "" + rsltrefs.getString(2) + ""  drop constraint "" + rsltrefs.getString(1), node.getString(""SCHEMA""));
                    }
                    rsltrefs.close();
                    pstmrefs.close();
                    String insql = ""'"" + node.getString(""EXPRESSION"").toLowerCase().replaceAll("","", ""\\',\\'"") + ""'"";
                    sql = ""SELECT tc.constraint_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.table_name=? and "" + ""kcu.column_name in ("" + insql + "")"" + "" and tc.table_schema=?"";
                    pstmrefs = cn.prepareStatement(sql);
                    pstmrefs.setString(1, node.getString(""TABLENAME"").toLowerCase());
                    pstmrefs.setString(2, schema.toLowerCase());
                    rsltrefs = pstmrefs.executeQuery();
                    while (rsltrefs.next()) {
                        PreparedStatement pstmdelref = cndef.prepareStatement(""DELETE NGTDIC WHERE OBJECTNAME=? AND SCHEMA=? AND TABLENAME=? AND OBJECTTYPE='FK'"");
                        pstmdelref.setString(1, rsltrefs.getString(1));
                        pstmdelref.setString(2, node.getString(""SCHEMA""));
                        pstmdelref.setString(3, node.getString(""TABLENAME""));
                        pstmdelref.executeUpdate();
                        pstmdelref.close();
                        executeDDL(""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + rsltrefs.getString(1), node.getString(""SCHEMA""));
                    }
                    rsltrefs.close();
                    pstmrefs.close();
                    if (exists && diff) {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + node.getString(""OBJECTNAME"");
                        try {
                            executeDDL(dml, node.getString(""SCHEMA""));
                        } catch (Exception e) {
                            logger.warn(LoggerMessageLocalizer.getMessage(""ERROR_EXCUTING_DDL"") + "" ("" + dml + "") "" + e.getMessage());
                        }
                    }
                }
                if (!modo.equals(""3"") && (!exists || diff)) {
                    if (isunique) {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" add constraint "" + node.getString(""OBJECTNAME"") + "" unique ("" + node.getString(""EXPRESSION"") + "")"";
                    } else {
                        dml = ""alter table "" + node.getString(""TABLENAME"") + "" add primary key ("" + node.getString(""EXPRESSION"") + "")"";
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.startsWith(""FK"")) {
                String sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.constraint_name=?"" + "" and tc.table_name=?"" + "" and tc.table_schema=? order by ordinal_position"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(2, node.getString(""TABLENAME"").toLowerCase());
                pstm.setString(3, schema.toLowerCase());
                ResultSet rslt = pstm.executeQuery();
                boolean exists = false;
                String cExpress = """";
                String express = node.getString(""EXPRESSION"");
                if (rslt.next()) {
                    exists = true;
                    if (cExpress.length() > 0) cExpress += "","";
                    cExpress += rslt.getString(1);
                }
                rslt.close();
                pstm.close();
                if (exists && !express.equals(cExpress)) {
                    dml = ""alter table "" + node.getString(""TABLENAME"") + "" drop constraint "" + node.getString(""OBJECTNAME"");
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
                if (!modo.equals(""3"") && (!exists || !express.equals(cExpress))) {
                    dml = ""alter table "" + node.getString(""TABLENAME"") + "" add constraint "" + node.getString(""OBJECTNAME"") + "" foreign key ("" + node.getString(""EXPRESSION"") + "") references "" + node.getString(""TABLEREFERENCE"") + ""("" + node.getString(""FIELDREFERENCE"") + "")"";
                    executeDDL(dml, node.getString(""SCHEMA""));
                }
            }
            if (objecttype.startsWith(""IDX"")) {
                boolean unflag = false;
                String sql = ""SELECT n.nspname"" + "" FROM pg_catalog.pg_class c"" + "" JOIN pg_catalog.pg_index i ON i.indexrelid = c.oid"" + "" JOIN pg_catalog.pg_class c2 ON i.indrelid = c2.oid"" + "" LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner"" + "" LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace"" + "" where c.relname=? and c.relkind='i' and n.nspname=?"";
                PreparedStatement pstm = cn.prepareStatement(sql);
                pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                pstm.setString(2, schema.toLowerCase());
                ResultSet rslt = pstm.executeQuery();
                boolean drop = false;
                boolean exists = false;
                boolean dbunflag = false;
                String oldexpression = """";
                String newexpression = """";
                if (rslt.next()) {
                    exists = true;
                    if ((unflag && !(dbunflag = rslt.getString(1).equals(""UNIQUE"")))) {
                        drop = true;
                    }
                    rslt.close();
                    pstm.close();
                    sql = ""SELECT kcu.column_name"" + "" FROM information_schema.table_constraints tc"" + "" LEFT JOIN information_schema.key_column_usage kcu"" + "" ON tc.constraint_catalog = kcu.constraint_catalog"" + "" AND tc.constraint_schema = kcu.constraint_schema"" + "" AND tc.constraint_name = kcu.constraint_name"" + "" LEFT JOIN information_schema.referential_constraints rc"" + "" ON tc.constraint_catalog = rc.constraint_catalog"" + "" AND tc.constraint_schema = rc.constraint_schema"" + "" AND tc.constraint_name = rc.constraint_name"" + "" LEFT JOIN information_schema.constraint_column_usage ccu"" + "" ON rc.unique_constraint_catalog = ccu.constraint_catalog"" + "" AND rc.unique_constraint_schema = ccu.constraint_schema"" + "" AND rc.unique_constraint_name = ccu.constraint_name"" + "" WHERE tc.constraint_name=?"" + "" and tc.table_name=?"" + "" and tc.table_schema=? and tc.constraint_type='UNIQUE'"";
                    pstm = cn.prepareStatement(sql);
                    pstm.setString(1, node.getString(""OBJECTNAME"").toLowerCase());
                    pstm.setString(2, node.getString(""TABLENAME"").toLowerCase());
                    pstm.setString(3, schema.toLowerCase());
                    rslt = pstm.executeQuery();
                    while (rslt.next()) {
                        oldexpression += (((oldexpression.length() > 0) ? "","" : """") + rslt.getString(1));
                    }
                    rslt.close();
                    pstm.close();
                } else {
                    rslt.close();
                    pstm.close();
                }
                String aux = node.getString(""EXPRESSION"");
                String[] nexo;
                if (aux != null) {
                    nexo = node.getString(""EXPRESSION"").split("","");
                } else {
                    nexo = new String[0];
                }
                for (byte i = 0; i < nexo.length; i++) {
                    newexpression += (((newexpression.length() > 0) ? "","" : """") + ((nexo[i]).toUpperCase().trim()));
                }
                if (!drop) {
                    drop = (!newexpression.equals(oldexpression)) && !oldexpression.equals("""");
                }
                if (exists && (drop || modo.equals(""3""))) {
                    if (!dbunflag) {
                        dml = ""DROP INDEX "" + node.getString(""OBJECTNAME"");
                    } else {
                        dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" DROP CONSTRAINT "" + node.getString(""OBJECTNAME"");
                    }
                    executeDDL(dml, node.getString(""SCHEMA""));
                    exists = false;
                }
                if (!exists && !modo.equals(""3"")) {
                    if (!node.getString(""OBJECTNAME"").equals("""") && !newexpression.equals("""")) {
                        if (!unflag) {
                            dml = ""CREATE INDEX "" + node.getString(""OBJECTNAME"") + "" ON "" + node.getString(""TABLENAME"") + ""("" + newexpression + "")"";
                        } else {
                            dml = ""ALTER TABLE "" + node.getString(""TABLENAME"") + "" ADD CONSTRAINT "" + node.getString(""OBJECTNAME"") + "" UNIQUE ("" + newexpression + "")"";
                        }
                        executeDDL(dml, node.getString(""SCHEMA""));
                    }
                }
            }
            updateDictionaryTable(node, modo);
            return dml;
        } catch (SQLException e) {
            cn.rollback();
            cndef.rollback();
            throw (e);
        } finally {
        }
    }
",True
900936,17551920,2109483,"    @Override
    public void execute() throws ProcessorExecutionException {
        try {
            if (getSource().getPaths() == null || getSource().getPaths().size() == 0 || getDestination().getPaths() == null || getDestination().getPaths().size() == 0) {
                throw new ProcessorExecutionException(""No input and/or output paths specified."");
            }
            String temp_dir_prefix = getDestination().getPath().getParent().toString() + ""/bcc_"" + getDestination().getPath().getName() + ""_"";
            SequenceTempDirMgr dirMgr = new SequenceTempDirMgr(temp_dir_prefix, context);
            dirMgr.setSeqNum(0);
            Path tmpDir;
            System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": Transform input to AdjSetVertex"");
            Transformer transformer = new OutAdjVertex2AdjSetVertexTransformer();
            transformer.setConf(context);
            transformer.setSrcPath(getSource().getPath());
            tmpDir = dirMgr.getTempDir();
            transformer.setDestPath(tmpDir);
            transformer.setMapperNum(getMapperNum());
            transformer.setReducerNum(getReducerNum());
            transformer.execute();
            System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": Transform input to LabeledAdjSetVertex"");
            Vertex2LabeledTransformer l_transformer = new Vertex2LabeledTransformer();
            l_transformer.setConf(context);
            l_transformer.setSrcPath(tmpDir);
            tmpDir = dirMgr.getTempDir();
            l_transformer.setDestPath(tmpDir);
            l_transformer.setMapperNum(getMapperNum());
            l_transformer.setReducerNum(getReducerNum());
            l_transformer.setOutputValueClass(LabeledAdjSetVertex.class);
            l_transformer.execute();
            Graph src;
            Graph dest;
            Path path_to_remember = tmpDir;
            System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": SpanningTreeRootChoose"");
            src = new Graph(Graph.defaultGraph());
            src.setPath(tmpDir);
            dest = new Graph(Graph.defaultGraph());
            tmpDir = dirMgr.getTempDir();
            dest.setPath(tmpDir);
            GraphAlgorithm choose_root = new SpanningTreeRootChoose();
            choose_root.setConf(context);
            choose_root.setSource(src);
            choose_root.setDestination(dest);
            choose_root.setMapperNum(getMapperNum());
            choose_root.setReducerNum(getReducerNum());
            choose_root.execute();
            Path the_file = new Path(tmpDir.toString() + ""/part-00000"");
            FileSystem client = FileSystem.get(context);
            if (!client.exists(the_file)) {
                throw new ProcessorExecutionException(""Did not find the chosen vertex in "" + the_file.toString());
            }
            FSDataInputStream input_stream = client.open(the_file);
            ByteArrayOutputStream output_stream = new ByteArrayOutputStream();
            IOUtils.copyBytes(input_stream, output_stream, context, false);
            String the_line = output_stream.toString();
            String root_vertex_id = the_line.substring(SpanningTreeRootChoose.SPANNING_TREE_ROOT.length()).trim();
            input_stream.close();
            output_stream.close();
            System.out.println(""++++++> Chosen the root of spanning tree = "" + root_vertex_id);
            while (true) {
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "" Generate the spanning tree rooted at : ("" + root_vertex_id + "") from "" + tmpDir);
                src = new Graph(Graph.defaultGraph());
                src.setPath(path_to_remember);
                tmpDir = dirMgr.getTempDir();
                dest = new Graph(Graph.defaultGraph());
                dest.setPath(tmpDir);
                path_to_remember = tmpDir;
                GraphAlgorithm spanning = new SpanningTreeGenerate();
                spanning.setConf(context);
                spanning.setSource(src);
                spanning.setDestination(dest);
                spanning.setMapperNum(getMapperNum());
                spanning.setReducerNum(getReducerNum());
                spanning.setParameter(ConstantLabels.ROOT_ID, root_vertex_id);
                spanning.execute();
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "" Test spanning convergence"");
                src = new Graph(Graph.defaultGraph());
                src.setPath(tmpDir);
                tmpDir = dirMgr.getTempDir();
                dest = new Graph(Graph.defaultGraph());
                dest.setPath(tmpDir);
                GraphAlgorithm conv_tester = new SpanningConvergenceTest();
                conv_tester.setConf(context);
                conv_tester.setSource(src);
                conv_tester.setDestination(dest);
                conv_tester.setMapperNum(getMapperNum());
                conv_tester.setReducerNum(getReducerNum());
                conv_tester.execute();
                long vertexes_out_of_tree = MRConsoleReader.getMapOutputRecordNum(conv_tester.getFinalStatus());
                System.out.println(""++++++> number of vertexes out of the spanning tree = "" + vertexes_out_of_tree);
                if (vertexes_out_of_tree == 0) {
                    break;
                }
            }
            System.out.println(""++++++> From spanning tree to sets of edges"");
            src = new Graph(Graph.defaultGraph());
            src.setPath(path_to_remember);
            tmpDir = dirMgr.getTempDir();
            dest = new Graph(Graph.defaultGraph());
            dest.setPath(tmpDir);
            GraphAlgorithm tree2set = new Tree2EdgeSet();
            tree2set.setConf(context);
            tree2set.setSource(src);
            tree2set.setDestination(dest);
            tree2set.setMapperNum(getMapperNum());
            tree2set.setReducerNum(getReducerNum());
            tree2set.execute();
            long map_input_records_num = -1;
            long map_output_records_num = -2;
            Stack<Path> expanding_stack = new Stack<Path>();
            do {
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": EdgeSetMinorJoin"");
                GraphAlgorithm minorjoin = new EdgeSetMinorJoin();
                minorjoin.setConf(context);
                src = new Graph(Graph.defaultGraph());
                src.setPath(tmpDir);
                dest = new Graph(Graph.defaultGraph());
                tmpDir = dirMgr.getTempDir();
                dest.setPath(tmpDir);
                minorjoin.setSource(src);
                minorjoin.setDestination(dest);
                minorjoin.setMapperNum(getMapperNum());
                minorjoin.setReducerNum(getReducerNum());
                minorjoin.execute();
                expanding_stack.push(tmpDir);
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": EdgeSetJoin"");
                GraphAlgorithm join = new EdgeSetJoin();
                join.setConf(context);
                src = new Graph(Graph.defaultGraph());
                src.setPath(tmpDir);
                dest = new Graph(Graph.defaultGraph());
                tmpDir = dirMgr.getTempDir();
                dest.setPath(tmpDir);
                join.setSource(src);
                join.setDestination(dest);
                join.setMapperNum(getMapperNum());
                join.setReducerNum(getReducerNum());
                join.execute();
                map_input_records_num = MRConsoleReader.getMapInputRecordNum(join.getFinalStatus());
                map_output_records_num = MRConsoleReader.getMapOutputRecordNum(join.getFinalStatus());
                System.out.println(""++++++> map in/out : "" + map_input_records_num + ""/"" + map_output_records_num);
            } while (map_input_records_num != map_output_records_num);
            while (expanding_stack.size() > 0) {
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": EdgeSetExpand"");
                GraphAlgorithm expand = new EdgeSetExpand();
                expand.setConf(context);
                src = new Graph(Graph.defaultGraph());
                src.addPath(expanding_stack.pop());
                src.addPath(tmpDir);
                dest = new Graph(Graph.defaultGraph());
                tmpDir = dirMgr.getTempDir();
                dest.setPath(tmpDir);
                expand.setSource(src);
                expand.setDestination(dest);
                expand.setMapperNum(getMapperNum());
                expand.setReducerNum(getReducerNum());
                expand.execute();
                System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": EdgeSetMinorExpand"");
                GraphAlgorithm minorexpand = new EdgeSetMinorExpand();
                minorexpand.setConf(context);
                src = new Graph(Graph.defaultGraph());
                src.setPath(tmpDir);
                dest = new Graph(Graph.defaultGraph());
                tmpDir = dirMgr.getTempDir();
                dest.setPath(tmpDir);
                minorexpand.setSource(src);
                minorexpand.setDestination(dest);
                minorexpand.setMapperNum(getMapperNum());
                minorexpand.setReducerNum(getReducerNum());
                minorexpand.execute();
            }
            System.out.println(""++++++>"" + dirMgr.getSeqNum() + "": EdgeSetSummarize"");
            GraphAlgorithm summarize = new EdgeSetSummarize();
            summarize.setConf(context);
            src = new Graph(Graph.defaultGraph());
            src.setPath(tmpDir);
            dest = new Graph(Graph.defaultGraph());
            dest.setPath(getDestination().getPath());
            summarize.setSource(src);
            summarize.setDestination(dest);
            summarize.setMapperNum(getMapperNum());
            summarize.setReducerNum(getReducerNum());
            summarize.execute();
            dirMgr.deleteAll();
        } catch (IOException e) {
            throw new ProcessorExecutionException(e);
        } catch (IllegalAccessException e) {
            throw new ProcessorExecutionException(e);
        }
    }
","    @Override
    public LispObject execute(LispObject first, LispObject second) throws ConditionThrowable {
        Pathname zipfilePathname = coerceToPathname(first);
        byte[] buffer = new byte[4096];
        try {
            String zipfileNamestring = zipfilePathname.getNamestring();
            if (zipfileNamestring == null) return error(new SimpleError(""Pathname has no namestring: "" + zipfilePathname.writeToString()));
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfileNamestring));
            LispObject list = second;
            while (list != NIL) {
                Pathname pathname = coerceToPathname(list.CAR());
                String namestring = pathname.getNamestring();
                if (namestring == null) {
                    out.close();
                    File zipfile = new File(zipfileNamestring);
                    zipfile.delete();
                    return error(new SimpleError(""Pathname has no namestring: "" + pathname.writeToString()));
                }
                File file = new File(namestring);
                FileInputStream in = new FileInputStream(file);
                ZipEntry entry = new ZipEntry(file.getName());
                out.putNextEntry(entry);
                int n;
                while ((n = in.read(buffer)) > 0) out.write(buffer, 0, n);
                out.closeEntry();
                in.close();
                list = list.CDR();
            }
            out.close();
        } catch (IOException e) {
            return error(new LispError(e.getMessage()));
        }
        return zipfilePathname;
    }
",True
900937,6214331,22510494,"    public static void copyFile(File src, File dest) {
        try {
            FileInputStream in = new FileInputStream(src);
            FileOutputStream out = new FileOutputStream(dest);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(ioe);
        }
    }
","    public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException {
        if (_url == null || _url.length() <= 0) throw new IllegalArgumentException(""Url can not be null."");
        String temp = _url.toLowerCase();
        if (!temp.startsWith(""http://"") && !temp.startsWith(""https://"")) _url = ""http://"" + _url;
        _url = encodeURL(_url);
        HttpMethod method = null;
        if (_stringOrStream == null && (_params == null || _params.size() <= 0)) method = new GetMethod(_url); else method = new PostMethod(_url);
        HttpMethodParams methodParams = ((HttpMethodBase) method).getParams();
        if (methodParams == null) {
            methodParams = new HttpMethodParams();
            ((HttpMethodBase) method).setParams(methodParams);
        }
        if (_timeout < 0) methodParams.setSoTimeout(0); else methodParams.setSoTimeout(_timeout);
        if (_contentType != null && _contentType.length() > 0) {
            if (_headers == null) _headers = new HashMap<String, String>();
            _headers.put(""Content-Type"", _contentType);
        }
        if (_headers == null || !_headers.containsKey(""User-Agent"")) {
            if (_headers == null) _headers = new HashMap<String, String>();
            _headers.put(""User-Agent"", DEFAULT_USERAGENT);
        }
        if (_headers != null) {
            Iterator<Map.Entry<String, String>> iter = _headers.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry<String, String> entry = iter.next();
                method.setRequestHeader((String) entry.getKey(), (String) entry.getValue());
            }
        }
        if (method instanceof PostMethod && (_params != null && _params.size() > 0)) {
            Iterator<Map.Entry<String, String>> iter = _params.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry<String, String> entry = iter.next();
                ((PostMethod) method).addParameter((String) entry.getKey(), (String) entry.getValue());
            }
        }
        if (method instanceof EntityEnclosingMethod && _stringOrStream != null) {
            if (_stringOrStream instanceof InputStream) {
                RequestEntity entity = new InputStreamRequestEntity((InputStream) _stringOrStream);
                ((EntityEnclosingMethod) method).setRequestEntity(entity);
            } else {
                RequestEntity entity = new StringRequestEntity(_stringOrStream.toString(), _contentType, null);
                ((EntityEnclosingMethod) method).setRequestEntity(entity);
            }
        }
        HttpClient httpClient = new HttpClient(new org.apache.commons.httpclient.SimpleHttpConnectionManager());
        httpClient.getParams().setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);
        InputStream instream = null;
        try {
            int status = httpClient.executeMethod(method);
            if (status != HttpStatus.SC_OK) {
                LOG.warn(""Http Satus:"" + status + "",Url:"" + _url);
                if (status >= 500 && status < 600) throw new IOException(""Remote service<"" + _url + ""> respose a error, status:"" + status);
            }
            instream = method.getResponseBodyAsStream();
            IOUtils.copy(instream, _stream);
        } catch (IOException err) {
            LOG.error(""Failed to access "" + _url, err);
            throw err;
        } finally {
            IOUtils.closeQuietly(instream);
            if (method != null) method.releaseConnection();
        }
    }
",True
900938,4376758,18284812,"    public void setKey(String key) {
        MessageDigest md5;
        byte[] mdKey = new byte[32];
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(key.getBytes());
            byte[] digest = md5.digest();
            System.arraycopy(digest, 0, mdKey, 0, 16);
            System.arraycopy(digest, 0, mdKey, 16, 16);
        } catch (Exception e) {
            System.out.println(""MD5 not implemented, can't generate key out of string!"");
            System.exit(1);
        }
        setKey(mdKey);
    }
","    protected void discoverRegistryEntries() {
        DataSourceRegistry registry = this;
        try {
            ClassLoader loader = DataSetURI.class.getClassLoader();
            Enumeration<URL> urls;
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFactory.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerExtension(ss[0], ss[i], null);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerMimeType(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormat.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatter(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",False
900939,13725475,11504871,"    static String getMD5Hash(String str) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(str.getBytes());
        byte[] b = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            int v = (int) b[i];
            v = v < 0 ? 0x100 + v : v;
            String cc = Integer.toHexString(v);
            if (cc.length() == 1) sb.append('0');
            sb.append(cc);
        }
        return sb.toString();
    }
","    public static String encrypt(String password) throws NoSuchAlgorithmException {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""MD5"");
        d.reset();
        d.update(password.getBytes());
        byte[] cr = d.digest();
        return getString(cr).toLowerCase();
    }
",True
900940,13312539,647710,"    private void executeScript(SQLiteDatabase sqlDatabase, InputStream input) {
        StringWriter writer = new StringWriter();
        try {
            IOUtils.copy(input, writer);
        } catch (IOException e) {
            throw new ComixException(""Could not read the database script"", e);
        }
        String multipleSql = writer.toString();
        String[] split = multipleSql.split(""-- SCRIPT_SPLIT --"");
        for (String sql : split) {
            if (!sql.trim().equals("""")) {
                sqlDatabase.execSQL(sql);
            }
        }
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",True
900941,11572565,17366812,"    public static final boolean copy(File source, File target, boolean overwrite) {
        if (!overwrite && target.exists()) {
            LOGGER.error(""Target file exist and it not permitted to overwrite it !"");
            return false;
        }
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(target).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException e) {
            LOGGER.error(e.getLocalizedMessage());
            if (LOGGER.isDebugEnabled()) e.printStackTrace();
            return false;
        } catch (IOException e) {
            LOGGER.error(e.getLocalizedMessage());
            if (LOGGER.isDebugEnabled()) e.printStackTrace();
            return false;
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
            try {
                out.close();
            } catch (Exception e) {
            }
        }
        return true;
    }
","    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {
        InputStream input = null;
        BufferedOutputStream bos = null;
        File tempUnit = null;
        try {
            URL url = null;
            int total = 0;
            try {
                url = new URL(urlStr);
                input = url.openStream();
                URLConnection urlConnection;
                urlConnection = url.openConnection();
                total = urlConnection.getContentLength();
            } catch (IOException e) {
                throw new UnitTransportException(String.format(""Can't get remote file [%s]."", urlStr), e);
            }
            String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1);
            tempUnit = null;
            try {
                if (StringUtils.isNotEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = File.createTempFile(CommonUtil.getTempDir(), ""tempUnit"");
                File parent = tempUnit.getParentFile();
                FileUtils.forceMkdir(parent);
                if (!tempUnit.exists()) FileUtils.touch(tempUnit);
                bos = new BufferedOutputStream(new FileOutputStream(tempUnit));
            } catch (FileNotFoundException e) {
                throw new UnitTransportException(String.format(""Can't find temp file [%s]."", tempUnit.getAbsolutePath()), e);
            } catch (IOException e) {
                throw new UnitTransportException(String.format(""Can't create temp file [%s]."", tempUnit.getAbsolutePath()), e);
            } catch (DeployToolException e) {
                throw new UnitTransportException(String.format(""Error when create temp file [%s]."", tempUnit), e);
            }
            logger.info(String.format(""Use [%s] for http unit [%s]."", tempUnit.getAbsoluteFile(), urlStr));
            int size = -1;
            try {
                size = IOUtils.copy(input, bos);
                bos.flush();
            } catch (IOException e) {
                logger.info(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit));
            }
            if (size != total) throw new UnitTransportException(String.format(""The file size is not right when download http unit [%s]"", urlStr));
        } finally {
            if (input != null) IOUtils.closeQuietly(input);
            if (bos != null) IOUtils.closeQuietly(bos);
        }
        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));
        return tempUnit.getAbsolutePath();
    }
",True
900942,15376869,2092752,"    public static void writeToFile(final File file, final InputStream in) throws IOException {
        IOUtils.createFile(file);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(file);
            IOUtils.copyStream(in, fos);
        } finally {
            IOUtils.closeIO(fos);
        }
    }
","    public void save() {
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            public String getDescription() {
                return ""PDF File"";
            }

            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith("".pdf"");
            }
        });
        if (fc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File targetFile = fc.getSelectedFile();
        if (!targetFile.getName().toLowerCase().endsWith("".pdf"")) {
            targetFile = new File(targetFile.getParentFile(), targetFile.getName() + "".pdf"");
        }
        if (targetFile.exists()) {
            if (JOptionPane.showConfirmDialog(this, ""Do you want to overwrite the file?"") != JOptionPane.YES_OPTION) {
                return;
            }
        }
        try {
            final InputStream is = new FileInputStream(filename);
            try {
                final OutputStream os = new FileOutputStream(targetFile);
                try {
                    final byte[] buffer = new byte[32768];
                    for (int read; (read = is.read(buffer)) != -1; ) {
                        os.write(buffer, 0, read);
                    }
                } finally {
                    os.close();
                }
            } finally {
                is.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
900943,4085696,18810216,"    private static FTPClient getFtpClient(String ftpHost, String ftpUsername, String ftpPassword) throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.connect(ftpHost);
        int reply = ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            ftp.disconnect();
            return null;
        }
        if (!ftp.login(ftpUsername, ftpPassword)) {
            return null;
        }
        ftp.setFileType(FTP.BINARY_FILE_TYPE);
        ftp.enterLocalPassiveMode();
        return ftp;
    }
","    private void doIt() throws Throwable {
        int numCachedTiles = 0;
        try {
            List<MapTile> backTiles = new ArrayList<MapTile>();
            final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(south, west), new LatLngPoint(north, east));
            final String backMapGuid = ""gst"";
            final XFile dstDir = new XFile(new XFile(Configuration.getInstance().getPublicMapStorage().toString()), backMapGuid);
            dstDir.mkdir();
            for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) {
                final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z);
                final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z);
                for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) {
                    NASAMapTile tile = new NASAMapTile((int) x, (int) y, z);
                    XFile file = new XFile(dstDir, tile.toKeyString());
                    if (file.exists() && file.isFile()) continue;
                    backTiles.add(tile);
                }
            }
            logger.info(backTiles.size() + "" tiles to cache"");
            for (MapTile tile : backTiles) {
                InputStream in = null;
                OutputStream out = null;
                final URL url = new URL(tile.getPath());
                try {
                    int i = 4;
                    while (--i > 0) {
                        final XFile outFile = new XFile(dstDir, tile.toKeyString());
                        final URLConnection conn = url.openConnection();
                        if (conn == null || !conn.getContentType().startsWith(""image"")) {
                            logger.error(""onearth.jpl.nasa.gov service returns non-image file, "" + ""content-type='"" + conn.getContentType() + ""'"");
                            Thread.sleep(1000L * (long) Math.pow(2, 8 - i));
                            continue;
                        }
                        in = conn.getInputStream();
                        if (in != null) {
                            out = new XFileOutputStream(outFile);
                            IOUtils.copy(in, out);
                            break;
                        } else throw new IllegalStateException(""opened stream is null"");
                    }
                } finally {
                    if (out != null) {
                        out.flush();
                        out.close();
                    }
                    if (in != null) in.close();
                }
                if (++numCachedTiles % 10 == 0) {
                    logger.info(numCachedTiles + "" tiles cached"");
                    Thread.sleep(sleep);
                }
            }
        } catch (Throwable e) {
            logger.error(""map tile caching has failed: "", e);
            throw e;
        }
    }
",False
900944,7465588,3046106,"    protected Drawing loadDrawing(ProgressIndicator progress) throws IOException {
        Drawing drawing = createDrawing();
        if (getParameter(""datafile"") != null) {
            URL url = new URL(getDocumentBase(), getParameter(""datafile""));
            URLConnection uc = url.openConnection();
            if (uc instanceof HttpURLConnection) {
                ((HttpURLConnection) uc).setUseCaches(false);
            }
            int contentLength = uc.getContentLength();
            InputStream in = uc.getInputStream();
            try {
                if (contentLength != -1) {
                    in = new BoundedRangeInputStream(in);
                    ((BoundedRangeInputStream) in).setMaximum(contentLength + 1);
                    progress.setProgressModel((BoundedRangeModel) in);
                    progress.setIndeterminate(false);
                }
                BufferedInputStream bin = new BufferedInputStream(in);
                bin.mark(512);
                IOException formatException = null;
                for (InputFormat format : drawing.getInputFormats()) {
                    try {
                        bin.reset();
                    } catch (IOException e) {
                        uc = url.openConnection();
                        in = uc.getInputStream();
                        in = new BoundedRangeInputStream(in);
                        ((BoundedRangeInputStream) in).setMaximum(contentLength + 1);
                        progress.setProgressModel((BoundedRangeModel) in);
                        bin = new BufferedInputStream(in);
                        bin.mark(512);
                    }
                    try {
                        bin.reset();
                        format.read(bin, drawing, true);
                        formatException = null;
                        break;
                    } catch (IOException e) {
                        formatException = e;
                    }
                }
                if (formatException != null) {
                    throw formatException;
                }
            } finally {
                in.close();
            }
        }
        return drawing;
    }
","    public GGMunicipalities getListMunicipalities() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.geo.getListMunicipality""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGMunicipalities municipalities = JAXB.unmarshal(content, GGMunicipalities.class);
        return municipalities;
    }
",False
900945,15228322,20386915,"    public void createIndex(File indexDir) throws SearchLibException, IOException {
        if (!indexDir.mkdir()) throw new SearchLibException(""directory creation failed ("" + indexDir + "")"");
        InputStream is = null;
        FileWriter target = null;
        for (String resource : resources) {
            String res = rootPath + '/' + resource;
            is = getClass().getResourceAsStream(res);
            if (is == null) is = getClass().getResourceAsStream(""common"" + '/' + resource);
            if (is == null) throw new SearchLibException(""Unable to find resource "" + res);
            try {
                File f = new File(indexDir, resource);
                if (f.getParentFile() != indexDir) f.getParentFile().mkdirs();
                target = new FileWriter(f);
                IOUtils.copy(is, target);
            } finally {
                if (target != null) target.close();
                if (is != null) is.close();
            }
        }
    }
","    public static String uploadFile(String urlmsg, String path, String name) {
        try {
            System.out.println(""Sending: "" + urlmsg);
            URL url = new URL(urlmsg);
            if (url == null) {
                System.out.println(""Resource "" + urlmsg + "" not found"");
                return null;
            }
            File outFile = new File(path, name);
            FileOutputStream out = new FileOutputStream(outFile);
            InputStream in = url.openStream();
            byte[] buf = new byte[4 * 1024];
            int bytesRead;
            while ((bytesRead = in.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
            out.close();
            in.close();
            return path + name;
        } catch (Exception e) {
            throw new GROBIDServiceException(""An exception occured while running Grobid."", e);
        }
    }
",False
900946,810884,98309,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
","    public void readMESHDescriptorFileIntoFiles(String outfiledir) {
        String inputLine, ins;
        String filename = getMESHdescriptorfilename();
        String uid = """";
        String name = """";
        String description = """";
        String element_of = """";
        Vector treenr = new Vector();
        Vector related = new Vector();
        Vector synonyms = new Vector();
        Vector actions = new Vector();
        Vector chemicals = new Vector();
        Vector allCASchemicals = new Vector();
        Set CAS = new TreeSet();
        Map treenr2uid = new TreeMap();
        Map uid2name = new TreeMap();
        String cut1, cut2;
        try {
            BufferedReader in = new BufferedReader(new FileReader(filename));
            String outfile = outfiledir + ""\\mesh"";
            BufferedWriter out_concept = new BufferedWriter(new FileWriter(outfile + ""_concept.txt""));
            BufferedWriter out_concept_name = new BufferedWriter(new FileWriter(outfile + ""_concept_name.txt""));
            BufferedWriter out_relation = new BufferedWriter(new FileWriter(outfile + ""_relation.txt""));
            BufferedWriter cas_mapping = new BufferedWriter(new FileWriter(outfile + ""to_cas_mapping.txt""));
            BufferedWriter ec_mapping = new BufferedWriter(new FileWriter(outfile + ""to_ec_mapping.txt""));
            Connection db = tools.openDB(""kb"");
            String query = ""SELECT hierarchy_complete,uid FROM mesh_tree, mesh_graph_uid_name WHERE term=name"";
            ResultSet rs = tools.executeQuery(db, query);
            while (rs.next()) {
                String db_treenr = rs.getString(""hierarchy_complete"");
                String db_uid = rs.getString(""uid"");
                treenr2uid.put(db_treenr, db_uid);
            }
            db.close();
            System.out.println(""Reading in the DUIDs ..."");
            BufferedReader in_for_mapping = new BufferedReader(new FileReader(filename));
            inputLine = getNextLine(in_for_mapping);
            boolean leave = false;
            while ((in_for_mapping != null) && (inputLine != null)) {
                if (inputLine.startsWith(""<DescriptorRecord DescriptorClass"")) {
                    inputLine = getNextLine(in_for_mapping);
                    cut1 = ""<DescriptorUI>"";
                    cut2 = ""</DescriptorUI>"";
                    String mesh_uid = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                    if (mesh_uid.compareTo(""D041441"") == 0) leave = true;
                    inputLine = getNextLine(in_for_mapping);
                    inputLine = getNextLine(in_for_mapping);
                    cut1 = ""<String>"";
                    cut2 = ""</String>"";
                    String mesh_name = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                    uid2name.put(mesh_uid, mesh_name);
                }
                inputLine = getNextLine(in_for_mapping);
            }
            in_for_mapping.close();
            BufferedReader in_ec_numbers = new BufferedReader(new FileReader(""e:\\projects\\ondex\\ec_concept_acc.txt""));
            Set ec_numbers = new TreeSet();
            String ec_line = in_ec_numbers.readLine();
            while (in_ec_numbers.ready()) {
                StringTokenizer st = new StringTokenizer(ec_line);
                st.nextToken();
                ec_numbers.add(st.nextToken());
                ec_line = in_ec_numbers.readLine();
            }
            in_ec_numbers.close();
            tools.printDate();
            inputLine = getNextLine(in);
            while (inputLine != null) {
                if (inputLine.startsWith(""<DescriptorRecord DescriptorClass"")) {
                    treenr.clear();
                    related.clear();
                    synonyms.clear();
                    actions.clear();
                    chemicals.clear();
                    boolean id_ready = false;
                    boolean line_read = false;
                    while ((inputLine != null) && (!inputLine.startsWith(""</DescriptorRecord>""))) {
                        line_read = false;
                        if ((inputLine.startsWith(""<DescriptorUI>"")) && (!id_ready)) {
                            cut1 = ""<DescriptorUI>"";
                            cut2 = ""</DescriptorUI>"";
                            uid = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                            inputLine = getNextLine(in);
                            inputLine = getNextLine(in);
                            cut1 = ""<String>"";
                            cut2 = ""</String>"";
                            name = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                            id_ready = true;
                        }
                        if (inputLine.compareTo(""<SeeRelatedList>"") == 0) {
                            while ((inputLine != null) && (inputLine.indexOf(""</SeeRelatedList>"") == -1)) {
                                if (inputLine.startsWith(""<DescriptorUI>"")) {
                                    cut1 = ""<DescriptorUI>"";
                                    cut2 = ""</DescriptorUI>"";
                                    String id = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    related.add(id);
                                }
                                inputLine = getNextLine(in);
                                line_read = true;
                            }
                        }
                        if (inputLine.compareTo(""<TreeNumberList>"") == 0) {
                            while ((inputLine != null) && (inputLine.indexOf(""</TreeNumberList>"") == -1)) {
                                if (inputLine.startsWith(""<TreeNumber>"")) {
                                    cut1 = ""<TreeNumber>"";
                                    cut2 = ""</TreeNumber>"";
                                    String id = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    treenr.add(id);
                                }
                                inputLine = getNextLine(in);
                                line_read = true;
                            }
                        }
                        if (inputLine.startsWith(""<Concept PreferredConceptYN"")) {
                            boolean prefConcept = false;
                            if (inputLine.compareTo(""<Concept PreferredConceptYN=\""Y\"">"") == 0) prefConcept = true;
                            while ((inputLine != null) && (inputLine.indexOf(""</Concept>"") == -1)) {
                                if (inputLine.startsWith(""<CASN1Name>"") && prefConcept) {
                                    cut1 = ""<CASN1Name>"";
                                    cut2 = ""</CASN1Name>"";
                                    String casn1 = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    String chem_name = casn1;
                                    String chem_description = """";
                                    if (casn1.length() > chem_name.length() + 2) chem_description = casn1.substring(chem_name.length() + 2, casn1.length());
                                    String reg_number = """";
                                    inputLine = getNextLine(in);
                                    if (inputLine.startsWith(""<RegistryNumber>"")) {
                                        cut1 = ""<RegistryNumber>"";
                                        cut2 = ""</RegistryNumber>"";
                                        reg_number = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    }
                                    Vector chemical = new Vector();
                                    String type = """";
                                    if (reg_number.startsWith(""EC"")) {
                                        type = ""EC"";
                                        reg_number = reg_number.substring(3, reg_number.length());
                                    } else {
                                        type = ""CAS"";
                                    }
                                    chemical.add(type);
                                    chemical.add(reg_number);
                                    chemical.add(chem_name);
                                    chemical.add(chem_description);
                                    chemicals.add(chemical);
                                    if (type.compareTo(""CAS"") == 0) {
                                        if (!CAS.contains(reg_number)) {
                                            CAS.add(reg_number);
                                            allCASchemicals.add(chemical);
                                        }
                                    }
                                }
                                if (inputLine.startsWith(""<ScopeNote>"") && prefConcept) {
                                    cut1 = ""<ScopeNote>"";
                                    description = inputLine.substring(cut1.length(), inputLine.length());
                                }
                                if (inputLine.startsWith(""<TermUI>"")) {
                                    inputLine = getNextLine(in);
                                    cut1 = ""<String>"";
                                    cut2 = ""</String>"";
                                    String syn = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    if (syn.indexOf(""&amp;"") != -1) {
                                        String syn1 = syn.substring(0, syn.indexOf(""&amp;""));
                                        String syn2 = syn.substring(syn.indexOf(""amp;"") + 4, syn.length());
                                        syn = syn1 + "" & "" + syn2;
                                    }
                                    if (name.compareTo(syn) != 0) synonyms.add(syn);
                                }
                                if (inputLine.startsWith(""<PharmacologicalAction>"")) {
                                    inputLine = getNextLine(in);
                                    inputLine = getNextLine(in);
                                    cut1 = ""<DescriptorUI>"";
                                    cut2 = ""</DescriptorUI>"";
                                    String act_ui = inputLine.substring(cut1.length(), inputLine.indexOf(cut2));
                                    actions.add(act_ui);
                                }
                                inputLine = getNextLine(in);
                                line_read = true;
                            }
                        }
                        if (!line_read) inputLine = getNextLine(in);
                    }
                    String pos_tag = """";
                    element_of = ""MESHD"";
                    String is_primary = ""0"";
                    out_concept.write(uid + ""\t"" + pos_tag + ""\t"" + description + ""\t"" + element_of + ""\t"");
                    out_concept.write(is_primary + ""\n"");
                    String name_stemmed = """";
                    String name_tagged = """";
                    element_of = ""MESHD"";
                    String is_unique = ""0"";
                    int is_preferred = 1;
                    String original_name = name;
                    String is_not_substring = ""0"";
                    out_concept_name.write(uid + ""\t"" + name + ""\t"" + name_stemmed + ""\t"");
                    out_concept_name.write(name_tagged + ""\t"" + element_of + ""\t"");
                    out_concept_name.write(is_unique + ""\t"" + is_preferred + ""\t"");
                    out_concept_name.write(original_name + ""\t"" + is_not_substring + ""\n"");
                    is_preferred = 0;
                    for (int i = 0; i < synonyms.size(); i++) {
                        name = (String) synonyms.get(i);
                        original_name = name;
                        out_concept_name.write(uid + ""\t"" + name + ""\t"" + name_stemmed + ""\t"");
                        out_concept_name.write(name_tagged + ""\t"" + element_of + ""\t"");
                        out_concept_name.write(is_unique + ""\t"" + is_preferred + ""\t"");
                        out_concept_name.write(original_name + ""\t"" + is_not_substring + ""\n"");
                    }
                    String rel_type = ""is_r"";
                    element_of = ""MESHD"";
                    String from_name = name;
                    for (int i = 0; i < related.size(); i++) {
                        String to_uid = (String) related.get(i);
                        String to_name = (String) uid2name.get(to_uid);
                        out_relation.write(uid + ""\t"" + to_uid + ""\t"");
                        out_relation.write(rel_type + ""\t"" + element_of + ""\t"");
                        out_relation.write(from_name + ""\t"" + to_name + ""\n"");
                    }
                    rel_type = ""is_a"";
                    element_of = ""MESHD"";
                    related.clear();
                    for (int i = 0; i < treenr.size(); i++) {
                        String tnr = (String) treenr.get(i);
                        if (tnr.length() > 3) tnr = tnr.substring(0, tnr.lastIndexOf("".""));
                        String rel_uid = (String) treenr2uid.get(tnr);
                        if (rel_uid != null) related.add(rel_uid); else System.out.println(uid + "": No DUI found for "" + tnr);
                    }
                    for (int i = 0; i < related.size(); i++) {
                        String to_uid = (String) related.get(i);
                        String to_name = (String) uid2name.get(to_uid);
                        out_relation.write(uid + ""\t"" + to_uid + ""\t"");
                        out_relation.write(rel_type + ""\t"" + element_of + ""\t"");
                        out_relation.write(from_name + ""\t"" + to_name + ""\n"");
                    }
                    if (related.size() == 0) System.out.println(uid + "": No is_a relations"");
                    rel_type = ""act"";
                    element_of = ""MESHD"";
                    for (int i = 0; i < actions.size(); i++) {
                        String to_uid = (String) actions.get(i);
                        String to_name = (String) uid2name.get(to_uid);
                        out_relation.write(uid + ""\t"" + to_uid + ""\t"");
                        out_relation.write(rel_type + ""\t"" + element_of + ""\t"");
                        out_relation.write(from_name + ""\t"" + to_name + ""\n"");
                    }
                    String method = ""IMPM"";
                    String score = ""1.0"";
                    for (int i = 0; i < chemicals.size(); i++) {
                        Vector chemical = (Vector) chemicals.get(i);
                        String type = (String) chemical.get(0);
                        String chem = (String) chemical.get(1);
                        if (!ec_numbers.contains(chem) && (type.compareTo(""EC"") == 0)) {
                            if (chem.compareTo(""1.14.-"") == 0) chem = ""1.14.-.-""; else System.out.println(""MISSING EC: "" + chem);
                        }
                        String id = type + "":"" + chem;
                        String entry = uid + ""\t"" + id + ""\t"" + method + ""\t"" + score + ""\n"";
                        if (type.compareTo(""CAS"") == 0) cas_mapping.write(entry); else ec_mapping.write(entry);
                    }
                } else inputLine = getNextLine(in);
            }
            System.out.println(""End import descriptors"");
            tools.printDate();
            in.close();
            out_concept.close();
            out_concept_name.close();
            out_relation.close();
            cas_mapping.close();
            ec_mapping.close();
            outfile = outfiledir + ""\\cas"";
            out_concept = new BufferedWriter(new FileWriter(outfile + ""_concept.txt""));
            out_concept_name = new BufferedWriter(new FileWriter(outfile + ""_concept_name.txt""));
            BufferedWriter out_concept_acc = new BufferedWriter(new FileWriter(outfile + ""_concept_acc.txt""));
            for (int i = 0; i < allCASchemicals.size(); i++) {
                Vector chemical = (Vector) allCASchemicals.get(i);
                String cas_id = ""CAS:"" + (String) chemical.get(1);
                String cas_name = (String) chemical.get(2);
                String cas_pos_tag = """";
                String cas_description = (String) chemical.get(3);
                String cas_element_of = ""CAS"";
                String cas_is_primary = ""0"";
                out_concept.write(cas_id + ""\t"" + cas_pos_tag + ""\t"" + cas_description + ""\t"");
                out_concept.write(cas_element_of + ""\t"" + cas_is_primary + ""\n"");
                String cas_name_stemmed = """";
                String cas_name_tagged = """";
                String cas_is_unique = ""0"";
                String cas_is_preferred = ""0"";
                String cas_original_name = cas_name;
                String cas_is_not_substring = ""0"";
                out_concept_name.write(cas_id + ""\t"" + cas_name + ""\t"" + cas_name_stemmed + ""\t"");
                out_concept_name.write(cas_name_tagged + ""\t"" + cas_element_of + ""\t"");
                out_concept_name.write(cas_is_unique + ""\t"" + cas_is_preferred + ""\t"");
                out_concept_name.write(cas_original_name + ""\t"" + cas_is_not_substring + ""\n"");
                out_concept_acc.write(cas_id + ""\t"" + (String) chemical.get(1) + ""\t"");
                out_concept_acc.write(cas_element_of + ""\n"");
            }
            out_concept.close();
            out_concept_name.close();
            out_concept_acc.close();
        } catch (Exception e) {
            settings.writeLog(""Error while reading MESH descriptor file: "" + e.getMessage());
        }
    }
",True
900947,20815980,11843018,"    private void getRandomGUID(boolean secure) throws NoSuchAlgorithmException {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            throw e;
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
","    public RespID(PublicKey key) throws OCSPException {
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA1"");
            ASN1InputStream aIn = new ASN1InputStream(key.getEncoded());
            SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(aIn.readObject());
            digest.update(info.getPublicKeyData().getBytes());
            ASN1OctetString keyHash = new DEROctetString(digest.digest());
            this.id = new ResponderID(keyHash);
        } catch (Exception e) {
            throw new OCSPException(""problem creating ID: "" + e, e);
        }
    }
",True
900948,891550,12660384,"    public void bubblesort(String filenames[]) {
        for (int i = filenames.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                String temp;
                if (filenames[j].compareTo(filenames[j + 1]) > 0) {
                    temp = filenames[j];
                    filenames[j] = filenames[j + 1];
                    filenames[j + 1] = temp;
                }
            }
        }
    }
","    public static void main(String[] args) {
        final String filePath1 = ""e:\\mysite\\data\\up\\itsite"";
        final String filePath2 = ""d:\\works\\itsite\\itsite"";
        IOUtils.listAllFilesNoRs(new File(filePath2), new FileFilter() {

            @Override
            public boolean accept(File file) {
                if (file.getName().equals("".svn"")) {
                    return false;
                }
                final long modify = file.lastModified();
                final long time = DateUtils.toDate(""2012-03-21 17:43"", ""yyyy-MM-dd HH:mm"").getTime();
                if (modify >= time) {
                    if (file.isFile()) {
                        File f = new File(StringsUtils.replace(file.getAbsolutePath(), filePath2, filePath1));
                        f.getParentFile().mkdirs();
                        try {
                            IOUtils.copyFile(file, f);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        System.out.println(f.getName());
                    }
                }
                return true;
            }
        });
    }
",False
900949,23531897,22486940,"    public void doUpdateByIP() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByIP(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + "" mac_no = ?, login_id= ? "" + ""WHERE ip_address = ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.macNO);
            ps.setString(5, this.loginID);
            ps.setString(6, this.ipAddress);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByIP(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByIP(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
","    public void sortingByBubble(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
",False
900950,7039646,7872667,"    private static final void cloneFile(File origin, File target) throws IOException {
        FileChannel srcChannel = null;
        FileChannel destChannel = null;
        try {
            srcChannel = new FileInputStream(origin).getChannel();
            destChannel = new FileOutputStream(target).getChannel();
            destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            if (srcChannel != null) srcChannel.close();
            if (destChannel != null) destChannel.close();
        }
    }
","    private static boolean computeMovieAverages(String completePath, String MovieAveragesOutputFileName, String MovieIndexFileName) {
        try {
            File inputFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel inC = new FileInputStream(inputFile).getChannel();
            int filesize = (int) inC.size();
            ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize);
            TShortObjectHashMap MovieLimitsTHash = new TShortObjectHashMap(17770, 1);
            int i = 0, totalcount = 0;
            short movie;
            int startIndex, endIndex;
            TIntArrayList a;
            while (mappedfile.hasRemaining()) {
                movie = mappedfile.getShort();
                startIndex = mappedfile.getInt();
                endIndex = mappedfile.getInt();
                a = new TIntArrayList(2);
                a.add(startIndex);
                a.add(endIndex);
                MovieLimitsTHash.put(movie, a);
            }
            inC.close();
            mappedfile = null;
            System.out.println(""Loaded movie index hash"");
            File outFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieAveragesOutputFileName);
            FileChannel outC = new FileOutputStream(outFile, true).getChannel();
            int totalMovies = MovieLimitsTHash.size();
            File movieMMAPDATAFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + ""CustomerRatingBinaryFile.txt"");
            inC = new FileInputStream(movieMMAPDATAFile).getChannel();
            short[] itr = MovieLimitsTHash.keys();
            Arrays.sort(itr);
            ByteBuffer buf;
            for (i = 0; i < totalMovies; i++) {
                short currentMovie = itr[i];
                a = (TIntArrayList) MovieLimitsTHash.get(currentMovie);
                startIndex = a.get(0);
                endIndex = a.get(1);
                if (endIndex > startIndex) {
                    buf = ByteBuffer.allocate((endIndex - startIndex + 1) * 5);
                    inC.read(buf, (startIndex - 1) * 5);
                } else {
                    buf = ByteBuffer.allocate(5);
                    inC.read(buf, (startIndex - 1) * 5);
                }
                buf.flip();
                int bufsize = buf.capacity() / 5;
                float sum = 0;
                for (int q = 0; q < bufsize; q++) {
                    buf.getInt();
                    sum += buf.get();
                }
                ByteBuffer outbuf = ByteBuffer.allocate(6);
                outbuf.putShort(currentMovie);
                outbuf.putFloat(sum / bufsize);
                outbuf.flip();
                outC.write(outbuf);
                buf.clear();
                buf = null;
                a.clear();
                a = null;
            }
            inC.close();
            outC.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",True
900951,22530929,12096098,"    public static String md5Encode(String pass) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(pass.getBytes());
            byte[] result = md.digest();
            return bytes2hexStr(result);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""La librería java.security no implemente MD5"");
        }
    }
","    public static String calculatesMD5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(""MD5"");
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",True
900952,6527977,12971450,"    public static void copy(File in, File out) throws IOException {
        FileChannel ic = new FileInputStream(in).getChannel();
        FileChannel oc = new FileOutputStream(out).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
","    public static void copy(FileInputStream in, File destination) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = in.getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            if (srcChannel != null) {
                srcChannel.close();
            }
            if (dstChannel != null) {
                dstChannel.close();
            }
        }
    }
",True
900953,11918313,4411141,"    public String[] retrieveFasta(String id) throws Exception {
        URL url = new URL(""http://www.ebi.ac.uk/ena/data/view/"" + id + ""&display=fasta"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String header = reader.readLine();
        StringBuffer seq = new StringBuffer();
        String line = """";
        while ((line = reader.readLine()) != null) {
            seq.append(line);
        }
        reader.close();
        return new String[] { header, seq.toString() };
    }
","    private void addDocToDB(String action, DataSource database) {
        String typeOfDoc = findTypeOfDoc(action).trim().toLowerCase();
        Connection con = null;
        try {
            con = database.getConnection();
            con.setAutoCommit(false);
            checkDupDoc(typeOfDoc, con);
            String add = ""insert into "" + typeOfDoc + "" values( ?, ?, ?, ?, ?, ?, ? )"";
            PreparedStatement prepStatement = con.prepareStatement(add);
            prepStatement.setString(1, selectedCourse.getCourseId());
            prepStatement.setString(2, selectedCourse.getAdmin());
            prepStatement.setTimestamp(3, getTimeStamp());
            prepStatement.setString(4, getLink());
            prepStatement.setString(5, homePage.getUser());
            prepStatement.setString(6, getText());
            prepStatement.setString(7, getTitle());
            prepStatement.executeUpdate();
            prepStatement.close();
            con.commit();
        } catch (Exception e) {
            sqlError = true;
            e.printStackTrace();
            if (con != null) try {
                con.rollback();
            } catch (Exception logOrIgnore) {
            }
            try {
                throw e;
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        } finally {
            if (con != null) try {
                con.close();
            } catch (Exception logOrIgnore) {
            }
        }
    }
",False
900954,18600188,831650,"    private void copyFile(String fileName, String messageID, boolean isError) {
        try {
            File inputFile = new File(fileName);
            File outputFile = null;
            if (isError) {
                outputFile = new File(provider.getErrorDataLocation(folderName) + messageID + "".xml"");
            } else {
                outputFile = new File(provider.getDataProcessedLocation(folderName) + messageID + "".xml"");
            }
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
900955,17470307,15153344,"    private void createSoundbank(String testSoundbankFileName) throws Exception {
        System.out.println(""Create soundbank"");
        File packageDir = new File(""testsoundbank"");
        if (packageDir.exists()) {
            for (File file : packageDir.listFiles()) assertTrue(file.delete());
            assertTrue(packageDir.delete());
        }
        packageDir.mkdir();
        String sourceFileName = ""testsoundbank/TestSoundBank.java"";
        File sourceFile = new File(sourceFileName);
        FileWriter writer = new FileWriter(sourceFile);
        writer.write(""package testsoundbank;\n"" + ""public class TestSoundBank extends com.sun.media.sound.ModelAbstractOscillator { \n"" + ""    @Override public int read(float[][] buffers, int offset, int len) throws java.io.IOException { \n"" + ""   return 0;\n"" + "" }\n"" + ""    @Override public String getVersion() {\n"" + ""   return \"""" + (soundbankRevision++) + ""\"";\n"" + ""    }\n"" + ""}\n"");
        writer.close();
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, Arrays.asList(new File(""."")));
        compiler.getTask(null, fileManager, null, null, null, fileManager.getJavaFileObjectsFromFiles(Arrays.asList(sourceFile))).call();
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(testSoundbankFileName));
        ZipEntry ze = new ZipEntry(""META-INF/services/javax.sound.midi.Soundbank"");
        zos.putNextEntry(ze);
        zos.write(""testsoundbank.TestSoundBank"".getBytes());
        ze = new ZipEntry(""testsoundbank/TestSoundBank.class"");
        zos.putNextEntry(ze);
        FileInputStream fis = new FileInputStream(""testsoundbank/TestSoundBank.class"");
        int b = fis.read();
        while (b != -1) {
            zos.write(b);
            b = fis.read();
        }
        zos.close();
    }
","        public ActualTask(TEditor editor, TIGDataBase dataBase, String directoryPath) {
            File myDirectory = new File(directoryPath);
            int i;
            Vector images = new Vector();
            images = dataBase.allImageSearch();
            lengthOfTask = images.size() * 2;
            String directory = directoryPath + ""Images"" + myDirectory.separator;
            File newDirectoryFolder = new File(directory);
            newDirectoryFolder.mkdirs();
            try {
                DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder domBuilder = domFactory.newDocumentBuilder();
                doc = domBuilder.newDocument();
            } catch (Exception exc) {
                System.out.println(exc.getMessage());
                System.out.println(exc.toString());
            }
            Element dbElement = doc.createElement(""dataBase"");
            for (i = 0; ((i < images.size()) && !stop); i++) {
                current = i;
                String element = (String) images.elementAt(i);
                String pathSrc = ""Images"" + File.separator + element.substring(0, 1).toUpperCase() + File.separator + element;
                String name = pathSrc.substring(pathSrc.lastIndexOf(myDirectory.separator) + 1, pathSrc.length());
                String pathDst = directory + name;
                try {
                    FileChannel srcChannel = new FileInputStream(pathSrc).getChannel();
                    FileChannel dstChannel = new FileOutputStream(pathDst).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException exc) {
                    System.out.println(exc.getMessage());
                    System.out.println(exc.toString());
                }
                Vector keyWords = new Vector();
                keyWords = dataBase.asociatedConceptSearch((String) images.elementAt(i));
                Element imageElement = doc.createElement(""image"");
                Element imageNameElement = doc.createElement(""name"");
                imageNameElement.appendChild(doc.createTextNode(name));
                imageElement.appendChild(imageNameElement);
                for (int j = 0; j < keyWords.size(); j++) {
                    Element keyWordElement = doc.createElement(""keyWord"");
                    keyWordElement.appendChild(doc.createTextNode((String) keyWords.elementAt(j)));
                    imageElement.appendChild(keyWordElement);
                }
                dbElement.appendChild(imageElement);
            }
            try {
                doc.appendChild(dbElement);
                File dst = new File(directory.concat(""Images""));
                BufferedWriter bufferWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dst), ""UTF-8""));
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                DOMSource source = new DOMSource(doc);
                StreamResult result = new StreamResult(bufferWriter);
                transformer.transform(source, result);
                bufferWriter.close();
            } catch (Exception exc) {
                System.out.println(exc.getMessage());
                System.out.println(exc.toString());
            }
            current = lengthOfTask;
        }
",True
900956,9245183,23022777,"    public void read(Model m, String url) throws JenaException {
        try {
            URLConnection conn = new URL(url).openConnection();
            String encoding = conn.getContentEncoding();
            if (encoding == null) read(m, conn.getInputStream(), url); else read(m, new InputStreamReader(conn.getInputStream(), encoding), url);
        } catch (FileNotFoundException e) {
            throw new DoesNotExistException(url);
        } catch (IOException e) {
            throw new JenaException(e);
        }
    }
","    public void processSaveHolding(Holding holdingBean, AuthSession authSession) {
        if (authSession == null) {
            return;
        }
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""UPDATE WM_LIST_HOLDING "" + ""SET "" + ""   full_name_HOLDING=?, "" + ""   NAME_HOLDING=? "" + ""WHERE ID_HOLDING = ? and ID_HOLDING in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedHoldingId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_ROAD from v$_read_list_road z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, holdingBean.getName());
            ps.setString(num++, holdingBean.getShortName());
            RsetTools.setLong(ps, num++, holdingBean.getId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            processDeleteRelatedCompany(dbDyn, holdingBean, authSession);
            processInsertRelatedCompany(dbDyn, holdingBean, authSession);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) dbDyn.rollback();
            } catch (Exception e001) {
            }
            String es = ""Error save holding"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
",False
900957,11986407,22246375,"    public static String md5(String input) {
        String res = """";
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(input.getBytes());
            byte[] md5 = algorithm.digest();
            String tmp = """";
            for (int i = 0; i < md5.length; i++) {
                tmp = (Integer.toHexString(0xFF & md5[i]));
                if (tmp.length() == 1) res += ""0"" + tmp; else res += tmp;
            }
        } catch (NoSuchAlgorithmException ex) {
        }
        return res;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",False
900958,20089257,13547845,"    public void store(String path, InputStream stream) throws IOException {
        toIgnore.add(normalizePath(path));
        ZipEntry entry = new ZipEntry(path);
        zipOutput.putNextEntry(entry);
        IOUtils.copy(stream, zipOutput);
        zipOutput.closeEntry();
    }
","    public static PortalConfig install(File xml, File dir) throws IOException, ConfigurationException {
        if (!dir.exists()) {
            log.info(""Creating directory {}"", dir);
            dir.mkdirs();
        }
        if (!xml.exists()) {
            log.info(""Installing default configuration to {}"", xml);
            OutputStream output = new FileOutputStream(xml);
            try {
                InputStream input = ResourceLoader.open(""res://"" + PORTAL_CONFIG_XML);
                try {
                    IOUtils.copy(input, output);
                } finally {
                    input.close();
                }
            } finally {
                output.close();
            }
        }
        return create(xml, dir);
    }
",True
900959,15515730,3059648,"    public void delete(String fileName) throws IOException {
        log.debug(""deleting: "" + fileName);
        URL url = new URL(this.endpointURL + ""?operation=delete&filename="" + fileName);
        URLConnection connection = url.openConnection();
        connection.setDoOutput(false);
        connection.setDoInput(true);
        connection.setUseCaches(false);
        connection.getInputStream();
    }
","    public static String sendScripts(Session session) {
        Channel channel = null;
        String tempDirectory = """";
        Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""Start sendScripts."");
        try {
            {
                channel = session.openChannel(""exec"");
                final String command = ""mktemp -d /tmp/scipionXXXXXXXX"";
                ((ChannelExec) channel).setCommand(command);
                InputStream in = channel.getInputStream();
                channel.connect();
                String[] result = inputStreamToString(in, channel);
                tempDirectory = result[1];
                tempDirectory = tempDirectory.replaceAll(""\n"", """");
                Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""status:"" + result[0] + ""-command:"" + command + ""-result:"" + tempDirectory);
                IOUtils.closeQuietly(in);
                channel.disconnect();
            }
            {
                channel = session.openChannel(""exec"");
                final String command = ""chmod 700 "" + tempDirectory;
                ((ChannelExec) channel).setCommand(command);
                InputStream in = channel.getInputStream();
                channel.connect();
                String[] result = inputStreamToString(in, channel);
                Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""status:"" + result[0] + ""-command:"" + command + ""-result:"" + result[1]);
                IOUtils.closeQuietly(in);
                channel.disconnect();
            }
            {
                InputStream rsyncHelperContentInput = Thread.currentThread().getContextClassLoader().getResourceAsStream(""scripts/"" + RSYNC_HELPER_SCRIPT);
                channel = session.openChannel(""exec"");
                final String command = ""cat > "" + tempDirectory + ""/"" + RSYNC_HELPER_SCRIPT;
                ((ChannelExec) channel).setCommand(command);
                OutputStream out = channel.getOutputStream();
                channel.connect();
                IOUtils.copy(rsyncHelperContentInput, out);
                IOUtils.closeQuietly(out);
                channel.disconnect();
            }
            {
                channel = session.openChannel(""exec"");
                final String command = ""chmod 700 "" + tempDirectory + ""/"" + RSYNC_HELPER_SCRIPT;
                ((ChannelExec) channel).setCommand(command);
                InputStream in = channel.getInputStream();
                channel.connect();
                String[] result = inputStreamToString(in, channel);
                Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""status:"" + result[0] + ""-command:"" + command + ""-result:"" + result[1]);
                IOUtils.closeQuietly(in);
                channel.disconnect();
            }
            {
                InputStream askPassContentInput = Thread.currentThread().getContextClassLoader().getResourceAsStream(""scripts/"" + RSYNC_ASKPASS_SCRIPT);
                channel = session.openChannel(""exec"");
                final String command = ""cat > "" + tempDirectory + ""/"" + RSYNC_ASKPASS_SCRIPT;
                ((ChannelExec) channel).setCommand(command);
                OutputStream out = channel.getOutputStream();
                channel.connect();
                IOUtils.copy(askPassContentInput, out);
                IOUtils.closeQuietly(out);
                channel.disconnect();
            }
            {
                channel = session.openChannel(""exec"");
                final String command = ""chmod 700 "" + tempDirectory + ""/"" + RSYNC_ASKPASS_SCRIPT;
                ((ChannelExec) channel).setCommand(command);
                InputStream in = channel.getInputStream();
                channel.connect();
                String[] result = inputStreamToString(in, channel);
                Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""status:"" + result[0] + ""-command:"" + command + ""-result:"" + result[1]);
                IOUtils.closeQuietly(in);
                channel.disconnect();
            }
        } catch (IOException ex) {
            Logger.getLogger(RsyncHelper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSchException ex) {
            Logger.getLogger(RsyncHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
        Logger.getLogger(RsyncHelper.class.getName()).log(Level.INFO, ""End sendScripts."");
        return tempDirectory;
    }
",False
900960,113681,22303544,"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
","    @Test
    public void testWriteAndRead() throws Exception {
        JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0);
        JCFS.configureDiscovery(defaultUdpAddress, defaultUdpPort);
        try {
            server.start();
            RFile file = new RFile(""testreadwrite.txt"");
            RFileOutputStream out = new RFileOutputStream(file);
            out.write(""test"".getBytes(""utf-8""));
            out.close();
            RFileInputStream in = new RFileInputStream(file);
            byte[] buffer = new byte[4];
            int readCount = in.read(buffer);
            in.close();
            assertEquals(4, readCount);
            String resultRead = new String(buffer, ""utf-8"");
            assertEquals(""test"", resultRead);
        } finally {
            server.stop();
        }
    }
",False
900961,6226270,7350139,"    public static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static void messageDigestTest() {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(""computer"".getBytes());
            md.update(""networks"".getBytes());
            System.out.println(new String(md.digest()));
            System.out.println(new String(md.digest(""computernetworks"".getBytes())));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900962,21636561,16164368,"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",True
900963,18467319,2375094,"        @Nullable
        @Override
        public InputSource resolveEntity(final String publicId, final String systemId) throws IOException {
            if (systemId.endsWith("".xml"")) {
                return null;
            }
            InputSource inputSource = null;
            final URL url = IOUtils.getResource(new File(""system/dtd""), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""""));
            final InputStream inputStream = url.openStream();
            try {
                final BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);
                try {
                    inputSource = new InputSource(bufferedInputStream);
                } finally {
                    if (inputSource == null) {
                        bufferedInputStream.close();
                    }
                }
            } finally {
                if (inputSource == null) {
                    inputStream.close();
                }
            }
            return inputSource;
        }
","        public boolean run() {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = getDataSource().getConnection();
                conn.setAutoCommit(false);
                conn.rollback();
                stmt = conn.createStatement();
                for (String task : tasks) {
                    if (task.length() == 0) continue;
                    LOGGER.info(""Executing SQL migration: "" + task);
                    stmt.executeUpdate(task);
                }
                conn.commit();
            } catch (SQLException ex) {
                try {
                    conn.rollback();
                } catch (Throwable th) {
                }
                throw new SystemException(""Cannot execute SQL migration"", ex);
            } finally {
                try {
                    if (stmt != null) stmt.close();
                } catch (Throwable th) {
                    LOGGER.error(th);
                }
                try {
                    if (stmt != null) conn.close();
                } catch (Throwable th) {
                    LOGGER.error(th);
                }
            }
            return true;
        }
",False
900964,15461843,12445282,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    static boolean writeProperties(Map<String, String> customProps, File destination) throws IOException {
        synchronized (PropertiesIO.class) {
            L.info(Msg.msg(""PropertiesIO.writeProperties.start""));
            File tempFile = null;
            BufferedInputStream existingCfgInStream = null;
            FileInputStream in = null;
            FileOutputStream out = null;
            PrintStream ps = null;
            FileChannel fromChannel = null, toChannel = null;
            String line = null;
            try {
                existingCfgInStream = new BufferedInputStream(destination.exists() ? new FileInputStream(destination) : defaultPropertiesStream());
                tempFile = File.createTempFile(""properties-"", "".tmp"", null);
                ps = new PrintStream(tempFile);
                while ((line = Utils.readLine(existingCfgInStream)) != null) {
                    String lineReady2write = setupLine(line, customProps);
                    ps.println(lineReady2write);
                }
                destination.getParentFile().mkdirs();
                in = new FileInputStream(tempFile);
                out = new FileOutputStream(destination, false);
                fromChannel = in.getChannel();
                toChannel = out.getChannel();
                fromChannel.transferTo(0, fromChannel.size(), toChannel);
                L.info(Msg.msg(""PropertiesIO.writeProperties.done"").replace(""#file#"", destination.getAbsolutePath()));
                return true;
            } finally {
                if (existingCfgInStream != null) existingCfgInStream.close();
                if (ps != null) ps.close();
                if (fromChannel != null) fromChannel.close();
                if (toChannel != null) toChannel.close();
                if (out != null) out.close();
                if (in != null) in.close();
                if (tempFile != null && tempFile.exists()) tempFile.delete();
            }
        }
    }
",True
900965,14471599,6568286,"    private void copy(String url, File toDir) throws IOException {
        System.err.println(""url="" + url + "" dir="" + toDir);
        if (url.endsWith(""/"")) {
            String basename = url.substring(url.lastIndexOf(""/"", url.length() - 2) + 1);
            File directory = new File(toDir, basename);
            directory.mkdir();
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(new URL(url).openStream(), ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) {
                System.err.println(line.replace('\t', '|'));
                int tab = line.lastIndexOf('\t', line.lastIndexOf('\t', line.lastIndexOf('\t') - 1) - 1);
                System.err.println(tab);
                char type = line.charAt(tab + 1);
                String file = line.substring(0, tab);
                copy(url + URIUtil.encodePath(file) + (type == 'd' ? ""/"" : """"), directory);
            }
        } else {
            String basename = url.substring(url.lastIndexOf(""/"") + 1);
            File file = new File(toDir, basename);
            System.err.println(""copy "" + url + "" --> "" + file);
            IO.copy(new URL(url).openStream(), new FileOutputStream(file));
        }
    }
","    private void getPicture(String urlPath, String picId) throws Exception {
        URL url = new URL(urlPath);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.setConnectTimeout(10000);
        if (conn.getResponseCode() == 200) {
            InputStream inputStream = conn.getInputStream();
            byte[] data = readStream(inputStream);
            File file = new File(picDirectory + picId);
            FileOutputStream outputStream = new FileOutputStream(file);
            outputStream.write(data);
            outputStream.close();
        }
        conn.disconnect();
    }
",False
900966,19746603,21877683,"    private synchronized Frame addFrame(INSERT_TYPE type, File source) throws IOException {
        if (source == null) throw new NullPointerException(""Parameter 'source' is null"");
        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(frames_.size()));
        if (newLocation.compareTo(source) != 0) {
            switch(type) {
                case MOVE:
                    source.renameTo(newLocation);
                    break;
                case COPY:
                    FileChannel inChannel = new FileInputStream(source).getChannel();
                    FileChannel outChannel = new FileOutputStream(newLocation).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                    if (inChannel != null) inChannel.close();
                    if (outChannel != null) outChannel.close();
                    break;
            }
        }
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.add(f);
        return f;
    }
","    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        if (!(request instanceof HttpServletRequest)) {
            log.fatal(""not a http request"");
            return;
        }
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String uri = httpRequest.getRequestURI();
        int pathStartIdx = 0;
        String resourceName = null;
        pathStartIdx = uri.indexOf(path);
        if (pathStartIdx <= -1) {
            log.fatal(""the url pattern must match: "" + path + "" found uri: "" + uri);
            return;
        }
        resourceName = uri.substring(pathStartIdx + path.length());
        int suffixIdx = uri.lastIndexOf('.');
        if (suffixIdx <= -1) {
            log.fatal(""no file suffix found for resource: "" + uri);
            return;
        }
        String suffix = uri.substring(suffixIdx + 1).toLowerCase();
        String mimeType = (String) mimeTypes.get(suffix);
        if (mimeType == null) {
            log.fatal(""no mimeType found for resource: "" + uri);
            log.fatal(""valid mimeTypes are: "" + mimeTypes.keySet());
            return;
        }
        String themeName = getThemeName();
        if (themeName == null) {
            themeName = this.themeName;
        }
        if (!themeName.startsWith(""/"")) {
            themeName = ""/"" + themeName;
        }
        InputStream is = null;
        is = ResourceFilter.class.getResourceAsStream(themeName + resourceName);
        if (is != null) {
            IOUtils.copy(is, response.getOutputStream());
            response.setContentType(mimeType);
            response.flushBuffer();
            IOUtils.closeQuietly(response.getOutputStream());
            IOUtils.closeQuietly(is);
        } else {
            log.fatal(""error loading resource: "" + resourceName);
        }
    }
",True
900967,9499457,7667,"    private static void copy(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",True
900968,4787102,7901588,"    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        OutputStream output = getOutputStream();
        if (cachedContent != null) {
            output.write(cachedContent);
        } else {
            FileInputStream input = new FileInputStream(dfosFile);
            IOUtils.copy(input, output);
            dfosFile.delete();
            dfosFile = null;
        }
        output.close();
        cachedContent = null;
    }
","    public static long removePropertyInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, String propriete) {
        in = new BufferedInputStream(in);
        try {
            File tempPptx = null;
            POIXMLDocument doc;
            if (ext.toLowerCase().equals(""docx"")) {
                doc = new XWPFDocument(in);
            } else if (ext.toLowerCase().equals(""xlsx"")) {
                doc = new XSSFWorkbook(in);
            } else if (ext.toLowerCase().equals(""pptx"")) {
                tempPptx = File.createTempFile(""temp"", ""pptx"");
                OutputStream tempPptxOut = new FileOutputStream(tempPptx);
                tempPptxOut = new BufferedOutputStream(tempPptxOut);
                IOUtils.copy(in, tempPptxOut);
                tempPptxOut.close();
                doc = new XSLFSlideShow(tempPptx.getAbsolutePath());
            } else {
                throw new IllegalArgumentException(""Writing properties for a "" + ext + "" file is not supported"");
            }
            CoreProperties coreProperties = doc.getProperties().getCoreProperties();
            if (propriete.equals(Metadata.TITLE)) {
                coreProperties.setTitle("""");
            } else if (propriete.equals(Metadata.AUTHOR)) {
                coreProperties.setCreator("""");
            } else if (propriete.equals(Metadata.KEYWORDS)) {
                coreProperties.getUnderlyingProperties().setKeywordsProperty("""");
            } else if (propriete.equals(Metadata.COMMENTS)) {
                coreProperties.setDescription("""");
            } else if (propriete.equals(Metadata.SUBJECT)) {
                coreProperties.setSubjectProperty("""");
            } else if (propriete.equals(Metadata.COMPANY)) {
                doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany("""");
            } else {
                org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties();
                if (customProperties.contains(propriete)) {
                    int index = 0;
                    for (CTProperty prop : customProperties.getUnderlyingProperties().getPropertyArray()) {
                        if (prop.getName().equals(propriete)) {
                            customProperties.getUnderlyingProperties().removeProperty(index);
                            break;
                        }
                        index++;
                    }
                }
            }
            in.close();
            File tempOpenXMLDocumentFile = File.createTempFile(""temp"", ""tmp"");
            OutputStream tempOpenXMLDocumentOut = new FileOutputStream(tempOpenXMLDocumentFile);
            tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut);
            doc.write(tempOpenXMLDocumentOut);
            tempOpenXMLDocumentOut.close();
            long length = tempOpenXMLDocumentFile.length();
            InputStream tempOpenXMLDocumentIn = new FileInputStream(tempOpenXMLDocumentFile);
            tempOpenXMLDocumentIn = new BufferedInputStream(tempOpenXMLDocumentIn);
            OutputStream out = null;
            try {
                out = outProvider.getOutputStream();
                out = new BufferedOutputStream(out);
                IOUtils.copy(tempOpenXMLDocumentIn, out);
                out.flush();
            } finally {
                IOUtils.closeQuietly(out);
            }
            if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) {
                tempOpenXMLDocumentFile.deleteOnExit();
            }
            if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) {
                tempPptx.deleteOnExit();
            }
            return length;
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (InvalidFormatException e) {
            throw new RuntimeException(e);
        } catch (OpenXML4JException e) {
            throw new RuntimeException(e);
        } catch (XmlException e) {
            throw new RuntimeException(e);
        }
    }
",True
900969,11717079,23634465,"    void copyFile(File inputFile, File outputFile) {
        try {
            FileReader in;
            in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private static void zip(File d) throws FileNotFoundException, IOException {
        String[] entries = d.list();
        byte[] buffer = new byte[4096];
        int bytesRead;
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + ""dist.zip"")));
        for (int i = 0; i < entries.length; i++) {
            File f = new File(d, entries[i]);
            if (f.isDirectory()) continue;
            FileInputStream in = new FileInputStream(f);
            int skipl = d.getCanonicalPath().length();
            ZipEntry entry = new ZipEntry(f.getPath().substring(skipl));
            out.putNextEntry(entry);
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
        }
        out.close();
        FileUtils.moveFile(new File(d.getParent() + File.separator + ""dist.zip""), new File(d + File.separator + ""dist.zip""));
    }
",True
900970,17128309,2150993,"    private void copyIntoFile(String resource, File output) throws IOException {
        FileOutputStream out = null;
        InputStream in = null;
        try {
            out = FileUtils.openOutputStream(output);
            in = GroovyInstanceTest.class.getResourceAsStream(resource);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(in);
        }
    }
","    public static void main(String[] args) {
        if (args.length <= 0) {
            System.out.println("" *** SQL script generator and executor ***"");
            System.out.println("" You must specify name of the file with SQL script data"");
            System.out.println("" Fisrt rows of this file must be:"");
            System.out.println("" 1) JDBC driver class for your DBMS"");
            System.out.println("" 2) URL for your database instance"");
            System.out.println("" 3) user in that database (with administrator priviliges)"");
            System.out.println("" 4) password of that user"");
            System.out.println("" Next rows can have: '@' before schema to create,"");
            System.out.println(""   '#' before table to create, '&' before table to insert,"");
            System.out.println(""   '$' before trigger (inverse 'FK on delete cascade') to create,"");
            System.out.println(""   '>' before table to drop, '<' before schema to drop."");
            System.out.println("" Other rows contain parameters of these actions:"");
            System.out.println(""   for & action each parameter is a list of values,"");
            System.out.println(""   for @ -//- is # acrion, for # -//- is column/constraint "");
            System.out.println(""    definition or $ action. $ syntax to delete from table:"");
            System.out.println(""    fullNameOfTable:itsColInWhereClause=matchingColOfThisTable"");
            System.out.println("" '!' before row means that it is a comment."");
            System.out.println("" If some exception is occured, all script is rolled back."");
            System.out.println("" If you specify 2nd command line argument - file name too -"");
            System.out.println(""   connection will be established but all statements will"");
            System.out.println(""   be saved in that output file and not transmitted to DB"");
            System.out.println("" If you specify 3nd command line argument - connect_string -"");
            System.out.println(""   connect information will be added to output file"");
            System.out.println(""   in the form 'connect user/password@connect_string'"");
            System.exit(0);
        }
        try {
            String[] info = new String[4];
            BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));
            Writer writer = null;
            try {
                for (int i = 0; i < 4; i++) info[i] = reader.readLine();
                try {
                    Class.forName(info[0]);
                    Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);
                    SQLScript script = new SQLScript(connection);
                    if (args.length > 1) {
                        writer = new FileWriter(args[1]);
                        if (args.length > 2) writer.write(""connect "" + info[2] + ""/"" + info[3] + ""@"" + args[2] + script.statementTerminator);
                    }
                    try {
                        System.out.println(script.executeScript(reader, writer) + "" updates has been performed during script execution"");
                    } catch (SQLException e4) {
                        reader.close();
                        if (writer != null) writer.close();
                        System.out.println("" Script execution error: "" + e4);
                    }
                    connection.close();
                } catch (Exception e3) {
                    reader.close();
                    if (writer != null) writer.close();
                    System.out.println("" Connection error: "" + e3);
                }
            } catch (IOException e2) {
                System.out.println(""Error in file "" + args[0]);
            }
        } catch (FileNotFoundException e1) {
            System.out.println(""File "" + args[0] + "" not found"");
        }
    }
",True
900971,2198030,17241450,"    private void copy(String imgPath, String path) {
        try {
            File input = new File(imgPath);
            File output = new File(path, input.getName());
            if (output.exists()) {
                if (!MessageDialog.openQuestion(getShell(), ""Overwrite"", ""There is already an image file "" + input.getName() + "" under the package.\n Do you really want to overwrite it?"")) return;
            }
            byte[] data = new byte[1024];
            FileInputStream fis = new FileInputStream(imgPath);
            BufferedInputStream bis = new BufferedInputStream(fis);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(output));
            int length;
            while ((length = bis.read(data)) > 0) {
                bos.write(data, 0, length);
                bos.flush();
            }
            bos.close();
            fis.close();
            IJavaProject ijp = VisualSwingPlugin.getCurrentProject();
            if (ijp != null) {
                ijp.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);
                view.refresh();
                view.expandAll();
            }
        } catch (Exception e) {
            VisualSwingPlugin.getLogger().error(e);
        }
    }
","    public static boolean copyFile(File src, File des) {
        try {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(des));
            int b;
            while ((b = in.read()) != -1) out.write(b);
            out.flush();
            out.close();
            in.close();
            return true;
        } catch (IOException ie) {
            m_logCat.error(""Copy file + "" + src + "" to "" + des + "" failed!"", ie);
            return false;
        }
    }
",True
900972,18099086,11268952,"    @Override
    protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {
        res.setHeader(""X-Generator"", ""VisualMon"");
        String path = req.getPathInfo();
        if (null == path || """".equals(path)) res.sendRedirect(req.getServletPath() + ""/""); else if (""/chart"".equals(path)) {
            try {
                res.setHeader(""Cache-Control"", ""private,no-cache,no-store,must-revalidate"");
                res.addHeader(""Cache-Control"", ""post-check=0,pre-check=0"");
                res.setHeader(""Expires"", ""Sat, 26 Jul 1997 05:00:00 GMT"");
                res.setHeader(""Pragma"", ""no-cache"");
                res.setDateHeader(""Expires"", 0);
                renderChart(req, res);
            } catch (InterruptedException e) {
                log.info(""Chart generation was interrupted"", e);
                Thread.currentThread().interrupt();
            }
        } else if (path.startsWith(""/log_"")) {
            String name = path.substring(5);
            LogProvider provider = null;
            for (LogProvider prov : cfg.getLogProviders()) {
                if (name.equals(prov.getName())) {
                    provider = prov;
                    break;
                }
            }
            if (null == provider) {
                log.error(""Log provider with name \""{}\"" not found"", name);
                res.sendError(HttpServletResponse.SC_NOT_FOUND);
            } else {
                render(res, provider.getLog(filter.getLocale()));
            }
        } else if (""/"".equals(path)) {
            List<LogEntry> logs = new ArrayList<LogEntry>();
            for (LogProvider provider : cfg.getLogProviders()) logs.add(new LogEntry(provider.getName(), provider.getTitle(filter.getLocale())));
            render(res, new ProbeDataList(filter.getSnapshot(), filter.getAlerts(), logs, ResourceBundle.getBundle(""de.frostcode.visualmon.stats"", filter.getLocale()).getString(""category.empty""), cfg.getDashboardTitle().get(filter.getLocale())));
        } else {
            URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo());
            if (null == url) {
                res.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            res.setDateHeader(""Last-Modified"", new File(url.getFile()).lastModified());
            res.setDateHeader(""Expires"", new Date().getTime() + YEAR_IN_SECONDS * 1000L);
            res.setHeader(""Cache-Control"", ""max-age="" + YEAR_IN_SECONDS);
            URLConnection conn = url.openConnection();
            String resourcePath = url.getPath();
            String contentType = conn.getContentType();
            if (resourcePath.endsWith("".xsl"")) {
                contentType = ""text/xml"";
                res.setCharacterEncoding(ENCODING);
            }
            if (contentType == null || ""content/unknown"".equals(contentType)) {
                if (resourcePath.endsWith("".css"")) contentType = ""text/css""; else contentType = getServletContext().getMimeType(resourcePath);
            }
            res.setContentType(contentType);
            res.setContentLength(conn.getContentLength());
            OutputStream out = res.getOutputStream();
            IOUtils.copy(conn.getInputStream(), out);
            IOUtils.closeQuietly(conn.getInputStream());
            IOUtils.closeQuietly(out);
        }
    }
","    public Vector split() {
        File nextFile = new File(filename);
        long fileSize = nextFile.length();
        long parts = fileSize / splitSize;
        Vector vec = new Vector(new Long(parts).intValue());
        if (debug) {
            System.out.println(""File: "" + nextFile.getName() + ""\nfileSize: "" + fileSize + ""\nsplitSize: "" + splitSize + ""\nparts: "" + parts);
        }
        if (fileSize % splitSize > 0) {
            parts++;
        }
        try {
            FileInputStream fis = new FileInputStream(nextFile);
            DataInputStream dis = new DataInputStream(fis);
            long bytesRead = 0;
            File destinationDirectory = new File(nextFile.getParent());
            if (!destinationDirectory.exists()) {
                destinationDirectory.mkdir();
            }
            for (long k = 0; k < parts; k++) {
                if (debug) {
                    System.out.println(""Splitting parts: "" + nextFile.getName() + "" into part "" + k);
                }
                String filePartName = nextFile.getName();
                filePartName = filePartName + ""."" + String.valueOf(k);
                File outputFile = new File(destinationDirectory, filePartName);
                FileOutputStream fos = new FileOutputStream(outputFile);
                DataOutputStream dos = new DataOutputStream(fos);
                long bytesWritten = 0;
                while ((bytesWritten < splitSize) && (bytesRead < fileSize)) {
                    dos.writeByte(dis.readByte());
                    bytesRead++;
                    bytesWritten++;
                }
                dos.close();
                vec.addElement(outputFile.getAbsolutePath());
                if (debug) {
                    System.out.println(""Wrote "" + bytesWritten + "" bytes."" + outputFile.getName() + "" created."");
                }
            }
        } catch (FileNotFoundException fnfe) {
            System.err.println(""FileNotFoundException: "" + fnfe.getMessage());
            vec = null;
        } catch (IOException ioe) {
            System.err.println(""IOException: "" + ioe.getMessage());
            vec = null;
        }
        return vec;
    }
",True
900973,15689768,8075981,"    protected void channelConnected() throws IOException {
        MessageDigest md = null;
        String digest = """";
        try {
            String userid = nateon.getUserId();
            if (userid.endsWith(""@nate.com"")) userid = userid.substring(0, userid.lastIndexOf('@'));
            md = MessageDigest.getInstance(""MD5"");
            md.update(nateon.getPassword().getBytes());
            md.update(userid.getBytes());
            byte[] bData = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : bData) {
                int v = (int) b;
                v = v < 0 ? v + 0x100 : v;
                String s = Integer.toHexString(v);
                if (s.length() == 1) sb.append('0');
                sb.append(s);
            }
            digest = sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        NateOnMessage out = new NateOnMessage(""LSIN"");
        out.add(nateon.getUserId()).add(digest).add(""MD5"").add(""3.615"");
        out.setCallback(""processAuth"");
        writeMessage(out);
    }
","    public char[] getDataAsCharArray(String url) {
        try {
            char[] dat = null;
            URLConnection urlc;
            if (!url.toUpperCase().startsWith(""HTTP://"") && !url.toUpperCase().startsWith(""HTTPS://"")) {
                urlc = tryOpenConnection(url);
            } else {
                urlc = new URL(url).openConnection();
            }
            urlc.setUseCaches(false);
            urlc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            urlc.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.9) Gecko/20100414 Iceweasel/3.5.9 (like Firefox/3.5.9)"");
            urlc.setRequestProperty(""Accept-Encoding"", ""gzip"");
            InputStream is = urlc.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.defaultCharset()));
            int len = urlc.getContentLength();
            dat = new char[len];
            int i = 0;
            int c;
            while ((c = reader.read()) != -1) {
                char character = (char) c;
                dat[i] = character;
                i++;
            }
            is.close();
            return dat;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",False
900974,14483804,3767539,"        public URLStream(URL url) throws IOException {
            this.url = url;
            this.conn = this.url.openConnection();
            contentType = conn.getContentType();
            name = url.toExternalForm();
            size = new Long(conn.getContentLength());
            sourceInfo = ""url"";
        }
","    @Test
    public void pk() throws Exception {
        Connection conn = s.getConnection();
        conn.setAutoCommit(false);
        PreparedStatement ps = conn.prepareStatement(""insert into t_test(t_name,t_cname,t_data,t_date,t_double) values(?,?,?,?,?)"");
        for (int i = 10; i < 20; ++i) {
            ps.setString(1, ""name-"" + i);
            ps.setString(2, ""cname-"" + i);
            ps.setBlob(3, null);
            ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
            ps.setNull(5, java.sql.Types.DOUBLE);
            ps.executeUpdate();
        }
        conn.rollback();
        conn.setAutoCommit(true);
        ps.close();
        conn.close();
    }
",False
900975,16055802,6045800,"    public static void main(String[] args) throws Exception {
        DES des = new DES();
        StreamBlockReader reader = new StreamBlockReader(new FileInputStream(""D:\\test1.txt""));
        StreamBlockWriter writer = new StreamBlockWriter(new FileOutputStream(""D:\\test2.txt""));
        SingleKey key = new SingleKey(new Block(64), """");
        key = new SingleKey(new Block(""1111111100000000111111110000000011111111000000001111111100000000""), """");
        Mode mode = new ECBDESMode(des);
        des.decrypt(reader, writer, key, mode);
    }
","    private void announce(String trackerURL, byte[] hash, byte[] peerId, int port) {
        try {
            String strUrl = trackerURL + ""?info_hash="" + URLEncoder.encode(new String(hash, Constants.BYTE_ENCODING), Constants.BYTE_ENCODING).replaceAll(""\\+"", ""%20"") + ""&peer_id="" + URLEncoder.encode(new String(peerId, Constants.BYTE_ENCODING), Constants.BYTE_ENCODING).replaceAll(""\\+"", ""%20"") + ""&port="" + port + ""&uploaded=0&downloaded=0&left=0&numwant=50&no_peer_id=1&compact=1"";
            URL url = new URL(strUrl);
            URLConnection con = url.openConnection();
            con.connect();
            con.getContent();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",False
900976,4259286,14244843,"    protected List webservice(URL url, List locations, boolean followRedirect) throws GeoServiceException {
        long start = System.currentTimeMillis();
        int rowCount = 0, hitCount = 0;
        try {
            HttpURLConnection con;
            try {
                con = (HttpURLConnection) url.openConnection();
                try {
                    con.getClass().getMethod(""setConnectTimeout"", new Class[] { Integer.TYPE }).invoke(con, new Object[] { TIMEOUT });
                } catch (Throwable t) {
                    LOG.info(""can't set connection timeout"");
                }
                con.setRequestMethod(""POST"");
                con.setDoOutput(true);
                con.setDoInput(true);
                Writer out = new OutputStreamWriter(con.getOutputStream(), UTF8);
                out.write(HEADER + ""\n"");
                for (int i = 0; i < locations.size(); i++) {
                    if (i > 0) out.write(""\n"");
                    out.write(encode((GeoLocation) locations.get(i)));
                }
                out.close();
            } catch (IOException e) {
                throw new GeoServiceException(""Accessing GEO Webservice failed"", e);
            }
            List rows = new ArrayList();
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF8));
                for (int l = 0; l < locations.size(); l++) {
                    String line = in.readLine();
                    LOG.finer(line);
                    if (line == null) break;
                    if (l == 0 && followRedirect) {
                        try {
                            return webservice(new URL(line), locations, false);
                        } catch (MalformedURLException e) {
                        }
                    }
                    rowCount++;
                    List row = new ArrayList();
                    if (!line.startsWith(""?"")) {
                        StringTokenizer hits = new StringTokenizer(line, "";"");
                        while (hits.hasMoreTokens()) {
                            GeoLocation hit = decode(hits.nextToken());
                            if (hit != null) {
                                row.add(hit);
                                hitCount++;
                            }
                        }
                    }
                    rows.add(row);
                }
                in.close();
            } catch (IOException e) {
                throw new GeoServiceException(""Reading from GEO Webservice failed"", e);
            }
            if (rows.size() < locations.size()) throw new GeoServiceException(""GEO Webservice returned "" + rows.size() + "" rows for "" + locations.size() + "" locations"");
            return rows;
        } finally {
            long secs = (System.currentTimeMillis() - start) / 1000;
            LOG.fine(""query for "" + locations.size() + "" locations in "" + secs + ""s resulted in "" + rowCount + "" rows and "" + hitCount + "" total hits"");
        }
    }
","    private void encryptChkFile(ProjectMember member, File chkFile) throws Exception {
        final java.io.FileReader reader = new java.io.FileReader(chkFile);
        final File encryptedChkFile = new File(member.createOutputFileName(outputPath, ""chk""));
        FileOutputStream outfile = null;
        ObjectOutputStream outstream = null;
        Utilities.discardBooleanResult(encryptedChkFile.getParentFile().mkdirs());
        outfile = new FileOutputStream(encryptedChkFile);
        outstream = new ObjectOutputStream(outfile);
        outstream.writeObject(new Format().parse(reader));
        reader.close();
        outfile.close();
        outstream.close();
    }
",False
900977,19147301,20474021,"    public boolean actualizarIdPartida(int idJugadorDiv, int idRonda, int idPartida) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPartida = "" + idPartida + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    public static byte[] createAuthenticator(ByteBuffer data, String secret) {
        assert data.isDirect() == false : ""must not a direct ByteBuffer"";
        int pos = data.position();
        if (pos < RadiusPacket.MIN_PACKET_LENGTH) {
            System.err.println(""packet too small"");
            return null;
        }
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            byte[] arr = data.array();
            md5.reset();
            md5.update(arr, 0, pos);
            md5.update(secret.getBytes());
            return md5.digest();
        } catch (NoSuchAlgorithmException nsaex) {
            throw new RuntimeException(""Could not access MD5 algorithm, fatal error"");
        }
    }
",False
900978,13574318,22300980,"        public void actionPerformed(ActionEvent e) {
            if (saveForWebChooser == null) {
                ExtensionFileFilter fileFilter = new ExtensionFileFilter(""HTML files"");
                fileFilter.addExtension(""html"");
                saveForWebChooser = new JFileChooser();
                saveForWebChooser.setFileFilter(fileFilter);
                saveForWebChooser.setDialogTitle(""Save for Web..."");
                saveForWebChooser.setCurrentDirectory(new File(Config.getRecentDirectory(""recentSaveForWebDirectory"")));
            }
            if (saveForWebChooser.showSaveDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
                Config.setRecentDirectory(""recentSaveForWebDirectory"", saveForWebChooser.getCurrentDirectory().getAbsolutePath());
                File pathFile = saveForWebChooser.getSelectedFile().getParentFile();
                String name = saveForWebChooser.getSelectedFile().getName();
                if (!name.toLowerCase().endsWith("".html"") && name.indexOf('.') == -1) {
                    name = name + "".html"";
                }
                String resource = MIDletClassLoader.getClassResourceName(this.getClass().getName());
                URL url = this.getClass().getClassLoader().getResource(resource);
                String path = url.getPath();
                int prefix = path.indexOf(':');
                String mainJarFileName = path.substring(prefix + 1, path.length() - resource.length());
                File appletJarDir = new File(new File(mainJarFileName).getParent(), ""lib"");
                File appletJarFile = new File(appletJarDir, ""microemu-javase-applet.jar"");
                if (!appletJarFile.exists()) {
                    appletJarFile = null;
                }
                if (appletJarFile == null) {
                }
                if (appletJarFile == null) {
                    ExtensionFileFilter fileFilter = new ExtensionFileFilter(""JAR packages"");
                    fileFilter.addExtension(""jar"");
                    JFileChooser appletChooser = new JFileChooser();
                    appletChooser.setFileFilter(fileFilter);
                    appletChooser.setDialogTitle(""Select MicroEmulator applet jar package..."");
                    appletChooser.setCurrentDirectory(new File(Config.getRecentDirectory(""recentAppletJarDirectory"")));
                    if (appletChooser.showOpenDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
                        Config.setRecentDirectory(""recentAppletJarDirectory"", appletChooser.getCurrentDirectory().getAbsolutePath());
                        appletJarFile = appletChooser.getSelectedFile();
                    } else {
                        return;
                    }
                }
                JadMidletEntry jadMidletEntry;
                Iterator it = common.jad.getMidletEntries().iterator();
                if (it.hasNext()) {
                    jadMidletEntry = (JadMidletEntry) it.next();
                } else {
                    Message.error(""MIDlet Suite has no entries"");
                    return;
                }
                String midletInput = common.jad.getJarURL();
                DeviceEntry deviceInput = selectDevicePanel.getSelectedDeviceEntry();
                if (deviceInput != null && deviceInput.getDescriptorLocation().equals(DeviceImpl.DEFAULT_LOCATION)) {
                    deviceInput = null;
                }
                File htmlOutputFile = new File(pathFile, name);
                if (!allowOverride(htmlOutputFile)) {
                    return;
                }
                File appletPackageOutputFile = new File(pathFile, ""microemu-javase-applet.jar"");
                if (!allowOverride(appletPackageOutputFile)) {
                    return;
                }
                File midletOutputFile = new File(pathFile, midletInput.substring(midletInput.lastIndexOf(""/"") + 1));
                if (!allowOverride(midletOutputFile)) {
                    return;
                }
                File deviceOutputFile = null;
                String deviceDescriptorLocation = null;
                if (deviceInput != null) {
                    deviceOutputFile = new File(pathFile, deviceInput.getFileName());
                    if (!allowOverride(deviceOutputFile)) {
                        return;
                    }
                    deviceDescriptorLocation = deviceInput.getDescriptorLocation();
                }
                try {
                    AppletProducer.createHtml(htmlOutputFile, (DeviceImpl) DeviceFactory.getDevice(), jadMidletEntry.getClassName(), midletOutputFile, appletPackageOutputFile, deviceOutputFile);
                    AppletProducer.createMidlet(new URL(midletInput), midletOutputFile);
                    IOUtils.copyFile(appletJarFile, appletPackageOutputFile);
                    if (deviceInput != null) {
                        IOUtils.copyFile(new File(Config.getConfigPath(), deviceInput.getFileName()), deviceOutputFile);
                    }
                } catch (IOException ex) {
                    Logger.error(ex);
                }
            }
        }
","    @Test
    public void testTransactWriteAndRead() throws Exception {
        JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0);
        JCFS.configureDiscovery(defaultUdpAddress, defaultUdpPort);
        try {
            server.start();
            RFile file = new RFile(""testreadwritetrans.txt"");
            RFileOutputStream out = new RFileOutputStream(file, WriteMode.TRANSACTED, false, 1);
            out.write(""test"".getBytes(""utf-8""));
            out.close();
            RFileInputStream in = new RFileInputStream(file);
            byte[] buffer = new byte[4];
            int readCount = in.read(buffer);
            in.close();
            assertEquals(4, readCount);
            String resultRead = new String(buffer, ""utf-8"");
            assertEquals(""test"", resultRead);
        } finally {
            server.stop();
        }
    }
",True
900979,5553144,190292,"    private void initStreams() throws IOException {
        if (audio != null) {
            audio.close();
        }
        if (url != null) {
            audio = new OggInputStream(url.openStream());
        } else {
            audio = new OggInputStream(ResourceLoader.getResourceAsStream(ref));
        }
    }
","    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",False
900980,8204996,6771711,"    public List<Template> getTemplatesByKeywordsAndPage(String keywords, int page) {
        String newKeywords = keywords;
        if (keywords == null || keywords.trim().length() == 0) {
            newKeywords = TemplateService.NO_KEYWORDS;
        }
        List<Template> templates = new ArrayList<Template>();
        String restURL = configuration.getBeehiveRESTRootUrl() + ""templates/keywords/"" + newKeywords + ""/page/"" + page;
        HttpGet httpGet = new HttpGet(restURL);
        httpGet.setHeader(""Accept"", ""application/json"");
        this.addAuthentication(httpGet);
        HttpClient httpClient = new DefaultHttpClient();
        try {
            HttpResponse response = httpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {
                if (response.getStatusLine().getStatusCode() == HttpServletResponse.SC_UNAUTHORIZED) {
                    throw new NotAuthenticatedException(""User "" + userService.getCurrentUser().getUsername() + "" not authenticated! "");
                }
                throw new BeehiveNotAvailableException(""Beehive is not available right now! "");
            }
            InputStreamReader reader = new InputStreamReader(response.getEntity().getContent());
            BufferedReader buffReader = new BufferedReader(reader);
            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = buffReader.readLine()) != null) {
                sb.append(line);
                sb.append(""\n"");
            }
            String result = sb.toString();
            TemplateList templateList = buildTemplateListFromJson(result);
            List<TemplateDTO> dtoes = templateList.getTemplates();
            for (TemplateDTO dto : dtoes) {
                templates.add(dto.toTemplate());
            }
        } catch (IOException e) {
            throw new BeehiveNotAvailableException(""Failed to get template list, The beehive is not available right now "", e);
        }
        return templates;
    }
","    @SuppressWarnings(""deprecation"")
    public static final ReturnCode runCommand(IOBundle io, String[] args) {
        if ((args.length < 3) || (args.length > 4)) return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, ""Invalid number of arguments: "" + args.length);
        if ((args.length == 3) && (!args[1].equals(""show""))) return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, ""Invalid number of arguments: "" + args.length);
        if ((args.length == 4) && (!(args[2].equals(""training"") || args[2].equals(""log"") || args[2].equals(""configuration"")))) return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, ""Access denied to directory: "" + args[2]);
        if (args[1].equals(""open"")) {
            final String fileName = args[2] + ""/"" + args[3];
            final File file = new File(fileName);
            FileInputStream fis = null;
            BufferedInputStream bis = null;
            DataInputStream dis = null;
            try {
                fis = new FileInputStream(file);
                bis = new BufferedInputStream(fis);
                dis = new DataInputStream(bis);
                io.println(fileName);
                io.println(file.length() + "" bytes"");
                while (dis.available() != 0) {
                    io.println(dis.readLine());
                }
                fis.close();
                bis.close();
                dis.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_NOT_FOUND, ""File "" + fileName + "" doesn't exist"");
            } catch (IOException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Error reading File "" + fileName);
            }
        } else if (args[1].equals(""save"")) {
            final String fileName = args[2] + ""/"" + args[3];
            String line;
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
                line = io.readLine();
                int count = Integer.parseInt(line.trim());
                while (count > 0) {
                    out.write(io.read());
                    count = count - 1;
                }
                out.flush();
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Error writing File "" + fileName);
            }
        } else if (args[1].equals(""delete"")) {
            final String fileName = args[2] + ""/"" + args[3];
            final File file = new File(fileName);
            if (!file.exists()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""No such file or directory: "" + fileName);
            if (!file.canWrite()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""File is write-protected: "" + fileName);
            if (file.isDirectory()) {
                String[] files = file.list();
                if (files.length > 0) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Directory is not empty: "" + fileName);
            }
            if (!file.delete()) return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""Deletion failed: "" + fileName);
        } else if (args[1].equals(""show"")) {
            File directory = new File(args[2]);
            String[] files;
            if ((!directory.isDirectory()) || (!directory.exists())) {
                return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, ""No such directory: "" + directory);
            }
            int count = 0;
            files = directory.list();
            io.println(""Files in directory \"""" + directory + ""\"":"");
            for (int i = 0; i < files.length; i++) {
                directory = new File(files[i]);
                if (!directory.isDirectory()) {
                    count++;
                    io.println("" "" + files[i]);
                }
            }
            io.println(""Total "" + count + "" files"");
        } else return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, ""Unrecognized command"");
        return ReturnCode.makeReturnCode(ReturnCode.RET_OK);
    }
",False
900981,13207438,16596670,"    public String sendRequestHTTPTunelling(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log.txt"");
                pw.write(req1xml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log3.txt"");
                pw.write(reqxml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            javax.swing.JOptionPane.showMessageDialog(null, ""<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>"", ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        System.out.println(reqxml);
        return (new org.jdom.output.XMLOutputter()).outputString(retdoc);
    }
","    private static List lookupForImplementations(final Class clazz, final ClassLoader loader, final String[] defaultImplementations, final boolean onlyFirst, final boolean returnInstances) throws ClassNotFoundException {
        if (clazz == null) {
            throw new IllegalArgumentException(""Argument 'clazz' cannot be null!"");
        }
        ClassLoader classLoader = loader;
        if (classLoader == null) {
            classLoader = clazz.getClassLoader();
        }
        String interfaceName = clazz.getName();
        ArrayList tmp = new ArrayList();
        ArrayList toRemove = new ArrayList();
        String className = System.getProperty(interfaceName);
        if (className != null && className.trim().length() > 0) {
            tmp.add(className.trim());
        }
        Enumeration en = null;
        try {
            en = classLoader.getResources(""META-INF/services/"" + clazz.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (en != null && en.hasMoreElements()) {
            URL url = (URL) en.nextElement();
            InputStream is = null;
            try {
                is = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                String line;
                do {
                    line = reader.readLine();
                    boolean remove = false;
                    if (line != null) {
                        if (line.startsWith(""#-"")) {
                            remove = true;
                            line = line.substring(2);
                        }
                        int pos = line.indexOf('#');
                        if (pos >= 0) {
                            line = line.substring(0, pos);
                        }
                        line = line.trim();
                        if (line.length() > 0) {
                            if (remove) {
                                toRemove.add(line);
                            } else {
                                tmp.add(line);
                            }
                        }
                    }
                } while (line != null);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (defaultImplementations != null) {
            for (int i = 0; i < defaultImplementations.length; i++) {
                tmp.add(defaultImplementations[i].trim());
            }
        }
        if (!clazz.isInterface()) {
            int m = clazz.getModifiers();
            if (!Modifier.isAbstract(m) && Modifier.isPublic(m) && !Modifier.isStatic(m)) {
                tmp.add(interfaceName);
            }
        }
        tmp.removeAll(toRemove);
        ArrayList res = new ArrayList();
        for (Iterator it = tmp.iterator(); it.hasNext(); ) {
            className = (String) it.next();
            try {
                Class c = Class.forName(className, false, classLoader);
                if (c != null) {
                    if (clazz.isAssignableFrom(c)) {
                        if (returnInstances) {
                            Object o = null;
                            try {
                                o = c.newInstance();
                            } catch (Throwable e) {
                                e.printStackTrace();
                            }
                            if (o != null) {
                                res.add(o);
                                if (onlyFirst) {
                                    return res;
                                }
                            }
                        } else {
                            res.add(c);
                            if (onlyFirst) {
                                return res;
                            }
                        }
                    } else {
                        logger.warning(""MetaInfLookup: Class '"" + className + ""' is not a subclass of class : "" + interfaceName);
                    }
                }
            } catch (ClassNotFoundException e) {
                logger.log(Level.WARNING, ""Cannot create implementation of interface: "" + interfaceName, e);
            }
        }
        if (res.size() == 0) {
            throw new ClassNotFoundException(""Cannot find any implemnetation of class "" + interfaceName);
        }
        return res;
    }
",True
900982,10934628,19204595,"    public static void main(String[] args) {
        try {
            {
                byte[] bytes1 = { (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                byte[] bytes2 = { (byte) 99, (byte) 2, (byte) 2, (byte) 3, (byte) 0, (byte) 9 };
                System.out.println(""Bytes 2,2,3,0,9 as Base64: "" + encodeBytes(bytes1));
                System.out.println(""Bytes 2,2,3,0,9 w/ offset: "" + encodeBytes(bytes2, 1, bytes2.length - 1));
                byte[] dbytes = decode(encodeBytes(bytes1));
                System.out.print(encodeBytes(bytes1) + "" decoded: "");
                for (int i = 0; i < dbytes.length; i++) System.out.print(dbytes[i] + (i < dbytes.length - 1 ? "","" : ""\n""));
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""test.gif.b64"");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                byte[] bytes = new byte[0];
                int b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[bytes.length + 1];
                    System.arraycopy(bytes, 0, temp, 0, bytes.length);
                    temp[bytes.length] = (byte) b;
                    bytes = temp;
                }
                b64is.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(bytes);
                javax.swing.JLabel jlabel = new javax.swing.JLabel(""Read from test.gif.b64"", iicon, 0);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""test.gif_out"");
                fos.write(bytes);
                fos.close();
                fis = new java.io.FileInputStream(""test.gif_out"");
                b64is = new Base64.InputStream(fis, ENCODE);
                byte[] ebytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[ebytes.length + 1];
                    System.arraycopy(ebytes, 0, temp, 0, ebytes.length);
                    temp[ebytes.length] = (byte) b;
                    ebytes = temp;
                }
                b64is.close();
                String s = new String(ebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                jframe = new javax.swing.JFrame();
                jframe.setTitle(""Read from test.gif_out"");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream(""test.gif.b64_out"");
                fos.write(ebytes);
                fis = new java.io.FileInputStream(""test.gif.b64_out"");
                b64is = new Base64.InputStream(fis, DECODE);
                byte[] edbytes = new byte[0];
                b = -1;
                while ((b = b64is.read()) >= 0) {
                    byte[] temp = new byte[edbytes.length + 1];
                    System.arraycopy(edbytes, 0, temp, 0, edbytes.length);
                    temp[edbytes.length] = (byte) b;
                    edbytes = temp;
                }
                b64is.close();
                iicon = new javax.swing.ImageIcon(edbytes);
                jlabel = new javax.swing.JLabel(""Read from test.gif.b64_out"", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""test.gif_out"");
                byte[] rbytes = new byte[0];
                int b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rbytes.length + 1];
                    System.arraycopy(rbytes, 0, temp, 0, rbytes.length);
                    temp[rbytes.length] = (byte) b;
                    rbytes = temp;
                }
                fis.close();
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""test.gif.b64_out2"");
                Base64.OutputStream b64os = new Base64.OutputStream(fos, ENCODE);
                b64os.write(rbytes);
                b64os.close();
                fis = new java.io.FileInputStream(""test.gif.b64_out2"");
                byte[] rebytes = new byte[0];
                b = -1;
                while ((b = fis.read()) >= 0) {
                    byte[] temp = new byte[rebytes.length + 1];
                    System.arraycopy(rebytes, 0, temp, 0, rebytes.length);
                    temp[rebytes.length] = (byte) b;
                    rebytes = temp;
                }
                fis.close();
                String s = new String(rebytes);
                javax.swing.JTextArea jta = new javax.swing.JTextArea(s);
                javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(jta);
                javax.swing.JFrame jframe = new javax.swing.JFrame();
                jframe.setTitle(""Read from test.gif.b64_out2"");
                jframe.getContentPane().add(jsp);
                jframe.pack();
                jframe.setVisible(true);
                fos = new java.io.FileOutputStream(""test.gif_out2"");
                b64os = new Base64.OutputStream(fos, DECODE);
                b64os.write(rebytes);
                b64os.close();
                javax.swing.ImageIcon iicon = new javax.swing.ImageIcon(""test.gif_out2"");
                javax.swing.JLabel jlabel = new javax.swing.JLabel(""Read from test.gif_out2"", iicon, 0);
                jframe = new javax.swing.JFrame();
                jframe.getContentPane().add(jlabel);
                jframe.pack();
                jframe.setVisible(true);
            }
            {
                java.io.FileInputStream fis = new java.io.FileInputStream(""D:\\temp\\testencoding.txt"");
                Base64.InputStream b64is = new Base64.InputStream(fis, DECODE);
                java.io.FileOutputStream fos = new java.io.FileOutputStream(""D:\\temp\\file.zip"");
                int b;
                while ((b = b64is.read()) >= 0) fos.write(b);
                fos.close();
                b64is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    protected InputStream callApiMethod(String apiUrl, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                Error error = readResponse(Error.class, getWrappedInputStream(request.getErrorStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding())));
                throw createBingSearchApiClientException(error);
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingSearchException(e);
        }
    }
",False
900983,15097860,21937981,"    public static Bitmap loadPhotoBitmap(final String imageUrl, final String type) {
        InputStream imageStream = null;
        try {
            HttpGet httpRequest = new HttpGet(new URL(imageUrl).toURI());
            HttpResponse response = (HttpResponse) new DefaultHttpClient().execute(httpRequest);
            httpRequest = null;
            BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(response.getEntity());
            response = null;
            imageStream = bufHttpEntity.getContent();
            bufHttpEntity = null;
            if (imageStream != null) {
                final BitmapFactory.Options options = new BitmapFactory.Options();
                if (type.equals(""image"")) {
                    options.inSampleSize = 2;
                }
                return BitmapFactory.decodeStream(imageStream, null, options);
            } else {
            }
        } catch (IOException e) {
        } catch (URISyntaxException e) {
        } finally {
            if (imageStream != null) closeStream(imageStream);
        }
        return null;
    }
","    private void process(String zipFileName, String directory, String db) throws SQLException {
        InputStream in = null;
        try {
            if (!FileUtils.exists(zipFileName)) {
                throw new IOException(""File not found: "" + zipFileName);
            }
            String originalDbName = null;
            int originalDbLen = 0;
            if (db != null) {
                originalDbName = getOriginalDbName(zipFileName, db);
                if (originalDbName == null) {
                    throw new IOException(""No database named "" + db + "" found"");
                }
                if (originalDbName.startsWith(File.separator)) {
                    originalDbName = originalDbName.substring(1);
                }
                originalDbLen = originalDbName.length();
            }
            in = FileUtils.openFileInputStream(zipFileName);
            ZipInputStream zipIn = new ZipInputStream(in);
            while (true) {
                ZipEntry entry = zipIn.getNextEntry();
                if (entry == null) {
                    break;
                }
                String fileName = entry.getName();
                fileName = fileName.replace('\\', File.separatorChar);
                fileName = fileName.replace('/', File.separatorChar);
                if (fileName.startsWith(File.separator)) {
                    fileName = fileName.substring(1);
                }
                boolean copy = false;
                if (db == null) {
                    copy = true;
                } else if (fileName.startsWith(originalDbName + ""."")) {
                    fileName = db + fileName.substring(originalDbLen);
                    copy = true;
                }
                if (copy) {
                    OutputStream out = null;
                    try {
                        out = FileUtils.openFileOutputStream(directory + File.separator + fileName, false);
                        IOUtils.copy(zipIn, out);
                        out.close();
                    } finally {
                        IOUtils.closeSilently(out);
                    }
                }
                zipIn.closeEntry();
            }
            zipIn.closeEntry();
            zipIn.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(in);
        }
    }
",False
900984,18960732,6305269,"    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
","    protected void copyFile(File sourceFile, File destFile) {
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!verifyOrCreateParentPath(destFile.getParentFile())) {
                throw new IOException(""Parent directory path "" + destFile.getAbsolutePath() + "" did not exist and could not be created"");
            }
            if (destFile.exists() || destFile.createNewFile()) {
                in = new FileInputStream(sourceFile).getChannel();
                out = new FileOutputStream(destFile).getChannel();
                in.transferTo(0, in.size(), out);
            } else {
                throw new IOException(""Couldn't create file for "" + destFile.getAbsolutePath());
            }
        } catch (IOException ioe) {
            if (destFile.exists() && destFile.length() < sourceFile.length()) {
                destFile.delete();
            }
            ioe.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Throwable t) {
            }
            try {
                out.close();
            } catch (Throwable t) {
            }
            destFile.setLastModified(sourceFile.lastModified());
        }
    }
",True
900985,22693191,1760353,"    public void writeToStream(String urlString, OutputStream os) {
        BufferedInputStream input = null;
        try {
            URL url = new URL(urlString);
            System.out.println(""Opening stream:"" + url.toString());
            input = new BufferedInputStream(url.openStream(), 4 * 1024 * 1024);
            byte[] data = new byte[102400];
            int read;
            while ((read = input.read(data)) != -1) {
                os.write(data, 0, read);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","    public static int deleteSysPosInsert() {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_SYS_POSITION_INSERT "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }
",False
900986,18539085,15767021,"    static void createCompleteXML(File file) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(errorFile);
            fos = new FileOutputStream(file);
            byte[] data = new byte[Integer.parseInt(BlueXStatics.prop.getProperty(""allocationUnit""))];
            int offset;
            while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (Exception e) {
            }
            try {
                fos.close();
            } catch (Exception e) {
            }
        }
        FileWriter fw = null;
        try {
            fw = new FileWriter(file, true);
            fw.append(""</detail>"");
            fw.append(""\n</exception>"");
            fw.append(""\n</log>"");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fw.close();
            } catch (Exception e) {
            }
        }
    }
","    private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File selectedFile = documentFileChooser.getSelectedFile();
            File collectionCopyFile;
            String newDocumentName = selectedFile.getName();
            Document newDocument = new Document(newDocumentName);
            if (activeCollection.containsDocument(newDocument)) {
                int matchingFilenameDistinguisher = 1;
                StringBuilder distinguisherReplacer = new StringBuilder();
                newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");
                newDocument.setDocumentName(newDocumentName);
                while (activeCollection.containsDocument(newDocument)) {
                    matchingFilenameDistinguisher++;
                    newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();
                    newDocument.setDocumentName(newDocumentName);
                }
            }
            Scanner tokenizer = null;
            FileChannel fileSource = null;
            FileChannel collectionDestination = null;
            HashMap<String, Integer> termHashMap = new HashMap<String, Integer>();
            Index collectionIndex = activeCollection.getIndex();
            int documentTermMaxFrequency = 0;
            int currentTermFrequency;
            try {
                tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));
                tokenizer.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                String nextToken;
                while (tokenizer.hasNext()) {
                    nextToken = tokenizer.next().toLowerCase();
                    if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);
                }
                Term newTerm;
                for (String term : termHashMap.keySet()) {
                    newTerm = new Term(term);
                    if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);
                    currentTermFrequency = termHashMap.get(term);
                    if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;
                    collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);
                }
                activeCollection.addDocument(newDocument);
                String userHome = System.getProperty(""user.home"");
                String fileSeparator = System.getProperty(""file.separator"");
                collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);
                collectionCopyFile.createNewFile();
                fileSource = new FileInputStream(selectedFile).getChannel();
                collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();
                collectionDestination.transferFrom(fileSource, 0, fileSource.size());
            } catch (FileNotFoundException e) {
                System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                return;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, ""An I/O error occured during file transfer!"", ""File transfer I/O error"", JOptionPane.WARNING_MESSAGE);
                return;
            } finally {
                try {
                    if (tokenizer != null) tokenizer.close();
                    if (fileSource != null) fileSource.close();
                    if (collectionDestination != null) collectionDestination.close();
                } catch (IOException e) {
                    System.err.println(e.getMessage());
                }
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
",True
900987,12067823,616102,"    public void run() {
        if (saveAsDialog == null) {
            saveAsDialog = new FileDialog(window.getShell(), SWT.SAVE);
            saveAsDialog.setFilterExtensions(saveAsTypes);
        }
        String outputFile = saveAsDialog.open();
        if (outputFile != null) {
            Object inputFile = DataSourceSingleton.getInstance().getContainer().getWrapped();
            InputStream in;
            try {
                if (inputFile instanceof URL) in = ((URL) inputFile).openStream(); else in = new FileInputStream((File) inputFile);
                OutputStream out = new FileOutputStream(outputFile);
                if (outputFile.endsWith(""xml"")) {
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                } else {
                    PrintWriter pw = new PrintWriter(out);
                    Element data = DataSourceSingleton.getInstance().getRawData();
                    writeTextFile(data, pw, -1);
                    pw.close();
                }
                in.close();
                out.close();
            } catch (MalformedURLException e1) {
            } catch (IOException e) {
            }
        }
    }
","    void copyFileAscii(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception ex) {
            System.err.println(ex.toString());
        }
    }
",True
900988,20885480,22403259,"    private void anneal(final float maxGamma, final float gammaAccel, final float objectiveTolerance, final float objectiveAccel, final float scoreTolerance, final float paramTolerance, final float distanceLimit, final float randomLimit, final long randomSeed, final BufferedDocuments<Phrase> references, final int n, final int maxNbest, File stateFile, boolean keepState) {
        float gamma = 0;
        boolean annealObjective = true;
        double[] convergedScores = new double[n];
        double[] totalLogScores = new double[n];
        boolean[] isConverged = new boolean[n];
        GradientPoint[] initPoints = new GradientPoint[n];
        GradientPoint[] prevInitPoints = new GradientPoint[n];
        GradientPoint[] bestInitPoints = new GradientPoint[n];
        GradientPoint[] prevMinPoints = new GradientPoint[n];
        Random rand = new Random(randomSeed);
        Time time = new Time();
        if (stateFile != null && stateFile.length() > 0) {
            time.reset();
            try {
                ObjectInputStream stream = new ObjectInputStream(new FileInputStream(stateFile));
                gamma = stream.readFloat();
                annealObjective = stream.readBoolean();
                convergedScores = (double[]) stream.readObject();
                totalLogScores = (double[]) stream.readObject();
                isConverged = (boolean[]) stream.readObject();
                initPoints = (GradientPoint[]) stream.readObject();
                prevInitPoints = (GradientPoint[]) stream.readObject();
                bestInitPoints = (GradientPoint[]) stream.readObject();
                prevMinPoints = (GradientPoint[]) stream.readObject();
                rand = (Random) stream.readObject();
                int size = stream.readInt();
                for (int id = 0; id < size; id++) {
                    Feature feature = FEATURES.getRaw(CONFIG, stream.readUTF(), 0f);
                    if (feature.getId() != id) throw new Exception(""Features have changed"");
                }
                evaluation.read(stream);
                stream.close();
                output.println(""# Resuming from previous optimization state ("" + time + "")"");
                output.println();
            } catch (Exception e) {
                e.printStackTrace();
                Log.getInstance().severe(""Failed loading optimization state ("" + stateFile + ""): "" + e.getMessage());
            }
        } else {
            final int evaluations = ProjectedEvaluation.CFG_OPT_HISTORY_SIZE.getValue();
            final GradientPoint[] randPoints = new GradientPoint[n * evaluations];
            for (int i = 0; i < n; i++) {
                evaluation.setParallelId(i);
                for (int j = 0; j < evaluations; j++) {
                    if (i != 0) randPoints[i * n + j] = getRandomPoint(rand, randPoints[0], distanceLimit, null);
                    evaluate(references, i + "":"" + j);
                    if (i == 0) {
                        randPoints[0] = new GradientPoint(evaluation, null);
                        gamma = LogFeatureModel.FEAT_MODEL_GAMMA.getValue();
                        break;
                    }
                }
            }
            for (int i = 0; i < randPoints.length; i++) if (randPoints[i] != null) randPoints[i] = new GradientPoint(evaluation, randPoints[i], output);
            for (int i = 0; i < n; i++) {
                prevInitPoints[i] = null;
                initPoints[i] = randPoints[i * n];
                if (i != 0) for (int j = 1; j < evaluations; j++) if (randPoints[i * n + j].getScore() < initPoints[i].getScore()) initPoints[i] = randPoints[i * n + j];
                bestInitPoints[i] = initPoints[i];
                convergedScores[i] = Float.MAX_VALUE;
            }
        }
        for (int searchCount = 1; ; searchCount++) {
            boolean isFinished = true;
            for (int i = 0; i < n; i++) isFinished = isFinished && isConverged[i];
            if (isFinished) {
                output.println(""*** N-best list converged. Modifying annealing schedule. ***"");
                output.println();
                if (annealObjective) {
                    boolean objectiveConverged = true;
                    for (int i = 0; objectiveConverged && i < n; i++) objectiveConverged = isConverged(bestInitPoints[i].getScore(), convergedScores[i], objectiveTolerance, SCORE_EPSILON);
                    annealObjective = false;
                    for (Metric<ProjectedSentenceEvaluation> metric : AbstractEvaluation.CFG_EVAL_METRICS.getValue()) if (metric.doAnnealing()) {
                        float weight = metric.getWeight();
                        if (weight != 0) if (objectiveConverged) metric.setWeight(0); else {
                            annealObjective = true;
                            metric.setWeight(weight / objectiveAccel);
                        }
                    }
                }
                if (!annealObjective) {
                    if (Math.abs(gamma) >= maxGamma) {
                        GradientPoint bestPoint = bestInitPoints[0];
                        for (int i = 1; i < n; i++) if (bestInitPoints[i].getScore() < bestPoint.getScore()) bestPoint = bestInitPoints[i];
                        output.format(""Best Score: %+.7g%n"", bestPoint.getScore());
                        output.println();
                        bestPoint = new GradientPoint(evaluation, bestPoint, output);
                        break;
                    }
                    gamma *= gammaAccel;
                    if (Math.abs(gamma) + GAMMA_EPSILON >= maxGamma) gamma = gamma >= 0 ? maxGamma : -maxGamma;
                }
                for (int i = 0; i < n; i++) {
                    convergedScores[i] = bestInitPoints[i].getScore();
                    initPoints[i] = new GradientPoint(evaluation, bestInitPoints[i], gamma, output);
                    bestInitPoints[i] = initPoints[i];
                    prevInitPoints[i] = null;
                    prevMinPoints[i] = null;
                    isConverged[i] = false;
                }
                searchCount = 0;
            }
            for (int i = 0; i < n; i++) {
                if (isConverged[i]) continue;
                if (n > 1) output.println(""Minimizing point "" + i);
                Gradient gradient = initPoints[i].getGradient();
                for (int id = 0; id < FEATURES.size(); id++) output.format(""GRAD %-65s %-+13.7g%n"", FEATURES.getName(id), gradient.get(id));
                output.println();
                time.reset();
                GradientPoint minPoint = minimize(initPoints[i], prevInitPoints[i], bestInitPoints[i], scoreTolerance, paramTolerance, distanceLimit, randomLimit, rand);
                final float[] weights = minPoint.getWeights();
                for (int j = 0; j < weights.length; j++) output.format(""PARM %-65s %-+13.7g%n"", FEATURES.getName(j), weights[j]);
                output.println();
                output.format(""Minimum Score: %+.7g (average distance of %.2f)%n"", minPoint.getScore(), minPoint.getAverageDistance());
                output.println();
                output.println(""# Minimized gradient ("" + time + "")"");
                output.println();
                output.flush();
                isConverged[i] = weights == initPoints[i].getWeights();
                prevInitPoints[i] = initPoints[i];
                prevMinPoints[i] = minPoint;
                initPoints[i] = minPoint;
            }
            for (int i = 0; i < n; i++) {
                if (isConverged[i]) continue;
                isConverged[i] = isConvergedScore(""minimum"", prevMinPoints[i], prevInitPoints[i], scoreTolerance) && isConvergedWeights(prevMinPoints[i], prevInitPoints[i], paramTolerance);
                prevMinPoints[i].setWeightsAndRescore(evaluation);
                evaluation.setParallelId(i);
                evaluate(references, Integer.toString(i));
            }
            Set<Point> prunePoints = new HashSet<Point>();
            prunePoints.addAll(Arrays.asList(bestInitPoints));
            prunePoints.addAll(Arrays.asList(prevInitPoints));
            prunePoints.addAll(Arrays.asList(initPoints));
            evaluation.prune(prunePoints, maxNbest, output);
            for (int i = 0; i < n; i++) {
                final boolean bestIsPrev = bestInitPoints[i] == prevInitPoints[i];
                final boolean bestIsInit = bestInitPoints[i] == initPoints[i];
                bestInitPoints[i] = new GradientPoint(evaluation, bestInitPoints[i], bestIsInit ? output : null);
                if (bestIsPrev) prevInitPoints[i] = bestInitPoints[i];
                if (bestIsInit) initPoints[i] = bestInitPoints[i];
                if (!bestIsPrev && prevInitPoints[i] != null) {
                    prevInitPoints[i] = new GradientPoint(evaluation, prevInitPoints[i], null);
                    if (prevInitPoints[i].getScore() <= bestInitPoints[i].getScore()) bestInitPoints[i] = prevInitPoints[i];
                }
                if (!bestIsInit) {
                    initPoints[i] = new GradientPoint(evaluation, initPoints[i], output);
                    if (initPoints[i].getScore() <= bestInitPoints[i].getScore()) bestInitPoints[i] = initPoints[i];
                }
            }
            for (int i = 0; i < n; i++) if (isConverged[i]) if (prevMinPoints[i] == null) {
                output.println(""# Convergence failed: no previous minimum is defined"");
                output.println();
                isConverged[i] = false;
            } else {
                isConverged[i] = isConvergedScore(""best known"", bestInitPoints[i], initPoints[i], scoreTolerance) && isConvergedScore(""previous minimum"", prevMinPoints[i], initPoints[i], scoreTolerance);
            }
            if (stateFile != null) {
                time.reset();
                try {
                    File dir = stateFile.getCanonicalFile().getParentFile();
                    File temp = File.createTempFile(""cunei-opt-"", "".tmp"", dir);
                    ObjectOutputStream stream = new ObjectOutputStream(new FileOutputStream(temp));
                    stream.writeFloat(gamma);
                    stream.writeBoolean(annealObjective);
                    stream.writeObject(convergedScores);
                    stream.writeObject(totalLogScores);
                    stream.writeObject(isConverged);
                    stream.writeObject(initPoints);
                    stream.writeObject(prevInitPoints);
                    stream.writeObject(bestInitPoints);
                    stream.writeObject(prevMinPoints);
                    stream.writeObject(rand);
                    stream.writeInt(FEATURES.size());
                    for (int id = 0; id < FEATURES.size(); id++) stream.writeUTF(FEATURES.getName(id));
                    evaluation.write(stream);
                    stream.close();
                    if (!temp.renameTo(stateFile)) {
                        FileChannel in = null;
                        FileChannel out = null;
                        try {
                            in = new FileInputStream(temp).getChannel();
                            out = new FileOutputStream(stateFile).getChannel();
                            in.transferTo(0, in.size(), out);
                            temp.delete();
                        } finally {
                            if (in != null) in.close();
                            if (out != null) out.close();
                        }
                    }
                    output.println(""# Saved optimization state ("" + time + "")"");
                    output.println();
                } catch (IOException e) {
                    Log.getInstance().severe(""Failed writing optimization state: "" + e.getMessage());
                }
            }
        }
        if (stateFile != null && !keepState) stateFile.delete();
    }
","    public void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",True
900989,17477953,15353770,"    public static void createModelZip(String filename, String tempdir, boolean overwrite) throws Exception {
        FileTools.checkOutput(filename, overwrite);
        BufferedInputStream origin = null;
        FileOutputStream dest = new FileOutputStream(filename);
        ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
        int BUFFER = 2048;
        byte data[] = new byte[BUFFER];
        File f = new File(tempdir);
        for (File fs : f.listFiles()) {
            FileInputStream fi = new FileInputStream(fs.getAbsolutePath());
            origin = new BufferedInputStream(fi, BUFFER);
            ZipEntry entry = new ZipEntry(fs.getName());
            out.putNextEntry(entry);
            int count;
            while ((count = origin.read(data, 0, BUFFER)) != -1) out.write(data, 0, count);
            out.closeEntry();
            origin.close();
        }
        out.close();
    }
","    private String createHash() {
        String hash = """";
        try {
            final java.util.Calendar c = java.util.Calendar.getInstance();
            String day = """" + c.get(java.util.Calendar.DATE);
            day = (day.length() == 1) ? '0' + day : day;
            String month = """" + (c.get(java.util.Calendar.MONTH) + 1);
            month = (month.length() == 1) ? '0' + month : month;
            final String hashString = getStringProperty(""hashkey"") + day + ""."" + month + ""."" + c.get(java.util.Calendar.YEAR);
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(hashString.getBytes());
            final byte digest[] = md.digest();
            hash = """";
            for (int i = 0; i < digest.length; i++) {
                final String s = Integer.toHexString(digest[i] & 0xFF);
                hash += ((s.length() == 1) ? ""0"" + s : s);
            }
        } catch (final NoSuchAlgorithmException e) {
            bot.getLogger().log(e);
        }
        return hash;
    }
",False
900990,8523656,13015489,"    public String getRssFeedUrl(boolean searchWeb) {
        String rssFeedUrl = null;
        if (entity.getNewsFeedUrl() != null & !entity.getUrl().equals("""")) {
            return entity.getNewsFeedUrl();
        } else if (entity.getUrl() == null || entity.getUrl().equals("""")) {
            return entity.getNewsFeedUrl();
        } else if (searchWeb) {
            HttpURLConnection con = null;
            InputStream is = null;
            try {
                URL url = new URL(entity.getUrl());
                con = (HttpURLConnection) url.openConnection();
                con.connect();
                is = con.getInputStream();
                InputStreamReader sr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(sr);
                String ln;
                StringBuffer sb = new StringBuffer();
                while ((ln = br.readLine()) != null) {
                    sb.append(ln + ""\n"");
                }
                rssFeedUrl = extractRssFeedUrl(sb.toString());
            } catch (Exception e) {
                log.error(e);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        log.error(e);
                    }
                }
                if (con != null) {
                    con.disconnect();
                }
            }
        }
        return rssFeedUrl;
    }
","    public void prepareOutput(HttpServletRequest req) {
        EaasyStreet.logTrace(METHOD_IN + className + OUTPUT_METHOD);
        super.prepareOutput(req);
        String content = Constants.EMPTY_STRING;
        String rawContent = null;
        List parts = null;
        try {
            URL url = new URL(sourceUrl);
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            StringBuffer buffer = new StringBuffer();
            while ((line = input.readLine()) != null) {
                buffer.append(line);
                buffer.append(Constants.LF);
            }
            rawContent = buffer.toString();
        } catch (FileNotFoundException nf) {
            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);
            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { ""URL"", nf.getMessage(), nf.toString() }));
        } catch (Exception e) {
            req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK);
            EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] { ""URL"", e.getMessage(), e.toString() }));
        }
        if (rawContent != null) {
            if (startDelimiter != null) {
                parts = StringUtils.split(rawContent, startDelimiter);
                if (parts != null && parts.size() > 1) {
                    rawContent = (String) parts.get(1);
                    if (parts.size() > 2) {
                        for (int x = 2; x < parts.size(); x++) {
                            rawContent += startDelimiter;
                            rawContent += parts.get(x);
                        }
                    }
                } else {
                    rawContent = null;
                }
            }
        }
        if (rawContent != null) {
            if (endDelimiter != null) {
                parts = StringUtils.split(rawContent, endDelimiter);
                if (parts != null && parts.size() > 0) {
                    rawContent = (String) parts.get(0);
                } else {
                    rawContent = null;
                }
            }
        }
        if (rawContent != null) {
            if (replacementValues != null && !replacementValues.isEmpty()) {
                for (int x = 0; x < replacementValues.size(); x++) {
                    LabelValueBean bean = (LabelValueBean) replacementValues.get(x);
                    rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue());
                }
            }
        }
        if (rawContent != null) {
            content = rawContent;
        }
        req.setAttribute(getFormName(), content);
        EaasyStreet.logTrace(METHOD_OUT + className + OUTPUT_METHOD);
    }
",True
900991,19483244,11519124,"    public static void copyFile(String original, String destination) throws Exception {
        File original_file = new File(original);
        File destination_file = new File(destination);
        if (!original_file.exists()) throw new Exception(""File with path "" + original + "" does not exist."");
        if (destination_file.exists()) throw new Exception(""File with path "" + destination + "" already exists."");
        FileReader in = new FileReader(original_file);
        FileWriter out = new FileWriter(destination_file);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    protected static void copyFile(File in, File out) throws IOException {
        java.io.FileWriter filewriter = null;
        java.io.FileReader filereader = null;
        try {
            filewriter = new java.io.FileWriter(out);
            filereader = new java.io.FileReader(in);
            char[] buf = new char[4096];
            int nread = filereader.read(buf, 0, 4096);
            while (nread >= 0) {
                filewriter.write(buf, 0, nread);
                nread = filereader.read(buf, 0, 4096);
            }
            buf = null;
        } finally {
            try {
                filereader.close();
            } catch (Throwable t) {
            }
            try {
                filewriter.close();
            } catch (Throwable t) {
            }
        }
    }
",True
900992,4020497,20580825,"    public static void copyFile(File sourceFile, File targetFile) throws FileCopyingException {
        try {
            FileInputStream inputStream = new FileInputStream(sourceFile);
            FileOutputStream outputStream = new FileOutputStream(targetFile);
            FileChannel readableChannel = inputStream.getChannel();
            FileChannel writableChannel = outputStream.getChannel();
            writableChannel.truncate(0);
            writableChannel.transferFrom(readableChannel, 0, readableChannel.size());
            inputStream.close();
            outputStream.close();
        } catch (IOException ioException) {
            String exceptionMessage = ""An error occurred when copying from the file \"""" + sourceFile.getAbsolutePath() + ""\"" to the file \"""" + targetFile.getAbsolutePath() + ""\""."";
            throw new FileCopyingException(exceptionMessage, ioException);
        }
    }
","    public static ByteBuffer readURL(URL url) throws IOException, MalformedURLException {
        URLConnection connection = null;
        try {
            connection = url.openConnection();
            return readInputStream(new BufferedInputStream(connection.getInputStream()));
        } catch (IOException e) {
            throw e;
        }
    }
",False
900993,4318399,20239270,"    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) {
        LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList();
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        for (int i = 0; i < fileList.size(); i++) {
            if (fileList.get(i).getId().equals(entry.getName())) {
                for (int j = 0; j < restoreList.size(); j++) {
                    if ((fileList.get(i).getName() + ""."" + fileList.get(i).getType()).equals(restoreList.get(j))) {
                        counter += 1;
                        File outputFile = new File(outputDir, fileList.get(i).getName() + ""."" + fileList.get(i).getType());
                        if (!outputFile.getParentFile().exists()) {
                            createDir(outputFile.getParentFile());
                        }
                        BufferedInputStream inputStream;
                        BufferedOutputStream outputStream;
                        try {
                            inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
                            outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
                            IOUtils.copy(inputStream, outputStream);
                            outputStream.close();
                            inputStream.close();
                        } catch (IOException ex) {
                            throw new BackupException(ex.getMessage());
                        }
                    }
                }
            }
        }
    }
","    public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) {
        boolean big_files = false;
        for (int i = 0; i < sources.length; i++) {
            if (sources[i].length() > Integer.MAX_VALUE) {
                big_files = true;
                break;
            }
        }
        if (big_files) {
            joinFiles(validator, target, sources);
        } else {
            System.out.println(i18n.getString(""jdk14_comment""));
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(target);
                FileChannel fco = fos.getChannel();
                FileInputStream fis = null;
                for (int i = 0; i < sources.length; i++) {
                    fis = new FileInputStream(sources[i]);
                    FileChannel fci = fis.getChannel();
                    java.nio.MappedByteBuffer map;
                    try {
                        map = fci.map(FileChannel.MapMode.READ_ONLY, 0, (int) sources[i].length());
                        fco.write(map);
                        fci.close();
                    } catch (IOException ioe) {
                        JOptionPane.showMessageDialog(null, ioe, i18n.getString(""Failure""), JOptionPane.ERROR_MESSAGE);
                        try {
                            fis.close();
                            fos.close();
                        } catch (IOException e) {
                        }
                    } finally {
                        fis.close();
                    }
                }
                fco.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, i18n.getString(""Failure""), JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (fos != null) fos.close();
                } catch (IOException e) {
                }
            }
        }
    }
",True
900994,3945916,249176,"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","        @Override
        public void actionPerformed(ActionEvent e) {
            for (int i = 0; i < 5; i++) {
                if (e.getSource() == btnNumber[i]) {
                    String password = new String((passwordField.getPassword()));
                    passwordField.setText(password + i);
                }
            }
            if (e.getSource() == btnOK) {
                String password = new String((passwordField.getPassword()));
                ResultSet rs;
                Statement stmt;
                String sql;
                String result = """";
                boolean checkPassword = false;
                boolean checkPassword1 = false;
                boolean checkPassword2 = false;
                sql = ""select password from Usuarios where login='"" + login + ""'"";
                try {
                    theConn = DatabaseConnection.getConnection();
                    stmt = theConn.createStatement();
                    rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        result = rs.getString(""password"");
                    }
                    rs.close();
                    stmt.close();
                    try {
                        Tree tree1 = CreateTree(password, 0);
                        Tree tree2 = CreateTree(password, 1);
                        tree1.enumerateTree(tree1.root);
                        tree2.enumerateTree(tree2.root);
                        for (int i = 0; i < tree1.passwdVector.size(); i++) {
                            MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
                            messageDigest.update(tree1.passwdVector.get(i).getBytes());
                            BigInteger bigInt = new BigInteger(1, messageDigest.digest());
                            String output = bigInt.toString(16);
                            if (output.compareTo(result) == 0) {
                                checkPassword1 = true;
                                break;
                            } else checkPassword1 = false;
                        }
                        for (int i = 0; i < tree2.passwdVector.size(); i++) {
                            MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
                            messageDigest.update(tree2.passwdVector.get(i).getBytes());
                            BigInteger bigInt = new BigInteger(1, messageDigest.digest());
                            String output = bigInt.toString(16);
                            if (output.compareTo(result) == 0) {
                                checkPassword2 = true;
                                break;
                            } else checkPassword2 = false;
                        }
                        if (checkPassword1 == true || checkPassword2 == true) checkPassword = true; else checkPassword = false;
                    } catch (NoSuchAlgorithmException exception) {
                        exception.printStackTrace();
                    }
                } catch (Exception exception) {
                    exception.printStackTrace();
                } finally {
                    try {
                        if (theConn != null) theConn.close();
                    } catch (Exception exception) {
                    }
                }
                if (checkPassword == true) {
                    JOptionPane.showMessageDialog(null, ""senha correta!"");
                    setTries(0);
                    setVisible(false);
                    Error.log(3003, ""Senha pessoal verificada positivamente."");
                    Error.log(3002, ""Autentica��o etapa 2 encerrada."");
                    PasswordTableWindow ptw = new PasswordTableWindow(login);
                    ptw.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    JOptionPane.showMessageDialog(null, ""senha incorreta!"");
                    Error.log(3004, ""Senha pessoal verificada negativamente."");
                    int tries = getTries();
                    if (tries == 0) {
                        Error.log(3005, ""Primeiro erro da senha pessoal contabilizado."");
                    } else if (tries == 1) {
                        Error.log(3006, ""Segundo erro da senha pessoal contabilizado."");
                    } else if (tries == 2) {
                        Error.log(3007, ""Terceiro erro da senha pessoal contabilizado."");
                        Error.log(3008, ""Acesso do usuario "" + login + "" bloqueado pela autentica��o etapa 2."");
                        Error.log(3002, ""Autentica��o etapa 2 encerrada."");
                        Error.log(1002, ""Sistema encerrado."");
                        setTries(++tries);
                        System.exit(1);
                    }
                    setTries(++tries);
                }
            }
            if (e.getSource() == btnClear) {
                passwordField.setText("""");
            }
        }
",True
900995,20200144,13627621,"    public void copyFile(final File sourceFile, final File destinationFile) throws FileIOException {
        final FileChannel sourceChannel;
        try {
            sourceChannel = new FileInputStream(sourceFile).getChannel();
        } catch (FileNotFoundException exception) {
            final String message = COPY_FILE_FAILED + sourceFile + "" -> "" + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, sourceFile, exception);
        }
        final FileChannel destinationChannel;
        try {
            destinationChannel = new FileOutputStream(destinationFile).getChannel();
        } catch (FileNotFoundException exception) {
            final String message = COPY_FILE_FAILED + sourceFile + "" -> "" + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, destinationFile, exception);
        }
        try {
            destinationChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (Exception exception) {
            final String message = COPY_FILE_FAILED + sourceFile + "" -> "" + destinationFile;
            LOGGER.fatal(message);
            throw fileIOException(message, null, exception);
        } finally {
            if (sourceChannel != null) {
                try {
                    sourceChannel.close();
                } catch (IOException exception) {
                    LOGGER.error(""closing source"", exception);
                }
            }
            if (destinationChannel != null) {
                try {
                    destinationChannel.close();
                } catch (IOException exception) {
                    LOGGER.error(""closing destination"", exception);
                }
            }
        }
    }
","    public static synchronized String hash(String plaintext) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            return null;
        }
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
",False
900996,7275980,6158570,"    public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""notifications.send""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.22af9ee9ad842c7eb52004ece6e96b10.86400.1298646000-350727914""));
        PostParameter a6 = new PostParameter(""to_ids"", Utils.encode(""350727914""));
        PostParameter a7 = new PostParameter(""notification"", ""又到了要睡觉的时间了。"");
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a6);
        ps.addParameter(a7);
        ps.addParameter(a8);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
","    public void download(String contentUuid, File path) throws WebServiceClientException {
        try {
            URL url = new URL(getPath(""/download/"" + contentUuid));
            URLConnection connection = url.openConnection();
            InputStream inputStream = connection.getInputStream();
            OutputStream output = new FileOutputStream(path);
            IoUtils.copyBytes(inputStream, output);
            IoUtils.close(inputStream);
            IoUtils.close(output);
        } catch (IOException ioex) {
            throw new WebServiceClientException(""Could not download or saving content to path ["" + path.getAbsolutePath() + ""]"", ioex);
        } catch (Exception ex) {
            throw new WebServiceClientException(""Could not download content from web service."", ex);
        }
    }
",False
900997,14914613,9054825,"    private void retrieveData() {
        StringBuffer obsBuf = new StringBuffer();
        try {
            URL url = new URL(getProperty(""sourceURL""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String lineIn = null;
            while ((lineIn = in.readLine()) != null) {
                if (GlobalProps.DEBUG) {
                    logger.log(Level.FINE, ""WebSource retrieveData: "" + lineIn);
                }
                obsBuf.append(lineIn);
            }
            String fmt = getProperty(""dataFormat"");
            if (GlobalProps.DEBUG) {
                logger.log(Level.FINE, ""Raw: "" + obsBuf.toString());
            }
            if (""NWS XML"".equals(fmt)) {
                obs = new NWSXmlObservation(obsBuf.toString());
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, ""Can't connect to: "" + getProperty(""sourceURL""));
            if (GlobalProps.DEBUG) {
                e.printStackTrace();
            }
        }
    }
","    public List<BadassEntry> parse() {
        mBadassEntries = new ArrayList<BadassEntry>();
        try {
            URL url = new URL(mUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setDoOutput(true);
            connection.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            boolean flag1 = false;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (!flag1 && line.contains(START_PARSE)) flag1 = true;
                if (flag1 && line.contains(STOP_PARSE)) break;
                if (flag1) {
                    if (line.contains(ENTRY_HINT)) {
                        parseBadass(line);
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return mBadassEntries;
    }
",True
900998,1293659,9016775,"    public void delete(int id) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                String sql = ""delete from Instructions where InstructionId = "" + id;
                stmt.executeUpdate(sql);
                sql = ""delete from InstructionGroups where InstructionId = "" + id;
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
","    private int saveToTempTable(ArrayList cons, String tempTableName, boolean truncateFirst) throws SQLException {
        if (truncateFirst) {
            this.executeUpdate(""TRUNCATE TABLE "" + tempTableName);
            Categories.dataDb().debug(""TABLE "" + tempTableName + "" TRUNCATED."");
        }
        PreparedStatement ps = null;
        int rows = 0;
        try {
            String insert = ""INSERT INTO "" + tempTableName + "" VALUES (?)"";
            ps = this.conn.prepareStatement(insert);
            for (int i = 0; i < cons.size(); i++) {
                ps.setLong(1, ((Long) cons.get(i)).longValue());
                rows = ps.executeUpdate();
                if ((i % 500) == 0) {
                    this.conn.commit();
                }
            }
            this.conn.commit();
        } catch (SQLException sqle) {
            this.conn.rollback();
            throw sqle;
        } finally {
            if (ps != null) {
                ps.close();
            }
        }
        return rows;
    }
",True
900999,7363810,5132884,"    public RandomAccessFileOrArray(URL url) throws IOException {
        InputStream is = url.openStream();
        try {
            this.arrayIn = InputStreamToArray(is);
        } finally {
            try {
                is.close();
            } catch (IOException ioe) {
            }
        }
    }
","    public byte[] encryptMsg(String encryptString) {
        byte[] encryptByte = null;
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(encryptString.getBytes());
            encryptByte = messageDigest.digest();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return encryptByte;
    }
",False
901000,10713685,20009109,"    public static boolean unzip_and_merge(String infile, String outfile) {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(infile);
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            FileOutputStream fos = new FileOutputStream(outfile);
            dest = new BufferedOutputStream(fos, BUFFER);
            while (zis.getNextEntry() != null) {
                int count;
                byte data[] = new byte[BUFFER];
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
            }
            dest.close();
            zis.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
","    public static void concatFiles(final String as_base_file_name) throws IOException, FileNotFoundException {
        new File(as_base_file_name).createNewFile();
        final OutputStream lo_out = new FileOutputStream(as_base_file_name, true);
        int ln_part = 1, ln_readed = -1;
        final byte[] lh_buffer = new byte[32768];
        File lo_file = new File(as_base_file_name + ""part1"");
        while (lo_file.exists() && lo_file.isFile()) {
            final InputStream lo_input = new FileInputStream(lo_file);
            while ((ln_readed = lo_input.read(lh_buffer)) != -1) {
                lo_out.write(lh_buffer, 0, ln_readed);
            }
            ln_part++;
            lo_file = new File(as_base_file_name + ""part"" + ln_part);
        }
        lo_out.flush();
        lo_out.close();
    }
",True
901001,6908540,21461878,"    public void create_list() {
        try {
            String data = URLEncoder.encode(""PHPSESSID"", ""UTF-8"") + ""="" + URLEncoder.encode(this.get_session(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_CREATE_LIST);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            line = rd.readLine();
            wr.close();
            rd.close();
            System.out.println(""Gene list saved in LOLA"");
        } catch (Exception e) {
            System.out.println(""error in createList()"");
            e.printStackTrace();
        }
    }
","    private boolean verifyAppId(String appid) {
        try {
            String urlstr = ""http://"" + appid + "".appspot.com"";
            URL url = new URL(urlstr);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                buf.append(line);
            }
            reader.close();
            return buf.toString().contains(""hyk-proxy"");
        } catch (Exception e) {
        }
        return false;
    }
",True
901002,3058818,12101435,"    public static void encryptFile(String input, String output, String pwd) throws Exception {
        CipherOutputStream out;
        InputStream in;
        Cipher cipher;
        SecretKey key;
        byte[] byteBuffer;
        cipher = Cipher.getInstance(""DES"");
        key = new SecretKeySpec(pwd.getBytes(), ""DES"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        in = new FileInputStream(input);
        out = new CipherOutputStream(new FileOutputStream(output), cipher);
        byteBuffer = new byte[1024];
        for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) ;
        in.close();
        out.close();
    }
","    private void invokeTest(String queryfile, String target) {
        try {
            String query = IOUtils.toString(XPathMarkBenchmarkTest.class.getResourceAsStream(queryfile)).trim();
            String args = EXEC_CMD + "" \"""" + query + ""\"" \"""" + target + '""';
            System.out.println(""Invoke command: \n "" + args);
            Process proc = Runtime.getRuntime().exec(args, null, benchmarkDir);
            InputStream is = proc.getInputStream();
            File outFile = new File(outDir, queryfile + "".result"");
            IOUtils.copy(is, new FileOutputStream(outFile));
            is.close();
            int ret = proc.waitFor();
            if (ret != 0) {
                System.out.println(""process exited with value : "" + ret);
            }
        } catch (IOException ioe) {
            throw new IllegalStateException(ioe);
        } catch (InterruptedException irre) {
            throw new IllegalStateException(irre);
        }
    }
",True
901003,11651293,22423727,"    public void render(final HttpServletRequest request, final HttpServletResponse response, final byte[] bytes, final Throwable t, final String contentType, final String encoding) throws Exception {
        if (contentType != null) {
            response.setContentType(contentType);
        }
        if (encoding != null) {
            response.setCharacterEncoding(encoding);
        }
        response.setContentLength(bytes.length);
        IOUtils.copy(new ByteArrayInputStream(bytes), response.getOutputStream());
    }
","    public void copyFile(String source_file_path, String destination_file_path) {
        FileWriter fw = null;
        FileReader fr = null;
        BufferedReader br = null;
        BufferedWriter bw = null;
        File source = null;
        try {
            fr = new FileReader(source_file_path);
            fw = new FileWriter(destination_file_path);
            br = new BufferedReader(fr);
            bw = new BufferedWriter(fw);
            source = new File(source_file_path);
            int fileLength = (int) source.length();
            char charBuff[] = new char[fileLength];
            while (br.read(charBuff, 0, fileLength) != -1) bw.write(charBuff, 0, fileLength);
        } catch (FileNotFoundException fnfe) {
            System.out.println(source_file_path + "" does not exist!"");
        } catch (IOException ioe) {
            System.out.println(""Error reading/writing files!"");
        } finally {
            try {
                if (br != null) br.close();
                if (bw != null) bw.close();
            } catch (IOException ioe) {
            }
        }
    }
",True
901004,19204595,8250731,"    protected InputStream callApiMethod(String apiUrl, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                Error error = readResponse(Error.class, getWrappedInputStream(request.getErrorStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding())));
                throw createBingSearchApiClientException(error);
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingSearchException(e);
        }
    }
","    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String uuid = req.getParameterValues(Constants.PARAM_UUID)[0];
        String datastream = null;
        if (req.getRequestURI().contains(Constants.SERVLET_DOWNLOAD_FOXML_PREFIX)) {
            resp.addHeader(""Content-Disposition"", ""attachment; ContentType = \""text/xml\""; filename=\"""" + uuid + ""_server_version.foxml\"""");
        } else {
            datastream = req.getParameterValues(Constants.PARAM_DATASTREAM)[0];
            resp.addHeader(""Content-Disposition"", ""attachment; ContentType = \""text/xml\""; filename=\"""" + uuid + ""_server_version_"" + datastream + "".xml\"""");
        }
        ServletOutputStream os = resp.getOutputStream();
        if (uuid != null && !"""".equals(uuid)) {
            try {
                StringBuffer sb = new StringBuffer();
                if (req.getRequestURI().contains(Constants.SERVLET_DOWNLOAD_FOXML_PREFIX)) {
                    sb.append(config.getFedoraHost()).append(""/objects/"").append(uuid).append(""/objectXML"");
                } else if (req.getRequestURI().contains(Constants.SERVLET_DOWNLOAD_DATASTREAMS_PREFIX)) {
                    sb.append(config.getFedoraHost()).append(""/objects/"").append(uuid).append(""/datastreams/"").append(datastream).append(""/content"");
                }
                InputStream is = RESTHelper.get(sb.toString(), config.getFedoraLogin(), config.getFedoraPassword(), false);
                if (is == null) {
                    return;
                }
                try {
                    if (req.getRequestURI().contains(Constants.SERVLET_DOWNLOAD_DATASTREAMS_PREFIX)) {
                        os.write(Constants.XML_HEADER_WITH_BACKSLASHES.getBytes());
                    }
                    IOUtils.copyStreams(is, os);
                } catch (IOException e) {
                    resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                    LOGGER.error(""Problem with downloading foxml."", e);
                } finally {
                    os.flush();
                    if (is != null) {
                        try {
                            is.close();
                        } catch (IOException e) {
                            resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                            LOGGER.error(""Problem with downloading foxml."", e);
                        } finally {
                            is = null;
                        }
                    }
                }
            } catch (IOException e) {
                resp.setStatus(HttpURLConnection.HTTP_NOT_FOUND);
                LOGGER.error(""Problem with downloading foxml."", e);
            } finally {
                os.flush();
            }
        }
    }
",False
901005,21321505,13536658,"        public void run() {
            try {
                IOUtils.copy(is, os);
                os.flush();
            } catch (IOException ioe) {
                logger.error(""Unable to copy"", ioe);
            } finally {
                IOUtils.closeQuietly(is);
                IOUtils.closeQuietly(os);
            }
        }
","    private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) {
        Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content);
        StringBuffer result = new StringBuffer();
        while (matcher.find()) {
            String protectedMarkup = matcher.group();
            protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget);
            try {
                MessageDigest digest = MessageDigest.getInstance(""MD5"");
                digest.reset();
                digest.update(protectedMarkup.getBytes(""UTF-8""));
                String hash = bytesToHash(digest.digest());
                matcher.appendReplacement(result, hash);
                c_protectionMap.put(hash, protectedMarkup);
                m_hashList.add(hash);
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
        matcher.appendTail(result);
        return result.toString();
    }
",False
901006,9257486,21285620,"    public static boolean dumpFile(String from, File to, String lineBreak) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(from)));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(to)));
            String line = null;
            while ((line = in.readLine()) != null) out.write(Main.getInstance().resolve(line) + lineBreak);
            in.close();
            out.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",True
901007,5854498,19875183,"    public void handleMessage(Message message) throws Fault {
        InputStream is = message.getContent(InputStream.class);
        if (is == null) {
            return;
        }
        CachedOutputStream bos = new CachedOutputStream();
        try {
            IOUtils.copy(is, bos);
            is.close();
            bos.close();
            sendMsg(""Inbound Message \n"" + ""--------------"" + bos.getOut().toString() + ""\n--------------"");
            message.setContent(InputStream.class, bos.getInputStream());
        } catch (IOException e) {
            throw new Fault(e);
        }
    }
","    private void copy(File inputFile, File outputFile) {
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new FileInputStream(inputFile), ""UTF-8""));
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), ""UTF-8""));
            while (reader.ready()) {
                writer.write(reader.readLine());
                writer.write(System.getProperty(""line.separator""));
            }
        } catch (IOException e) {
        } finally {
            try {
                if (reader != null) reader.close();
                if (writer != null) writer.close();
            } catch (IOException e1) {
            }
        }
    }
",True
901008,2831663,3260787,"    public void onMessage(Message message) {
        LOG.debug(""onMessage"");
        DownloadMessage downloadMessage;
        try {
            downloadMessage = new DownloadMessage(message);
        } catch (JMSException e) {
            LOG.error(""JMS error: "" + e.getMessage(), e);
            return;
        }
        String caName = downloadMessage.getCaName();
        boolean update = downloadMessage.isUpdate();
        LOG.debug(""issuer: "" + caName);
        CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName);
        if (null == certificateAuthority) {
            LOG.error(""unknown certificate authority: "" + caName);
            return;
        }
        if (!update && Status.PROCESSING != certificateAuthority.getStatus()) {
            LOG.debug(""CA status not marked for processing"");
            return;
        }
        String crlUrl = certificateAuthority.getCrlUrl();
        if (null == crlUrl) {
            LOG.warn(""No CRL url for CA "" + certificateAuthority.getName());
            certificateAuthority.setStatus(Status.NONE);
            return;
        }
        NetworkConfig networkConfig = this.configurationDAO.getNetworkConfig();
        HttpClient httpClient = new HttpClient();
        if (null != networkConfig) {
            httpClient.getHostConfiguration().setProxy(networkConfig.getProxyHost(), networkConfig.getProxyPort());
        }
        HttpClientParams httpClientParams = httpClient.getParams();
        httpClientParams.setParameter(""http.socket.timeout"", new Integer(1000 * 20));
        LOG.debug(""downloading CRL from: "" + crlUrl);
        GetMethod getMethod = new GetMethod(crlUrl);
        getMethod.addRequestHeader(""User-Agent"", ""jTrust CRL Client"");
        int statusCode;
        try {
            statusCode = httpClient.executeMethod(getMethod);
        } catch (Exception e) {
            downloadFailed(caName, crlUrl);
            throw new RuntimeException();
        }
        if (HttpURLConnection.HTTP_OK != statusCode) {
            LOG.debug(""HTTP status code: "" + statusCode);
            downloadFailed(caName, crlUrl);
            throw new RuntimeException();
        }
        String crlFilePath;
        File crlFile = null;
        try {
            crlFile = File.createTempFile(""crl-"", "".der"");
            InputStream crlInputStream = getMethod.getResponseBodyAsStream();
            OutputStream crlOutputStream = new FileOutputStream(crlFile);
            IOUtils.copy(crlInputStream, crlOutputStream);
            IOUtils.closeQuietly(crlInputStream);
            IOUtils.closeQuietly(crlOutputStream);
            crlFilePath = crlFile.getAbsolutePath();
            LOG.debug(""temp CRL file: "" + crlFilePath);
        } catch (IOException e) {
            downloadFailed(caName, crlUrl);
            if (null != crlFile) {
                crlFile.delete();
            }
            throw new RuntimeException(e);
        }
        try {
            this.notificationService.notifyHarvester(caName, crlFilePath, update);
        } catch (JMSException e) {
            crlFile.delete();
            throw new RuntimeException(e);
        }
    }
","    public CopyAllDataToOtherFolderResponse CopyAllDataToOtherFolder(DPWSContext context, CopyAllDataToOtherFolder CopyAllDataInps) throws DPWSException {
        CopyAllDataToOtherFolderResponse cpyRp = new CopyAllDataToOtherFolderResponseImpl();
        int hany = 0;
        String errorMsg = null;
        try {
            if ((rootDir == null) || (rootDir.length() == (-1))) {
                errorMsg = LocalStorVerify.ISNT_ROOTFLD;
            } else {
                String sourceN = CopyAllDataInps.getSourceName();
                String targetN = CopyAllDataInps.getTargetName();
                if (LocalStorVerify.isValid(sourceN) && LocalStorVerify.isValid(targetN)) {
                    String srcDir = rootDir + File.separator + sourceN;
                    String trgDir = rootDir + File.separator + targetN;
                    if (LocalStorVerify.isLength(srcDir) && LocalStorVerify.isLength(trgDir)) {
                        for (File fs : new File(srcDir).listFiles()) {
                            File ft = new File(trgDir + '\\' + fs.getName());
                            FileChannel in = null, out = null;
                            try {
                                in = new FileInputStream(fs).getChannel();
                                out = new FileOutputStream(ft).getChannel();
                                long size = in.size();
                                MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                                out.write(buf);
                            } finally {
                                if (in != null) in.close();
                                if (out != null) out.close();
                                hany++;
                            }
                        }
                    } else {
                        errorMsg = LocalStorVerify.FLD_TOOLNG;
                    }
                } else {
                    errorMsg = LocalStorVerify.ISNT_VALID;
                }
            }
        } catch (Throwable tr) {
            tr.printStackTrace();
            errorMsg = tr.getMessage();
            hany = (-1);
        }
        if (errorMsg != null) {
        }
        cpyRp.setNum(hany);
        return cpyRp;
    }
",True
901009,3558514,2285441,"    private synchronized void ensureParsed() throws IOException, BadIMSCPException {
        if (cp != null) return;
        if (on_disk == null) {
            on_disk = createTemporaryFile();
            OutputStream to_disk = new FileOutputStream(on_disk);
            IOUtils.copy(in.getInputStream(), to_disk);
            to_disk.close();
        }
        try {
            ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
            parser.parse(on_disk);
            cp = parser.getPackage();
        } catch (BadParseException x) {
            throw new BadIMSCPException(""Cannot parse content package"", x);
        }
    }
","    static synchronized Person lookup(PhoneNumber number, String siteName) {
        Vector<Person> foundPersons = new Vector<Person>(5);
        if (number.isFreeCall()) {
            Person p = new Person("""", ""FreeCall"");
            p.addNumber(number);
            foundPersons.add(p);
        } else if (number.isSIPNumber() || number.isQuickDial()) {
            Person p = new Person();
            p.addNumber(number);
            foundPersons.add(p);
        } else if (ReverseLookup.rlsMap.containsKey(number.getCountryCode())) {
            nummer = number.getAreaNumber();
            rls_list = ReverseLookup.rlsMap.get(number.getCountryCode());
            Debug.info(""Begin reverselookup for: "" + nummer);
            if (nummer.startsWith(number.getCountryCode())) nummer = nummer.substring(number.getCountryCode().length());
            city = """";
            for (int i = 0; i < rls_list.size(); i++) {
                yield();
                rls = rls_list.get(i);
                if (!siteName.equals("""") && !siteName.equals(rls.getName())) {
                    Debug.warning(""This lookup should be done using a specific site, skipping"");
                    continue;
                }
                prefix = rls.getPrefix();
                ac_length = rls.getAreaCodeLength();
                if (!nummer.startsWith(prefix)) nummer = prefix + nummer;
                urlstr = rls.getURL();
                if (urlstr.contains(""$AREACODE"")) {
                    urlstr = urlstr.replaceAll(""\\$AREACODE"", nummer.substring(prefix.length(), ac_length + prefix.length()));
                    urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer.substring(prefix.length() + ac_length));
                } else if (urlstr.contains(""$PFXAREACODE"")) {
                    urlstr = urlstr.replaceAll(""\\$PFXAREACODE"", nummer.substring(0, prefix.length() + ac_length));
                    urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer.substring(prefix.length() + ac_length));
                } else urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer);
                Debug.info(""Reverse lookup using: "" + urlstr);
                url = null;
                data = new String[dataLength];
                try {
                    url = new URL(urlstr);
                    if (url != null) {
                        try {
                            con = url.openConnection();
                            con.setConnectTimeout(5000);
                            con.setReadTimeout(15000);
                            con.addRequestProperty(""User-Agent"", userAgent);
                            con.connect();
                            header = """";
                            charSet = """";
                            for (int j = 0; ; j++) {
                                String headerName = con.getHeaderFieldKey(j);
                                String headerValue = con.getHeaderField(j);
                                if (headerName == null && headerValue == null) {
                                    break;
                                }
                                if (""content-type"".equalsIgnoreCase(headerName)) {
                                    String[] split = headerValue.split("";"", 2);
                                    for (int k = 0; k < split.length; k++) {
                                        if (split[k].trim().toLowerCase().startsWith(""charset="")) {
                                            String[] charsetSplit = split[k].split(""="");
                                            charSet = charsetSplit[1].trim();
                                        }
                                    }
                                }
                                header += headerName + "": "" + headerValue + "" | "";
                            }
                            Debug.debug(""Header of "" + rls.getName() + "":"" + header);
                            Debug.debug(""CHARSET : "" + charSet);
                            BufferedReader d;
                            if (charSet.equals("""")) {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), ""ISO-8859-1""));
                            } else {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), charSet));
                            }
                            int lines = 0;
                            while (null != ((str = d.readLine()))) {
                                data[lines] = str;
                                yield();
                                if (lines >= dataLength) {
                                    System.err.println(""Result > "" + dataLength + "" Lines"");
                                    break;
                                }
                                lines++;
                            }
                            d.close();
                            Debug.info(""Begin processing response from "" + rls.getName());
                            for (int j = 0; j < rls.size(); j++) {
                                yield();
                                firstname = """";
                                lastname = """";
                                company = """";
                                street = """";
                                zipcode = """";
                                city = """";
                                Person p = null;
                                patterns = rls.getEntry(j);
                                Pattern namePattern = null;
                                Pattern streetPattern = null;
                                Pattern cityPattern = null;
                                Pattern zipcodePattern = null;
                                Pattern firstnamePattern = null;
                                Pattern lastnamePattern = null;
                                Matcher nameMatcher = null;
                                Matcher streetMatcher = null;
                                Matcher cityMatcher = null;
                                Matcher zipcodeMatcher = null;
                                Matcher firstnameMatcher = null;
                                Matcher lastnameMatcher = null;
                                if (!patterns[ReverseLookupSite.NAME].equals("""") && (patterns[ReverseLookupSite.FIRSTNAME].equals("""") && patterns[ReverseLookupSite.LASTNAME].equals(""""))) {
                                    namePattern = Pattern.compile(patterns[ReverseLookupSite.NAME]);
                                }
                                if (!patterns[ReverseLookupSite.STREET].equals("""")) {
                                    streetPattern = Pattern.compile(patterns[ReverseLookupSite.STREET]);
                                }
                                if (!patterns[ReverseLookupSite.CITY].equals("""")) {
                                    cityPattern = Pattern.compile(patterns[ReverseLookupSite.CITY]);
                                }
                                if (!patterns[ReverseLookupSite.ZIPCODE].equals("""")) {
                                    zipcodePattern = Pattern.compile(patterns[ReverseLookupSite.ZIPCODE]);
                                }
                                if (!patterns[ReverseLookupSite.FIRSTNAME].equals("""")) {
                                    firstnamePattern = Pattern.compile(patterns[ReverseLookupSite.FIRSTNAME]);
                                }
                                if (!patterns[ReverseLookupSite.LASTNAME].equals("""")) {
                                    lastnamePattern = Pattern.compile(patterns[ReverseLookupSite.LASTNAME]);
                                }
                                for (int line = 0; line < dataLength; line++) {
                                    if (data[line] != null) {
                                        int spaceAlternative = 160;
                                        data[line] = data[line].replaceAll(new Character((char) spaceAlternative).toString(), "" "");
                                        if (lastnamePattern != null) {
                                            lastnameMatcher = lastnamePattern.matcher(data[line]);
                                            if (lastnameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= lastnameMatcher.groupCount(); k++) {
                                                    if (lastnameMatcher.group(k) != null) str = str + lastnameMatcher.group(k).trim() + "" "";
                                                }
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll("","", """");
                                                lastname = lastname.replaceAll(""%20"", "" "");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if (""lastname"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setLastName(lastname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (firstnamePattern != null) {
                                            firstnameMatcher = firstnamePattern.matcher(data[line]);
                                            if (firstnameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= firstnameMatcher.groupCount(); k++) {
                                                    if (firstnameMatcher.group(k) != null) str = str + firstnameMatcher.group(k).trim() + "" "";
                                                }
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                firstname = firstname.trim();
                                                firstname = firstname.replaceAll("","", """");
                                                firstname = firstname.replaceAll(""%20"", "" "");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                if (""firstname"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (namePattern != null) {
                                            nameMatcher = namePattern.matcher(data[line]);
                                            if (nameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= nameMatcher.groupCount(); k++) {
                                                    if (nameMatcher.group(k) != null) str = str + nameMatcher.group(k).trim() + "" "";
                                                }
                                                String[] split;
                                                split = str.split("" "", 2);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(split[0]));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll("","", """");
                                                lastname = lastname.replaceAll(""%20"", "" "");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if (split[1].length() > 0) {
                                                    firstname = HTMLUtil.stripEntities(split[1]);
                                                    if ((firstname.indexOf(""  "") > -1) && (firstname.indexOf(""  u."") == -1)) {
                                                        company = JFritzUtils.removeLeadingSpaces(firstname.substring(firstname.indexOf(""  "")).trim());
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.substring(0, firstname.indexOf(""  "")).trim());
                                                    } else {
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.replaceAll(""  u. "", "" und ""));
                                                    }
                                                }
                                                firstname = firstname.replaceAll(""%20"", "" "");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                firstname = firstname.trim();
                                                company = company.replaceAll(""%20"", "" "");
                                                company = JFritzUtils.replaceSpecialCharsUTF(company);
                                                company = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(company));
                                                company = JFritzUtils.removeDuplicateWhitespace(company);
                                                company = company.trim();
                                                if (""name"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    if (company.length() > 0) {
                                                        p.addNumber(number.getIntNumber(), ""business"");
                                                    } else {
                                                        p.addNumber(number.getIntNumber(), ""home"");
                                                    }
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                    p.setLastName(lastname);
                                                    p.setCompany(company);
                                                }
                                            }
                                        }
                                        yield();
                                        if (streetPattern != null) {
                                            streetMatcher = streetPattern.matcher(data[line]);
                                            if (streetMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= streetMatcher.groupCount(); k++) {
                                                    if (streetMatcher.group(k) != null) str = str + streetMatcher.group(k).trim() + "" "";
                                                }
                                                street = str.replaceAll(""%20"", "" "");
                                                street = JFritzUtils.replaceSpecialCharsUTF(street);
                                                street = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(street));
                                                street = JFritzUtils.removeDuplicateWhitespace(street);
                                                street = street.trim();
                                                if (""street"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setStreet(street);
                                                }
                                            }
                                        }
                                        yield();
                                        if (cityPattern != null) {
                                            cityMatcher = cityPattern.matcher(data[line]);
                                            if (cityMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= cityMatcher.groupCount(); k++) {
                                                    if (cityMatcher.group(k) != null) str = str + cityMatcher.group(k).trim() + "" "";
                                                }
                                                city = str.replaceAll(""%20"", "" "");
                                                city = JFritzUtils.replaceSpecialCharsUTF(city);
                                                city = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(city));
                                                city = JFritzUtils.removeDuplicateWhitespace(city);
                                                city = city.trim();
                                                if (""city"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setCity(city);
                                                }
                                            }
                                        }
                                        yield();
                                        if (zipcodePattern != null) {
                                            zipcodeMatcher = zipcodePattern.matcher(data[line]);
                                            if (zipcodeMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= zipcodeMatcher.groupCount(); k++) {
                                                    if (zipcodeMatcher.group(k) != null) str = str + zipcodeMatcher.group(k).trim() + "" "";
                                                }
                                                zipcode = str.replaceAll(""%20"", "" "");
                                                zipcode = JFritzUtils.replaceSpecialCharsUTF(zipcode);
                                                zipcode = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(zipcode));
                                                zipcode = JFritzUtils.removeDuplicateWhitespace(zipcode);
                                                zipcode = zipcode.trim();
                                                if (""zipcode"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setPostalCode(zipcode);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!firstname.equals("""") || !lastname.equals("""") || !company.equals("""")) break;
                            }
                            yield();
                            if (!firstname.equals("""") || !lastname.equals("""") || !company.equals("""")) {
                                if (city.equals("""")) {
                                    if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
                                }
                                return foundPersons.get(0);
                            }
                        } catch (IOException e1) {
                            Debug.error(""Error while retrieving "" + urlstr);
                        }
                    }
                } catch (MalformedURLException e) {
                    Debug.error(""URL invalid: "" + urlstr);
                }
            }
            yield();
            Debug.warning(""No match for "" + nummer + "" found"");
            if (city.equals("""")) {
                if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
            }
            Person p = new Person("""", """", """", """", """", city, """", """");
            p.addNumber(number.getAreaNumber(), ""home"");
            return p;
        } else {
            Debug.warning(""No reverse lookup sites for: "" + number.getCountryCode());
            Person p = new Person();
            p.addNumber(number.getAreaNumber(), ""home"");
            if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(number.getIntNumber()); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(number.getIntNumber());
            p.setCity(city);
            return p;
        }
        return new Person(""not found"", ""Person"");
    }
",False
901010,7396679,8068393,"    public static boolean copy(FileSystem srcFS, Path src, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf) throws IOException {
        LOG.debug(""[sgkim] copy - start"");
        dst = checkDest(src.getName(), dstFS, dst, overwrite);
        if (srcFS.getFileStatus(src).isDir()) {
            checkDependencies(srcFS, src, dstFS, dst);
            if (!dstFS.mkdirs(dst)) {
                return false;
            }
            FileStatus contents[] = srcFS.listStatus(src);
            for (int i = 0; i < contents.length; i++) {
                copy(srcFS, contents[i].getPath(), dstFS, new Path(dst, contents[i].getPath().getName()), deleteSource, overwrite, conf);
            }
        } else if (srcFS.isFile(src)) {
            InputStream in = null;
            OutputStream out = null;
            try {
                LOG.debug(""[sgkim] srcFS: "" + srcFS + "", src: "" + src);
                in = srcFS.open(src);
                LOG.debug(""[sgkim] dstFS: "" + dstFS + "", dst: "" + dst);
                out = dstFS.create(dst, overwrite);
                LOG.debug(""[sgkim] copyBytes - start"");
                IOUtils.copyBytes(in, out, conf, true);
                LOG.debug(""[sgkim] copyBytes - end"");
            } catch (IOException e) {
                IOUtils.closeStream(out);
                IOUtils.closeStream(in);
                throw e;
            }
        } else {
            throw new IOException(src.toString() + "": No such file or directory"");
        }
        LOG.debug(""[sgkim] copy - end"");
        if (deleteSource) {
            return srcFS.delete(src, true);
        } else {
            return true;
        }
    }
","    public static boolean copyFile(String fileIn, String fileOut) {
        FileChannel in = null;
        FileChannel out = null;
        boolean retour = false;
        try {
            in = new FileInputStream(fileIn).getChannel();
            out = new FileOutputStream(fileOut).getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
            retour = true;
        } catch (IOException e) {
            System.err.println(""File : "" + fileIn);
            e.printStackTrace();
        }
        return retour;
    }
",True
901011,2157431,12197340,"        @Override
        public String doInBackground() {
            boolean skinsDownloaded = false;
            dao = DataAccessFactory.getUMCDataSourceAccessor(DataAccessFactory.DB_TYPE_SQLITE, Publisher.getInstance().getParamDBDriverconnect() + Publisher.getInstance().getParamDBName(), Publisher.getInstance().getParamDBDriver(), Publisher.getInstance().getParamDBUser(), Publisher.getInstance().getParamDBPwd());
            File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""downloads"");
            if (!downloadDir.exists()) {
                if (!downloadDir.mkdir()) {
                    log.error(""Could not create download folder '"" + downloadDir.getAbsolutePath() + ""' - create this directory and try again! "");
                }
            }
            if (downloadDir.exists()) {
                int[] i = tableOnline.getSelectedRows();
                for (int a = 0; a < i.length; a++) {
                    Update update = tableOnlineModel.getUpdate(i[a]);
                    if (update.getType().equals(Update.TYPE_SKIN)) skinsDownloaded = true;
                    if (UMCConstants.debug) log.debug(""Starting to download UMC "" + update.getType() + "": "" + update.getDescription() + "" - Version "" + update.getVersionAvailable() + "" from "" + update.getDownloadURL());
                    try {
                        int bytesRead = 0, bytesWrite = 0;
                        double totalBytes = 0;
                        URL url = new URL(update.getDownloadURL());
                        URLConnection urlC = url.openConnection();
                        urlC.setConnectTimeout(10000);
                        totalBytes = urlC.getContentLength();
                        firePropertyChange(""FILE"", null, update.getName() + "" "" + sizeFormater.format(totalBytes / 1024));
                        InputStream is = url.openStream();
                        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""downloads"" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf(""/""), update.getDownloadURL().length())));
                        byte[] buf = new byte[1024 * 8];
                        while ((bytesRead = is.read(buf)) != -1) {
                            bos.write(buf, 0, bytesRead);
                            bytesWrite += bytesRead;
                            publish(new Double(bytesWrite / totalBytes * 100).intValue());
                        }
                        is.close();
                        bos.close();
                        String zip = UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""downloads"" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf(""/""), update.getDownloadURL().length());
                        String destDir = """";
                        if (update.getType().equals(Update.TYPE_SKIN)) {
                            destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""resources"" + UMCConstants.fileSeparator + ""Skins"" + UMCConstants.fileSeparator + update.getName();
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) {
                            destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""plugins"" + UMCConstants.fileSeparator + ""moviedb"" + UMCConstants.fileSeparator + update.getName();
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) {
                            destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""plugins"" + UMCConstants.fileSeparator + ""scanner"" + UMCConstants.fileSeparator + update.getName();
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) {
                            destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + ""plugins"" + UMCConstants.fileSeparator + ""gui"" + UMCConstants.fileSeparator + update.getName();
                        } else {
                            return ""Download type could not be identified -> disgarding package"";
                        }
                        File f = new File(destDir);
                        if (!f.exists()) {
                            f.mkdir();
                        }
                        ZipFile zipFile = new ZipFile(zip);
                        firePropertyChange(""INSTALL"", null, update.getName() + "" - "" + zipFile.size() + "" files"");
                        Enumeration entries = zipFile.entries();
                        int count = 0;
                        int maxSize = zipFile.size();
                        byte[] buffer = new byte[16384];
                        int len;
                        while (entries.hasMoreElements()) {
                            ZipEntry entry = (ZipEntry) entries.nextElement();
                            String entryFileName = entry.getName();
                            int lastIndex = entryFileName.lastIndexOf('/');
                            String internalPathToEntry = entryFileName.substring(0, lastIndex + 1);
                            File dir = new File(destDir, internalPathToEntry);
                            if (!dir.exists()) {
                                dir.mkdirs();
                            }
                            if (!entry.isDirectory()) {
                                count++;
                                publish(new Double((count / maxSize) * 100).intValue());
                                bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName)));
                                BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));
                                while ((len = bis.read(buffer)) > 0) {
                                    bos.write(buffer, 0, len);
                                }
                                bos.flush();
                                bos.close();
                                bis.close();
                            }
                        }
                        if (update.getType().equals(Update.TYPE_SKIN)) {
                            dao.registerSkin(update.getName(), update.getVersionAvailable());
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) {
                            dao.registerPlugin(update.getName(), update.getVersionAvailable());
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) {
                            dao.registerPlugin(update.getName(), update.getVersionAvailable());
                        } else if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) {
                            dao.registerPlugin(update.getName(), update.getVersionAvailable());
                        }
                        tableOnlineModel.removeUpdate(i[a]);
                        tableOnline.updateUI();
                    } catch (MalformedURLException e) {
                        log.error(e);
                        return ""MalformedURLException"";
                    } catch (IOException e) {
                        log.error(e);
                        return ""IO Error"";
                    } catch (Exception e) {
                        log.error(e);
                        return ""Installation Error"";
                    }
                }
            } else {
                return ""Error"";
            }
            if (skinsDownloaded) {
                Publisher.getInstance().findAllSkins();
                Publisher.getInstance().refreshParams();
                Publisher.getInstance().createFrontendDirectoryStructure();
            }
            return ""OK"";
        }
","    private void initBanner() {
        for (int k = 0; k < 3; k++) {
            if (bannerImg == null) {
                int i = getRandomId();
                imageURL = NbBundle.getMessage(BottomContent.class, ""URL_BannerImageLink"", Integer.toString(i));
                bannerURL = NbBundle.getMessage(BottomContent.class, ""URL_BannerLink"", Integer.toString(i));
                HttpContext context = new BasicHttpContext();
                context.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
                HttpGet method = new HttpGet(imageURL);
                try {
                    HttpResponse response = ProxyManager.httpClient.execute(method, context);
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        bannerImg = new ImageIcon(ImageIO.read(entity.getContent()));
                        EntityUtils.consume(entity);
                    }
                } catch (IOException ex) {
                    bannerImg = null;
                } finally {
                    method.abort();
                }
            } else {
                break;
            }
        }
        if (bannerImg == null) {
            NotifyUtil.error(""Banner Error"", ""Application could not get banner image. Please check your internet connection."", false);
        }
    }
",False
901012,3220986,18797768,"    public static String calculateHash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.reset();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        md.update(password.getBytes());
        return byteToBase64(md.digest());
    }
","    public static String hashPassword(String password) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            byte result[] = md5.digest(""InTeRlOgY"".getBytes());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < result.length; i++) {
                String s = Integer.toHexString(result[i]);
                int length = s.length();
                if (length >= 2) {
                    sb.append(s.substring(length - 2, length));
                } else {
                    sb.append(""0"");
                    sb.append(s);
                }
            }
            return ""{md5}"" + sb.toString();
        } catch (NoSuchAlgorithmException e) {
            return password;
        }
    }
",True
901013,22165218,8862015,"    private String readHtmlFile(String htmlFileName) {
        StringBuffer buffer = new StringBuffer();
        java.net.URL url = getClass().getClassLoader().getResource(""freestyleLearning/homeCore/help/"" + htmlFileName);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String string = "" "";
            while (string != null) {
                string = reader.readLine();
                if (string != null) buffer.append(string);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
        return new String(buffer);
    }
","    @Override
    protected void loadInternals(final File internDir, final ExecutionMonitor exec) throws IOException, CanceledExecutionException {
        List<String> taxa = new Vector<String>();
        String domain = m_domain.getStringValue();
        String id = """";
        if (domain.equalsIgnoreCase(""Eukaryota"")) id = ""eukaryota"";
        try {
            URL url = new URL(""http://www.ebi.ac.uk/genomes/"" + id + "".details.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String link = """";
            String key = """";
            String name = """";
            int counter = 0;
            String line = """";
            while ((line = reader.readLine()) != null) {
                String[] st = line.split(""\t"");
                ena_details ena = new ena_details(st[0], st[1], st[2], st[3], st[4]);
                ENADataHolder.instance().put(ena.desc, ena);
                taxa.add(ena.desc);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",True
901014,16105484,6613739,"    private String callPage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        BufferedReader reader = null;
        StringBuilder result = new StringBuilder();
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
        } finally {
            if (reader != null) reader.close();
        }
        return result.toString();
    }
","    private static MappedObject sendHttpRequestToUrl(URL url, String method) throws Exception {
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(method);
            connection.connect();
            InputStream is = connection.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            StringBuilder buffer = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            System.out.println(""Read: "" + buffer.toString());
            connection.disconnect();
            JAXBContext context = JAXBContext.newInstance(MappedObject.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            MappedObject mapped = (MappedObject) unmarshaller.unmarshal(new StringReader(buffer.toString()));
            return mapped;
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new Exception(""Could not establish connection to "" + url.toExternalForm());
    }
",True
901015,20913493,4249821,"    public static void copy(File src, File dest) throws IOException {
        log.info(""Copying "" + src.getAbsolutePath() + "" to "" + dest.getAbsolutePath());
        if (!src.exists()) throw new IOException(""File not found: "" + src.getAbsolutePath());
        if (!src.canRead()) throw new IOException(""Source not readable: "" + src.getAbsolutePath());
        if (src.isDirectory()) {
            if (!dest.exists()) if (!dest.mkdirs()) throw new IOException(""Could not create direcotry: "" + dest.getAbsolutePath());
            String children[] = src.list();
            for (String child : children) {
                File src1 = new File(src, child);
                File dst1 = new File(dest, child);
                copy(src1, dst1);
            }
        } else {
            FileInputStream fin = null;
            FileOutputStream fout = null;
            byte[] buffer = new byte[4096];
            int bytesRead;
            fin = new FileInputStream(src);
            fout = new FileOutputStream(dest);
            while ((bytesRead = fin.read(buffer)) >= 0) fout.write(buffer, 0, bytesRead);
            if (fin != null) {
                fin.close();
            }
            if (fout != null) {
                fout.close();
            }
        }
    }
","    private String loadStatusResult() {
        try {
            URL url = new URL(getServerUrl());
            InputStream input = url.openStream();
            InputStreamReader is = new InputStreamReader(input, ""utf-8"");
            BufferedReader reader = new BufferedReader(is);
            StringBuffer buffer = new StringBuffer();
            String line = """";
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            return buffer.toString();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            return null;
        } catch (IOException e2) {
            e2.printStackTrace();
            return null;
        }
    }
",False
901016,308643,19685311,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public static void copyFile(File inputFile, File outputFile) throws IOException {
        FileChannel srcChannel = new FileInputStream(inputFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(outputFile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",True
901017,103593,17194629,"    public void fetchFile(String ID) {
        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));
            if (!id.contains(""MARC"" + ID + "".txt"")) {
                id.add(""MARC"" + ID + "".txt"");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = """";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith(""<TR><TD><B>"")) {
                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + ""\n"" + sts + "" - "";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open stream"");
            System.out.println(e);
        }
    }
","    public static InputStream openRemoteFile(URL urlParam) throws KExceptionClass {
        InputStream result = null;
        try {
            result = urlParam.openStream();
        } catch (IOException error) {
            String message = new String();
            message = ""No se puede abrir el recurso ["";
            message += urlParam.toString();
            message += ""]["";
            message += error.toString();
            message += ""]"";
            throw new KExceptionClass(message, error);
        }
        ;
        return (result);
    }
",False
901018,4697215,14093045,"    public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception {
        pl.setName(fileName);
        pl.setProgress(0);
        pl.setFinished(false);
        pl.setStarted(true);
        String installDirName = extDir + File.separator + extName;
        Log.log(""extension installation directory: "" + installDirName);
        File installDir = new File(installDirName);
        if (!installDir.exists()) {
            if (!installDir.mkdirs()) {
                throw new Exception(""ExtensionLoader.loadJar: Cannot create install directory: "" + installDirName);
            }
        }
        URL downloadURL = new URL(url + fileName);
        File jarFile = new File(installDirName, fileName);
        File indexFile = null;
        long urlTimeStamp = downloadURL.openConnection().getLastModified();
        String indexFileName = """";
        int idx = fileName.lastIndexOf(""."");
        if (idx > 0) {
            indexFileName = fileName.substring(0, idx);
        } else {
            indexFileName = fileName;
        }
        indexFileName = indexFileName + "".idx"";
        Log.log(""index filename: "" + indexFileName);
        boolean isDirty = true;
        if (jarFile.exists()) {
            Log.log(""extensionfile already exists: "" + fileName);
            indexFile = new File(installDir, indexFileName);
            if (indexFile.exists()) {
                Log.log(""indexfile already exists"");
                long cachedTimeStamp = readTimeStamp(indexFile);
                isDirty = !(cachedTimeStamp == urlTimeStamp);
                Log.log(""cached file dirty: "" + isDirty + "", url timestamp: "" + urlTimeStamp + "" cache stamp: "" + cachedTimeStamp);
            } else {
                Log.log(""indexfile doesn't exist, assume cache is dirty"");
            }
        }
        if (isDirty) {
            if (jarFile.exists()) {
                if (indexFile != null && indexFile.exists()) {
                    Log.log(""deleting old index file"");
                    indexFile.delete();
                }
                indexFile = new File(installDirName, indexFileName);
                Log.log(""deleting old cached file"");
                jarFile.delete();
            }
            downloadJar(downloadURL, jarFile, pl);
            indexFile = new File(installDir, indexFileName);
            Log.log(""writing timestamp to index file"");
            writeTimeStamp(indexFile, urlTimeStamp);
        }
        addJar(jarFile);
    }
","    @Override
    public boolean delete(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {
        filasDelete = 0;
        if (!consulta.contains("";"")) {
            this.tipoConsulta = new Scanner(consulta);
            if (this.tipoConsulta.hasNext()) {
                execConsulta = this.tipoConsulta.next();
                if (execConsulta.equalsIgnoreCase(""delete"")) {
                    Connection conexion = cx;
                    Statement st = null;
                    try {
                        conexion.setAutoCommit(autocommit);
                        if (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {
                            conexion.setTransactionIsolation(transactionIsolation);
                        } else {
                            throw new IllegalArgumentException(""Valor invalido sobre TransactionIsolation,\n TRANSACTION_NONE no es soportado por MySQL"");
                        }
                        st = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);
                        conexion.setReadOnly(false);
                        filasDelete = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);
                        if (filasDelete > -1) {
                            if (autocommit == false) {
                                conexion.commit();
                            }
                            return true;
                        } else {
                            return false;
                        }
                    } catch (MySQLIntegrityConstraintViolationException e) {
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } catch (MySQLNonTransientConnectionException e) {
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } catch (MySQLDataException e) {
                        System.out.println(""Datos incorrectos"");
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        return false;
                    } catch (MySQLSyntaxErrorException e) {
                        System.out.println(""Error en la sintaxis de la Consulta en MySQL"");
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        return false;
                    } catch (SQLException e) {
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } finally {
                        try {
                            if (st != null) {
                                if (!st.isClosed()) {
                                    st.close();
                                }
                            }
                            if (!conexion.isClosed()) {
                                conexion.close();
                            }
                        } catch (NullPointerException ne) {
                            ne.printStackTrace();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    throw new IllegalArgumentException(""No es una instruccion Delete"");
                }
            } else {
                try {
                    throw new JMySQLException(""Error Grave , notifique al departamento de Soporte Tecnico \n"" + email);
                } catch (JMySQLException ex) {
                    Logger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);
                    return false;
                }
            }
        } else {
            throw new IllegalArgumentException(""No estan permitidas las MultiConsultas en este metodo"");
        }
    }
",False
901019,1725724,3197089,"    public static boolean nioWriteFile(FileInputStream inputStream, FileOutputStream out) {
        if (inputStream == null && out == null) {
            return false;
        }
        try {
            FileChannel fci = inputStream.getChannel();
            FileChannel fco = out.getChannel();
            fco.transferFrom(fci, 0, fci.size());
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            FileUtil.safeClose(inputStream);
            FileUtil.safeClose(out);
        }
    }
","    public void insertStringInFile(String file, String textToInsert, long fromByte, long toByte) throws Exception {
        String tmpFile = file + "".tmp"";
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        long byteCount = 0;
        try {
            in = new BufferedInputStream(new FileInputStream(new File(file)));
            out = new BufferedOutputStream(new FileOutputStream(tmpFile));
            long size = fromByte;
            byte[] buf = null;
            if (size == 0) {
            } else {
                buf = new byte[(int) size];
                int length = -1;
                if ((length = in.read(buf)) != -1) {
                    out.write(buf, 0, length);
                    byteCount = byteCount + length;
                } else {
                    String msg = ""Failed to read the first '"" + size + ""' bytes of file '"" + file + ""'. This might be a programming error."";
                    logger.warning(msg);
                    throw new Exception(msg);
                }
            }
            buf = textToInsert.getBytes();
            int length = buf.length;
            out.write(buf, 0, length);
            byteCount = byteCount + length;
            long skipLength = toByte - fromByte;
            long skippedBytes = in.skip(skipLength);
            if (skippedBytes == -1) {
            } else {
                buf = new byte[4096];
                length = -1;
                while ((length = in.read(buf)) != -1) {
                    out.write(buf, 0, length);
                    byteCount = byteCount + length;
                }
            }
            in.close();
            in = null;
            out.close();
            out = null;
            File fileToDelete = new File(file);
            boolean wasDeleted = fileToDelete.delete();
            if (!wasDeleted) {
                String msg = ""Failed to delete the original file '"" + file + ""' to replace it with the modified file after text insertion."";
                logger.warning(msg);
                throw new Exception(msg);
            }
            File fileToRename = new File(tmpFile);
            boolean wasRenamed = fileToRename.renameTo(fileToDelete);
            if (!wasRenamed) {
                String msg = ""Failed to rename tmp file '"" + tmpFile + ""' to the name of the original file '"" + file + ""'"";
                logger.warning(msg);
                throw new Exception(msg);
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, ""Failed to read/write file '"" + file + ""'."", e);
            throw e;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.log(Level.FINEST, ""Ignoring error closing input file '"" + file + ""'."", e);
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    logger.log(Level.FINEST, ""Ignoring error closing output file '"" + tmpFile + ""'."", e);
                }
            }
        }
    }
",True
901020,20870396,7976872,"    private static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static void copy_file(String fromFileName, String toFileName) throws IOException {
        File fromFile = new File(fromFileName);
        File toFile = new File(toFileName);
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
            System.out.print(""Overwrite existing file "" + toFile.getName() + ""? (Y/N): "");
            System.out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String response = in.readLine();
            if (!response.equals(""Y"") && !response.equals(""y"")) throw new IOException(""FileCopy: "" + ""existing file was not overwritten."");
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",True
901021,4349491,970639,"    public void migrateTo(String newExt) throws IOException {
        DigitalObject input = new DigitalObject.Builder(Content.byReference(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION + ""PlanetsLogo.png"").toURI().toURL())).build();
        System.out.println(""Input: "" + input);
        FormatRegistry format = FormatRegistryFactory.getFormatRegistry();
        MigrateResult mr = dom.migrate(input, format.createExtensionUri(""png""), format.createExtensionUri(newExt), null);
        ServiceReport sr = mr.getReport();
        System.out.println(""Got Report: "" + sr);
        DigitalObject doOut = mr.getDigitalObject();
        assertTrue(""Resulting digital object is null."", doOut != null);
        System.out.println(""Output: "" + doOut);
        System.out.println(""Output.content: "" + doOut.getContent());
        File out = new File(""services/java-se/test/results/test."" + newExt);
        FileOutputStream fo = new FileOutputStream(out);
        IOUtils.copyLarge(doOut.getContent().getInputStream(), fo);
        fo.close();
        System.out.println(""Recieved service report: "" + mr.getReport());
        System.out.println(""Recieved service properties: "");
        ServiceProperties.printProperties(System.out, mr.getReport().getProperties());
    }
","    public static String unsecureHashConstantSalt(String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        password = SALT3 + password;
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(password.getBytes(), 0, password.length());
        password += convertToHex(md5.digest()) + SALT4;
        MessageDigest md = MessageDigest.getInstance(""SHA-512"");
        byte[] sha1hash = new byte[40];
        md.update(password.getBytes(""UTF-8""), 0, password.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",False
901022,7926874,934048,"    public static void main(String arg[]) {
        try {
            String readFile = arg[0];
            String writeFile = arg[1];
            java.io.FileInputStream ss = new java.io.FileInputStream(readFile);
            ManagedMemoryDataSource ms = new ManagedMemoryDataSource(ss, 1024 * 1024, ""foo/data"", true);
            javax.activation.DataHandler dh = new javax.activation.DataHandler(ms);
            java.io.InputStream is = dh.getInputStream();
            java.io.FileOutputStream fo = new java.io.FileOutputStream(writeFile);
            byte[] buf = new byte[512];
            int read = 0;
            do {
                read = is.read(buf);
                if (read > 0) {
                    fo.write(buf, 0, read);
                }
            } while (read > -1);
            fo.close();
            is.close();
        } catch (java.lang.Exception e) {
            log.error(Messages.getMessage(""exception00""), e);
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",True
901023,5981201,7760801,"    public static void copyFile(File src, File dst) throws IOException {
        if (T.t) T.info(""Copying "" + src + "" -> "" + dst + ""..."");
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dst);
        byte buf[] = new byte[40 * KB];
        int read;
        while ((read = in.read(buf)) != -1) {
            out.write(buf, 0, read);
        }
        out.flush();
        out.close();
        in.close();
        if (T.t) T.info(""File copied."");
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",True
901024,7396680,12980227,"    public static boolean copyMerge(FileSystem srcFS, Path srcDir, FileSystem dstFS, Path dstFile, boolean deleteSource, Configuration conf, String addString) throws IOException {
        dstFile = checkDest(srcDir.getName(), dstFS, dstFile, false);
        if (!srcFS.getFileStatus(srcDir).isDir()) return false;
        OutputStream out = dstFS.create(dstFile);
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (!contents[i].isDir()) {
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                        if (addString != null) out.write(addString.getBytes(""UTF-8""));
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        if (deleteSource) {
            return srcFS.delete(srcDir, true);
        } else {
            return true;
        }
    }
","    public void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream srcStream = new FileInputStream(src);
        FileOutputStream destStream = new FileOutputStream(dest);
        FileChannel srcChannel = srcStream.getChannel();
        FileChannel destChannel = destStream.getChannel();
        srcChannel.transferTo(0, srcChannel.size(), destChannel);
        destChannel.close();
        srcChannel.close();
        destStream.close();
        srcStream.close();
    }
",True
901025,18101018,7655679,"    public void write(HttpServletRequest req, HttpServletResponse res, Object bean) throws IntrospectionException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, IOException {
        res.setContentType(contentType);
        final Object r;
        if (HttpRpcServer.HttpRpcOutput.class.isAssignableFrom(bean.getClass())) {
            HttpRpcServer.HttpRpcOutput output = (HttpRpcServer.HttpRpcOutput) bean;
            r = output.getResult();
        } else r = bean;
        if (r != null) {
            final ServletOutputStream outputStream = res.getOutputStream();
            if (File.class.isAssignableFrom(r.getClass())) {
                File file = (File) r;
                InputStream in = null;
                try {
                    in = new FileInputStream(file);
                    IOUtils.copy(in, outputStream);
                } finally {
                    if (in != null) in.close();
                }
            } else if (InputStream.class.isAssignableFrom(r.getClass())) {
                InputStream in = null;
                try {
                    in = (InputStream) r;
                    if (ByteArrayInputStream.class.isAssignableFrom(r.getClass())) res.addHeader(""Content-Length"", Integer.toString(in.available()));
                    IOUtils.copy(in, outputStream);
                } finally {
                    if (in != null) in.close();
                }
            }
            outputStream.flush();
        }
    }
","    public static void copy(String sourceName, String destName) throws IOException {
        File src = new File(sourceName);
        File dest = new File(destName);
        BufferedInputStream source = null;
        BufferedOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        long byteCount = 0;
        if (!src.exists()) throw new IOException(""Source not found: "" + src);
        if (!src.canRead()) throw new IOException(""Source is unreadable: "" + src);
        if (src.isFile()) {
            if (!dest.exists()) {
                File parentdir = parent(dest);
                if (!parentdir.exists()) parentdir.mkdir();
            } else if (dest.isDirectory()) {
                if (src.isDirectory()) dest = new File(dest + File.separator + src); else dest = new File(dest + File.separator + src.getName());
            }
        } else if (src.isDirectory()) {
            if (dest.isFile()) throw new IOException(""Cannot copy directory "" + src + "" to file "" + dest);
            if (!dest.exists()) dest.mkdir();
        }
        if ((!dest.canWrite()) && (dest.exists())) throw new IOException(""Destination is unwriteable: "" + dest);
        if (src.isFile()) {
            try {
                source = new BufferedInputStream(new FileInputStream(src));
                destination = new BufferedOutputStream(new FileOutputStream(dest));
                buffer = new byte[4096];
                byteCount = 0;
                while (true) {
                    bytes_read = source.read(buffer);
                    if (bytes_read == -1) break;
                    destination.write(buffer, 0, bytes_read);
                    byteCount = byteCount + bytes_read;
                }
            } finally {
                if (source != null) source.close();
                if (destination != null) destination.close();
            }
        } else if (src.isDirectory()) {
            String targetfile, target, targetdest;
            String[] files = src.list();
            for (int i = 0; i < files.length; i++) {
                targetfile = files[i];
                target = src + File.separator + targetfile;
                targetdest = dest + File.separator + targetfile;
                if ((new File(target)).isDirectory()) {
                    copy(new File(target).getCanonicalPath(), new File(targetdest).getCanonicalPath());
                } else {
                    try {
                        byteCount = 0;
                        source = new BufferedInputStream(new FileInputStream(target));
                        destination = new BufferedOutputStream(new FileOutputStream(targetdest));
                        buffer = new byte[4096];
                        while (true) {
                            bytes_read = source.read(buffer);
                            if (bytes_read == -1) break;
                            destination.write(buffer, 0, bytes_read);
                            byteCount = byteCount + bytes_read;
                        }
                    } finally {
                        if (source != null) source.close();
                        if (destination != null) destination.close();
                    }
                }
            }
        }
    }
",True
901026,8597004,16803474,"    public String getHtmlSource(String url) {
        StringBuffer codeBuffer = null;
        BufferedReader in = null;
        URLConnection uc = null;
        try {
            uc = new URL(url).openConnection();
            uc.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 5.0; Windows XP; DigExt)"");
            in = new BufferedReader(new InputStreamReader(uc.getInputStream(), ""utf-8""));
            codeBuffer = new StringBuffer();
            String tempCode = """";
            while ((tempCode = in.readLine()) != null) {
                codeBuffer.append(tempCode).append(""\n"");
            }
            in.close();
            tempCode = null;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != in) in = null;
            if (null != uc) uc = null;
        }
        return codeBuffer.toString();
    }
","    public static void copyFile(File source, File dest) throws Exception {
        FileInputStream fis = new FileInputStream(source);
        try {
            FileOutputStream fos = new FileOutputStream(dest);
            try {
                int read = fis.read();
                while (read != -1) {
                    fos.write(read);
                    read = fis.read();
                }
            } finally {
                fos.close();
            }
        } finally {
            fis.close();
        }
    }
",False
901027,17079357,19718986,"    public static void copyFile(File file, String destDir) throws IOException {
        if (!isCanReadFile(file)) throw new RuntimeException(""The File can't read:"" + file.getPath());
        if (!isCanWriteDirectory(destDir)) throw new RuntimeException(""The Directory can't write:"" + destDir);
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(file).getChannel();
            dstChannel = new FileOutputStream(destDir + ""/"" + file.getName()).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            throw e;
        } finally {
            if (srcChannel != null) try {
                srcChannel.close();
            } catch (IOException e) {
            }
            if (dstChannel != null) try {
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
","    public static void concatenateToDestFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            if (!destFile.createNewFile()) {
                throw new IllegalArgumentException(""Could not create destination file:"" + destFile.getName());
            }
        }
        BufferedOutputStream bufferedOutputStream = null;
        BufferedInputStream bufferedInputStream = null;
        byte[] buffer = new byte[1024];
        try {
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destFile, true));
            bufferedInputStream = new BufferedInputStream(new FileInputStream(sourceFile));
            while (true) {
                int readByte = bufferedInputStream.read(buffer, 0, buffer.length);
                if (readByte == -1) {
                    break;
                }
                bufferedOutputStream.write(buffer, 0, readByte);
            }
        } finally {
            if (bufferedOutputStream != null) {
                bufferedOutputStream.close();
            }
            if (bufferedInputStream != null) {
                bufferedInputStream.close();
            }
        }
    }
",True
